{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a9d21045-1858-4c68-ad6f-7e7639df24dd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "27da08fe-0369-4dfd-affe-d769e25f7b37",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cade7cf1-ae01-409b-8972-b6ec993d7205",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "70572094-0177-4c96-a2c7-de1e47ee4198"
                }
              }
            ]
          },
          {
            "id": "9b3e6a85-0b6e-4ec7-a057-6ab5d26998a3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0812edd3-e770-46c8-a541-5433665e98fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "76a4045b-4bc2-4d1c-b1ad-5209df4b4559"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "56d0df3f-927c-467c-821c-443843ec3eb7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "33981717-b451-4a16-85dd-dbed3de0e5c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19c36d2d-2ac6-453a-a88b-5eb44594721f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "887f5d9a-c8a2-4ab5-a3e0-8c151335e125",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd3f9e14-03eb-4d91-80b2-30e45ea1b27b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fecd1303-1436-459d-abd7-4a277c91ba37",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16e96ecf-5397-477f-bdc2-a4482351d386"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae0cc505-f91a-475f-b3a4-7ca2c5d50707",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd5770a6-0bb2-4325-b53d-8649065dbd94"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28736264-775e-41f2-808c-0fc5c6b33c3d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0d6c9938-c210-49e6-95aa-575dd0c6ea2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab2a63bd-b794-46a8-bdae-03709251e8b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5b32767-df96-4888-a1f5-e26ffd4e0470"
            }
          }
        ]
      },
      {
        "id": "12396fa1-db3e-48a9-9108-47911b4343f6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e989315d-864d-4370-8c5a-5bfc09262175",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcb4c532-6fff-4f2e-b833-f69e8d145efd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e44a524b-6299-4efb-85f9-75aef3850417",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779f05ad-5757-4fb0-8bcf-ea2d2b5915ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1fa173a-3d61-4dc1-8b91-c2c43988e2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1fa17f-65ab-468b-90e3-2725af1b1111",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb97c83-851a-48f7-8ffb-d1ee7ec0cdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d254c628-07db-42d0-88a7-0e59b3b03ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9f5bd9-12ed-4417-9675-c22fc1498e18",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80533a2-cfa0-4b22-ada7-cbf6b5dd7122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4361509a-7e5a-47d5-b10c-e54a854f614c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af261e77-b4cd-4b05-b77a-679552db28df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93a516f2-0575-4955-861d-61dfcf3be779",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a44e5df-5125-40e3-aaf6-f7ec8c1bae5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c21690de-88e7-4ffa-9022-c0dda727899f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fca5b39-30ab-473f-be2f-2a3802cce124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00dd569-9f38-41c1-beca-c5304d6cf444"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3453a1ff-ce1b-4994-9690-b32d92376efa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73a38779-4aec-4351-9eae-d5220c82cd31",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8765406b-c269-4ed2-b1b7-e0a6a861529d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9ca8efbd-4f68-4636-b1de-d3198c302b3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80f4dc03-d713-42bc-8f7e-d41c2772ea57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "96b68146-8699-4ffb-ad0f-359e95b4e45f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a13590e-6308-4437-aa8f-8c920dea8f30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14b3da8b-0d74-4653-b682-07ddf6d49d38"
            }
          }
        ]
      },
      {
        "id": "6292dbb9-b135-42c5-9c80-af7c52e56996",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f0ce7cec-823c-4095-b62d-c1f112912b16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfc12241-afb0-49f1-88a6-34e149da4e99",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "53ec74c3-c8ae-4a6e-96d4-6be9fa577f7e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eced81-2d3b-4f85-afb8-8456b90a59de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a5de19-4dd2-4a62-aa2f-31f5a351b905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30c0de8-2107-46df-8665-f8ca0ef91ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a048f00b-b970-4858-b47e-bba36e1e1a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e12fc2-bd4d-4e7c-a141-b91a836b21e6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc1a5e4-5a0d-4a6d-bcac-9278c10f9d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc6c539-c84e-45e7-98de-e7a3d262e06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f2b650-5930-4787-9885-c2b3918da401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f5e22f4-5f5c-4d9d-9c36-c8d7fc7548a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f661842-243f-47f1-b5ff-2c7ac9be2343",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcaed19-d250-4a1f-b399-d471b1b1eced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74164f0-d9a7-42c1-9b78-61a7ff3b00f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509418b7-1f28-495a-b074-adcb80cce682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcf022f0-c100-4c3d-8ce0-6b2589cc1955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b529616c-82db-419a-9e68-a6d3475b1766",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d54aa6-af4f-47c6-8464-176070e49921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3527961e-9268-4447-960e-883b84c54032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c1a629-c7dc-4b82-b3b6-7734eccc46c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d89d8bc-649b-4915-95af-b3755227ab40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4fe2ab-3bdc-48d4-8412-1f7f27bdf8fe",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f723b3e-dbed-44fb-9bf3-c652934ff7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207a8e27-60fe-4769-b7b3-22cd0d4910d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410a2851-4ca8-43b3-b772-da862cbf8f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87e47e98-ed68-4a98-b6df-d0d8b1b20019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16193fd-36ed-4b27-90f7-855987423656",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d3997e-4368-4b75-99ab-c4bc0871f021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703e2427-5c19-4c36-8aa7-554d8aee8fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3258b4d-bd91-405b-b78a-ea4a5b2a8363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b92aeb82-c11a-4442-86f1-36123470bdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9736e019-a7fa-44bf-b12c-7fdc145f019c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046a19c6-94d3-4a04-a8a6-220d2fd77988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171d3548-d8a3-41cc-979f-14949982de17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d329ee7-c28b-4c0a-b56c-d0469c3c2d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b9f274b-6bbb-4e62-a522-1f7384a3309a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65979ce-b039-4090-8b6e-5c2450e8a88f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ac6d29-fdcc-4449-b991-120c95c13d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742de8e2-2a75-42e1-a018-25669f1b0e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8a8dea-7e0d-415c-abac-1d844dd87c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bac91d32-d6c8-454c-9aec-a524b9c83ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720784fe-e811-45f6-9c7a-f8f4eb7706ef",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d49385-54ff-4e7a-9fb8-d95b37911d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82520647-7664-4b1c-b203-d6f6e428af67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b68b360-fba8-4edf-a828-e87bc5180d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d57d6c2-52bb-4ec7-85a3-f846b0127296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b502b0a-52d5-458a-8c13-fbd6d3f58817",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7ae0db-641a-4c0e-8063-edfe99621afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11478e78-2bbc-4932-9d86-f3a9446e146a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d7d970-8bcd-4671-b3cd-6663262f1093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a090a069-3ca2-4425-8865-79e2d6bbebe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b9ee3b-b9e3-4e58-aa5d-ffc0175fa05a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cc908e-e1ef-4cd4-9b5b-75c8eadd3fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951c5cf7-1d79-4fea-be5f-289a342fab20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe7d31d-d4bb-4eb2-9994-e6fc574ee44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccec52bf-2679-460f-89d2-a8c023d63f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e897c7f4-2f57-42fb-8307-76e5fa295913",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8bf16f-c397-470a-9bfc-8017ae149e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00bd200-acbd-4b10-845c-53c09024c5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253e635f-214a-478f-b101-854edc8f1c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2489dfa8-2637-402b-bd94-85c3a4ebe872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e316a80-e31f-42a4-80ed-62cf7dd739ca",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58efad30-a9eb-4409-9652-5d4bd848b239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7588a113-7d81-4b63-9fd1-1a80cdc8b294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7c7791-ee74-4409-8579-364e9ddaa396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf58a41c-7445-4cd0-ae2c-ec3fbcb6a5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c815eddf-5e19-462d-b252-2be96445ef32",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760a49fe-6432-4665-8edd-c83f35769baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505a7dc6-a58d-40af-9112-aa96e09322d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6fd6e1-7653-4d29-a62a-3cbce7431c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ead7152-0745-4bd0-a054-ca6f5fb9486e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f716886-faa6-431b-8fa7-24710dac9977",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289e919b-0440-449a-8fde-161016c097ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84047a20-6b21-46fd-9ecc-1b8d17d2d194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9018af0a-8c5a-4f7d-b5aa-f6235f949820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "086596e8-5328-4c1a-81c5-67706f74b9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd0975f-a643-4b46-ace6-7852dd0abb0c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407bc7ef-8edc-4f21-b57d-c855f64f3e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32f024c-efd0-429a-b6a9-98f77b7aa4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a188ec4b-7673-488e-bbbb-3c645694d8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2430fc5e-43b2-4b1c-9a1f-f909050000de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c59385-8573-4f52-84c8-9925cdc70bdd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1831b5f8-0f14-47b4-b6e5-ae09f689dee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc13dc97-1b87-47ef-9546-aedad41a770d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24c943f-527e-4c72-8bcc-c67a61fad7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34dbc015-9719-48d0-910c-86e9033c0b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef69b791-5a38-485d-984e-bcdb01f3b0ce",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6ffd30-765d-4805-ad91-fb07ab22c426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db13a652-65e4-4e3c-9665-5a713d2dda27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22489ace-af2a-4168-af6d-5d5893e8d2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c140cb36-cc35-485b-9224-199761a96679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccd6f9f-86de-4e7f-80d9-73834f18ae69",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a65308b-d3f8-4bdd-a943-67ff5116646c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf626f1-2625-462d-afb4-70d3f843866a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717bf089-0d20-4aae-8c94-2d94cd638eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b80d0ffb-7963-4fdb-a7f6-0cfc478a4f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26182f8-a80a-4828-ae0a-1ad63784b309",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e971680-8155-4df2-aa68-d38a661fd3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35422a7e-990a-4098-9a08-a18e7d28cab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b2a537-8d88-4e0b-aa07-521a875b2e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25eb04f2-aec6-46d0-b3a8-c431822f3020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31d3f95-c4eb-413f-8e05-ff56d8814a1a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbc3c09-d005-48f5-903e-0fd7cb10a605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad37ed5-cf2a-45a8-9de2-157e99a902fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8705b8e-0d7c-410e-b7cf-66a3bab878bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "689f5d70-6d7a-4d2d-bb8a-1236eb79bd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9a97d9-484a-4f77-b09f-86a994897e40",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dfcbf8-9589-4fb5-9ecd-ee02e7094391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb729b5-751b-44a3-ae95-55490d53f39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174c5d05-be99-470b-acc9-b06764873fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70066729-1bd6-43ed-8ee5-e43ddd2c1766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001f0294-758d-46c1-b586-d77bcb766bf3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3376ba8-51ed-49db-abed-5a444b627bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f07a9b-b279-4fc9-9771-cbecf41d5846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fb760f-51d8-4654-b605-22dd70cc7bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd8ce3e-2c36-4962-b848-5d1976b56049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980a0357-9d67-4732-b4f5-1f45302dd7df",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa34740-4d88-48f1-b55d-450ed318d7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35231b6b-7d1a-41e9-8583-2c483cdba5e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afe6166-7da6-43a5-affe-6a5f36bab597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9772192f-78c5-4325-9fc6-c7c02541ad5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8625f3-2dc7-4879-9d9b-dcb8c4e3d277",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0845384-23a9-460a-ac4c-7904cc4f0fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4d8780-ac95-4025-9f55-b053102b2cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55e75cf-710a-43fc-a724-b7200250a7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf7402f-6ec3-4fc1-a992-7df5b2d59b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792eb377-f1dd-40df-9d0a-c33edcf13af8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce12352-f123-41ce-bcb7-fbf209915ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f05d7c-ddcd-4b37-adea-13511320dc79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a8d8a3-9fb6-4995-9853-23c9cd096f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c2b7b3d-ac4f-4032-bb20-c153a28dbeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0433a619-2fc2-4a7d-8a06-e47e37fa3e92",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31638f33-10b2-45a1-9d92-872c4ce1e57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443a5602-ea66-41e6-9a8e-ffd039d36c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca4eca3-a8f7-44bc-933c-eb7628af1424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1ccc81-8cba-45f6-b77e-9221cce78825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae00bc8-167e-4f5d-a5df-9e0cbeb7f86a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2721080-ca13-4b4a-98f8-c9f45ee819f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61810bcd-a3fb-4a61-8066-fc790a4b8267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfe239e-4ee2-4d54-ac09-a4c813e9a24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca2ed48-8dc6-41f1-b0a7-608f2234927a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4512109-f783-421c-b243-658647be9092",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941371c7-8e7f-4253-b19d-3ae57c97bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b334ba-6841-4390-b88d-74d40bb5e0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70506da-d5b5-48f8-baaf-59c4ed188d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99571228-f1cc-42eb-a7b4-e64c3a1322e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcee103-e6c9-40a6-ab4b-898d2525199a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5006a9fd-7da4-44fc-98dc-67fc0672bbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b2c4d0-a34e-4b4f-8995-a559df18759a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c6e4da-3c43-4a86-9b56-202e0a7f4317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f16863a-d645-4e3e-84af-ec142fa7c6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa3d591-2518-4b05-aab9-36774d735380",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef14c11-bc52-455f-8a00-c2408d5980b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ecbd6c-8e82-4dcf-8915-b31e6a0b6287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e481fb6-8b53-490b-92ab-1be8e2cd0ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3c026f-f4cd-4d2f-ae81-aabdeceb689a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fe91d2-c750-4b84-b176-dc83c7ff7935",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e907139b-fe3a-42f7-9928-2bb1e95d40ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5543bacd-a622-4e7f-ba3e-7ab7bb783f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bf9120-86b1-4a09-944e-bd2ea7ff460e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7198f18-e600-4c91-93cc-b47607fa9a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d486ddb1-319c-41f9-9e1c-b4a3c6a8fad4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6781e854-516b-4a7a-9d4e-54c92370098b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfab116-f454-4baf-973d-517060a8940e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2aa5ea-2efd-4835-a4c9-b57a55e1a491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "399fa005-b32e-4727-bb6b-b0c1c147dfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e00017-210f-4852-8080-e8e757873013",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9470f6-7972-4272-8da9-0108f4c9a145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b5c2d0-203d-4553-88a9-76a192d6903d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653028ef-0b78-4470-868a-a0dff76ee240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "daa36233-f0c1-4af7-8ad6-af636288da43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff35cfed-1ab5-4c43-9b6c-a4a08cce606b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cda0838-349a-4a0f-8f62-436eff032974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97ed90a-a8ef-4027-90bf-a1fcd22d9883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec19d805-6db3-44d6-b464-8ee5d1c9d88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa47851-4972-4817-9bd3-981fdfcd78e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1d0620-3b8e-4833-9bf8-d5f44c479e87",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a41d6e-0b82-4fe9-a99d-e32a0d90f810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "479bf55c-b81f-4316-a9e7-dc69a28ec44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034593c0-8a3e-4a0c-8a0a-8fe174d25c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "204973b5-9b0b-4c13-a328-53f164135203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6f149d-53e5-4393-9156-6be47a12220b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5398f7af-8db1-4e71-a82f-1ddab514c8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c314cb-4878-4e2c-8210-112c6be78f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6a48fd-f15b-4d05-8e24-98465883db75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8292b487-89e5-46eb-b6b0-8dbcca00fe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b4fd88-6759-47d1-a38f-1a21ee9c2285",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82668bb-6b13-4f25-bb22-a815e9aea802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cffba61-87a5-43e4-80bc-581f9201be77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e0a361-b801-48f9-a2b0-92c560ede912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8a4a6d-da4d-428a-90a9-d3f340d34710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b336bc42-7703-48f5-aae2-41fb438b8e57",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151937f9-0b23-4e53-a357-4c8cf6d03329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b80159-80d7-4738-89d7-8489d76818fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b435a2-0eea-4551-bdd2-d832a4d26d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ceb5e42-c626-4462-97c5-d2be0e0ca07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4152ead9-4c5a-4f16-9322-a8d2f21665fc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a834286-f8ea-499a-9c4e-db3022fb015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849146a5-91b9-4820-8bc1-37030797ba23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebaf5f1-eafe-4cf9-9c8f-3a92b96fcf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "98a32e49-ce26-41f7-885f-549e99b9469e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71cd3ac-4285-45d7-926d-c1fc79575685",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485b38a2-c4bc-45e4-9beb-6def0636a2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffaa8e3-7549-4058-a609-fda41224d736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f0ef79-8f87-403f-a012-8151dfb51f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "27db464a-7984-4ad3-a69c-2c231246499d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d2ea45-c618-4e43-a8f9-8d02b9f556ab",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d949954-c43c-4cd2-9f7c-ea13fb98e97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22964a07-a76e-44b9-b231-12d4110e277c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9298af27-f56b-4fff-bcd4-49c6c0e16aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fd790035-c2ec-4319-a0e2-2bba93f30994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c30ce9-1dc0-4008-9ccb-54945558bd0b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2847bf8e-b97b-47cd-9dda-b2af2970fc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf6f411-00e7-4dce-b23f-9f5eacf0409e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481fc05d-28b1-44b1-abee-ba122fba98f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c83cb192-612d-4356-9ad5-28033d463d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf712f0-e333-4de4-a98e-8afb2d4d2a7b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3dbadf-ba59-4ad9-9871-f89719117508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2ac227-10fe-448e-890e-93f42bdde7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb084e4f-081b-4778-8b9e-efebf83e4895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e21b89dd-7520-48ac-acac-dfe45e9d9152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c340c0cf-dbb0-45a9-9492-15399d50f688",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c22b46-6dab-4701-b70b-5c514ad84b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dbaef19-2a1b-44ce-bc6c-cf482184b93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a719e9-fb1d-4fe0-b95e-4ff6809bd440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "834ee3f0-bccc-436d-a569-37de1b328dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faea6c06-ead9-43b3-be44-b6453a401f51",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba54d3f9-035a-48a2-b8a6-650aa22826ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162dae5a-d0b2-46e2-a33f-80adbe2ddcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b10cbd-469b-4fb0-8804-1795e0637b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd82f04-cfaf-4483-96e8-a3b8a2d22190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abed9493-7b52-4cfb-a265-10c24975de0d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036524df-bb22-41b5-9495-b0c294d650df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b342913f-702b-4beb-b02d-b299f35d95b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adc6a5c-c9a6-4c63-8ec4-39968c01bcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dcee0d-eeb4-42fa-bc03-9dead31621df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d67f1e-d453-41c9-be2e-45aca20cee7d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf00fffd-5cf6-456d-b705-1a3e5d561ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c308b0-a08a-43bd-bcf0-9b82da9d0851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f66aff-2e8b-4419-bf92-68cfb4ee0574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b685bc62-42fe-4ead-aa57-5116e1319867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96db73c-2d18-4d29-88c2-0c943e91dedd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26df4917-2c73-4dae-ba9c-8fa2dd555dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bacdffd4-337a-4f9f-be22-1de01abca7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d8193e-4cca-4427-be35-58c97e234bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac495d3-964b-49e4-a2e5-000b44935183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216d2d04-5c61-48fb-8488-45439a8edeea",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a924aedf-912d-4ca8-9026-82e054e34299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5447335-5d26-497f-a988-fe8ea26a5cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24d3b61-5b35-4c04-8e32-6cda39c1da94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77947f0d-048a-48ab-8219-9fb61c6d361a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a3374f-9ccc-4df2-87ba-8f7c13769cb4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e41c00-7d99-4bd8-92c9-1166a3cf2c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1a5b21-ae2c-42b0-953a-e416f48c1533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a11d846-ce9e-40b8-910e-a837b494be52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "62eb3cbb-0817-40fa-8d9b-6ff7055858db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e10939f-cc82-419e-a8a0-769fec5cc6d7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "806d2f1b-fa90-4282-807c-d4ca83c2a3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce5ebf4-bc51-46c8-81a8-ef995eacbb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0801218d-7911-45a1-bb04-088d9aff14e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b6fc11-bd0d-4c72-91eb-9821fc1e9ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1407d55c-be59-49bc-9fbe-8c3985b25321",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcd4054-39a7-4e83-953d-e3221ef1d01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687e8bb9-e0f7-4ec5-8cfd-6b2adcc9dc03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acf079f-e07e-4ddd-8b25-62bc6b75a682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f79d42de-74b4-42d3-835a-d2a9096209f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9bb9d8-e305-4e19-9b66-d82be603bc79",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8161042-b7b8-4915-9c7c-7892fc1d2a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5622800-d317-4735-92fc-fc34bddaa087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744b6b5b-7ef5-43b2-9386-a0a7ae908391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50d88b1-de72-4a3a-a8b9-30cba0edcadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e197a97f-b540-4a6d-867d-eac8a3457a6e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695d2f93-2e29-43bb-b2bb-54dbb1f3566a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92844d7d-a043-4d1f-b28c-1dff95c3e243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85eecd64-ce05-4af4-a389-c44ffb928c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "640f32ec-3242-4b4a-a957-ee0d65fce999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a3d9c6-16b1-4a5b-9729-b9e6e97e6d98",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65301f2f-228f-4ed3-8075-bfce681a6b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b158a3b0-899c-40ae-b0cb-4579d145edea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dc88f2-508b-4dd6-ae3c-f0eef926a27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "720d36cb-3461-42c5-818f-b1b2904bb190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4bb8c7-8c3a-4637-b2c9-a0377ac90edb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dd1b1c-cc19-41e6-98c6-85d2a10dbea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3645aa5-3dee-4dd7-88c5-01e12e6e6556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d09a80-777a-47b3-8a61-87f0816fc66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfda3239-4533-4806-b31d-98684ce01f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f06246-b4d1-479c-8532-99989557786c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b6a439-0458-4cb2-9036-193058906837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9ba19c-0023-48c1-aa4e-5b156a9ba118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a9e5a8-2593-46c0-8b4d-aed5aaba3fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4dc19d-3bbc-43cc-bd4e-d7ee457be744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0957647b-9b8c-4c58-a235-d1ea0c88adbf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16009d08-5b6f-42fd-9f88-2c97759d39ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ce2bc4-9ad3-49da-a086-9655cbbdbefd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95060675-b3a2-4b83-a2e8-1277e3dc41bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4a433b-b922-4cf1-bfa1-203d860fc25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8ad52a-9966-4425-9b1c-1faa9131b654",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6149de17-68aa-47ce-b2cc-fbd41df5a2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb3cd39-c780-4bac-86ca-f3581c55c5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ac4d6b-96e6-4b94-be99-6e436b60f66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "49e59988-18e9-4f7a-afaa-ad6576448465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd649310-152d-477d-9642-49491ebd6d20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3194d400-2e29-4232-b48b-7747ada503c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73790b42-4eb2-4900-9490-c23f0d2c5855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbefd896-c3ba-4094-bb6b-519bf31325de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce7471f-114a-44a3-be05-89bfa576346d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9fab2c-bc1d-4043-afeb-aaa78ec569a0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ebfcc3-14c8-4a69-aa95-566ac024d995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284f4c59-1741-45a6-bd25-2c98c7081397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed4da8a-1b5b-445e-b76b-a08014c2a0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "97664802-8a84-49ab-96a7-c0bee75c28d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d46dca-fa2c-4009-9cf3-26dbd0fae8bf",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10160247-e035-4fbd-b273-ddd6b6b28da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e65009-58b2-46d9-8505-bc11fe9ac3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e620fe6-d1da-4773-9a78-d380d4b2d0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5347a6b-1856-4292-b100-67bfb5f7463c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04758977-1215-45af-89e6-f3ffbf4a2a3c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23ddc55-085b-4929-931d-130e7fbe00b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc8ea8e-384a-49a3-902a-5cf53f02baf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c627b9cb-19d8-4981-8e07-84b32263dab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e900b94f-ac86-475c-a834-05103d32493f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c08dad-0d9c-4f01-a3b0-230e1241f0ca",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a525d7-e0c3-4157-be7d-d74d2248640c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01cd1f23-d15f-459e-9b5c-28e9ca95753b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6313a54a-1785-45c1-b24f-4feb9322d443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e258ea05-c852-43d8-964c-7c8b255ff225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d955e628-34fb-4349-8d2d-8f547ce72d4b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576bd43f-12fe-4d67-a60f-b5711b983aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e324af9c-8831-4e64-96a6-50745ee3054c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7e155d-3e1d-4378-ad0b-7b827250837c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3d4ee2-f93f-4989-83d4-11fc1361200d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb0d86a-4c45-4a53-8b2e-9f607efb33d8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a6c364-faf4-4850-8550-fd7b35c6577d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b19f3e-bb5b-46cb-9aab-4aac8bfe4a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a4d643-0814-4cdc-9994-734c2ca70f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e175fad4-2e82-482a-bf9c-ef313529d884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608cfb40-1442-43c5-b52f-fdfed9da45a9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5b27e7-799f-4fda-9998-61247c5339d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fecae196-5da3-45bd-9453-0347b5bbf85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda5482e-1b77-4afb-a1ae-ca9c16bdf9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "83e9fb72-fb63-40a2-9dbc-9a96859d06b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e48e7a-caf4-4284-8419-5cc9899210e4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9e5e7d-ecf2-4f59-bf2e-0ea3b60785f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17c7914-c14e-4109-89cc-76a4d091e980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782e1582-1a17-4ca3-9a1c-cd36f998e996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c5626a-79b5-41c3-8dd2-91506ccc30ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c087fea9-923c-4a7b-9025-7d80e80a3d37",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b95c0b-351c-4692-8824-8f39552301a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1226ac3-47e5-4c7d-acc0-437b37ca9e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7079feef-d82b-413c-bbb3-3044f8cb1955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a896f5c-c060-4a58-b4de-4e6e4d0a5f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37edf7a9-aeaa-40a0-aa92-e8f17c78018e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97df0e48-b26c-4f02-b53f-cb48276e3c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb38a454-c572-4a16-b9ee-8a7544a6ccbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2a1dd1-1653-46ea-8655-6f06f13f0c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1c97e5-0b04-47a1-89eb-0dec9d47f629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ff9e6a-894f-471d-b193-13036b84842f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8003488e-ac3b-4c42-acfa-3e0dc6c6d83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7794888-32b6-46b8-9be8-3ecda8672550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a383b15f-e96b-4eb0-9874-b88048ce27a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd140f2-c86a-47a2-83a1-9c5d11a0a407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99045be6-4b54-48ab-8932-af7ac3d38db4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ce2c2f-4bd3-4cb5-af21-a9cee2127189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e44bf42-dca3-4aea-9408-64219f16c9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2db4550-7bec-4183-a7dc-0bd1591a0d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53175ef3-7be6-446c-881d-ea00cc88804c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d297ef14-49cb-4183-aae6-558621331c46",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a05482-1bf3-4865-99dc-48aab892f69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e249cd5-fbe9-402d-b372-7afed8d4bff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad9e916-9bae-46b0-8e95-363112730494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c7e9fd-0a9e-4768-906d-966058aa9496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d1bcac-a1d0-462b-8158-d302571a4020",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af66d973-6fb3-4cdb-b5be-d41619d4230a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb62fd2f-7d20-43c1-821e-7faa3fd0055b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e817ea3-e23f-4c91-9a06-c4d18a42bff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "877c2a17-9bad-41a1-983b-ff92aafd2099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df22a0b0-776f-494c-a368-d8b6be2da6ed",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d32d2ac-820e-4315-b489-2fb53a1024ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df39e0a6-4ce9-4080-962b-69be9b19e49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1775f75-f526-4fdd-a0bb-fada86166e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92fc2f12-47af-463c-b23a-8d1f613cbd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71af9563-80ef-469a-8a23-094b70742332",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e41f20d-de33-42f8-959c-99b4a32b93e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55313e4-9a57-4575-bfec-e72ac08bf420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6bb52c-b94e-466a-9e12-114f48a047a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f423d5bb-450c-49a5-8015-221cdd92c4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4549eb99-1da3-4ed2-b0d4-03bc9511c947",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53640dfe-7c28-474d-877b-63f277e4c3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6354fa04-eabe-4a17-93eb-87cb5b91bda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410117c2-8421-4da6-bd82-e6c65306c817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29f839f9-46f0-4857-a3e2-be8277f92cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e6207f-3ba8-4b26-a598-8caff1052ccb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36ab00b-d0f5-4c7e-abb7-0f81af8ea651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67979ecf-272c-4731-bbf0-e8a3009971db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7225f65-91be-47ed-ae62-ac589da6ab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5dc5830-2d00-4b20-b221-777b93b752d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29645d7-723d-4611-8c2e-c26ea1eb3e13",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b348f6-1db0-4d24-8048-029c4b80313e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1eb1585-3cce-404c-a42b-eb33b585f246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09bcb8b-7941-44f8-b2de-2c50a8ae45d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b19cebcc-c10e-4484-ae19-d178f7d4c24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1217546b-ff07-4faf-bbdf-aa5cd65ec615",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb064a9-a76a-437f-ad4e-b892e78db966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120c9bc7-c102-4178-a9b5-5c66d5915bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c261127a-ed3a-42dd-95e9-2d9290ce44f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4590ac-4643-4d09-8bbd-34c93e566f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7e31f6-2d84-4868-a975-6af41f14ff7b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c71fd9-773d-4ce5-b10a-b50ffb2db595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfd44ea-c148-4c42-bc8b-a727715bb4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4b35d0-c0f6-48fb-b066-d97c6711b15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "387d16ec-0081-45d5-aed9-ec201cd70318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9d7c6a-244d-47ce-82fd-ddcaec635d9d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc6558f-0e7d-40a9-9480-411c5eea05be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5deca4b6-bb28-4cbc-ab8d-55cedf29598f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c0ee1f-1ba8-4adf-8a6b-04a61b1cd3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6deebe6d-a495-44ed-be05-108f0c14d9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d241231-c0db-47eb-8f0a-71a75e796608",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae8aa5d-a773-4191-9fb9-fd0827212f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9734661-bfec-4f7c-9a5f-f372b72f5b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dacd43-6d36-42c5-b126-84817b55651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8751f258-d68f-41ab-9d64-9f3b66c71b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96536e63-39b3-4228-a04c-0894428cadfb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f4e8b1-1f29-4ddd-af94-385fd2209358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688c35c3-8c5c-498b-84eb-a2220573af40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdc9e41-f1d8-4fe6-8201-c2599ac2fce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5245ef-1fa2-4080-a8ab-054a85a0361a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a897aa-f938-4852-be88-bc7f75a969d7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99159eb2-d9d4-466e-9819-5219c58fb50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02cea99-085d-4351-9158-05502bce2237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fb3afb-ca5a-47a1-8f50-7ee15489aadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42a6523b-e6a5-4a0b-a902-692c860033f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6a2116-6412-4adc-815c-633f9ee9f33f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d49fce-0f5a-49ad-a2e8-34d67e7a891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905fe0f8-7d2e-4652-bf0a-baafdc936b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b72540-de8f-4a74-aba6-f51d1918aeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "79cef612-0ce5-442d-a88c-8503561ec820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceca1779-f6da-46d2-aded-6026736f175e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556d2a15-a021-41c6-9fee-b20898f7374b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721ac335-8022-4592-b1e5-7600da80eea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd5d2b2-71f7-4250-9934-0e4444c321c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "62b26c71-7cf6-41b1-8a3d-d169ea4f3884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba5ecf1-6001-49f9-880d-4e2bf908c959",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f33ad9-360b-4068-b9c5-f1940492d077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8b459e-0316-4166-a153-8c3d1c1721bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c85afb-cbd2-453d-bbee-d7ed03039006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "237b9820-ee62-4fee-852f-d816d0576524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cafe15b-0bce-48c6-9963-c9afc01a9ace",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b45e2a-35e0-43c5-98cf-f8e1211051a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71bdc029-aa7c-405e-aef3-662cf9a70b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a08ac1-0686-4429-a027-80ae10c4f12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7698401-2087-4de4-93b8-6fc40d2f9fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc0b1bb-1cca-4ca0-a00b-16c7ab094d63",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5533d7d6-0186-4a3e-b8ee-ad5788f2968f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab4878e-521b-4da2-88fe-8ef2ffd685b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ede1d8-879b-43d5-a0f3-13784905d328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "41f910ff-b4f4-47ad-b031-da78b04eb606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb64ad9e-c9b1-407d-a01c-f676dd07995b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0d953c-7314-409a-9091-666c47611195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "abb50ac7-8ca9-4a94-a10b-b0c5e79545d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a8db8d-bdc1-45b0-835b-8cb47781773c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "21afdf59-adf9-45a9-808c-a371ad2f595b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "470ce4f6-ce10-4af7-b2a5-747674b0fc38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59421402-e533-4bd1-961b-832f1b52954c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0bdf18-88ca-4fc2-90a7-1dd6af347a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "674f6909-41fd-4913-a1bd-b0445140f4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe4476a-963a-4742-9305-b8be6f4ffed6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "187c02ee-df30-4527-9bf9-0159a0643412"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f844f3cb-1a11-4f07-ad4b-07cf71722359",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b042102-702d-4fd4-a2c8-41e4dc5392da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b3aca1f-e11e-4875-81e2-afb1456d0215",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a469a082-c84f-4bf7-815c-88eef767a824"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f06bb88b-dda2-48c2-b165-4431b1dfe290",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8501182-c57a-4c93-a949-2aa91cc6b0e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "efb3b1f5-9271-410e-9333-cfb41582ad83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84a63619-66e4-4563-9fb5-e553623e9ed5"
                }
              }
            ]
          },
          {
            "id": "03d6db37-d640-4989-8c48-80ca18d27813",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d6eb91c-8221-4337-a04b-96a630ca920e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5f333d6e-f843-4fb1-a49a-ee9b54dc88e7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65437377-9f26-4fef-bcfb-c43e08254e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "af67e7a8-68fc-4e8a-99c1-eaa9cd4c3bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd37861-1832-484c-96f8-d91604c9b3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a095b4c-d998-4546-8c4d-0a598fa0cf8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0707ce41-c563-4f53-b115-e795c2132efd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2661f19-281a-453b-b8c8-4ad2366ad906",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18466e6a-5975-44b9-be56-ad95fb574555"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6db200ac-555e-4a2a-856a-e7f872b33069",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a54c187-fbbe-4fab-b4d4-4a3203719acd"
                    }
                  }
                ]
              },
              {
                "id": "b8bbef3c-00d3-4301-ac87-528295abfc7e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dd9c291-4d17-40c5-904e-342c188077bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6a236ca-feab-4115-8b93-1891ecba4b0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad7af1d0-46b4-43ab-8636-632799f0e117",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a0dac38-1b7f-4cf3-b601-a5be8da45b5d"
                    }
                  }
                ]
              },
              {
                "id": "dd417808-4f7a-4f34-8e28-127fa3aff0fc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "254010e4-a9b3-421b-b0a9-156f85f63773",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dbf90e0-64ac-44de-829a-128a527fc220"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81880757-33f8-45ac-b63d-a7532d0aeb8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6204e087-8c34-4f12-951f-54a8bc363707"
                    }
                  }
                ]
              },
              {
                "id": "9ba49572-f2f2-41ce-902e-2fa319e089a9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d020aaa-f005-465a-9bfc-f92fc9ff7807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8021ed42-be31-4ee7-93fc-25932603f715"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd3769f3-8656-42c7-a83c-9ddd859dfa23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dd7c4963-808b-4005-b20d-c4d226ce4a96"
                    }
                  }
                ]
              },
              {
                "id": "5c4a498c-47ed-4c2e-97ce-e3d79f4a2afd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bbfc697-8c04-4f7f-988b-604054b4b5c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59d216f3-9272-488c-926e-b94bdd12291d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd127101-a7db-41c2-abd9-819a57b974cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0646f4c1-f222-418a-b659-56095ce6c60e"
                    }
                  }
                ]
              },
              {
                "id": "c645d11d-f3f5-4be2-a17b-af90c875fcc8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f0a74d4-89ee-4c56-81de-0929aa99f6be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ec68827-7ffd-4939-a0e1-3a8730fbc8a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29d536e7-4c71-41ff-af49-7128ff30ba16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "72753082-007f-4e9a-b8de-f16b6348670e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fe1994a-8e34-4047-9fb2-ec5a55ae5620",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8fcaaadb-439e-4401-af46-4461eac81e1c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d66b08a7-f143-4ef0-ab4e-b9ff7455b5a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69210260-ef5f-401a-9cc6-412a1da3c213"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6d8d0a9-7202-4877-8a4f-2aad98a99398",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6d2f6c1b-88d0-48d7-812e-9e3d47d28f71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62726bf3-af52-4003-bc19-13ce080fa4b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed9437f5-ff28-4e49-8db3-349d26f8e50c"
            }
          }
        ]
      },
      {
        "id": "5fa41ce1-327e-47d5-b41d-9931ae52cb16",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cf250880-d020-4131-ad7c-d12d92e7bab5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da083c4a-a5a6-4f14-ab17-755094b9a1b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e43763c0-e9b2-47b7-a9aa-7abef34c13a8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9065691f-9e3b-4a65-a8df-72990dfc2b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3f6a19-c6b0-41e0-9193-98b89aa5c819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2412deb3-93ba-4850-9313-cfc1304f64f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4756749-a8e7-4fae-ac45-f46c19d5ef54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad9e6f3-e610-49c4-9fd5-23239ef82b94",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443b9f31-513a-440a-b590-6c511d157863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1125ad3c-d31c-40c7-b211-334a30997505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9070aaf5-2403-4260-9358-29f1a99fcc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c13aba-4541-4585-a581-32a5ad096313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce44f88f-6a13-42f1-8f89-33ae34198921",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d351eefa-d798-48bf-bd01-06829303c9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d31e6b-fc73-4409-a6a0-5ba333377377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c321ec-dd55-4c17-a833-b62ecc83ef90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0338887c-eaeb-48e3-864a-6030e15b0778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26171de-5a1f-4532-ac5c-5de505795dac",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb986ec-9f7d-4885-b6ed-9ec8398d9889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2165b22d-d82f-4fa5-b298-d5969e1c2eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a06b96-cb2e-4079-b505-9fe323b00e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e11a9072-96c0-43ee-bc34-427a77f21b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7885dc45-626a-4a00-80db-4e770bc85c76",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda085da-15c4-44be-9783-956f5bf5738b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa4e048-8080-4475-9030-7ae747738460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9246dfbb-1025-4dcb-b262-4f8abb0e1c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "475fb7c1-0bf8-4acf-a7ea-fb1adee8e1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbd45f5-3139-4107-a66a-1e9ff7d2906b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d38b6b-c932-4f4d-924e-54f8621a14e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac24734-f132-4b8b-8377-ec13d4677cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c03df6-22d5-4fa7-8af5-81d4eb85c3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fdca224-00fb-464a-ab4d-e84c5b0c1e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1c6c03-23fc-4cff-9aa9-534f1aec33ed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aee0c1-7e74-4c92-ad33-c724cc7b8b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6021a3a-fba4-4ff4-b0c4-da2f7904a869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d243107c-ff5a-417f-b4a7-41a85f4ebc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a09173-5e5b-4932-9602-3402fcaaa84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c5e380-0c54-436b-8073-4f5b1ab37b5e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f59b29-579d-431a-b168-fb89279b157b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856616b0-5984-44dd-a66c-5b3c0ba92296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ede320-0fb9-4789-b2d5-1aa1fbe5d807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77aba307-7335-43b4-8e10-6e02256aa52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d382f28-4e2d-42dc-90ac-8a7a8abadf6b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f807449e-3d29-40b9-834f-bd0006807a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af421d47-8f06-4442-8ef6-b4424ec6b7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36627d6-fd27-46ea-8811-b4c372466fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99664fe1-6626-417c-9ddc-04d64048c94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35718a5d-3756-44ed-930a-f1494485702a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e20a358-d9b8-46d1-968d-5f3db7bceb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad18fa5-d0ca-44c8-892f-1ec8f995295e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ec1f8a-b109-48d2-9d2f-20aef8f87c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ea5c52-51c3-47ae-8f15-7dcb8ef18e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf61e058-9909-4430-a831-9c62b08afab4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce87cd4-6cb0-423a-81cc-19e062122e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b81605d-81da-404b-b20e-835c2e89de07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9212d039-d8f7-4959-af92-924411908cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f90e1591-0744-43a1-b872-5d09505e9c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbde1b3-f93c-4a1d-ae71-fc43c2e5933e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb7c67b-8729-4ac7-9507-ecf0e270a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c819930b-458b-4d08-b4f2-c0e5e58b72f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4d5a68-ec3b-4600-8255-296a4b2c36b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c44965f6-2617-4d3d-acd6-4e4e69d5dd01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f342004-c2dc-4129-84b8-2875a7a5f4e9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43656922-039f-4a14-a0f1-c03644ffc7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3ab5af-c37b-4efa-a73c-5d81d8c4c5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18418d3b-15ba-40e6-bd45-699c37f663cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "64328b53-ce05-4bd6-9996-5ba9ee3e032b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6f2d5c-e92b-4859-a4f2-5603c9cf39c5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c000e0-0239-4751-9502-d3e4cbafb55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbd3288-fb6a-474e-8ff4-0cc7a85a54a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9ec823-8904-426a-95da-0e61a2296d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ca193a-5a13-4f33-af4f-1c1012a0911d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ef046c-14d1-4b92-9b95-57dcc76b40a6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ecfcbb-02ee-4356-94e5-12d69a7dc900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fcb224-eb7f-4815-8f61-b465ff14c2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605ed4e7-2e1c-48f1-9c11-4fc8a97541c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ca57cf-b481-4afb-a537-89693f069d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2a14ed-2d54-4fa2-b8c3-7f42baa7282a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846c96a6-04c9-42f1-afb4-563572f7ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aff50dc-16e5-4f2c-a4d5-f201453684d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d56e6a3-3dd3-4653-aef9-8b7ff313e7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa35bf2-cf56-4350-88e6-03cfa1e8ca41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c197fd26-c0bb-4c11-82c9-64c9b4a71fc2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7f40a3-d119-4568-bce4-61034c54694a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0767d9-f504-4efb-90a9-06b27d92e0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114a4a18-5c3a-41f2-859c-ed797fd92c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f7d59c-2215-4eae-9d74-f645b4fc59bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0c7a18-679d-4ece-9559-7117213853f3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69197d23-1bf5-43a3-8953-ccdddda55437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb10cb2-40a3-4229-9233-6292f8e0e81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9170cd-92b4-41a7-95e2-76e744dbbf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "240f0b91-4aa2-4aca-8aa4-f7cc36227f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1683d610-198e-455b-be42-7eefb81ed7a5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0aa3f5-6720-4a13-8d03-57667532aa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bac8fef-edfa-45b7-b24f-b836c986b5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0e787d-77c3-4e4b-8dc0-c3381c7abe5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8576a6e-62f2-4c3b-80d8-ba87c66eb7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55f4965-41f4-4ba4-a3e3-b3e1a6b5853f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4174d50-59a9-4ff2-a858-469e7d979927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d2d960-4e80-45ac-9fac-7b597c328865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5837703a-d749-486a-81a5-9d62485cec4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e72a4105-a75e-4bd1-999a-c1749683d300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6fd460-112c-47a2-9e4c-8096b1b88d55",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e57b6-6c5d-42ca-af41-82f9d1da6f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846ff675-c050-4033-9d3a-c701eb0e31e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1233ddd8-7b6a-4521-a582-5c9432de7b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7347944-904b-4e0a-9cba-f5836399f9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d650992-def4-4844-b2b5-e60727f7b096",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecd0b1c-179b-4d42-91e2-7e708bc073a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1f650b-a875-4bb6-90c9-2b7ab739b341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cc9dd4-f0fe-4548-a54f-59ddb871060d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da3d53a8-065b-4f31-a36a-ba4aa5f3c61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9dccb2-f918-4eda-a71e-6b351f6b9c12",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716da89f-2b6c-42ea-805c-b9913bab0a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c700217b-37c2-48ed-9c89-8c65b5db5efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889d39a2-5a72-42e9-b200-8041f5f47a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9cadb1-e50a-4412-bb08-eb5a44923924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d8c724-5b99-401c-8e85-f29c99af832a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56021af-51b9-47ef-8443-8e9f84fc7051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797cf424-f2f7-4707-9e4c-722cfda26832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be33a2b-a3f1-4a1f-b56a-a48df8f05a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a798976-7625-4309-bbfb-4b9b773a2f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aece84-e9a4-42b5-8da4-771d186f7d62",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45db9ab-f90f-488e-a669-45c46e85a925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c64b8ae-d501-4ab1-9e51-1243cfbb2472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec96411b-4aae-48d1-aace-eb3b564c2de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c3e2c2-c0a6-44d5-946f-446d31caaade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2bd006-4c52-4190-9f6f-419468f818ec",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6556c14-abdb-43e7-9f4c-cedb8217e9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd6f4e5-d108-4a19-901c-5dc589415935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62076c52-a1d9-4dc8-83b7-b969b447bf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "050a58cb-5494-4ede-b002-1b4543340231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824d8084-cd24-4ee6-901b-3885d49d6efc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e345056-a5bd-4f92-9526-1b42bbd76a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100acf72-a28e-4e12-a7e1-87004ba10332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bb7d1a-b100-45f4-87bc-dbdc1ae798d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6319fcbf-d63a-4e2e-b175-8cdc8fd3fc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfb734b-b121-46ae-9876-3b9087e1ca06",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd11ce52-b8ed-4cf3-8828-9fd8d3387699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb66944b-512c-4511-aed3-8433ff90a4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899923b3-d4ea-4b41-9ccb-b23d6e6ca3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56965a1b-0466-488d-83f1-9456c293e754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b965db07-a29f-4458-b776-5826e713433a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7def4f-2271-4c6b-b17b-5c009a609980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cad3ad4-af10-4154-8d1c-f3fb557ddf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba0e69d-a89d-4167-8d35-9ef558988224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cee9835-3255-4f66-980b-df91b05d3ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a53590-a3a9-4eed-bee5-939c911ccbb8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0820e42f-82f6-44c9-9bad-a5653a8221d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad5e6aa-3ae5-4b98-a128-e018682d01d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d285bf-3aa2-4e42-9b8e-0489c4678555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "240f3b1c-f9f9-4210-9f4a-cc588b20db99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ae813d-c65d-4b73-bda6-40b67adcc2af",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935eccff-6923-4551-b0b9-ee8d38552ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0690981b-9eff-4552-9b7d-183614651157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50ad300-ec83-483a-ba4f-fe0fb4bd2e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6fb317-ffb3-463c-b9ff-9c33371d25a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1029dd-009a-4fee-86d2-ae257a2ebe3e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1203fdd-b923-4938-a6cc-2eb1b1ba9ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9295ae26-312c-4f14-9b2c-af394854c6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4816804d-937c-46f1-b81f-33e312d90141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbfb251-8c38-41ce-a012-bcb7e93a1e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f21076-5a24-443a-a5c7-ae9a708bde30",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d070f1-9bba-4120-bbee-5e4ef6912c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b36c1d8-467f-48d5-bc9e-d6325924dc66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba0697f-6d08-4147-be0d-e52055993dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9b926a-826e-4a33-8d00-468a5f80be0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db494ce6-3067-4749-bde3-08691fb4c828",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd940ac0-f29b-44f8-85aa-9c58cbb0cec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f826abc0-8c6f-4160-9e99-da85f271e059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1565c6-b762-44c2-9f85-20548777a337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77f1701a-7952-4ef8-a74d-68d93406c23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa0d18a-e01b-4c9a-86a6-eba86d878b3b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a003f5c-60f0-4701-b529-c097196effff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f2a480-6ba9-4dd7-bf99-79071927b0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2189b6-00cd-4540-a9ef-e4b04bb04297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "404ed3ec-0600-42a6-90be-7bc505763ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d6ef07-6703-40dc-8a47-5b64519fed56",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf479be-f880-4f89-acc8-d95bd51bf91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56b9545-17ad-416d-b1ae-fbeb9f54ff7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff95225-8f5b-4a48-8597-65901798d30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0c16bd-3cb9-47b7-8219-ef5373380ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8275fdd-d6e7-45bd-ac35-08b09bea28fd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5ea8b9-6ea9-4d42-ac77-acf38b078fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f01f610-49f5-49bf-9ecb-7f77e7d08eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9e86ea-6399-48c5-88de-5250db2b0d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8fd65a-1150-4542-8e52-4de8744123be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f49c79fe-bf03-4bc8-bedd-1793cc79f41d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcad8a07-3362-482b-8369-3e2a7d186a41",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b9aa86-dd04-415e-bddd-d0e36ab77862",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eb443787-529d-46c9-99d9-f62615c5356d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099ac8cd-2edc-482d-a0fa-f53d295fa800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f979bb88-c707-460e-84f0-5e90d3828e14"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c38fb41-7277-49cc-8a48-b359f715e140",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cd7a40a-2115-4650-8334-159762610088"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcbbb95b-500f-4d22-871b-646213ce74dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "132626b5-8248-44b8-aed5-3f90e62f23e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13d44d31-5e5e-4c56-a4a4-76201c4d8aff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "335d6959-7a09-4acc-ad0b-f2e0b079fcf8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db4e22dd-45db-4d1f-bb44-e0967a45c286",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86c7e5a9-648c-4b33-a630-df4b2e6c39c4"
            }
          }
        ]
      },
      {
        "id": "52a35bb8-9054-423b-bea9-4f149a81d7aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "602538bc-cb0b-4497-bc9b-42ce91f7236e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7217adad-186a-4f1c-83d1-c2652df92bb0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe45a2eb-ceda-468a-af7f-81636b31f89b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098b23e1-cb74-4bc0-9985-b539a2156265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237cf2ac-0080-46d2-b77a-fcfba0c69cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2cd9df-d7ca-4c47-ab46-2bca97355e6b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73353c1-ce52-4e4a-a519-78a7122eb5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07e09d9-8454-4d0e-9da6-5358dbc77723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc0b28c-46e6-4416-a78b-52a0d936425b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1dbd00-1d41-4678-9605-763c1cbb0e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba97b54-0c37-457d-b566-7cb4284a4fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb895f73-314f-401e-8480-35327d32fe3b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7113c6d-ef96-449f-b5fa-09d14abb5f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778a0ae3-3766-4fb7-8d5b-dd23208a619b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dc3d16-0ad0-48be-b745-617cf04f24d4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97adafc-2658-4052-8605-51d0f2a14f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce486db8-dda0-4e2b-9a51-c6bf007ec979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfb5e87-ece6-49bd-9bc4-2e5d71c9637f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a94fbb-4533-4fed-9d62-345c535a12fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a61563-df35-4448-a0d4-e25d170b1a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9f90b2-0e6a-42b6-894f-834f699f51d3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dc226f-4ddd-4043-ac1f-3c6d7ac4597a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9678932-8489-44a2-ba1d-556ee7a92a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3850be4c-4988-402a-91ab-c767bb0a5af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd77c43-4a69-47bb-8b59-993317f7aecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e83b8f-a4a7-4615-8557-6a0693de5323",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb47ea1c-b04a-4522-96cc-fdc8c4c21ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed8d267d-f80d-4657-9659-e7302b4f386a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee4bd0b-dcd5-4341-8ecb-10714130d55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1e8d26-ebbc-4151-b49b-66454bfe6938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbc70c3-c1d8-45ce-8435-4444e392fbf9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113250c5-9ec9-4e14-983b-c9f405b5d53c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35475ba2-51c7-406a-970b-cc9373e56c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95200af6-303c-4cc5-ad45-07167ee66060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af28390-dc22-4c14-9ede-ac949f7a7ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d453a9fc-f85b-401b-b84b-2c3351824b4a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c71df5d-cc1a-4881-ba99-cd4b0052c364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efbecea0-4d3a-4d6d-b682-6d974a86e24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3c22e4-36f4-45e6-a05d-d1297c46c3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f079f327-3bc4-4c94-bd32-88cf59897770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e844eb4-2166-4f59-8838-92a791a65ea6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f507f1ba-f816-4633-8493-64a4740720cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdf4c8c-9959-452c-8dc9-e4156e20a024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b285cc-84d3-4bbf-9342-78e0f729c42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132e75e4-a4ba-4efc-bd89-32980cea2043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34179c4c-f63c-44ee-9663-f84b2c3e406e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412215cf-37b5-4535-a312-cc4f24747dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e6a405-b045-47f3-a6d7-13f1c6b71ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cea6f6-3048-4a19-a22e-a7cb58dc00e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e49b4b9-0d5b-436f-a03f-88d81199972d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92636e2d-5c36-411d-b9cc-0bca00daf848",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88df30c8-01b4-45b7-8830-255c6a8aba04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "351d7750-183b-46d8-9ecf-416ab2ade99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f3d8ca-1baf-4c90-9935-f6850eae9da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f68979-a373-438e-a94e-4b5967b5ab1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e19f759-ecab-4bc0-b9d7-26162ab2550c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177cf708-c1a0-450e-b9e9-fd60e4a602df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f992133f-82a6-4557-be62-02282426a339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ee40ee-b0c9-4908-82eb-1d2dcc00f66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a174a093-0ff4-4d10-9d22-7e888056eb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161d2ff9-93c3-431e-a7ab-19123ad43d16",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e251046-b07d-46f8-86dd-22c38183ee71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51d0581f-d2b1-4b51-830e-f074af621d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ad5d42-6b99-4e30-9fde-63d48200d604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498efc62-554f-495a-9d0c-bee0fe19b1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218d87ad-0588-4863-9049-eb36ff7edb87",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171a0d4c-686f-463f-a319-67b05f0c43af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "470d48e9-67c8-4e13-b856-2ce7074f5424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a459d9-70f6-40bb-84fb-6053abbb1e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add1aa43-6b9f-42b7-9fba-cf0bd78b9adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c8ebf0-6708-4087-87c6-fb23352a120d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8201183d-8373-409e-9113-dfb6d724b149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc4b259-f037-48ba-8ba1-b9453495ba37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a78440b-5cbc-4bb6-b232-d8f646d15f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c086ab-b907-4973-a4fd-fc6c379c1661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505fafc5-d637-40d9-953a-cb70c02fe3b6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96b02c8-9fc4-4c4a-9c09-05e4e75e3fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d9c175-8d37-4497-8ae0-b49cee706410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ce7575-8d9b-48ca-b6f5-33e2790771f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59779d87-7f9d-4fa7-a728-7afb9cce53d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31eb419-b928-46f3-8819-23a497b9d57b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a58085a-9896-4de1-a5a5-4b2e39f1d9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0063ebc-eebc-4158-a2ef-8756022a1713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18453b1b-8e94-412f-a395-6d0ca26d0f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1251243-9273-4de1-9c77-bd4f08cd0eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8632cecb-cdf8-4f88-acdd-0212703f593f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706e9d73-6880-4307-a724-dcf100ec668f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3580d4b-55b1-402f-9d87-043eebb311e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f39484-355b-4250-b525-12e27fc1500c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c8fb31-955f-444f-a9e2-e82f749d4d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490018ef-0ec7-4d45-919f-6b93703302fa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6500ed09-ecad-4003-b589-97448cd902e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e9bb1d-7683-4ed9-8fbb-3c401ad3b8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6997a29c-f433-4fdb-9dfa-6a8d79587c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb0297a-2e83-48b4-840a-7e854dcab971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886bfce1-6cfd-4c8a-a429-327c9a669178",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea5f37e-e06c-4b9f-82a4-5290d058bdcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe65fd5-2f16-4eea-9b31-10b32c729838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8556f7-561e-4c24-b2a5-53b2c3e91d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25bfe92-7199-4676-a10f-84d167b942be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd6d731-f664-4727-b7a7-337e34e30aea",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2024990-53f1-4c82-bc23-1218da527531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9108e082-bf7b-4474-9ec5-6bb2f971f637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "205ececd-331e-428e-becb-89a65fc155e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24397235-c132-467b-a863-135403346757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b581d822-0692-4038-b823-c110ec736383",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec7dd11-2428-4acf-ba27-80d02f161804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9555c01-3abe-4ae1-a067-2e61578a4548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae48a52-bfb0-46f2-8718-d5edf5ffdfb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2102e1d2-3ad4-4d01-9f0f-c566382ea582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bdf6b0-6988-49bf-a7a5-54f06c2fafd7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ec5e38-7d1f-44ea-8f75-b005581b232e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de04c39-198d-4a48-aa42-fb1c14a00a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb59f13-9258-4f2c-bcee-78a7eafb1d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac62503-1929-416f-98da-85e2ab83a887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bc8540-bf73-44dc-b62c-8e3e7986015e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95599b90-0cd3-4b6d-9b2e-721fd223175f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f92b0656-d793-4f32-bdd7-eaaa6285ec6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2acaa5-4d32-4cd7-9add-b1a0f7c0d5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63c7ab9-e689-45b8-801d-8cdcf2e81c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82617e7-f565-4d89-b90f-646a9e238ca5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d89d463-857f-4993-8b26-3c7dc96d763b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "778b39f2-cd4d-4f39-a23d-1980e2da330b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5338ad-92d2-487d-8550-360694c1a3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14bc0a1-8b5d-4306-ae66-e22928fbbf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d2d514-6a24-48c8-99d8-2b9a0bc5e48f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f2af06-1c76-4cd9-a340-15da7bd67a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3104e8f1-0aac-4bf5-b6b0-0f32a039e748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c86005c-8951-406b-9fcf-f16f2d4f2363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff08c890-2a42-4749-ad2a-132fa55a452f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd8f507-2775-4145-811d-415d56545b49",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1cfb262-0dbf-45a7-b05a-94a627f67767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aff3288-a5a9-4397-b002-4b97ea292bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0f47cb-e680-47ed-99c1-fafbab46e9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb46f47-a695-4405-aaa6-011b3322dfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd73802a-799e-4498-b3b7-b4d9c4b7fc18",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f666e7b7-9715-495a-aa0f-efa81a56a2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd507ba-23a9-4250-b4bd-4497280148fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0542fd76-f7c3-4519-99b7-1805e932bdca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509428d1-d78d-4bc8-bb6c-9ad88ffad6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b86f4c-7669-4fe5-a350-1dc4ecf453e2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd7035a-d609-4c29-b46b-d32e1ae3ab43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1115ea24-b0fd-4c29-8262-30fd7fcf30d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73339d67-1a54-46a0-a476-fb39923d33a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c4ec87-d0f5-4786-984f-877fc8bb2d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a469f17c-ed4b-4c3e-b0c0-0af418d60b1d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0b101d-6c5e-47aa-a57d-0756cd4cf964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f8061f-9a18-4f08-b600-7a5973012d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d9ccb4-1991-4ee6-9635-15d1ec041984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82ed39f-4421-4fa0-9cd6-410ce193c821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb658f8-fa34-40d1-af7b-7591fbbb030b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e66dfc-8c22-4d4d-ab56-44805a59a3f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb9062f-7189-4b5f-8df8-ac9ab2a95630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b5a0d1-9677-4dfa-8361-2e9734b57060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d7606b-6adf-46a2-b1eb-9e8c61a26041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6537e467-ba5b-4c50-877f-0c3ad278b1ab",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493eb881-8da3-4012-8934-d33ff508604d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3016a929-1973-4491-a6d8-31b8001d31cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bc4551-dd17-45d4-bcc5-32713ff93ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f37c933-23a9-4584-ba9b-551e1c3d423c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b64939b-3197-4c99-8dce-a745df0385d9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3372c899-cfef-4e3a-b01d-b494ffa39d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274f904d-1a45-4466-9940-db399406e3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7519ab7b-b764-482b-bac5-b98cd30974fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897d93e3-670c-4218-97e9-53cef0bf716c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e1279f-dd0a-429e-bc54-a424675e7526",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e290561d-7c41-44d0-b509-e94ee356881e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ce3e7b-6ed3-4c21-8ef5-5797cebaca7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43c3fb0-f561-406c-88da-e5f7f0c174e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b317e430-57d7-45c3-b25f-185c30bde12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef7b924-05b9-495e-b20a-86505b0e0a50",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0ecef6-310d-4c34-9cd1-ea4940a62a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d04935-4f70-4458-91f7-026f45f0aa3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0554858e-70f9-4336-af79-81eb79f98d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd51507e-81b6-4c24-a47d-d3f21a85b730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd79d1b2-67ae-4069-9a78-4779ee84dd21",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33a34c2-f7b9-4c10-a4fb-68b82f3eaf09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd238feb-ad4f-4f3a-847a-19c98b8dce97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0e4166-02a3-469f-baad-04db593d817a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bfce62-8391-4139-81c2-762988ee685f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58f7574-e5b8-4eca-a693-f264a14e9d1b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fda224-773d-4437-866a-8bf9e6d7517b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f76262c-6a75-4982-bb0a-7444bb767343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636c74f1-af2e-44fd-9728-43e303a2922e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdef7c71-968c-4914-95d1-324370712a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9134cf-75f3-435e-8058-501fd4a58b0e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6a854d-ca54-4ba5-8010-49d0c105482d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13b759a-e8d0-4451-9d34-19db4a8a29ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395aa5c1-c9fa-4e1f-83a7-e04adcb6783f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188db098-0a75-4ec3-8ca6-f2ee43de9c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20eb184-ab94-44ec-87fe-1cf031399d51",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413c414b-6542-4fa1-8d60-0205c2cfb640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461f8054-cfd4-4b81-a50f-0a871cc5eb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729c0cf5-0390-45c4-bab4-3bc180568830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb37cdd-7e5f-4948-b2e1-058269549017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbef532-499d-4af3-b11a-a09e8ee7e5ce",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a77a26e-6701-4171-a2b6-6a4f49521521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959216af-2b5a-48d9-92d7-765d7e302f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ccb117-9c88-4b2f-a78d-92116c576e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e747a48-3306-4f81-b7ae-5844f22028cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797c8048-a23a-4678-b16d-5e9e9b4e8152",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d745dee-a48f-43fe-83fb-a0fded4d004d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a956fd46-7965-42e5-9a1c-ed9dca51bfb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ab6e3c-482d-434a-b76f-b6d6697becd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec45a3a-901d-46f5-9fbd-be08055d8119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e8a8a6-4445-4458-9ec6-7fd68d26ba8c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85e918b-3c36-43aa-ab28-40c3165a0149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7be8497-b8da-4421-9770-f04699ea1e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a38a44-3616-49b2-90e1-e5ba0f3221e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e1b88e-c812-47ec-9a42-854e78c8f832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d2c3e1-81b3-4ba9-b640-1f1ae5dadcbf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e064beb9-de82-4b2f-82b6-1e80e3272eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbd22bb-66d6-4316-9d8d-61d311c8c164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8030f96-91d4-420b-a4c5-9b096d20cd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd3f706-9dfd-43fb-a18f-0ff5d30fb528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d9555b-bfbe-4908-a712-1693adcdecd9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c85c9c-0d89-4765-8c7b-14b7b177ee6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78524cb3-af2d-44c9-8a01-682ae22c1d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d044d7-2f9b-4b27-98c6-960d10500989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7b4efc-6757-4644-a7a5-41529679240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d6944f-23ed-43b5-90c8-2eb8cdf550fc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a0bbf0-0701-482e-90ee-92aaf57d51cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40756941-5551-4c66-bc4c-5a50b1f6559b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4fc4ca-4e99-46fd-b032-4f2df44c98b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53a8d7b-92d9-4a99-8e20-c8df9cd3e5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb6e4b9-ec72-44e1-b107-3767308a77bd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc27260-ffa2-4650-bbf2-72fdbf80f904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c8b11d-bbae-4863-882f-25ed5fbc4b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7e1c5b-db7d-4b1e-9541-1d7167f39a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2bd1ad-a7cb-408f-83b8-0ea7cd0134d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db25f3d-0721-4642-b93b-9d3b25a953fa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b5ffe1-9095-4868-b9d7-14d8f0d783da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62486d2b-3b47-42c1-8506-497286e4b696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7ca87c-f52c-4e62-a168-79f4a845e316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5a3988-302d-48df-a336-23c9d5b1ae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4de56f-b3b2-4d31-acc5-99131b71b16b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b603607-ea1d-4d54-b04a-45e2dcc529db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ef3900-7cbf-4a9b-974f-ec5e30875872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6d8fe6-9543-4deb-bef8-c751feffefcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c1c09d-e42c-4ca4-b243-b2a0900e424e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8791bdc5-ff53-4c11-b8c4-2204ef3dc160",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e66b85e-20fc-4911-83ed-655467c77bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cecc0a-0802-403e-a177-5326b78c222b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4ca429-e232-428d-a0ad-9d61006eb749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02453972-2c0f-4274-a3b8-ab5f1b3ddd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193ba249-ec5a-440f-a2f1-2c66c5d4d17b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91947463-9f48-40c0-92d5-e2436d127741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b5d5e9-fb04-4264-9efe-e577608edead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbe73e7-6e10-4f82-815a-e81f80d5b376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7951ec13-9968-465d-8d49-035a6a610c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3fcc8e-b83a-4f79-b22c-4ac2786acbbe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65cece6-9b3c-4819-9fe4-7a3dc9faf3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae16873d-4f33-44f8-9eaa-1bff9ba3fda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba01f16-d17d-4a62-80a4-0b91c4bb4204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0affa2b-2e37-4ca9-ba34-0a7c4d1f6df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031f6b7a-1b78-4e05-9a7a-7394bfbffacf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb55d9d-b21e-498e-99a6-e62ae93712a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb170ee-8a67-4427-896a-9427bd047ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d253181-16cb-43b9-84f4-5de81150b791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea43b76-2978-45c5-b27b-7e1c4f5ad365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8abe575-4623-4e8c-9f25-c7f8aef9ad55",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f69d76-b120-468f-9b3a-def59e0449ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbf6fef-e272-41d7-8fce-255ff2c18e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cd74e4-6caa-4ef0-9eec-89691bd9af8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3253f4f1-b9c7-49e7-a4d5-f5bd7d3fb0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e574ba8f-5e16-47e2-a8ea-7fee68d939de",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771cdfb7-69d3-497d-97d8-716f73b4fa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfa187c-af9a-421d-962f-0d2990c69ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba931b9-ee79-4541-bf2e-672a553102b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983e1518-79d4-41e1-bc66-8fac94804ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8750d4ae-e54f-4a47-80dd-b44af476f6fc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d22fd4d-eb24-40cf-9e89-d013634760a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459de183-3fc7-4aeb-9023-616a6b4cc160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d691b33-10bf-4402-9840-df0251830108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e633d7-1730-47ac-8458-47c4fb246d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359e0041-17b3-4a93-8150-a102014efa80",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e80db6b-1e96-4b71-a7c5-ddf9a44712cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc6f9c4-3d7b-40a2-9b50-1a6147e17929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f925cd7c-c651-4ddf-a574-c03fc55c6fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9886d3-4aa2-431f-8506-fea54da6f04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0e893f-7832-455a-bcf8-adc798b2b34b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11eeccb-289b-4342-8927-e588c3ac4e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374a1125-b2af-4984-8153-28ef29172529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adb0707-88f9-4b47-a3e1-1c44f33179a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25edbf7-a8fc-4f72-95e6-330684502a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e686dc-30ad-4c80-b15e-bdf00a17c109",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08022980-d89a-438c-b617-01e7c7173d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2aa4f12-bd98-4abe-86ee-e1979393d921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260727bf-a9ea-4e08-b0f9-a50836c14519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3e191c-9e6a-46ce-8a19-1e060fbc51bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388a06a9-0274-452e-a144-e0f8868ad327",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a954ce9a-f841-4d08-997a-0e2c4209f038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560f2e92-8ec0-47a4-a0ea-6afe1b349856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddc6976-da3f-4bbd-9365-4b18d62e927c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1fb846-b1da-49b8-8b19-a7dfee9c9225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a82ea8e-ad17-4215-91c4-b4d5b646042f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a994600-2867-474d-8a30-71eafcdf9003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccca0fe-2962-42b9-99fd-a21f8cba2cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2ad4ba-a818-4d9f-8a21-4078acc1e7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8d1576-8616-4356-b3fd-76db95e18416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ce1100-b4e6-4915-88c3-ce41f00b7478",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb37f004-247c-4c6b-bc84-72ce0fa9f2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02034ed-e986-491b-9e3e-dc289bbf1d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000b9c12-2990-4031-969b-55084328e8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1959a4-b512-46ca-9582-2b995fb8832e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8b5ea5-d213-4c93-b13a-b1bc4dc13e45",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caeadcb-15ce-49a8-8150-faacc45058b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f48ac8d-f59b-4cf5-a89f-049c51eb455d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09e9567-089b-4d8f-b02e-232aa948a6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940b1803-693d-498c-aef4-45b63b5544be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4d9d80-9348-472b-ae42-aca258592165",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f1cb9e-046f-448c-bceb-4d585808dc2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6aa8816-e5c6-4b44-a03a-caf915755213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0dacb1-1696-439e-8557-0a47d8a25130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a158d3ac-f9c2-46fd-a8f9-5dde72e2288b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c681ad-5216-405b-8e89-0f55fdea6ed7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b9e480-950b-4f70-8899-1dc971718313",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5706101f-55eb-4bc5-a17c-4fdbe777fa28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7439964-b7da-4696-a949-220fcd333b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b1e58e-a26a-4c39-8977-31b47b0348fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3175ff75-8464-4cb6-8abb-1e3df20bff9c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4626a16-347d-45c9-b210-04d5e755193c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bfe11bd-6d0c-4189-ad20-3c99b1eb7a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197df72f-2250-4498-a580-fd86da2f140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba49ba5d-b64e-4c71-bf02-639128c2bcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54acfbbb-ece2-48f9-b0f0-59a47e010947",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bcfeae-f7f3-4151-a49a-6a6fa9e5afda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b80587a4-2131-4a35-b25f-5aac440d70dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8865e3fe-8928-4640-8593-7f1541b59247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1537b4f-6f3f-4541-a756-d5206de12183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0650c44-1ad4-4807-8fcd-b07575054ae4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddf4c1d-e97a-4b51-af8a-858d555ad36d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97859609-ba37-4b91-8b38-4b2efdb2b9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240895ea-e02b-47eb-a488-5b75f9d86fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16672ca-f5a1-47e7-a546-54b9da84dfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0930336f-7a6a-447a-87d7-b347453e0bc9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d438d861-9b69-40e2-baf8-7c66360de8a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc1972ed-68fb-4c5e-bf51-8f668892735e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236ab83c-496f-4bc4-82ba-5db366b43b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76548d7b-7463-4124-8b3a-61a6f66272e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e2f62d-639a-4f08-aca6-48d4dcb3f84d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59203abb-0553-4aeb-be6d-65a5189706c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99161488-e2f0-4a26-8927-e083157ec387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f768ea-cbd7-4eba-9bd4-e7f9d44918a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e61af8-ae58-4faa-99a0-9629de84db95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1fd2a9-6151-46e6-b97e-23c2c8bd6f08",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3920eced-8f14-40cc-9103-c97104c664bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feec80fa-9d62-4882-9fcc-37cdad4f50d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c7a893-03c2-4dcc-acbd-3f0a04051394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93bebec-30f1-4e94-8ffa-aa9a180be418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2621dc81-73ac-47ff-ba35-65a5fb0f6a88",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a621b8-d170-46f3-847c-aabc3958c23d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9999ddb0-8738-49da-9632-91998495a585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7580d366-996a-499d-8d32-792cd7d55d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abce6062-6edc-4b56-ae0f-0889aef5476d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd34ef3-7f8c-44ae-870e-f29f09fbf414",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d8af5c-1732-4105-8a98-3948b137f46c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00185589-2d79-46f7-ab7b-6431b8b5f3a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe451c83-1d1a-4aec-9ad1-d8498419aeac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b144f53d-610b-477b-ac8e-cfe394993e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573860ab-c00d-42ea-9adf-b3ccb7c5453d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50554fad-8f36-4c9f-831d-3028d64a7784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182d9752-fa5f-4998-afa4-850e1bb396c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd68c7a4-0298-484f-8dd7-b4a2cda3a142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0953c99f-beed-4755-a369-31fcaeee564b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ad65e0-46e5-48fc-933f-5d45a0f03633",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb12234-e153-47b0-99ec-48c3e5de9d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a5a086-7a8e-497a-b380-6a883edb063d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a1e4aa-1acb-4de5-8e7f-26048ea87543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd0be2c-7967-4007-9463-13c7953b746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6d0183-1592-46de-a8b2-b743fcb836db",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d53c293-0445-4d6d-bd0d-f76d5419bbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c19dadd-38ee-4c44-9a64-62b8442ca275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12d71dd-85db-4b03-a821-5011724b9bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb5bc7b-1d06-4e07-a97b-8554f6c27650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314f5e8c-8463-4bbd-8f54-128a172d7813",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ba8577-010a-42b3-b9ac-43069d0225c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd5e3c84-583e-4170-b8ec-b5661e37dbe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98336c9a-6e13-4001-aaa8-bf3647d381ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2b4f67-0506-491d-8c47-a8486b80f75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaa698f-152e-45e0-ba16-3f97578137e8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec09c167-2444-4478-8fc9-de95d53f83ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42491aad-daaf-46c5-b9af-c428945ee863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614b0412-65fd-4776-9b87-5f805aa88f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f976716f-49a1-4c84-9523-6f1b42cf4094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4c51e1-b15f-4af0-aff7-c7097cbf7c6c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e76ca52-e2c1-4f94-950a-6bdaaa5d167e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd185e85-93e5-445b-aa61-3e056c0dce1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0826fbff-c6b2-48d9-a9ef-9668b890dfb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce69a23-d7f8-4964-adc3-8555ff429967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6eba44-93c4-4314-9148-648cc3cd4e57",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dcd5d8-db63-4991-8098-689ba1afccd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3850e074-ee26-4004-b8cc-4e866eb61c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5078bfd9-7ee2-4d1d-9df3-2ea35fae495d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543f8efb-aae4-4d94-91e1-38088c014207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbbfb57-e6f4-4e4d-b3e8-40738f058a2b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4a2885-190c-4481-a51b-e5996bb35832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe72cb92-9cd4-4738-8010-69cb688b8dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73804910-4f4b-48a5-a076-fe8565661f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da6a8e7-451e-4148-be25-0fda15c82c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a404e40-d14e-4bb3-8042-11e21bd3973a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc0e7fe-d798-49a4-b6d5-78df8e801ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3b1a77e-60b3-4890-8dff-e81b46264de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae53e12-f938-40aa-a1ef-dfffbe5aa6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb0cd58-e70d-460d-ac5a-30210ecd1fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ea6670-2208-4467-89e9-9ff2c462e42d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d115e6-093b-41a0-81e1-3afe41464d41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b70f1c7-3c0d-44b0-8913-367a4bc0d86a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391ef76d-14c4-4243-967d-887147cd30e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d78dd00-d99d-4231-bc8e-1452203b8355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f7af3f-7fac-4dba-8a04-99129e918841",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f711b444-1f0b-4a81-ad0a-e701fcb404f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278d9540-16af-4a44-9b51-752ccfc8d9dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd39076d-750e-4061-be0b-caf1c1432598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4530d1f8-8495-49c2-9679-03f09e9f1e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b51691f-d4a1-475c-a7b7-51458d8e0dd2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d4780c-7407-4562-a709-be73e69b8c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6483ea-4268-4062-be0e-dc68e6b1a099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22391c2-c4c0-4085-bd5f-75c1418a31cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df3f590-81b6-464c-ad4e-6149eea44476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd79892-2ec9-4922-9ad4-173bc8bcd716",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1758cb77-157f-40bb-b0e8-bc3e6d541386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7868683-769e-4a2a-968f-260a8477232f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1206672c-f343-4d87-9deb-d1d726603ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc70087-cf31-4248-b254-b255ae4af615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535065e2-c641-44c8-a898-fd57c558cb1c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff572ba-3d76-4a11-801b-8c1a2de1cd0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e832db55-884f-4a38-82f0-35924db0a37c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa4922c-5078-4013-8954-28b6edd7ea96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3390fbfe-3f62-4fd4-ab36-bff7af4dad49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620c7481-829e-4819-83e7-55402caff772",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5617f6b0-6a12-457a-8a20-8e953a833c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd3cfc8-f0e0-4620-84e0-291e1181fa0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5d617f-d258-468e-a743-787390467517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9dc97b-5e63-4c38-9644-ad3c4a3e3dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7837b15e-aafa-453b-8698-b8f4eb63745b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93655d87-f804-4bb1-adad-ca0207dde5f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a858c0e0-abda-47b7-8253-b9a54844ac3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929dbd8a-ff82-4bf5-bb6b-fb23f2b9b224",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd47e99-dc6a-4b4c-84a8-34eee0c3f8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970b3bcc-89f6-4cf7-ae46-f56d69ac92c2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb68c918-995e-4fbc-bdb5-e0696ece44d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58e9cf1-e802-482a-b561-8a4d72828a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16ce5f4-9422-45d5-bec5-414925e0077e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2766cfd5-8133-4799-8c90-d562edceaa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2a6c29-17c1-425f-bac4-00609ee1e39e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0894718e-114c-48cf-9729-c331e536c92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf910c23-84f0-4543-9f32-c480252ade31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a64cf7a-3b01-452c-b44e-995e70283c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613718c7-259b-4ec7-b3bc-796671c0a353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed796eb-1dc8-48e5-a20d-515f39736728",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43162fc0-b25e-4cb9-b197-14cb3113b5f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b81beaa6-7f6f-484f-a850-6b4b6b0e2c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f975173-18d2-4b44-8737-81382f719bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96638baf-0456-462c-8fc7-82f277592a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d34a0a-cfaf-4695-8efe-0e36f66a8299",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce6feb8-ef53-4551-827a-4567ccdf0952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101ffbe2-1bf3-4489-84bf-e59ffd495ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ff3227-1f80-4687-b675-ac2bae5c85de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77662949-1e27-49c7-91ed-40af89bf2c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c476232-958e-480a-a11b-7ebd9dba1ff4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1b439f-0db4-4ab3-a80d-ca2acae77e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd1a9a96-083b-4597-a125-653835365cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1762d84-5f9f-455d-9901-2083d05817fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ceec58-345c-4ac6-982b-8bfd53cde732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b4072b-6cd5-4187-91e8-817c34f71805",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c527e26a-08cd-4bf6-9f73-6d9e0e758cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8fcfde-c27f-438c-a9c1-564433460c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabd6c7a-7933-4529-99b1-167fb3a20867",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0637f176-4f40-4cb4-b966-55f729807e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d699f2b-492c-463a-ae34-4a591b2ea55a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d634de-e45b-4755-8f54-1bd5fc1215c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423ba705-77d1-42d8-a91c-bd6dfb16b4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf85743-84af-457b-aaa5-8931716588d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea269388-11d9-487d-88a5-b27abaf04579"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0496c6a7-31c1-4038-b4d0-8b77e2ab37d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ad2ee47-ba1a-4e3a-9f8b-dcc4de487112"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6876c09c-bede-4941-9b64-e66e8786346c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1717deba-73b5-458b-bdf7-5128ec7450e2"
                    }
                  }
                ]
              },
              {
                "id": "6f2e699d-fade-4efc-be5f-ac910c07067b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "075480d0-4bd7-4b37-974b-c6f308d1f6e1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81183dc4-215d-4cda-a979-02b3474b340b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f2162a18-6f90-4881-b7fa-39a3521de78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ec3576-e71f-4764-b1a8-30af798adaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc8b21af-98c5-450a-ab60-653b49d625eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95afd4c4-7ae2-458b-827c-50c73708262f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfabcf24-5078-4004-966b-5231bc8ae67d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11d81a65-883c-4f2f-8867-04bfa89a4e1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "def6e1f0-c9dc-43fd-bbf1-1471980b725d"
                    }
                  }
                ]
              },
              {
                "id": "62c8bf8a-8f03-40da-be82-c643388e6a9b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8258b3b3-536e-4f03-947c-4ec70db708e5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6263a9ff-db68-471c-84b1-dbf87c9e9dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7b2b2da2-8598-40e6-a438-3dcda5e8b04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ebeedc-0b03-4758-83ac-219f73bb0a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c309e258-49b1-42a3-8ea9-dd3a2c96cfd1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "921f5135-7333-4775-bcc0-b7c3ad2463d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "090dd3ca-7df0-4ee1-a2c4-86431c9f518b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02bfda9c-756a-4d6e-9b7e-2148ccc5e4d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "422956d4-6808-414f-ac7c-fa543b1b914d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2493d90e-0fac-44da-8cc4-18582a19dcfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dce9336d-7422-4d03-a57b-969e5d93d86e"
                    }
                  }
                ]
              },
              {
                "id": "029e8fc5-e615-4727-a65c-bfba8e7ca263",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be15ade7-399f-4e57-a49b-72b77d2c12fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "da26f282-316b-4d36-af35-d358a60a314c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "990465a3-4aee-40a3-acf0-072f668dbdd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9110257-0c5a-4b2c-bfbf-27b2d26e8eb3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cedd0b1-c095-419f-892c-1245aa51cf58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ce9bd7a2-f526-43b5-a713-94db973c4093"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "644537e1-7d5e-416a-9a5f-b53f06831fe9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "275eedcc-7007-495a-9195-93b029480427"
            }
          }
        ]
      },
      {
        "id": "ba6ce916-7b41-4f2d-afd5-5a5049bcee84",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f8a5dfd1-41a1-4997-84a4-0f24d6bf7ffa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b071374e-43ca-46b0-96b7-3605791c948d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb7f8f9d-3ccb-499c-867a-fe7baf49ee1a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c48ad60-ec66-49ae-8d42-fd76ece96c36",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "52b95abb-9e99-4e32-9cea-f192e1633aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cae00f-45a4-448b-b9aa-eed4b457a68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecbfc2c5-65e8-466c-b36c-3689bac33a25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91016e9e-a481-49de-84f3-da5681f8cdf8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "450fdad0-4b46-4b15-b744-148156c40e71"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f44b9d3a-5882-42ab-a6d2-90e11de1a67a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae5532f7-8d05-4cc3-8a52-07dccb241207"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd6a4e27-eacf-4a05-a2d9-96195a84be0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5bc92824-05eb-426e-b3d6-75850ad66460"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ca9608d-b897-482c-8406-54681dbf607e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88c504d5-4f3b-4a44-832e-b478348c912b"
            }
          }
        ]
      },
      {
        "id": "5cf33167-ab14-43e7-888e-a55bd114c465",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0eed588c-996b-4d46-a038-a07832070625",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0eb5cce-74b5-4186-91f5-df4d3b1f5069",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a1c0232-dfd9-448c-b7b2-0e456ea4698c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea215f31-a5ab-42d2-bc54-65fb67db2b7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f589a8c-4635-4550-b135-fa10d32d369b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c27a0e-3d65-4807-bc7e-d690c16d3307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec2c7fbb-0d6c-41f9-9e85-7e9f44153c67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21ba25d0-09c8-432d-9982-f221d3f8d8e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3729b556-fd26-4b12-9746-7a6c9dc1c73b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922e8451-4323-423f-8858-289e2aefa511",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ce0ed8e-d2a1-47e8-9b53-f58db9419626"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc40b83e-f9f7-4eee-ae3d-151b06b4dc92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0eb7e514-3e3e-4014-8545-6e5064bac422"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31c21ec6-beaa-4a2b-8db4-4fa2d2c2327d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f0c21e7-7d83-42e9-8552-0b1511d6c25d"
            }
          }
        ]
      },
      {
        "id": "50ff57ef-96fb-4814-8fd3-250e650773de",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8871e624-d224-42e3-aef3-22936bf4c1d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f2281a4-568e-400c-bd76-654824cc92a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5b1d95d-5d23-4a56-95eb-92d9e6d25371",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062f2c96-dc52-4a75-8aae-af789af0fa1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9a02de1-2ba2-4c03-9be0-30c4957c664c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5079f361-b073-47c5-960d-5c451e428d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53ebbc18-c101-4ace-81d8-14146c36afdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e15b02b2-5ecf-4767-b156-de1156142896",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5869c48e-eeae-4836-a67c-fd2c9eae8660"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1478ba72-0914-40ae-b6e1-0c82bf1b1e17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c904389b-1b33-4418-b151-f0b2f8ae26bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5af50f1f-0db8-41ba-a775-74df303b219c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "138aa95b-cae1-4acb-b736-7e6936593c3d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b686e22b-259d-4372-9ca6-7e5931c52c13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abd960b4-c6e8-4da2-aea8-f16cc0785057"
            }
          }
        ]
      },
      {
        "id": "e1e45b3e-ea72-4e12-8892-2a9e76eb907f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f9cf2df-3ea4-421f-8c00-ef73c7b9d7a1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "babc3dcc-0b75-41fb-95bb-2ab9c304abc5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "667a30ec-eda3-47f2-aafd-bafa20292467",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee4b1b08-6cf7-463e-83b3-8a058a17e998",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acf55b56-c4ac-461e-b2d1-fe262a58001f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 5.5198412698412715,
      "responseMin": 2,
      "responseMax": 269,
      "responseSd": 19.207399863037534,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718584794238,
      "completed": 1718584803735
    },
    "executions": [
      {
        "id": "27da08fe-0369-4dfd-affe-d769e25f7b37",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e750b4e6-3b55-452a-8b19-3730c7a771d0",
          "httpRequestId": "9163203f-2005-42f0-a292-d138dc9fdc60"
        },
        "item": {
          "id": "27da08fe-0369-4dfd-affe-d769e25f7b37",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "719a4116-d3e2-469c-bf67-b991399ed90e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "9b3e6a85-0b6e-4ec7-a057-6ab5d26998a3",
        "cursor": {
          "ref": "5d2fb8a7-ccae-4f3e-bf72-a6681ae09320",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7bbe78d9-388a-48f4-b3cc-2c24841b15e4"
        },
        "item": {
          "id": "9b3e6a85-0b6e-4ec7-a057-6ab5d26998a3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "09bf1bab-15f3-46e6-8c10-d5bfe1a71e85",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "19c36d2d-2ac6-453a-a88b-5eb44594721f",
        "cursor": {
          "ref": "26524e65-a579-43cf-a627-681cc3f71658",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "75091e34-1bb5-46f8-bee7-d4812cee6371"
        },
        "item": {
          "id": "19c36d2d-2ac6-453a-a88b-5eb44594721f",
          "name": "did_json"
        },
        "response": {
          "id": "ec02fa87-dd2e-4602-b2c7-9229641aaaa1",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44a524b-6299-4efb-85f9-75aef3850417",
        "cursor": {
          "ref": "28a399a2-a251-4681-b0e8-5ff439dd9509",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d43ae59-1e4b-414f-8078-156e6c40b908"
        },
        "item": {
          "id": "e44a524b-6299-4efb-85f9-75aef3850417",
          "name": "did:invalid"
        },
        "response": {
          "id": "f63e73cc-5cd7-474c-ba4a-f23f9ea0656b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44a524b-6299-4efb-85f9-75aef3850417",
        "cursor": {
          "ref": "28a399a2-a251-4681-b0e8-5ff439dd9509",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d43ae59-1e4b-414f-8078-156e6c40b908"
        },
        "item": {
          "id": "e44a524b-6299-4efb-85f9-75aef3850417",
          "name": "did:invalid"
        },
        "response": {
          "id": "f63e73cc-5cd7-474c-ba4a-f23f9ea0656b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1fa17f-65ab-468b-90e3-2725af1b1111",
        "cursor": {
          "ref": "5ffc92da-ac9b-4991-9d63-cfd5a27f224d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "34b25a0a-538e-4721-8619-b1c921f6eecd"
        },
        "item": {
          "id": "cb1fa17f-65ab-468b-90e3-2725af1b1111",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a8bcec23-300d-4b21-85d3-3e39737daf12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9f5bd9-12ed-4417-9675-c22fc1498e18",
        "cursor": {
          "ref": "57c2ef3e-c4c9-42f2-af29-277d71a9b8ad",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d4b4a883-964b-4705-9f91-696e893f944d"
        },
        "item": {
          "id": "ac9f5bd9-12ed-4417-9675-c22fc1498e18",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ef296824-e65c-4502-b215-06191709425e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a516f2-0575-4955-861d-61dfcf3be779",
        "cursor": {
          "ref": "e06b032a-d9ca-4932-913c-c2fd94b59cbe",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "39cd8f27-2db2-491e-bbf7-5837a024c009"
        },
        "item": {
          "id": "93a516f2-0575-4955-861d-61dfcf3be779",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dfcf8a3c-35eb-41db-b5f6-1ccc7fcdbd35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a38779-4aec-4351-9eae-d5220c82cd31",
        "cursor": {
          "ref": "9b1baca5-59cc-4e6f-b97b-aff698e1a038",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8aeb11fd-2b23-489f-b066-985d53b9e7db"
        },
        "item": {
          "id": "73a38779-4aec-4351-9eae-d5220c82cd31",
          "name": "identifiers"
        },
        "response": {
          "id": "461aa0ad-63a7-42b4-bd95-8845fbbc49dc",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ec74c3-c8ae-4a6e-96d4-6be9fa577f7e",
        "cursor": {
          "ref": "2ef5ecbc-58bd-427a-ac96-a02c1fda68dc",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bf3d5157-d43c-4984-9fbb-96dabe0e9d12"
        },
        "item": {
          "id": "53ec74c3-c8ae-4a6e-96d4-6be9fa577f7e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "36fef305-d3be-4f96-9305-8a02b1165c20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e12fc2-bd4d-4e7c-a141-b91a836b21e6",
        "cursor": {
          "ref": "b8644186-91a5-4737-b5be-4848295e5dc0",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a0b8e057-d827-463c-9fcb-23bc48ea5f4a"
        },
        "item": {
          "id": "74e12fc2-bd4d-4e7c-a141-b91a836b21e6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0b8481c5-a93b-4ccd-b670-039747ff807b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f661842-243f-47f1-b5ff-2c7ac9be2343",
        "cursor": {
          "ref": "ac2aa4c1-4664-4bb3-a84e-0ed866a5a2b9",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6e68d877-dc6f-4800-8cbf-53e495085136"
        },
        "item": {
          "id": "7f661842-243f-47f1-b5ff-2c7ac9be2343",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "55a2b4b9-688d-4b83-8060-8425015ccb8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b529616c-82db-419a-9e68-a6d3475b1766",
        "cursor": {
          "ref": "477c568e-c837-45a1-85a2-4a22d57528d1",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de5f739e-9fae-4fb6-992b-895243270df9"
        },
        "item": {
          "id": "b529616c-82db-419a-9e68-a6d3475b1766",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0768371c-c505-43fd-b4bc-be996562f6e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4fe2ab-3bdc-48d4-8412-1f7f27bdf8fe",
        "cursor": {
          "ref": "e19743b6-57e5-43ef-8d24-2599d257b5da",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "88a1b51b-507d-44fc-b859-9f57c61592f5"
        },
        "item": {
          "id": "6b4fe2ab-3bdc-48d4-8412-1f7f27bdf8fe",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "22f73210-30ea-45ca-ac6a-0ce033c6b06a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16193fd-36ed-4b27-90f7-855987423656",
        "cursor": {
          "ref": "600d592c-8c30-490e-9d1e-fc8983969eb9",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "94a8c090-5db2-48ab-8222-fad75a2a4266"
        },
        "item": {
          "id": "e16193fd-36ed-4b27-90f7-855987423656",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dfd24361-fa74-46f1-b821-f78a4ba6d1bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9736e019-a7fa-44bf-b12c-7fdc145f019c",
        "cursor": {
          "ref": "bd0685be-721c-437d-9459-016770567634",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "06414c16-afb1-42be-9540-570c3f76b6a9"
        },
        "item": {
          "id": "9736e019-a7fa-44bf-b12c-7fdc145f019c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "854f9bee-242a-4a73-8613-1f7cfbe6fb44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65979ce-b039-4090-8b6e-5c2450e8a88f",
        "cursor": {
          "ref": "bfdf0147-cf97-408d-919b-5421410fe044",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eee65b23-8093-43c9-8356-f56c74ea796b"
        },
        "item": {
          "id": "c65979ce-b039-4090-8b6e-5c2450e8a88f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cc3e503d-4560-42ee-9449-db54879e6f18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720784fe-e811-45f6-9c7a-f8f4eb7706ef",
        "cursor": {
          "ref": "e23b28a2-f7b8-4a8d-9abb-7f04c4f32bd4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "85f8d012-2952-4e30-a87f-b1744fe48f00"
        },
        "item": {
          "id": "720784fe-e811-45f6-9c7a-f8f4eb7706ef",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a4f884ef-8e51-489e-b5ac-7f1efb009292",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b502b0a-52d5-458a-8c13-fbd6d3f58817",
        "cursor": {
          "ref": "7b7d252b-f894-4013-a60c-bac09dec30d6",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "eed60ba9-aad1-4e55-89c6-62ebc394471d"
        },
        "item": {
          "id": "6b502b0a-52d5-458a-8c13-fbd6d3f58817",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "242b88d4-11b3-476d-aa60-c807d6d8c22c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b9ee3b-b9e3-4e58-aa5d-ffc0175fa05a",
        "cursor": {
          "ref": "39ffc586-5302-457b-a139-13907e5df131",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cf3b87c9-2dbb-4dff-9e4d-5cbd42fce77b"
        },
        "item": {
          "id": "e5b9ee3b-b9e3-4e58-aa5d-ffc0175fa05a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "60f45621-d415-40a7-bd2e-adafcff59f34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e897c7f4-2f57-42fb-8307-76e5fa295913",
        "cursor": {
          "ref": "356d6cc9-3461-4d7e-a00a-22e7eb9e3276",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3578bfcf-35c9-456c-af42-07879cd9aa2e"
        },
        "item": {
          "id": "e897c7f4-2f57-42fb-8307-76e5fa295913",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "13003272-ca9a-4e48-8483-4533fd733a7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e316a80-e31f-42a4-80ed-62cf7dd739ca",
        "cursor": {
          "ref": "3dcc9c76-57c6-4e37-abed-be33d1edf015",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "96604acd-90ce-46fc-91b0-ca36bfe9c346"
        },
        "item": {
          "id": "0e316a80-e31f-42a4-80ed-62cf7dd739ca",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3e88e72c-e272-4bad-ba31-03be34657aa5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c815eddf-5e19-462d-b252-2be96445ef32",
        "cursor": {
          "ref": "aa1b1b7d-09fc-42c3-b97f-b60b8be9d1d9",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d44e0265-6db5-4431-aaaa-eaa518c5b573"
        },
        "item": {
          "id": "c815eddf-5e19-462d-b252-2be96445ef32",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "643cf1b3-3fc4-4df2-a981-eb4a99821e6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f716886-faa6-431b-8fa7-24710dac9977",
        "cursor": {
          "ref": "6910c92f-a435-45f3-8163-e76cc0e133e3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "47d26dde-8c7a-446b-a032-088a950a3fac"
        },
        "item": {
          "id": "6f716886-faa6-431b-8fa7-24710dac9977",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a20500c3-9441-412a-a817-82d7946c421b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd0975f-a643-4b46-ace6-7852dd0abb0c",
        "cursor": {
          "ref": "21e1e1d1-f5a1-4570-a991-094fa134b756",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "20cba867-efc0-4a77-ad31-28dda764433b"
        },
        "item": {
          "id": "3dd0975f-a643-4b46-ace6-7852dd0abb0c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6feceaef-5663-4c85-b588-97a4d1a11310",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c59385-8573-4f52-84c8-9925cdc70bdd",
        "cursor": {
          "ref": "88639127-3123-43d2-a257-92ba1123c2de",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9ab09bba-2a8c-4a7f-9194-69806120663c"
        },
        "item": {
          "id": "d3c59385-8573-4f52-84c8-9925cdc70bdd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "80289755-a44c-4adc-aa40-f05551f66f59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef69b791-5a38-485d-984e-bcdb01f3b0ce",
        "cursor": {
          "ref": "edf83b64-aac9-4286-91a9-a1cdb4039a2e",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2af93378-fcf3-45d5-bbb7-026751fdb273"
        },
        "item": {
          "id": "ef69b791-5a38-485d-984e-bcdb01f3b0ce",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "47b2d05f-4552-4655-b08c-d8318daef2a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccd6f9f-86de-4e7f-80d9-73834f18ae69",
        "cursor": {
          "ref": "610d636d-a92a-4349-bbbb-7e3c74df67d7",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "480d5dfc-d498-45fa-b265-956229e16691"
        },
        "item": {
          "id": "3ccd6f9f-86de-4e7f-80d9-73834f18ae69",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7e611b1b-bc31-464d-a981-22313744d710",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26182f8-a80a-4828-ae0a-1ad63784b309",
        "cursor": {
          "ref": "7668ebdb-2023-4ebc-b0f0-d7a9a87e7097",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2a79819d-befa-40dd-bc21-8f8b18b21691"
        },
        "item": {
          "id": "a26182f8-a80a-4828-ae0a-1ad63784b309",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ee5336b1-8320-432e-bcbf-341b4044a16e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31d3f95-c4eb-413f-8e05-ff56d8814a1a",
        "cursor": {
          "ref": "e99b0578-c7ba-4396-a545-9f62e83deb8c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "81b048ae-9d48-4f97-a36c-7a18ba2a3016"
        },
        "item": {
          "id": "e31d3f95-c4eb-413f-8e05-ff56d8814a1a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "06bfc8f9-03a8-4e28-a0a5-3b2d3ca8f158",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9a97d9-484a-4f77-b09f-86a994897e40",
        "cursor": {
          "ref": "1efe37db-a759-449b-86f1-95b3604a2b49",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ca23cbe2-029d-438a-8489-9366d501975f"
        },
        "item": {
          "id": "9c9a97d9-484a-4f77-b09f-86a994897e40",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "63fbc8cc-cff4-4ba1-8f54-921333bf562b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001f0294-758d-46c1-b586-d77bcb766bf3",
        "cursor": {
          "ref": "6a1be2cc-71f7-440d-a0f8-70aa3ec21ab8",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ea3daf66-39fd-4d74-8a46-32f6d46131bb"
        },
        "item": {
          "id": "001f0294-758d-46c1-b586-d77bcb766bf3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2082f8d0-ace0-4ef4-b762-3fd92689c001",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980a0357-9d67-4732-b4f5-1f45302dd7df",
        "cursor": {
          "ref": "26948cf1-a3ba-4f3e-a6d7-711b6f2ff010",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "95a2982d-6c2a-4ec0-9c08-75152bc090c0"
        },
        "item": {
          "id": "980a0357-9d67-4732-b4f5-1f45302dd7df",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "aed27fca-1fd8-4cbb-9bcc-059958c4556a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8625f3-2dc7-4879-9d9b-dcb8c4e3d277",
        "cursor": {
          "ref": "241fb8fe-eee2-4f16-a70c-0c464f578eda",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d5480876-1127-455b-8f5d-d01915a95478"
        },
        "item": {
          "id": "da8625f3-2dc7-4879-9d9b-dcb8c4e3d277",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "87bbc39b-61f1-405e-815c-d7c652020281",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792eb377-f1dd-40df-9d0a-c33edcf13af8",
        "cursor": {
          "ref": "8067ec99-05a5-4a59-9f5b-5f8cb52baed5",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c4d51d2a-6c30-45b2-92b3-39f23d9675b1"
        },
        "item": {
          "id": "792eb377-f1dd-40df-9d0a-c33edcf13af8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "60f0b186-e908-4cca-bbd0-8b7135e362d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0433a619-2fc2-4a7d-8a06-e47e37fa3e92",
        "cursor": {
          "ref": "f0ca2aef-878c-43e3-967b-54077a0f042e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6e5f3e36-0487-4208-b582-d505a7193f7e"
        },
        "item": {
          "id": "0433a619-2fc2-4a7d-8a06-e47e37fa3e92",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "95954480-e7f4-40fd-af21-0cc45adf953a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae00bc8-167e-4f5d-a5df-9e0cbeb7f86a",
        "cursor": {
          "ref": "ed16934a-2bb3-4a54-8f24-59b0daa816de",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b463c3e8-4b0c-4746-8c61-1f1799b1c82b"
        },
        "item": {
          "id": "dae00bc8-167e-4f5d-a5df-9e0cbeb7f86a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "911eb351-6ef0-4b85-b9f5-d363c8b08f9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4512109-f783-421c-b243-658647be9092",
        "cursor": {
          "ref": "85bfb3da-7c20-434e-8c39-b30f232d24e4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "870f4356-cce9-4464-a2c1-c385b529533f"
        },
        "item": {
          "id": "f4512109-f783-421c-b243-658647be9092",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8e2cad3d-b57c-4df7-87e6-d98ce680a2c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcee103-e6c9-40a6-ab4b-898d2525199a",
        "cursor": {
          "ref": "b045f67c-09d3-455b-b14c-4745f60c655b",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5156bc6e-d028-4148-b357-d831a4623e5f"
        },
        "item": {
          "id": "abcee103-e6c9-40a6-ab4b-898d2525199a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "edcca6e6-409c-43fc-aad3-c99084802084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa3d591-2518-4b05-aab9-36774d735380",
        "cursor": {
          "ref": "78e8c0d1-5272-46e2-8d0f-87b1f492c7f5",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1047f461-b2e1-486a-a2ae-be69f1ed9b29"
        },
        "item": {
          "id": "bfa3d591-2518-4b05-aab9-36774d735380",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6b766d97-bbe8-4352-8963-ae10a417202f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fe91d2-c750-4b84-b176-dc83c7ff7935",
        "cursor": {
          "ref": "b8012e8e-ecbc-4626-9f13-9e07d199fb14",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6f24b123-97fd-4cce-ae19-f42ea19b8301"
        },
        "item": {
          "id": "b1fe91d2-c750-4b84-b176-dc83c7ff7935",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ec462711-9746-4df4-b5f7-087fdab7f3ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d486ddb1-319c-41f9-9e1c-b4a3c6a8fad4",
        "cursor": {
          "ref": "b7cdedb0-5ee5-4e7d-8a63-4bd61b48db23",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2df8b3ca-17bb-402c-9094-630f8d551b52"
        },
        "item": {
          "id": "d486ddb1-319c-41f9-9e1c-b4a3c6a8fad4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3e4b1e17-7a8c-4a32-aab1-405bde2f5a24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e00017-210f-4852-8080-e8e757873013",
        "cursor": {
          "ref": "1ec67d0a-80ad-4062-ba81-448cc46f318c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bfe5aba1-622f-468a-a824-c1e5b4a6caea"
        },
        "item": {
          "id": "31e00017-210f-4852-8080-e8e757873013",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ba2adf54-bc95-491a-b441-7b0bb2863fe0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff35cfed-1ab5-4c43-9b6c-a4a08cce606b",
        "cursor": {
          "ref": "c38700bf-eaf0-4bfe-a109-845b4bcc224f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cf85d54c-7ece-4c12-aa4e-a3dd05bdd007"
        },
        "item": {
          "id": "ff35cfed-1ab5-4c43-9b6c-a4a08cce606b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5d1c3ed1-0c0c-4707-91f7-8abd3c43e1ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1d0620-3b8e-4833-9bf8-d5f44c479e87",
        "cursor": {
          "ref": "3313d589-4bd8-4b6c-b15c-4b9322ac7bbd",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "40142b74-f462-4f40-bc88-6be389150f70"
        },
        "item": {
          "id": "6f1d0620-3b8e-4833-9bf8-d5f44c479e87",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38ff9bd0-8635-4210-9ac7-f5bae80d27c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6f149d-53e5-4393-9156-6be47a12220b",
        "cursor": {
          "ref": "695f0f4b-840e-4f88-824d-6682b8774ba0",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "991d2029-7f42-4a8f-9b55-e7878365f2f4"
        },
        "item": {
          "id": "8c6f149d-53e5-4393-9156-6be47a12220b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0a0b6e9f-9aa3-40fd-98ec-4305ca7b779f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b4fd88-6759-47d1-a38f-1a21ee9c2285",
        "cursor": {
          "ref": "9ca61068-4850-421d-b2a2-cc8aaa231ea1",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb88a29f-2ca3-4fe4-842b-b651831d6e85"
        },
        "item": {
          "id": "08b4fd88-6759-47d1-a38f-1a21ee9c2285",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4c024375-1c53-4e08-97cb-765a2d45ffc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b336bc42-7703-48f5-aae2-41fb438b8e57",
        "cursor": {
          "ref": "e11e4bd0-7d35-435a-abff-4290ec2b5679",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6230072a-3bb6-48ce-8965-0ba972dc1d97"
        },
        "item": {
          "id": "b336bc42-7703-48f5-aae2-41fb438b8e57",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4bd2ecd9-1c09-4563-89cc-f688a404ee6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4152ead9-4c5a-4f16-9322-a8d2f21665fc",
        "cursor": {
          "ref": "8f0b0678-555c-440d-aa3e-66b877c2dcf8",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c8f3aa6a-9091-472b-a44d-5108b778a680"
        },
        "item": {
          "id": "4152ead9-4c5a-4f16-9322-a8d2f21665fc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f8816366-a177-40a3-b308-52d1609f92ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71cd3ac-4285-45d7-926d-c1fc79575685",
        "cursor": {
          "ref": "62e457c6-5228-40f7-a33d-f2e19b27815b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "58cc08f7-e913-4695-b5ce-ff64b0abe909"
        },
        "item": {
          "id": "a71cd3ac-4285-45d7-926d-c1fc79575685",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "75cf140a-9e87-4ca7-9e35-6e2edb346cff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d2ea45-c618-4e43-a8f9-8d02b9f556ab",
        "cursor": {
          "ref": "dda87744-fc62-4516-a474-e2e0085869d4",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f03024e3-6d1d-457a-8ac2-45e0905e9301"
        },
        "item": {
          "id": "d8d2ea45-c618-4e43-a8f9-8d02b9f556ab",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d3a55917-c14a-4f74-bb8d-90c6711b1e40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c30ce9-1dc0-4008-9ccb-54945558bd0b",
        "cursor": {
          "ref": "5ad7b580-a626-44c7-8798-14b6a9127f20",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "68ad12fa-a2c3-4ce6-8a0d-723b11c2d79f"
        },
        "item": {
          "id": "f0c30ce9-1dc0-4008-9ccb-54945558bd0b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8e490271-1692-49bd-b479-a95dd8a0688c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf712f0-e333-4de4-a98e-8afb2d4d2a7b",
        "cursor": {
          "ref": "99ad78d3-bd0c-4fd2-b026-df65e621ca02",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "780a4be0-7dc3-4fb6-a5f4-8f4a21b4e314"
        },
        "item": {
          "id": "bbf712f0-e333-4de4-a98e-8afb2d4d2a7b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9bca3944-8b96-4493-ba2e-7d55fe19700e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c340c0cf-dbb0-45a9-9492-15399d50f688",
        "cursor": {
          "ref": "93b3106b-b730-41d4-8ec7-0737b3dabb25",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8b97d167-7252-4aea-a0b2-66e900290b11"
        },
        "item": {
          "id": "c340c0cf-dbb0-45a9-9492-15399d50f688",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9bd33f96-0655-4537-a060-f6ee6dd015d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faea6c06-ead9-43b3-be44-b6453a401f51",
        "cursor": {
          "ref": "77c3db46-f860-4366-af97-a0083f2ad3bf",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "67a43099-9abb-4470-9857-d6ffaf498665"
        },
        "item": {
          "id": "faea6c06-ead9-43b3-be44-b6453a401f51",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d42dd3a3-1533-4496-bed8-25a31136c527",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abed9493-7b52-4cfb-a265-10c24975de0d",
        "cursor": {
          "ref": "2d374d3a-3d96-41bd-9d33-a228fb5f1886",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ecc720bc-b812-408a-9e05-aff7b13b5812"
        },
        "item": {
          "id": "abed9493-7b52-4cfb-a265-10c24975de0d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9f6d8dec-a2ae-4c57-aa2a-f695c59b187b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d67f1e-d453-41c9-be2e-45aca20cee7d",
        "cursor": {
          "ref": "ef42300a-89ce-4fdd-9dbd-9b2014de2c7b",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1215e90f-4547-4ce1-9fe2-8a4752e2fd4a"
        },
        "item": {
          "id": "80d67f1e-d453-41c9-be2e-45aca20cee7d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8deba527-08e1-4a94-8df9-493fe90be5ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96db73c-2d18-4d29-88c2-0c943e91dedd",
        "cursor": {
          "ref": "8d109931-2ef9-4efe-b511-a80b199e92b1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1b4a526c-12cd-4dc3-ae2c-34b6c86bc2d4"
        },
        "item": {
          "id": "a96db73c-2d18-4d29-88c2-0c943e91dedd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "83dbc0ab-4b3f-47c2-b6c5-60d16d96d842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216d2d04-5c61-48fb-8488-45439a8edeea",
        "cursor": {
          "ref": "9661aae6-e834-4f9a-932c-7b96d5f51107",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "63aff52b-ab3d-4362-8cc9-f69ef127943c"
        },
        "item": {
          "id": "216d2d04-5c61-48fb-8488-45439a8edeea",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6c660f32-04f0-4664-bf89-619f3ed39d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a3374f-9ccc-4df2-87ba-8f7c13769cb4",
        "cursor": {
          "ref": "8ee9385a-439d-4f47-b67d-2d430106cd28",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7998013a-93ec-424c-8bb9-f58b5c66de62"
        },
        "item": {
          "id": "b4a3374f-9ccc-4df2-87ba-8f7c13769cb4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4656b9ae-3f3f-4068-a211-732f2f6b24f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e10939f-cc82-419e-a8a0-769fec5cc6d7",
        "cursor": {
          "ref": "d40f94a5-d41d-4554-b7be-c6061785b423",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ab306ab5-4232-4bd3-9175-9eb4eb8863ef"
        },
        "item": {
          "id": "1e10939f-cc82-419e-a8a0-769fec5cc6d7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f30d5359-2f06-4e30-83f9-e56460f953ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1407d55c-be59-49bc-9fbe-8c3985b25321",
        "cursor": {
          "ref": "9334a27f-1418-461e-b38d-9ac0fe4b2794",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "08048f29-6646-42ef-8216-ea63a8788bb9"
        },
        "item": {
          "id": "1407d55c-be59-49bc-9fbe-8c3985b25321",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5dff5ff4-d692-4af0-bb5d-ce84924aa9ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9bb9d8-e305-4e19-9b66-d82be603bc79",
        "cursor": {
          "ref": "c2ac093e-1b6f-40bf-a041-958bac1e6361",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "785ba85a-7c63-420c-8d73-a17d42aae32c"
        },
        "item": {
          "id": "af9bb9d8-e305-4e19-9b66-d82be603bc79",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "17350a88-8f0f-491d-a716-185947944e68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e197a97f-b540-4a6d-867d-eac8a3457a6e",
        "cursor": {
          "ref": "fe73afad-c633-431d-ade3-5d4d976584c5",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "99f4b2f1-47db-4002-b2bd-1189f9fd288c"
        },
        "item": {
          "id": "e197a97f-b540-4a6d-867d-eac8a3457a6e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0da02a9f-9b60-47a3-b6e0-c0cd55cf7ba9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a3d9c6-16b1-4a5b-9729-b9e6e97e6d98",
        "cursor": {
          "ref": "e325ab35-17f9-4036-bd48-61c1137184bd",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8668dd5d-5735-4cbb-817c-31dcacbe3e92"
        },
        "item": {
          "id": "64a3d9c6-16b1-4a5b-9729-b9e6e97e6d98",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dc5cd6b2-6a13-4ff8-adfa-2a4d8b0e9b5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4bb8c7-8c3a-4637-b2c9-a0377ac90edb",
        "cursor": {
          "ref": "a67f8349-ad1a-4af7-b412-b993a3baab98",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "74f8cc7e-8192-4320-b05a-a2a8769618ab"
        },
        "item": {
          "id": "fc4bb8c7-8c3a-4637-b2c9-a0377ac90edb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "04149ee1-6c33-4039-a38a-652f9076c05c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f06246-b4d1-479c-8532-99989557786c",
        "cursor": {
          "ref": "b43d78f2-ff4a-46e7-8f6f-3fd80b8a692e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "22723592-ea07-4efc-bd36-e90e13cd630d"
        },
        "item": {
          "id": "f7f06246-b4d1-479c-8532-99989557786c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fd79bc3e-d79a-4506-9156-4ffd0eea9436",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0957647b-9b8c-4c58-a235-d1ea0c88adbf",
        "cursor": {
          "ref": "06649cff-c722-4619-8712-abaa88adbd6f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c3b18f9a-6437-4e7f-b259-2393d7127864"
        },
        "item": {
          "id": "0957647b-9b8c-4c58-a235-d1ea0c88adbf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9f4910d0-d103-408b-8dfc-592ecc0d782c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8ad52a-9966-4425-9b1c-1faa9131b654",
        "cursor": {
          "ref": "417e4ff4-3c30-4698-b216-ff04b2f9a654",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c3569039-1b1a-4bb0-b537-e79d965a4ee9"
        },
        "item": {
          "id": "de8ad52a-9966-4425-9b1c-1faa9131b654",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "42e7d828-5b01-4069-ad24-df6f0ee6989f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd649310-152d-477d-9642-49491ebd6d20",
        "cursor": {
          "ref": "a10196cd-ac3e-479b-b8fe-118bbf2f2811",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bc3d1291-037a-4f81-98eb-b810d3e2d2ca"
        },
        "item": {
          "id": "fd649310-152d-477d-9642-49491ebd6d20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9912ffc0-68ce-46c5-a15d-c3adf77b9917",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9fab2c-bc1d-4043-afeb-aaa78ec569a0",
        "cursor": {
          "ref": "9975114f-631e-41be-9bf2-ac778a5b76c3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "72326cfa-6e5d-4c35-a4a0-3da0dd0f0022"
        },
        "item": {
          "id": "ab9fab2c-bc1d-4043-afeb-aaa78ec569a0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2774bcfb-c402-40a5-ab18-2e2f655f33ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d46dca-fa2c-4009-9cf3-26dbd0fae8bf",
        "cursor": {
          "ref": "f773114e-a759-487e-9242-c909a87465db",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "86a2aead-a11b-4ed6-950e-8609a4ef117b"
        },
        "item": {
          "id": "c8d46dca-fa2c-4009-9cf3-26dbd0fae8bf",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "494c7f0b-7b1a-4050-9e59-b45000b18dc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04758977-1215-45af-89e6-f3ffbf4a2a3c",
        "cursor": {
          "ref": "a0702c16-8256-48df-bd9c-a7043400207e",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5d2b72c1-6330-4496-8fa2-ae148f9a1872"
        },
        "item": {
          "id": "04758977-1215-45af-89e6-f3ffbf4a2a3c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "460768d7-8e00-4838-96f0-3dd81b8819cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c08dad-0d9c-4f01-a3b0-230e1241f0ca",
        "cursor": {
          "ref": "dcebb1a8-be3d-4b86-866d-70297332cda1",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "75db9195-1a9b-4147-8fd1-6526f14d42e3"
        },
        "item": {
          "id": "43c08dad-0d9c-4f01-a3b0-230e1241f0ca",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2a497793-c48b-4046-a0da-136c02b5e8f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d955e628-34fb-4349-8d2d-8f547ce72d4b",
        "cursor": {
          "ref": "0026faa8-94cc-4282-8528-2a3eca90440d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a50272a4-76d2-42b2-83d5-657eb75b22cf"
        },
        "item": {
          "id": "d955e628-34fb-4349-8d2d-8f547ce72d4b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e68f14e4-835a-4421-a363-552e8d2b6f55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb0d86a-4c45-4a53-8b2e-9f607efb33d8",
        "cursor": {
          "ref": "96cec846-4417-4f66-a6e7-535fe99a81e8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8a96bb88-57f6-4441-ba63-0ada1b6b8e03"
        },
        "item": {
          "id": "1fb0d86a-4c45-4a53-8b2e-9f607efb33d8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e79dec63-565a-4958-89d4-ce8c833f295c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608cfb40-1442-43c5-b52f-fdfed9da45a9",
        "cursor": {
          "ref": "ee16749f-ab8a-45f9-b83d-3f9c16517c15",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "90a1a728-b829-42a7-b9c7-6ee9f56b52cc"
        },
        "item": {
          "id": "608cfb40-1442-43c5-b52f-fdfed9da45a9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "40a5d45a-591f-4f4a-b340-26383619e896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e48e7a-caf4-4284-8419-5cc9899210e4",
        "cursor": {
          "ref": "39402587-c646-4c31-9693-e459991612dd",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6a07bf17-491e-4d53-8864-ae2d55d78673"
        },
        "item": {
          "id": "57e48e7a-caf4-4284-8419-5cc9899210e4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1ed98e42-5f1d-4920-8a50-792d76f7b0cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c087fea9-923c-4a7b-9025-7d80e80a3d37",
        "cursor": {
          "ref": "e154bb85-f23a-476e-a8b1-79bc3e7f0998",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f059f5f9-b74e-4e0c-80d5-8e1f754303ac"
        },
        "item": {
          "id": "c087fea9-923c-4a7b-9025-7d80e80a3d37",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c4df4f84-36e1-4e17-bea4-bf5fec97f211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37edf7a9-aeaa-40a0-aa92-e8f17c78018e",
        "cursor": {
          "ref": "b81d6069-0cef-4848-a56d-174b865ce75c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e7146bd4-b35d-476d-83eb-2c9e26072b8e"
        },
        "item": {
          "id": "37edf7a9-aeaa-40a0-aa92-e8f17c78018e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f929253c-786d-496e-b489-8b4cc610bdfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ff9e6a-894f-471d-b193-13036b84842f",
        "cursor": {
          "ref": "76c9ef94-d075-4ba8-86a6-937b9fc2ba8a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b13cb662-8c3f-4280-8545-6e0b823e8a8c"
        },
        "item": {
          "id": "e2ff9e6a-894f-471d-b193-13036b84842f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b1be6a1b-f618-4fcc-aa30-e764d6b62266",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99045be6-4b54-48ab-8932-af7ac3d38db4",
        "cursor": {
          "ref": "ac99f5b5-c561-4e66-9c08-9efeb754b3cc",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3a5c1c05-7127-481d-b0dd-ba307fb4d4ee"
        },
        "item": {
          "id": "99045be6-4b54-48ab-8932-af7ac3d38db4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a682229d-1b94-4f84-b917-8f82a0ed34f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d297ef14-49cb-4183-aae6-558621331c46",
        "cursor": {
          "ref": "a4f53725-30e1-4ad5-b620-53724630f364",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7b330044-ec03-4d97-95cf-6f6eab6ae17f"
        },
        "item": {
          "id": "d297ef14-49cb-4183-aae6-558621331c46",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4c2734c0-7d14-440d-90e1-b862556feecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d1bcac-a1d0-462b-8158-d302571a4020",
        "cursor": {
          "ref": "637a9980-3f31-4c86-9472-e4fd68b2e958",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "36da4e94-573c-49b9-b274-e5e8bfbef574"
        },
        "item": {
          "id": "37d1bcac-a1d0-462b-8158-d302571a4020",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ed3e32c1-4871-4b62-8a39-0ed0d4592b03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df22a0b0-776f-494c-a368-d8b6be2da6ed",
        "cursor": {
          "ref": "04a7c8cc-a2cc-4c42-bc1c-e9d99f65912b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d5b2b9d9-2bac-4930-a1a1-51eee3308181"
        },
        "item": {
          "id": "df22a0b0-776f-494c-a368-d8b6be2da6ed",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9b3710b8-08a5-4663-8ab7-8dbb3e3f310d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71af9563-80ef-469a-8a23-094b70742332",
        "cursor": {
          "ref": "995a631a-1c3d-49d7-af55-4ac7468a0494",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e965ceff-28a6-4b3c-8f99-4a41451d3f9d"
        },
        "item": {
          "id": "71af9563-80ef-469a-8a23-094b70742332",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4034546d-aaa7-4b84-9bd9-1610c1d89d63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4549eb99-1da3-4ed2-b0d4-03bc9511c947",
        "cursor": {
          "ref": "e2fbf46d-7993-4c6f-8cbd-9a7a42fc4272",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "706f2ae1-03af-4ad6-a756-5aafaca68d51"
        },
        "item": {
          "id": "4549eb99-1da3-4ed2-b0d4-03bc9511c947",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b413e6d2-f772-4b07-b493-bed939d613a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e6207f-3ba8-4b26-a598-8caff1052ccb",
        "cursor": {
          "ref": "5072310b-9bb3-4e3d-94c6-8d9b28d493d3",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b048560d-d888-4800-aa9b-6f5f617c50a5"
        },
        "item": {
          "id": "55e6207f-3ba8-4b26-a598-8caff1052ccb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7fabd003-82a0-479a-89b1-41cc8f5848e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29645d7-723d-4611-8c2e-c26ea1eb3e13",
        "cursor": {
          "ref": "dc9df0a9-cb16-4ee4-82ac-d247101fa956",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "494869da-d5f5-4b2d-84b8-77a5a0bc25ce"
        },
        "item": {
          "id": "b29645d7-723d-4611-8c2e-c26ea1eb3e13",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "42e6ceb4-c0db-46e3-bfa5-6aae698c589b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1217546b-ff07-4faf-bbdf-aa5cd65ec615",
        "cursor": {
          "ref": "6ccbef88-e6b9-4e38-a891-e12c697ccfa7",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b2809201-5ee4-43e0-bd45-9e383e71d992"
        },
        "item": {
          "id": "1217546b-ff07-4faf-bbdf-aa5cd65ec615",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "31b74697-afdd-41c8-93d7-9368f1d32ad9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7e31f6-2d84-4868-a975-6af41f14ff7b",
        "cursor": {
          "ref": "5f57f29b-61ed-4874-9ab6-d577a80c9a67",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d25b61ac-d95b-4cfa-9a45-0e8f13827b50"
        },
        "item": {
          "id": "bf7e31f6-2d84-4868-a975-6af41f14ff7b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9387b327-5944-45b1-810e-833770d363b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9d7c6a-244d-47ce-82fd-ddcaec635d9d",
        "cursor": {
          "ref": "95df561e-437f-41bd-84fa-e2a53eaa42cf",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7218d79e-a752-4e4d-a992-1e86146db1bf"
        },
        "item": {
          "id": "9e9d7c6a-244d-47ce-82fd-ddcaec635d9d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fda772cb-bea6-46b1-845c-9ddf382b8942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d241231-c0db-47eb-8f0a-71a75e796608",
        "cursor": {
          "ref": "e2dfe114-78fd-4b31-b03d-7a8994ab732f",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "95462c8e-9530-4b08-9661-07f252ec0118"
        },
        "item": {
          "id": "8d241231-c0db-47eb-8f0a-71a75e796608",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "025d4b86-adec-4381-9bc8-b4edce269658",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96536e63-39b3-4228-a04c-0894428cadfb",
        "cursor": {
          "ref": "293ee3f1-30b6-4b48-b513-6ba60f727d27",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "43587a90-dc72-4c75-89e9-35c41eff370b"
        },
        "item": {
          "id": "96536e63-39b3-4228-a04c-0894428cadfb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "34c95653-bde5-4ec7-bf9e-dd9b50bd7620",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a897aa-f938-4852-be88-bc7f75a969d7",
        "cursor": {
          "ref": "bd8725cc-ba4f-4dd5-9fe5-60edd3009a18",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d591f00f-4274-476f-b9d3-fdcd558a290b"
        },
        "item": {
          "id": "d1a897aa-f938-4852-be88-bc7f75a969d7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e4342214-e8d3-49e4-aa9c-c71022fcf21d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6a2116-6412-4adc-815c-633f9ee9f33f",
        "cursor": {
          "ref": "edf01915-34b1-4c82-a329-46cabcfc57e6",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f138feb5-e4b7-4e55-a7fd-fc757ca94ba3"
        },
        "item": {
          "id": "ee6a2116-6412-4adc-815c-633f9ee9f33f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3882de27-6d4f-4532-a088-4d0e6d6118f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceca1779-f6da-46d2-aded-6026736f175e",
        "cursor": {
          "ref": "85ca95e5-8860-482e-85db-a368a3b558ba",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e1485f3d-e9b4-4f4b-b783-68cde304cc11"
        },
        "item": {
          "id": "ceca1779-f6da-46d2-aded-6026736f175e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca5e1fda-6584-447b-a3b3-9ef7ca6fa3e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba5ecf1-6001-49f9-880d-4e2bf908c959",
        "cursor": {
          "ref": "c217481f-e757-4c5a-8847-5506f1a8257e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "173aacb9-b53f-4978-a346-91f0f361edd2"
        },
        "item": {
          "id": "5ba5ecf1-6001-49f9-880d-4e2bf908c959",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cfb394ce-6937-4e89-8087-312281250305",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cafe15b-0bce-48c6-9963-c9afc01a9ace",
        "cursor": {
          "ref": "a2b1275e-05ee-4d5b-a083-645da4ddb032",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2702108b-88bd-4fbe-a0bc-e05974293235"
        },
        "item": {
          "id": "4cafe15b-0bce-48c6-9963-c9afc01a9ace",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b16cd7e5-ef87-4eed-9c05-a97a2c985efd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc0b1bb-1cca-4ca0-a00b-16c7ab094d63",
        "cursor": {
          "ref": "f3e9d13f-8682-41a4-977b-a0c9303375ba",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "75f8a49f-0558-445c-ad8c-e2fb67f662d4"
        },
        "item": {
          "id": "ccc0b1bb-1cca-4ca0-a00b-16c7ab094d63",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9a6733d4-f26e-43ef-9ba7-07a7cda9f473",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb64ad9e-c9b1-407d-a01c-f676dd07995b",
        "cursor": {
          "ref": "9f9b036e-678a-4610-936c-a03c043e2617",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "49da0b7e-c252-4c30-975f-ab3d0cb8ff36"
        },
        "item": {
          "id": "fb64ad9e-c9b1-407d-a01c-f676dd07995b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "99db8db5-81b0-46b7-bbab-f4001815d920",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59421402-e533-4bd1-961b-832f1b52954c",
        "cursor": {
          "ref": "2879460c-5845-47b7-b07e-5d5b1e058212",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4777ff69-3961-44ed-97fa-4735d2740cf9"
        },
        "item": {
          "id": "59421402-e533-4bd1-961b-832f1b52954c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "69fc3c54-f54e-46ff-8fe7-7952d92e6f61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f333d6e-f843-4fb1-a49a-ee9b54dc88e7",
        "cursor": {
          "ref": "e14b21f4-038a-4977-8f2b-dbcd1fdaa27c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1e24f269-fa47-4aba-8de5-5c2d638e8e89"
        },
        "item": {
          "id": "5f333d6e-f843-4fb1-a49a-ee9b54dc88e7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "240deb41-d437-43f2-9378-af5425ae229e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0707ce41-c563-4f53-b115-e795c2132efd",
        "cursor": {
          "ref": "ac802356-bf5b-4403-aba4-f0c84eb662ce",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2ff893cb-1c26-4b84-8f30-193eb9999082"
        },
        "item": {
          "id": "0707ce41-c563-4f53-b115-e795c2132efd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "59f3d7b4-0ee3-4ebc-a4d2-80c7a5c3b4d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "b8bbef3c-00d3-4301-ac87-528295abfc7e",
        "cursor": {
          "ref": "d8aefda3-16bb-47ba-b454-044a3c828376",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "41ba5f74-adaa-40ef-a69a-4130ca024ab6"
        },
        "item": {
          "id": "b8bbef3c-00d3-4301-ac87-528295abfc7e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ddf3a301-9660-4386-a7e4-f27dc5f3b0cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "dd417808-4f7a-4f34-8e28-127fa3aff0fc",
        "cursor": {
          "ref": "16bb1264-4c4a-4ac0-a6aa-a8f404661b5a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d76ebb41-4c1b-45d7-b28e-35a9b51fac61"
        },
        "item": {
          "id": "dd417808-4f7a-4f34-8e28-127fa3aff0fc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "72e78308-34bd-4bde-a052-b537094b0230",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9ba49572-f2f2-41ce-902e-2fa319e089a9",
        "cursor": {
          "ref": "b89449de-a179-45e9-bc89-57fd44e10dee",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bfe39c48-bcb4-4ddd-af10-6c04624cec1b"
        },
        "item": {
          "id": "9ba49572-f2f2-41ce-902e-2fa319e089a9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bbe6d453-4ac7-4b77-b2a5-4878c0c80e8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5c4a498c-47ed-4c2e-97ce-e3d79f4a2afd",
        "cursor": {
          "ref": "469d88ad-b7fd-487f-859b-bdfc097f418e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "59f57ddc-c832-40cb-b94f-db0cacad4c58"
        },
        "item": {
          "id": "5c4a498c-47ed-4c2e-97ce-e3d79f4a2afd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f8155de8-9eee-4eb3-8b2e-08d8ca928b09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c645d11d-f3f5-4be2-a17b-af90c875fcc8",
        "cursor": {
          "ref": "203ff806-e492-40e0-8692-bebfffcf666b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "013ca5c4-f71b-414e-bb95-595b6001b10e"
        },
        "item": {
          "id": "c645d11d-f3f5-4be2-a17b-af90c875fcc8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8ed3a6b-4892-4690-bd6e-ae685038fcd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "e43763c0-e9b2-47b7-a9aa-7abef34c13a8",
        "cursor": {
          "ref": "4661926b-8d8d-45e1-8f0c-67ad4d1ee261",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "991db973-72df-41de-a253-6657a6e7a701"
        },
        "item": {
          "id": "e43763c0-e9b2-47b7-a9aa-7abef34c13a8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2c3bca56-f2ca-4e37-b1f4-f44f5c239cd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad9e6f3-e610-49c4-9fd5-23239ef82b94",
        "cursor": {
          "ref": "67265738-cfc4-4690-81ec-5c230d83a434",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cc006d72-d1c2-4126-8a6d-e5dd82981e81"
        },
        "item": {
          "id": "4ad9e6f3-e610-49c4-9fd5-23239ef82b94",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a24a35cb-0a2d-4773-a16a-71767322cb85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce44f88f-6a13-42f1-8f89-33ae34198921",
        "cursor": {
          "ref": "f262fd08-5e92-42f3-a716-6a9c11449dde",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0a998221-af64-4633-946b-c91122f75116"
        },
        "item": {
          "id": "ce44f88f-6a13-42f1-8f89-33ae34198921",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c7a44354-6876-4cab-88f6-ec072e3e5c41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26171de-5a1f-4532-ac5c-5de505795dac",
        "cursor": {
          "ref": "0fc24f2f-00e4-45c0-8647-1dc10d822c37",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "40494735-d83b-48cd-b6a1-36e46412fcea"
        },
        "item": {
          "id": "f26171de-5a1f-4532-ac5c-5de505795dac",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0c7e0c32-0699-4ce3-b5bc-9fe853797513",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7885dc45-626a-4a00-80db-4e770bc85c76",
        "cursor": {
          "ref": "02fad2e8-4e4c-4952-800a-b12bf85a68fd",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8c08beb5-b0fe-4c54-a240-6fba5bb594b1"
        },
        "item": {
          "id": "7885dc45-626a-4a00-80db-4e770bc85c76",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ee9962d0-e667-4b60-8e56-87515b3351fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbd45f5-3139-4107-a66a-1e9ff7d2906b",
        "cursor": {
          "ref": "73419fff-83ef-45fd-8f85-33063c330356",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "774b13af-5fb7-4204-a418-64fbcfb870e2"
        },
        "item": {
          "id": "bdbd45f5-3139-4107-a66a-1e9ff7d2906b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0ab75823-e94e-44e8-b063-ee1f6f55760a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1c6c03-23fc-4cff-9aa9-534f1aec33ed",
        "cursor": {
          "ref": "eb1eb2bb-2367-4776-921f-0811046b9267",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c29bc63c-7eca-4b6a-bdf6-4d2bc72aa43a"
        },
        "item": {
          "id": "6f1c6c03-23fc-4cff-9aa9-534f1aec33ed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6abbc8eb-6c34-41ec-925b-67afebc25394",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c5e380-0c54-436b-8073-4f5b1ab37b5e",
        "cursor": {
          "ref": "76978104-86ae-4ed0-bcec-bd968571f27f",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8cb00e8f-be68-4c1e-b732-1e8aa5e2c5ed"
        },
        "item": {
          "id": "88c5e380-0c54-436b-8073-4f5b1ab37b5e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7478ffd3-8630-486e-ac2b-57df49b86f35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d382f28-4e2d-42dc-90ac-8a7a8abadf6b",
        "cursor": {
          "ref": "013e1916-320b-4f14-803d-36ae2495b50a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "aceac8c9-1e79-4f66-b9a4-71d474d8eea9"
        },
        "item": {
          "id": "8d382f28-4e2d-42dc-90ac-8a7a8abadf6b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ed53365-39b6-4dca-a593-41d1ecad2eb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35718a5d-3756-44ed-930a-f1494485702a",
        "cursor": {
          "ref": "d8d07e8a-6f57-4fca-bf52-0a360768e4be",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cd5a3964-2225-4587-9f06-051209d60526"
        },
        "item": {
          "id": "35718a5d-3756-44ed-930a-f1494485702a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f6edabf5-c010-4f89-b363-83a4f01fb546",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf61e058-9909-4430-a831-9c62b08afab4",
        "cursor": {
          "ref": "e49f8221-feaf-41d3-934b-71d8da81f028",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "250cd819-fb6e-4ccc-9a98-09e3d178eace"
        },
        "item": {
          "id": "cf61e058-9909-4430-a831-9c62b08afab4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "89a3e9ec-c666-4af1-aab3-8fbb68ad634b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbde1b3-f93c-4a1d-ae71-fc43c2e5933e",
        "cursor": {
          "ref": "cca79a48-2679-4153-b688-9b01d0a4985c",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2873e0e6-8834-4836-b337-9975dc4066a1"
        },
        "item": {
          "id": "7fbde1b3-f93c-4a1d-ae71-fc43c2e5933e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "59059620-b383-4068-b3f6-e4c4e5662cfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f342004-c2dc-4129-84b8-2875a7a5f4e9",
        "cursor": {
          "ref": "d29ce7ab-ea59-48d8-b3f6-37e7ce52d249",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0f266cb5-2e0b-45d5-b49c-17aba94dfbe0"
        },
        "item": {
          "id": "7f342004-c2dc-4129-84b8-2875a7a5f4e9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b1d71524-f795-4169-9e95-83b2f7145b71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6f2d5c-e92b-4859-a4f2-5603c9cf39c5",
        "cursor": {
          "ref": "e3a6b9a6-2bff-4abb-9aa5-9637937a68fb",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "921ea807-8a55-49d9-b211-79c379841322"
        },
        "item": {
          "id": "6e6f2d5c-e92b-4859-a4f2-5603c9cf39c5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a2dc3f56-2715-4c94-bc86-be1d90999aba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ef046c-14d1-4b92-9b95-57dcc76b40a6",
        "cursor": {
          "ref": "5d403a6b-3301-45a2-9bda-db235fef9064",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e17e8f65-0be2-415d-bfb0-912f9f6ddd36"
        },
        "item": {
          "id": "23ef046c-14d1-4b92-9b95-57dcc76b40a6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5fed7b03-9e03-4881-aa92-4cb86645e969",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2a14ed-2d54-4fa2-b8c3-7f42baa7282a",
        "cursor": {
          "ref": "7a1dda96-4702-4b8f-ba2d-12d1588ac9b1",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "613b53b6-7b82-42bb-9437-8a7daa120d62"
        },
        "item": {
          "id": "af2a14ed-2d54-4fa2-b8c3-7f42baa7282a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "796b3179-bc42-4060-aa7c-50cb39477159",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c197fd26-c0bb-4c11-82c9-64c9b4a71fc2",
        "cursor": {
          "ref": "81606dcd-6f93-4f8d-8486-2ddbce0b3dc8",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "64455d3b-081d-4130-8e1d-f7823a60f84a"
        },
        "item": {
          "id": "c197fd26-c0bb-4c11-82c9-64c9b4a71fc2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d0f680a9-5df7-451d-ba96-7cd567e76095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0c7a18-679d-4ece-9559-7117213853f3",
        "cursor": {
          "ref": "006b9cd1-48c8-4243-9a9a-5bec9526b9fd",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e0dd499c-6381-4850-aa49-b644a92e109b"
        },
        "item": {
          "id": "8a0c7a18-679d-4ece-9559-7117213853f3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f16f8ddc-b903-4b56-bdc3-5815a2c9ab6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1683d610-198e-455b-be42-7eefb81ed7a5",
        "cursor": {
          "ref": "91a4042d-9ec9-424f-889c-5b137ca1356b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "958b4359-c351-4bd2-ba71-85607b52f102"
        },
        "item": {
          "id": "1683d610-198e-455b-be42-7eefb81ed7a5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "10bd1cf2-835e-4c4f-8294-2e4f7bad62ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55f4965-41f4-4ba4-a3e3-b3e1a6b5853f",
        "cursor": {
          "ref": "9182caa4-5bdf-432c-8a3f-e3763b6e4fbd",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b20e8095-fdfd-4d27-8ac1-29e07a610f14"
        },
        "item": {
          "id": "d55f4965-41f4-4ba4-a3e3-b3e1a6b5853f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bae5ea13-a5b3-43b0-a2fe-88a369b1e6a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6fd460-112c-47a2-9e4c-8096b1b88d55",
        "cursor": {
          "ref": "16c77bc4-a16c-4dd9-a891-2080da535663",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f090dd1b-9ce6-4527-9b40-642de8e44c43"
        },
        "item": {
          "id": "9a6fd460-112c-47a2-9e4c-8096b1b88d55",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "235ee869-1cdc-4e4c-ae74-d4e713adab8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d650992-def4-4844-b2b5-e60727f7b096",
        "cursor": {
          "ref": "abfe3b66-cd0b-4029-9e8a-ba80eae98827",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "59b28b2a-0f56-415e-87f5-f1973749f806"
        },
        "item": {
          "id": "4d650992-def4-4844-b2b5-e60727f7b096",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9a6c06cf-0aa4-4fe7-8629-24fe8d70be9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9dccb2-f918-4eda-a71e-6b351f6b9c12",
        "cursor": {
          "ref": "79f1489c-2710-4c77-8b23-5bbf52a273fb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "87b77508-3d09-4104-a7a5-396cbc3451d2"
        },
        "item": {
          "id": "df9dccb2-f918-4eda-a71e-6b351f6b9c12",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "363db668-3b2c-4ecc-9570-49a2a3a7ac05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d8c724-5b99-401c-8e85-f29c99af832a",
        "cursor": {
          "ref": "11fc54a2-7b86-4ba5-8725-38c6b193201c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2de302c1-bca6-4aa1-9878-f6032c40f1d8"
        },
        "item": {
          "id": "c6d8c724-5b99-401c-8e85-f29c99af832a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5863bdf4-e1da-4c8e-9956-99d05b38d88c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aece84-e9a4-42b5-8da4-771d186f7d62",
        "cursor": {
          "ref": "ae9f6716-67b2-4ba1-9d83-60708a6fb709",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d087a947-8c26-4994-8b86-cea6cde2f84a"
        },
        "item": {
          "id": "97aece84-e9a4-42b5-8da4-771d186f7d62",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "183ab6f4-dda4-4508-954b-d8571469b0d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2bd006-4c52-4190-9f6f-419468f818ec",
        "cursor": {
          "ref": "dc43fc14-8c21-4602-a90e-4fed9bc53187",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "830a9efe-d1e5-4a6c-89e2-9372412b7781"
        },
        "item": {
          "id": "bc2bd006-4c52-4190-9f6f-419468f818ec",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bea2ca75-0a9b-413a-9e3d-346bd3250ed5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824d8084-cd24-4ee6-901b-3885d49d6efc",
        "cursor": {
          "ref": "cdaaf21d-3eff-487b-9db0-d3dcc941bf84",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "424ccd55-845d-45bb-84e3-c58f54c78416"
        },
        "item": {
          "id": "824d8084-cd24-4ee6-901b-3885d49d6efc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f6ab7406-1ee3-4bfe-a26f-e06eb6a27a69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bfb734b-b121-46ae-9876-3b9087e1ca06",
        "cursor": {
          "ref": "518c6322-7935-4098-9e36-4c84b34ec4d6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "25c85189-6452-4025-b39b-a0ad6c0a5a14"
        },
        "item": {
          "id": "0bfb734b-b121-46ae-9876-3b9087e1ca06",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f1460d70-692b-4ca5-b94f-86ccf47b4845",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b965db07-a29f-4458-b776-5826e713433a",
        "cursor": {
          "ref": "c9e255c8-7de0-47c7-9ab0-c18d7f3987a3",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "771d0c08-b2d1-4540-badb-6e5fd04ada13"
        },
        "item": {
          "id": "b965db07-a29f-4458-b776-5826e713433a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "91e97e33-c1c3-490e-b4bf-c45cc2ecc4b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a53590-a3a9-4eed-bee5-939c911ccbb8",
        "cursor": {
          "ref": "d684492e-f1c4-4dcf-baa5-ddc7bd01f30e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "35211e74-5236-4bae-8451-b2b92d25f9d6"
        },
        "item": {
          "id": "a3a53590-a3a9-4eed-bee5-939c911ccbb8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b5d09950-3ec5-49f3-a274-cd992d491acf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ae813d-c65d-4b73-bda6-40b67adcc2af",
        "cursor": {
          "ref": "7c8deea0-9eba-4317-863e-7a2ae45af36b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "86228e0e-26de-462c-b831-8087593d9d63"
        },
        "item": {
          "id": "c4ae813d-c65d-4b73-bda6-40b67adcc2af",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d376eaba-8f85-4af8-8e19-2add271c0216",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1029dd-009a-4fee-86d2-ae257a2ebe3e",
        "cursor": {
          "ref": "650f2145-4dbc-44bb-8f55-6857daf763d1",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3c999e04-df51-4ceb-98f2-a7a04a68f35a"
        },
        "item": {
          "id": "fb1029dd-009a-4fee-86d2-ae257a2ebe3e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0bbe8573-b361-4a75-980e-783667e8c8aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f21076-5a24-443a-a5c7-ae9a708bde30",
        "cursor": {
          "ref": "529586b4-3339-43ee-8b14-b0a6cee98e62",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c12bf178-c868-4b5c-8e22-ed24eebc3e8f"
        },
        "item": {
          "id": "b2f21076-5a24-443a-a5c7-ae9a708bde30",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0d55a01b-2674-476a-9b8a-b783c09f55cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db494ce6-3067-4749-bde3-08691fb4c828",
        "cursor": {
          "ref": "3165bd6d-fd4c-4880-b642-0ce32fd854c9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "16288f3d-0b85-4c6b-ba9c-1f5d8bfd8043"
        },
        "item": {
          "id": "db494ce6-3067-4749-bde3-08691fb4c828",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8fb1ace3-37ad-45e2-9d59-669052c36113",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa0d18a-e01b-4c9a-86a6-eba86d878b3b",
        "cursor": {
          "ref": "aada7c04-e1d2-4c9f-a246-7c3151cbc6d7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "de1cc047-157e-4642-9266-da78a7e378ce"
        },
        "item": {
          "id": "4aa0d18a-e01b-4c9a-86a6-eba86d878b3b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9fc44a89-a6fe-4b38-a890-339c0110d0ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d6ef07-6703-40dc-8a47-5b64519fed56",
        "cursor": {
          "ref": "d1928de3-56d8-4893-9cf0-6c02449a58fa",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a9c0ba41-f98d-4912-92ad-fb926bf794db"
        },
        "item": {
          "id": "f6d6ef07-6703-40dc-8a47-5b64519fed56",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "760eca68-56c8-47f0-94cd-c1cca53b4374",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8275fdd-d6e7-45bd-ac35-08b09bea28fd",
        "cursor": {
          "ref": "76067c23-9fe2-4b54-805c-db533bbc46a7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "52e8f813-763f-4031-8a3c-b55bdf1f04d4"
        },
        "item": {
          "id": "b8275fdd-d6e7-45bd-ac35-08b09bea28fd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b46c566b-8754-4aff-a96a-64c182386ce2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcad8a07-3362-482b-8369-3e2a7d186a41",
        "cursor": {
          "ref": "0c9c32bb-a9ab-4e3f-9b41-b3c0b85d8692",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "31d226bb-94ef-48d4-8346-226f1f9e3fd1"
        },
        "item": {
          "id": "bcad8a07-3362-482b-8369-3e2a7d186a41",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "63fc7a8b-f593-46a3-b0bd-dac3a467d8e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe45a2eb-ceda-468a-af7f-81636b31f89b",
        "cursor": {
          "ref": "984e88f6-d44c-4982-90df-64bea5696ba1",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3fa21817-3855-4d73-acfb-f82ce3f41136"
        },
        "item": {
          "id": "fe45a2eb-ceda-468a-af7f-81636b31f89b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "961f2334-f5bf-4d76-9719-68cd47e2c173",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2cd9df-d7ca-4c47-ab46-2bca97355e6b",
        "cursor": {
          "ref": "1f0ef483-1679-468e-83c0-ad26e5d86a8e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "53f30a3e-3255-479e-8074-442691e8eddb"
        },
        "item": {
          "id": "da2cd9df-d7ca-4c47-ab46-2bca97355e6b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9440c56c-7689-4a67-96b4-b4d47de33da7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc0b28c-46e6-4416-a78b-52a0d936425b",
        "cursor": {
          "ref": "8b4eea43-ecec-4ff9-a135-4acf82daad9f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "361b18e1-aab7-4edf-b193-63675a445bf1"
        },
        "item": {
          "id": "7dc0b28c-46e6-4416-a78b-52a0d936425b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8b4e08c3-0c72-474e-b5e2-5d3b5465ffd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb895f73-314f-401e-8480-35327d32fe3b",
        "cursor": {
          "ref": "c8cad3fa-acc3-431e-827c-d1f2fc1f36f7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f5e5104e-d567-4d0c-9d6a-6d7ec04f7912"
        },
        "item": {
          "id": "bb895f73-314f-401e-8480-35327d32fe3b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "00f680a8-2940-4ca9-b1e0-1aaa912a59a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4dc3d16-0ad0-48be-b745-617cf04f24d4",
        "cursor": {
          "ref": "4fa0f943-795d-423f-b320-320bc68c1587",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "243adda3-abd7-434d-b69d-cb58dd1490e2"
        },
        "item": {
          "id": "d4dc3d16-0ad0-48be-b745-617cf04f24d4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8ff2c70f-64ea-4f3f-8b60-f0540468dbda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfb5e87-ece6-49bd-9bc4-2e5d71c9637f",
        "cursor": {
          "ref": "305798d0-eb31-4577-94cd-e5444fe22f6f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "84a2884e-56b4-43e2-9d84-c17b3d600ec2"
        },
        "item": {
          "id": "2dfb5e87-ece6-49bd-9bc4-2e5d71c9637f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "be1898e5-2eca-4c58-9926-b9ec4d6bed9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9f90b2-0e6a-42b6-894f-834f699f51d3",
        "cursor": {
          "ref": "a1428222-3730-4e54-a7b6-ff481ee402ad",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "382b77e8-99f2-4f89-969f-2b49e0b41ddd"
        },
        "item": {
          "id": "4e9f90b2-0e6a-42b6-894f-834f699f51d3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c138a98b-54fa-4be8-849d-4b30a39c1e9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e83b8f-a4a7-4615-8557-6a0693de5323",
        "cursor": {
          "ref": "87b29ece-d35b-47e2-bcce-6fcef2c0827f",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a52a539c-9440-4776-acfb-bc71742cb775"
        },
        "item": {
          "id": "10e83b8f-a4a7-4615-8557-6a0693de5323",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7812d0cb-1df9-45f9-a34a-06e397c2d6e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbc70c3-c1d8-45ce-8435-4444e392fbf9",
        "cursor": {
          "ref": "91c6f259-4bcb-42be-907b-9c412717eb0e",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "244aff3a-d68c-4b5b-acf7-6e7fecf0924f"
        },
        "item": {
          "id": "6cbc70c3-c1d8-45ce-8435-4444e392fbf9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3898c60a-f82f-4c63-9269-b2b3912b8e59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d453a9fc-f85b-401b-b84b-2c3351824b4a",
        "cursor": {
          "ref": "21258c4f-6cba-4b39-87a3-aed7c1b8e130",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0ff0bf8b-3ef6-4e01-8ef2-2c1cbaca4899"
        },
        "item": {
          "id": "d453a9fc-f85b-401b-b84b-2c3351824b4a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "965393e0-62eb-4ab3-9fea-61a9c9f6bbfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e844eb4-2166-4f59-8838-92a791a65ea6",
        "cursor": {
          "ref": "b02f9996-cf56-462e-8e81-d39142ab8f91",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "58ab9c70-642f-400d-a479-66d773233f0f"
        },
        "item": {
          "id": "2e844eb4-2166-4f59-8838-92a791a65ea6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ef32adad-6111-4bce-b06e-4d1c8943049e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34179c4c-f63c-44ee-9663-f84b2c3e406e",
        "cursor": {
          "ref": "b6359e78-3e1e-4913-81c4-eb99dad8d6d0",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8aa9a1e0-61c9-43b5-b7b5-e97b17c3725d"
        },
        "item": {
          "id": "34179c4c-f63c-44ee-9663-f84b2c3e406e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bd251cb9-a2c3-428f-9943-9a433fa1cf9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92636e2d-5c36-411d-b9cc-0bca00daf848",
        "cursor": {
          "ref": "813f697d-594c-4ab4-8622-77b28b553df6",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a90630f2-05be-4014-bcb8-4f2d9889a76f"
        },
        "item": {
          "id": "92636e2d-5c36-411d-b9cc-0bca00daf848",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "851e32a6-0267-45cd-b321-6b99c162a180",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e19f759-ecab-4bc0-b9d7-26162ab2550c",
        "cursor": {
          "ref": "6d09ea32-2378-4c8f-9e54-c88261fa97d7",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "14b95669-7ab8-41eb-8d60-741b6841ce4d"
        },
        "item": {
          "id": "9e19f759-ecab-4bc0-b9d7-26162ab2550c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cdc3b72f-fbb2-4d78-aa11-aa06577b6c6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161d2ff9-93c3-431e-a7ab-19123ad43d16",
        "cursor": {
          "ref": "cbfd0d01-63a5-4008-a5e6-a250952f999e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ad62bc89-9f37-4ac0-af65-08ef0764dffd"
        },
        "item": {
          "id": "161d2ff9-93c3-431e-a7ab-19123ad43d16",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c51c13af-8035-459f-84e6-3683b0bb3b5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218d87ad-0588-4863-9049-eb36ff7edb87",
        "cursor": {
          "ref": "6da727f5-c8c8-498b-93ac-7d0d4f9af2bd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0f9ffd1e-879e-4945-bada-559a7256bad4"
        },
        "item": {
          "id": "218d87ad-0588-4863-9049-eb36ff7edb87",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "32ffb102-4c76-4e84-aa2f-ca06c85a80ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c8ebf0-6708-4087-87c6-fb23352a120d",
        "cursor": {
          "ref": "b1cae38e-7821-43a6-8402-308bb5d07487",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "17d98a99-4b7a-45a1-8ebd-f3ea40bf6135"
        },
        "item": {
          "id": "92c8ebf0-6708-4087-87c6-fb23352a120d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7133600d-8b38-49cc-a15d-b6bd3ed0dcdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505fafc5-d637-40d9-953a-cb70c02fe3b6",
        "cursor": {
          "ref": "331f040b-8926-4c4c-a7eb-1bb0035bbd40",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c9ef6901-1f75-4847-9643-0de185b9be1a"
        },
        "item": {
          "id": "505fafc5-d637-40d9-953a-cb70c02fe3b6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "49729f73-b214-4852-b77f-f89f08425243",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31eb419-b928-46f3-8819-23a497b9d57b",
        "cursor": {
          "ref": "635623cd-6194-412d-8558-e43de5216932",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "19f1323b-de59-4de8-b18d-0f221e798e94"
        },
        "item": {
          "id": "c31eb419-b928-46f3-8819-23a497b9d57b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6882ae88-e717-4733-b448-cbb4c2354675",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8632cecb-cdf8-4f88-acdd-0212703f593f",
        "cursor": {
          "ref": "eea48950-4248-4d4a-8c31-17bfbdaf14e5",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1f1b6611-4658-4865-9165-0cbcc379920d"
        },
        "item": {
          "id": "8632cecb-cdf8-4f88-acdd-0212703f593f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b10c082d-b659-42ef-812b-2c78722074f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490018ef-0ec7-4d45-919f-6b93703302fa",
        "cursor": {
          "ref": "24ef88bf-e5d5-43ce-8b84-12416932646c",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "140290c9-85ff-4657-ad69-ec00ccc619ca"
        },
        "item": {
          "id": "490018ef-0ec7-4d45-919f-6b93703302fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "816d97f0-eba2-4e8f-a362-029bb840486a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886bfce1-6cfd-4c8a-a429-327c9a669178",
        "cursor": {
          "ref": "d500fd66-644f-4bf3-a7b5-cf7929f6a061",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "10fb0f38-eee8-45b2-8c08-d5a6285f4c7e"
        },
        "item": {
          "id": "886bfce1-6cfd-4c8a-a429-327c9a669178",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "43449990-fce6-49bd-9e93-a5c409763bd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd6d731-f664-4727-b7a7-337e34e30aea",
        "cursor": {
          "ref": "b058c56a-2c38-4866-a2e3-ebd4a49ef0d0",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "74eda9d9-89b6-498d-8e37-8dbc68f64d2e"
        },
        "item": {
          "id": "1cd6d731-f664-4727-b7a7-337e34e30aea",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d339abc4-17eb-4ead-96de-38ffbd35853f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b581d822-0692-4038-b823-c110ec736383",
        "cursor": {
          "ref": "cf4d502a-75e5-42fb-9840-bff332a44fef",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "058d4c89-b4e3-467e-bd17-7305d170770c"
        },
        "item": {
          "id": "b581d822-0692-4038-b823-c110ec736383",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ff4196f7-6c36-4df8-8001-bded2c42888a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bdf6b0-6988-49bf-a7a5-54f06c2fafd7",
        "cursor": {
          "ref": "8ead5170-1561-4f98-be2b-91b4355a0d23",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c4ef4a0f-a738-4161-a088-bb6651c0b52a"
        },
        "item": {
          "id": "e8bdf6b0-6988-49bf-a7a5-54f06c2fafd7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8456d3da-8ed2-42d5-9b28-6a49b098dcf5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bc8540-bf73-44dc-b62c-8e3e7986015e",
        "cursor": {
          "ref": "3ab8d601-818b-4bac-982c-1b9b37d1088e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "816acd32-57a3-4388-a42f-eac69c0b8e45"
        },
        "item": {
          "id": "f0bc8540-bf73-44dc-b62c-8e3e7986015e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9d6f3b9e-34be-4581-8018-5eac221c7324",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82617e7-f565-4d89-b90f-646a9e238ca5",
        "cursor": {
          "ref": "cece0351-4241-4953-85d9-77cbf1606c51",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6447b16d-c7ab-4653-8198-8301efe351c2"
        },
        "item": {
          "id": "f82617e7-f565-4d89-b90f-646a9e238ca5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bc3188a6-cac6-421d-bdca-2653c6bdd84b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d2d514-6a24-48c8-99d8-2b9a0bc5e48f",
        "cursor": {
          "ref": "98b25f92-2848-49dd-867b-05f9701a7740",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b4c475d0-c0a4-496a-bd7f-72537e2f810e"
        },
        "item": {
          "id": "42d2d514-6a24-48c8-99d8-2b9a0bc5e48f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "54c89734-7938-454a-b64e-d89363c94a72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd8f507-2775-4145-811d-415d56545b49",
        "cursor": {
          "ref": "3ab41536-79d0-4115-8b6d-ac67d67ea540",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c748a64b-2cda-4173-adf4-24bd2486774e"
        },
        "item": {
          "id": "0dd8f507-2775-4145-811d-415d56545b49",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0c7350d3-3b92-4679-81e8-4d149abd4adb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd73802a-799e-4498-b3b7-b4d9c4b7fc18",
        "cursor": {
          "ref": "f1b05c9a-46d7-4b0b-8a3d-d46fff4a8010",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ff581909-edcb-4385-a54a-e68bfb8ca28b"
        },
        "item": {
          "id": "cd73802a-799e-4498-b3b7-b4d9c4b7fc18",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c369f6b0-7ffa-4836-8a52-8fa29c1a72d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b86f4c-7669-4fe5-a350-1dc4ecf453e2",
        "cursor": {
          "ref": "487f5aad-5061-4e43-91bd-9a8dfa466da1",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7c3fd02f-f238-4bb3-b778-c49c1f501eca"
        },
        "item": {
          "id": "f5b86f4c-7669-4fe5-a350-1dc4ecf453e2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0f81045e-b009-4c78-b69e-546c372d7d2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a469f17c-ed4b-4c3e-b0c0-0af418d60b1d",
        "cursor": {
          "ref": "74f5e137-b4a2-4bc2-a27c-9e114f8d8324",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "31274300-e98b-43bf-af41-a10786293e36"
        },
        "item": {
          "id": "a469f17c-ed4b-4c3e-b0c0-0af418d60b1d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0c0542c8-890c-4f83-bce3-56cbc8320142",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb658f8-fa34-40d1-af7b-7591fbbb030b",
        "cursor": {
          "ref": "18ce4009-6a8c-467d-8616-14b2a74250f0",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b1c1064e-f26a-4207-84e9-fbaaadf9063a"
        },
        "item": {
          "id": "3cb658f8-fa34-40d1-af7b-7591fbbb030b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ff003ec8-5f91-4c2c-baad-c0ed560d96d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6537e467-ba5b-4c50-877f-0c3ad278b1ab",
        "cursor": {
          "ref": "5c839e57-21e4-459b-9f0b-ac0b60f74cab",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cd86e768-b238-45a1-a333-ee19c133da15"
        },
        "item": {
          "id": "6537e467-ba5b-4c50-877f-0c3ad278b1ab",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aae38663-c600-42c2-8fd4-a147eca96ece",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b64939b-3197-4c99-8dce-a745df0385d9",
        "cursor": {
          "ref": "368b09d6-7395-430b-8204-ee8f96d21bdb",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8749d118-d9e3-4e1c-84ec-7e1e81b2bd49"
        },
        "item": {
          "id": "1b64939b-3197-4c99-8dce-a745df0385d9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d23e10ad-c802-4fc4-aa00-466dbf161e48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e1279f-dd0a-429e-bc54-a424675e7526",
        "cursor": {
          "ref": "c4c9016c-59fd-4a33-b6e6-637eb44cadb2",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "00b5e7a0-a576-4434-9b38-d8c3e7df630b"
        },
        "item": {
          "id": "71e1279f-dd0a-429e-bc54-a424675e7526",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "11b5b650-6704-49dd-a9f7-13af061ad84d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef7b924-05b9-495e-b20a-86505b0e0a50",
        "cursor": {
          "ref": "dc69ebb5-83f1-4dde-9327-a715c9189e2e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ed5581d4-d344-41dd-aee5-308c94724162"
        },
        "item": {
          "id": "cef7b924-05b9-495e-b20a-86505b0e0a50",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bd01769f-31f1-4af8-a321-8f2126943b5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd79d1b2-67ae-4069-9a78-4779ee84dd21",
        "cursor": {
          "ref": "0032e540-fa9e-449f-945b-6f6dc5545ea0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "763df06e-f742-4650-b76c-189a3501985f"
        },
        "item": {
          "id": "cd79d1b2-67ae-4069-9a78-4779ee84dd21",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a2f4fdde-f961-4a7c-81a2-daa0f341a789",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58f7574-e5b8-4eca-a693-f264a14e9d1b",
        "cursor": {
          "ref": "a04092a5-04c0-4dd9-b69b-f5a0bbdab113",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "58ecb81c-24ae-4722-b438-f1bcf632cf3b"
        },
        "item": {
          "id": "b58f7574-e5b8-4eca-a693-f264a14e9d1b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "55a5dc24-b304-431d-b0b5-a5e118e0eb99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9134cf-75f3-435e-8058-501fd4a58b0e",
        "cursor": {
          "ref": "2e126a1e-4297-47fe-b492-600eb9bb7c4f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "acff4701-3d4d-4210-9e38-6193cd8dc3f4"
        },
        "item": {
          "id": "6d9134cf-75f3-435e-8058-501fd4a58b0e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5d156994-804d-4ea0-a9ea-d38e921a4293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20eb184-ab94-44ec-87fe-1cf031399d51",
        "cursor": {
          "ref": "5e60b6ca-f6a0-405b-bb77-02442e04f0ee",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "671d272b-d59c-4dc4-9102-37fd9f5aa9bb"
        },
        "item": {
          "id": "a20eb184-ab94-44ec-87fe-1cf031399d51",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "50fec082-1853-4f8f-ba7b-e5e2da013c89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbef532-499d-4af3-b11a-a09e8ee7e5ce",
        "cursor": {
          "ref": "93d9b24e-0188-492e-b56e-4b268392de1a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d025949a-ca6e-49cd-b2b5-511766954b8b"
        },
        "item": {
          "id": "bbbef532-499d-4af3-b11a-a09e8ee7e5ce",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0d598289-3df7-4151-aa53-4335fb766210",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797c8048-a23a-4678-b16d-5e9e9b4e8152",
        "cursor": {
          "ref": "a62c4b47-5f8f-444a-a271-94527da8f407",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4a63028a-e2d3-4845-8f5f-d953ce637e46"
        },
        "item": {
          "id": "797c8048-a23a-4678-b16d-5e9e9b4e8152",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6fcd52ef-3bea-46ee-9713-838caf975833",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e8a8a6-4445-4458-9ec6-7fd68d26ba8c",
        "cursor": {
          "ref": "b981336b-1c02-4b09-92a7-5b933977af5a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ff2757e4-65a1-41e8-9e4b-6d38c0db338b"
        },
        "item": {
          "id": "37e8a8a6-4445-4458-9ec6-7fd68d26ba8c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b2b2d1e3-1c5e-4211-9415-84321ade4d91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d2c3e1-81b3-4ba9-b640-1f1ae5dadcbf",
        "cursor": {
          "ref": "756daf4c-e72f-4999-86c6-866af4c3dde2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6f9cbc3f-bc9a-41f9-9c54-a4ac429c0e69"
        },
        "item": {
          "id": "b6d2c3e1-81b3-4ba9-b640-1f1ae5dadcbf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d042396e-ca68-4f37-96db-218eb3685b4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d9555b-bfbe-4908-a712-1693adcdecd9",
        "cursor": {
          "ref": "16ee26a0-b66d-4566-a46d-a0fcea294c6e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b05737ac-7a49-4bcd-a533-686d01f05e91"
        },
        "item": {
          "id": "91d9555b-bfbe-4908-a712-1693adcdecd9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4677e02b-0938-49ee-8a23-b2bf6b91de2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d6944f-23ed-43b5-90c8-2eb8cdf550fc",
        "cursor": {
          "ref": "61566bb5-3837-433d-acfb-c6cb81e676e8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c3002865-73e4-449e-b597-792b6f2910ea"
        },
        "item": {
          "id": "a4d6944f-23ed-43b5-90c8-2eb8cdf550fc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a8cbe8f5-9aa1-45ec-97a3-c2bbc1c83cd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6e4b9-ec72-44e1-b107-3767308a77bd",
        "cursor": {
          "ref": "e5e1ed72-7ab7-4099-8f27-dfc8b742094f",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ffa4f53b-e6bd-48e4-8911-86320a0f38d0"
        },
        "item": {
          "id": "fcb6e4b9-ec72-44e1-b107-3767308a77bd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8dd9b448-9ee6-4a88-8c6a-0f04fd2dc2b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db25f3d-0721-4642-b93b-9d3b25a953fa",
        "cursor": {
          "ref": "2415dd9d-1639-45c9-af73-443f7e736a81",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a136ec7c-869d-42ca-ac01-c365c7a3c9ab"
        },
        "item": {
          "id": "4db25f3d-0721-4642-b93b-9d3b25a953fa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "dae638ae-2736-4e2d-ade9-f7f9f5150d67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4de56f-b3b2-4d31-acc5-99131b71b16b",
        "cursor": {
          "ref": "c705fdc4-b4e0-42e3-bf5b-34277df34d55",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9f0ece03-5ed6-47b0-801b-f63beb28219c"
        },
        "item": {
          "id": "fb4de56f-b3b2-4d31-acc5-99131b71b16b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b237447d-e5fd-42a4-8a78-4e135c999e92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8791bdc5-ff53-4c11-b8c4-2204ef3dc160",
        "cursor": {
          "ref": "c7e76a1d-9f08-4b34-9b93-c98d198e74fb",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7bcdc124-a61a-4cc6-b65e-a8d26cab0b30"
        },
        "item": {
          "id": "8791bdc5-ff53-4c11-b8c4-2204ef3dc160",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ec61435e-8932-46c3-b924-48cdbc30ad92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193ba249-ec5a-440f-a2f1-2c66c5d4d17b",
        "cursor": {
          "ref": "b5f5d854-e577-4b48-a99d-ab5f7ee3097e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f1dbac32-674a-4dff-880b-fe8e9fd7f665"
        },
        "item": {
          "id": "193ba249-ec5a-440f-a2f1-2c66c5d4d17b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "097b6545-87e9-47d4-ae8c-bd696146a6f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3fcc8e-b83a-4f79-b22c-4ac2786acbbe",
        "cursor": {
          "ref": "99a15a82-29f8-4dd2-95ec-c45e5bd89923",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a0a698b1-35d5-44e3-9227-a62edcf0fc79"
        },
        "item": {
          "id": "ab3fcc8e-b83a-4f79-b22c-4ac2786acbbe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1b9deda9-219f-4bd3-9fbb-e7319842fdff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031f6b7a-1b78-4e05-9a7a-7394bfbffacf",
        "cursor": {
          "ref": "f02124fa-28bf-4bd9-be5b-0ee99d7e3813",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e468733b-8ffe-4242-8491-58bb9ad54463"
        },
        "item": {
          "id": "031f6b7a-1b78-4e05-9a7a-7394bfbffacf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "15b16f69-7fe6-4e50-b1b4-1080c46d6ad6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8abe575-4623-4e8c-9f25-c7f8aef9ad55",
        "cursor": {
          "ref": "bdf77abe-c7f4-4787-9786-224757f7de76",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "df455170-36a2-4d16-9663-f5bf26af2050"
        },
        "item": {
          "id": "d8abe575-4623-4e8c-9f25-c7f8aef9ad55",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bff359dd-2d37-4be8-8f9c-fa8a162a8417",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e574ba8f-5e16-47e2-a8ea-7fee68d939de",
        "cursor": {
          "ref": "5b5d2717-2aed-414e-872f-d12b2c7817fd",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a0998eba-6e16-4370-b800-916d32662347"
        },
        "item": {
          "id": "e574ba8f-5e16-47e2-a8ea-7fee68d939de",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "779ee570-be7e-4d3d-a1a1-6090c7aaa493",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8750d4ae-e54f-4a47-80dd-b44af476f6fc",
        "cursor": {
          "ref": "1a679188-2628-4dae-bcb9-6553c3d827c7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "afd61087-7e37-4dba-a0cb-f6322752224b"
        },
        "item": {
          "id": "8750d4ae-e54f-4a47-80dd-b44af476f6fc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b9792866-8ca6-4f5f-8186-8949c582f1d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359e0041-17b3-4a93-8150-a102014efa80",
        "cursor": {
          "ref": "da254708-efbc-4157-b4df-417929ec2053",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f6382ef0-60b1-4d55-8999-1e4f7fe209aa"
        },
        "item": {
          "id": "359e0041-17b3-4a93-8150-a102014efa80",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ebe923e7-c687-4e21-baa4-243626c53b99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0e893f-7832-455a-bcf8-adc798b2b34b",
        "cursor": {
          "ref": "0835362b-d10e-40e8-ba9c-56db20b11e7f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "71dedb51-7967-4fea-ba19-7edd4f100c07"
        },
        "item": {
          "id": "9c0e893f-7832-455a-bcf8-adc798b2b34b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a21983d4-cb02-419a-af05-7332c4ab4236",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e686dc-30ad-4c80-b15e-bdf00a17c109",
        "cursor": {
          "ref": "335ee381-ae51-4039-8707-0756b70c0630",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7df2e915-a5c8-427a-a1e4-d2a50ca72ca1"
        },
        "item": {
          "id": "47e686dc-30ad-4c80-b15e-bdf00a17c109",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a9e7d2b1-ac47-4ff1-8b61-8902d976b1c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388a06a9-0274-452e-a144-e0f8868ad327",
        "cursor": {
          "ref": "7cf6d0c5-f7ed-4a26-a4fd-47e1bea062ce",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "28eb6c1b-01f2-4d54-be10-900e10ef9e0a"
        },
        "item": {
          "id": "388a06a9-0274-452e-a144-e0f8868ad327",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b39bf414-5c29-4b72-94a0-f47ff9117d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a82ea8e-ad17-4215-91c4-b4d5b646042f",
        "cursor": {
          "ref": "cf3a8be7-f89d-45d1-ad5e-da74873e1fac",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2e270772-5dcd-4c0d-ab21-e6c96b39fd72"
        },
        "item": {
          "id": "7a82ea8e-ad17-4215-91c4-b4d5b646042f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "24a3ab46-17c7-4ee4-971f-3e4d3b7424d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ce1100-b4e6-4915-88c3-ce41f00b7478",
        "cursor": {
          "ref": "cc03152a-7de1-454e-8dd1-f49b88b64a8e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f26f4c7e-ff9d-4eab-9c15-683608b1ed98"
        },
        "item": {
          "id": "53ce1100-b4e6-4915-88c3-ce41f00b7478",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "da67f1fd-1363-4486-881e-27d25838afeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8b5ea5-d213-4c93-b13a-b1bc4dc13e45",
        "cursor": {
          "ref": "530a73fb-4006-4dc3-9cfb-f6dbd419f6bf",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a0b5fae1-433d-44d1-b704-7b510e7a3f71"
        },
        "item": {
          "id": "2f8b5ea5-d213-4c93-b13a-b1bc4dc13e45",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "13b8c785-c916-4ca2-b2f3-6bd87330014c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4d9d80-9348-472b-ae42-aca258592165",
        "cursor": {
          "ref": "f9fa7622-a7bb-4b5e-9ea6-fb33d41ba3d9",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8efd4abb-eee3-4085-9ed1-4de00cc2c7bb"
        },
        "item": {
          "id": "3f4d9d80-9348-472b-ae42-aca258592165",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7d6b62ff-40e5-4876-b2c9-fbaf1cd23547",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c681ad-5216-405b-8e89-0f55fdea6ed7",
        "cursor": {
          "ref": "542cb483-30b4-46d0-aefd-f340ee9e9318",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "357acdcd-57e8-4a06-a04a-ca6ed78e8a7b"
        },
        "item": {
          "id": "87c681ad-5216-405b-8e89-0f55fdea6ed7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "37a110d1-e360-4b4c-9583-c8b9864682cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3175ff75-8464-4cb6-8abb-1e3df20bff9c",
        "cursor": {
          "ref": "1d870f5f-25a1-48c0-b6a4-3a3cd85ba6b4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8964b005-d20b-44c3-bef1-49fb32582592"
        },
        "item": {
          "id": "3175ff75-8464-4cb6-8abb-1e3df20bff9c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6654e265-dcd1-4b54-a454-0153ddc8c64b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54acfbbb-ece2-48f9-b0f0-59a47e010947",
        "cursor": {
          "ref": "d02680b0-c74a-4fd6-bf96-014fc21b301d",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "633aa200-d8aa-4788-b7c1-292e437ddd08"
        },
        "item": {
          "id": "54acfbbb-ece2-48f9-b0f0-59a47e010947",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9e35768d-0af5-4f3c-8933-6be0af756478",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0650c44-1ad4-4807-8fcd-b07575054ae4",
        "cursor": {
          "ref": "95df0f7f-dd19-456f-b9a7-ad351c3781a5",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "47bbb5dd-50dc-4338-b0c5-6fae31769d32"
        },
        "item": {
          "id": "f0650c44-1ad4-4807-8fcd-b07575054ae4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "338b7534-08ff-4c58-b775-aed3f876e35c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0930336f-7a6a-447a-87d7-b347453e0bc9",
        "cursor": {
          "ref": "d02daa5d-6c8d-45df-9c88-22d899ed6639",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9b22d06-e9ee-4023-ac16-45a88f95aecc"
        },
        "item": {
          "id": "0930336f-7a6a-447a-87d7-b347453e0bc9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "055ebbe3-943e-489c-a1ac-dfb50a0a9f40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e2f62d-639a-4f08-aca6-48d4dcb3f84d",
        "cursor": {
          "ref": "250daf1d-64ac-490d-be78-b28149c8dd40",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "767ccbc2-5469-4e10-84fc-462d7e07b594"
        },
        "item": {
          "id": "98e2f62d-639a-4f08-aca6-48d4dcb3f84d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "18748ca9-97fd-4e63-8fb0-adb3d7b96786",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1fd2a9-6151-46e6-b97e-23c2c8bd6f08",
        "cursor": {
          "ref": "d0e1a6b2-8842-4d79-a673-6323e2d46ca3",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f9de8239-cc70-45bf-b102-2e65aaaba591"
        },
        "item": {
          "id": "9b1fd2a9-6151-46e6-b97e-23c2c8bd6f08",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "558159d6-05f1-4f4d-aec7-a49cd3b8fb2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2621dc81-73ac-47ff-ba35-65a5fb0f6a88",
        "cursor": {
          "ref": "9088b9a1-220d-432c-98a4-73ac2bf6be3c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e96b1082-24e8-4c65-b060-785fbfeb5e76"
        },
        "item": {
          "id": "2621dc81-73ac-47ff-ba35-65a5fb0f6a88",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "322a77da-3917-40e4-8989-be33e0b590ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd34ef3-7f8c-44ae-870e-f29f09fbf414",
        "cursor": {
          "ref": "62c5bd3c-92f2-4662-a567-8326102cb797",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b59b79c6-dea1-4dfd-9a75-1ca4d0aaca55"
        },
        "item": {
          "id": "5fd34ef3-7f8c-44ae-870e-f29f09fbf414",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ffb997be-789e-4a16-a0df-b364a3b8a469",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573860ab-c00d-42ea-9adf-b3ccb7c5453d",
        "cursor": {
          "ref": "cb071a4f-df80-485a-9ff0-c4626e27fbfd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4827e9c1-8fc9-44c1-a58a-eeb081b66200"
        },
        "item": {
          "id": "573860ab-c00d-42ea-9adf-b3ccb7c5453d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2e0859da-7a26-4787-b630-06e65bf77a41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ad65e0-46e5-48fc-933f-5d45a0f03633",
        "cursor": {
          "ref": "f0d5cd42-3aa5-4695-a713-9fdbcb9c1d6e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "91a94a04-9343-40c9-a9c8-59a1e6a576f2"
        },
        "item": {
          "id": "e5ad65e0-46e5-48fc-933f-5d45a0f03633",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2284669b-bf3d-470e-91b9-4c0cb0cc2a2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6d0183-1592-46de-a8b2-b743fcb836db",
        "cursor": {
          "ref": "53dd8acd-d591-40ca-a065-4e4da843359a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "68b2e77c-7820-42f1-af45-4e6e2ce47f9c"
        },
        "item": {
          "id": "ee6d0183-1592-46de-a8b2-b743fcb836db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "46a06c83-7d43-4dc3-875a-db267eab7082",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314f5e8c-8463-4bbd-8f54-128a172d7813",
        "cursor": {
          "ref": "74898324-e4db-485d-bdd8-18df1a7416ee",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "31542e48-0e88-409e-b3c9-8cf2c1b1d7b9"
        },
        "item": {
          "id": "314f5e8c-8463-4bbd-8f54-128a172d7813",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b5cdef66-5942-4d37-8b3f-183a14546f02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaa698f-152e-45e0-ba16-3f97578137e8",
        "cursor": {
          "ref": "77c1d64c-a8cf-4a36-9cda-f7c80cfedb09",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "12efe3ee-3e71-44ec-9222-89e9aaaba4e8"
        },
        "item": {
          "id": "abaa698f-152e-45e0-ba16-3f97578137e8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4cd38b85-feec-481a-8649-503093ad49fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4c51e1-b15f-4af0-aff7-c7097cbf7c6c",
        "cursor": {
          "ref": "3b59f053-9ff1-4cb9-9b9a-2266a61d82bb",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "904dda89-4228-44ce-8baa-1b40747e0aa2"
        },
        "item": {
          "id": "8d4c51e1-b15f-4af0-aff7-c7097cbf7c6c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "162a6e38-28b9-4739-a614-9dd239eb9f01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6eba44-93c4-4314-9148-648cc3cd4e57",
        "cursor": {
          "ref": "94f2a937-0b04-4ade-94c9-a6f11ec95d72",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2bbc8f4f-ba5a-448e-b236-4881586842cb"
        },
        "item": {
          "id": "7f6eba44-93c4-4314-9148-648cc3cd4e57",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2f610034-9409-4293-a67d-c618425a32ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbbfb57-e6f4-4e4d-b3e8-40738f058a2b",
        "cursor": {
          "ref": "14e76d29-36a5-4c9e-a025-ef76dcd678dd",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9d14d466-68a4-434c-92e1-c4590c5ac8fc"
        },
        "item": {
          "id": "abbbfb57-e6f4-4e4d-b3e8-40738f058a2b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8d9ad88e-54d8-4ef1-9fda-3e27f9e916f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a404e40-d14e-4bb3-8042-11e21bd3973a",
        "cursor": {
          "ref": "ee166bbb-4a76-4772-b07b-fd01303c797a",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7a94b4db-ebf7-43bf-867e-700488b2e8a3"
        },
        "item": {
          "id": "3a404e40-d14e-4bb3-8042-11e21bd3973a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c50ca425-6251-4747-a587-2e008f78fe97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ea6670-2208-4467-89e9-9ff2c462e42d",
        "cursor": {
          "ref": "3e9742c4-ba33-4fb0-b9ce-7c9b64309802",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18c6e706-6e3b-4309-8b80-9d4ea1b47b98"
        },
        "item": {
          "id": "99ea6670-2208-4467-89e9-9ff2c462e42d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff2aacc0-2c78-427a-82cf-adf3b512a1b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f7af3f-7fac-4dba-8a04-99129e918841",
        "cursor": {
          "ref": "8603327d-f7b5-415b-bd1b-fcd8dbfb1292",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c1fac65a-da85-43d1-a302-249322461f02"
        },
        "item": {
          "id": "61f7af3f-7fac-4dba-8a04-99129e918841",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "46ea6320-eabf-436b-8375-9b9f63997907",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b51691f-d4a1-475c-a7b7-51458d8e0dd2",
        "cursor": {
          "ref": "cf6e2063-089c-4ae9-9d39-ccf13a7be423",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "491395d4-005e-44ef-b3df-b1b65c4e6524"
        },
        "item": {
          "id": "0b51691f-d4a1-475c-a7b7-51458d8e0dd2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3fa7b8a7-d59a-4815-b435-6f2a4666b544",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd79892-2ec9-4922-9ad4-173bc8bcd716",
        "cursor": {
          "ref": "e02ca6b1-e641-4a9f-a20f-49e7c216d4ea",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2d147ed7-ae66-40d5-9964-7595e4f0c16b"
        },
        "item": {
          "id": "8bd79892-2ec9-4922-9ad4-173bc8bcd716",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd54e053-4275-4d70-b234-c4d6906c0961",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535065e2-c641-44c8-a898-fd57c558cb1c",
        "cursor": {
          "ref": "651db19a-c44b-4527-9cad-9f879491d68a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e1d33a73-b79d-4815-a5c8-782fd4030252"
        },
        "item": {
          "id": "535065e2-c641-44c8-a898-fd57c558cb1c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9fcaa2d8-352c-4e6a-b0e3-5c27857bc30f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620c7481-829e-4819-83e7-55402caff772",
        "cursor": {
          "ref": "819f4673-8821-4d99-a14e-7cd036e28541",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3ecdc5dc-3e3f-45f9-8233-db6c666ea821"
        },
        "item": {
          "id": "620c7481-829e-4819-83e7-55402caff772",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8fb283d6-192a-4dc3-9004-9c31faa01e71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7837b15e-aafa-453b-8698-b8f4eb63745b",
        "cursor": {
          "ref": "8160fe21-383b-443a-8ced-bec565e09b8b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "293c88d0-b281-44d3-9029-928dc04509e9"
        },
        "item": {
          "id": "7837b15e-aafa-453b-8698-b8f4eb63745b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f9776360-df88-43c5-ac1f-cdae77860ab8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970b3bcc-89f6-4cf7-ae46-f56d69ac92c2",
        "cursor": {
          "ref": "2670a040-eaef-4ae6-8b2e-4cfa500bc337",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "521c0c97-a7f7-4bfb-adbd-62c56dc086c4"
        },
        "item": {
          "id": "970b3bcc-89f6-4cf7-ae46-f56d69ac92c2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ded73ebf-be49-49a5-9eec-f69f7ad598e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2a6c29-17c1-425f-bac4-00609ee1e39e",
        "cursor": {
          "ref": "20c43de4-9943-464a-8b31-0bce973947ca",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9e05280b-32c0-4fd9-9585-98f8daa5a000"
        },
        "item": {
          "id": "dd2a6c29-17c1-425f-bac4-00609ee1e39e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "76a45fd7-f7bd-42f9-9090-59aeee8cbab6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed796eb-1dc8-48e5-a20d-515f39736728",
        "cursor": {
          "ref": "b2ef64f9-e4a2-4c8f-98c7-c987e678c239",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ee8b5a0f-536a-41c3-80ac-bcd1fa3b3de0"
        },
        "item": {
          "id": "aed796eb-1dc8-48e5-a20d-515f39736728",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3a7c960e-80f7-49ec-b5eb-7126ca0393d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d34a0a-cfaf-4695-8efe-0e36f66a8299",
        "cursor": {
          "ref": "71a5bcdc-e7c0-4925-a152-c64331c4a338",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e86cc41b-f155-466f-aae7-8e6ef5c4a54c"
        },
        "item": {
          "id": "09d34a0a-cfaf-4695-8efe-0e36f66a8299",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5d61b097-eef8-4587-b92d-ab5f9d70feab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c476232-958e-480a-a11b-7ebd9dba1ff4",
        "cursor": {
          "ref": "05e9a6e8-181a-4d34-a9c8-881993092dcd",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "475ae555-7142-4828-a2b2-3c046acc8c8f"
        },
        "item": {
          "id": "0c476232-958e-480a-a11b-7ebd9dba1ff4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2244be6-5347-42c4-9a5b-ecdc100dc6b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b4072b-6cd5-4187-91e8-817c34f71805",
        "cursor": {
          "ref": "7c63a9ee-3705-4dff-8dea-91f897219989",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "310f5396-3693-4705-861c-2e3b6501e9ac"
        },
        "item": {
          "id": "66b4072b-6cd5-4187-91e8-817c34f71805",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "532e978b-0016-4fc0-aecd-da762116bbc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d699f2b-492c-463a-ae34-4a591b2ea55a",
        "cursor": {
          "ref": "a90e22c0-6f7c-4fd4-b488-a8512b931e23",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ce0a6d22-fcba-4d06-9dbe-ba779b3f6127"
        },
        "item": {
          "id": "6d699f2b-492c-463a-ae34-4a591b2ea55a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2251b088-08de-460b-8356-a68d4bb0530c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075480d0-4bd7-4b37-974b-c6f308d1f6e1",
        "cursor": {
          "ref": "996d01be-0141-4323-b240-b67ff88a25b9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0d9a7071-dd9b-4957-b630-c25c16b3f8e2"
        },
        "item": {
          "id": "075480d0-4bd7-4b37-974b-c6f308d1f6e1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "62a1e3df-fe2b-4e9d-a09d-89b74c6f69dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8258b3b3-536e-4f03-947c-4ec70db708e5",
        "cursor": {
          "ref": "d2773807-3660-4959-aa0f-a8605e007e17",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b1acd6e9-67c8-479c-8096-bb095ebaf8b8"
        },
        "item": {
          "id": "8258b3b3-536e-4f03-947c-4ec70db708e5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c0cc04e5-9439-4b1c-920f-4982ac7dc028",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "090dd3ca-7df0-4ee1-a2c4-86431c9f518b",
        "cursor": {
          "ref": "2d9f01ae-bce9-4292-8a8c-8e97dd791a07",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0ddf8f82-16f1-4667-9c1c-5e361ffd36b1"
        },
        "item": {
          "id": "090dd3ca-7df0-4ee1-a2c4-86431c9f518b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "019739a1-68d9-45b4-9202-e0db85fb19ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "029e8fc5-e615-4727-a65c-bfba8e7ca263",
        "cursor": {
          "ref": "2dd306f0-3b97-4e5e-b411-2929cd3b2893",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6ee3aeb1-9c28-4e05-b53e-3028d4d47106"
        },
        "item": {
          "id": "029e8fc5-e615-4727-a65c-bfba8e7ca263",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "43d77eb5-cdf0-437b-8357-9d1e5ed12086",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "bb7f8f9d-3ccb-499c-867a-fe7baf49ee1a",
        "cursor": {
          "ref": "cbb2abab-4e27-4596-a853-7fb6707a7ca8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f3f2d635-2a51-4dbf-8690-8a4ae972a794"
        },
        "item": {
          "id": "bb7f8f9d-3ccb-499c-867a-fe7baf49ee1a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "14662296-5338-44c0-aed0-ba55509bd576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7f8f9d-3ccb-499c-867a-fe7baf49ee1a",
        "cursor": {
          "ref": "cbb2abab-4e27-4596-a853-7fb6707a7ca8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f3f2d635-2a51-4dbf-8690-8a4ae972a794"
        },
        "item": {
          "id": "bb7f8f9d-3ccb-499c-867a-fe7baf49ee1a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "14662296-5338-44c0-aed0-ba55509bd576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1c0232-dfd9-448c-b7b2-0e456ea4698c",
        "cursor": {
          "ref": "37bd84d3-c964-4838-96cd-a4d66c63b7e6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4543d8ba-9e4d-473a-9036-afa1ca0ce892"
        },
        "item": {
          "id": "1a1c0232-dfd9-448c-b7b2-0e456ea4698c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eb952f76-3b51-4b36-bed5-94620c093b91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b1d95d-5d23-4a56-95eb-92d9e6d25371",
        "cursor": {
          "ref": "355a3155-ac4a-40dc-9aa1-46d7738fc9c4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fcc8a731-3193-496a-ad80-f0ff0142821b"
        },
        "item": {
          "id": "e5b1d95d-5d23-4a56-95eb-92d9e6d25371",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2b3eb2e6-29ee-48c2-ab5a-3215099ee75c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}