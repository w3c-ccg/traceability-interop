{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7be94589-cfd4-4473-809c-1f7526ae810a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "41c7c671-b8d3-49fb-a083-b3238e1b370b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d0a395e-5f68-45a8-a899-e9acc1b8f0eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a6013c18-a8db-472f-b3e8-077e2f2416ae"
                }
              }
            ]
          },
          {
            "id": "21a9bb58-70eb-4399-81df-8ed9ad9175b2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "801971e6-ad1b-4ac4-addb-51c9f0436909",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b8756860-ef76-402c-8f9a-66006d9e5c50"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e211fc2d-4e30-4eee-b55d-03745d5d6674",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "85e5685e-e54b-424c-9f7b-07c1184cee9c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62dd3049-dd2f-499d-873a-c1439784b377",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "410fcfae-738a-47c0-bac7-90ae6a382a17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7be09494-9736-4cc9-94d2-0f0798e504a7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6baef615-a3ad-48a8-a6f6-2fbfaa7b8ef4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d139dd69-8df6-4dbd-9c54-068d579a5656"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3b3685bb-e56a-439a-a92f-6a08ae35cd64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "caab149e-dae2-4d7d-85fb-16946b3d35a9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1f6056a-f20b-4de1-bf86-d5b47b18eb76",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3e6106a7-2da1-43ef-a8b9-118a087d9cdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04cc7981-f738-4514-98b4-c6482df16575",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cc7eac0-28a2-4559-9ef8-42ee6d528b59"
            }
          }
        ]
      },
      {
        "id": "b9d0d1c7-ba3a-47e8-9e20-838ed8664048",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "303a1486-7527-45c2-86de-10e8d002716f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15ce500b-7a11-4193-a072-656086a8024b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af066321-b516-429f-9413-ddc6a1bbbf37",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf51106-8e27-42f6-891e-b7fdaaec75ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2bd99c3-6570-49bb-a299-4288e267a6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679d366a-e67f-4f7f-95aa-3a032fe73edb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b84a5b-a918-43c2-8c9c-f64051a782f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "123d008b-fbf9-4e60-a05b-5ad659646109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3d0be9-33c3-4072-bc2b-4831af393afd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb01b5c2-4dde-44a1-b7f0-2dd7d1884047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e58cbfb0-9fb6-4813-9cb8-1be6dc694b84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d94822d0-7cf2-43a8-aa68-17d18b3b8f8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7dcb82e8-5aa5-4c89-afc3-0d56b673cc57",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613bf9c5-4a1f-44e6-a9b4-2bfe02d8438a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e7a643c-faf7-413d-977f-493a47d9f62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d60403-7b8c-465a-ab20-b6f8c94854dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57f75c1-39a0-4613-a0d4-393366a7d6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e4294a-0db3-4b4d-bc06-2a8862dc3b7f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee98f580-39cf-45be-a53c-10f9522cd67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b7f694d-ab74-44a3-8c48-aa6652b5b377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75a5825-5ff8-40aa-ab68-b54146d233b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8a940f9c-9ee9-4e80-a4dd-4ccd70cdf352"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "600d90c5-cdcb-4a77-94fc-339e127b90a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "757abf6f-823c-4ec4-9aab-32732ff928bf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef604fb3-544d-4155-9ec0-87d8d17770c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3e8b96cf-9390-46c2-ad8e-df5d0dff7fea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2351282a-9ee4-47d8-9f28-d8d15de0a912",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d93bda13-a3b4-4e8d-8049-dfdf9b182c91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60ff9cd3-56ea-41fd-bdc3-2b05e4c3aeca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fef48bee-74c7-4ca9-ade4-c41bd352b1a2"
            }
          }
        ]
      },
      {
        "id": "d2342e13-1882-4902-bf80-dbca933b636c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2846c025-3f04-4661-836c-b468a00ae189",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b18a2c25-da66-4dc6-b110-db696e16b1bd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8fa4f006-8935-4922-b807-248d303d9955",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d24f132-02d1-449f-9a3b-9fd06de24ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd5e398-2ca8-44c3-a7ca-6f8e2f15f65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d249e0-5673-48e0-be18-c1d9311668c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0823c94c-5636-484e-8712-9543cca154a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d71a6c4-d3b3-4c9c-93d1-e43183b4921d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c9b4fa-aa44-4a4e-93a7-a4044131612f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453dd7b1-463e-432b-b32d-16c17bf575a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d6c353-d51f-4647-af54-c32db3359b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e1a50b-35d6-4ed4-b683-6c4e0c2886a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3d39d7-36a0-49f9-8cba-9d7d709a59c7",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578a4aab-8b18-4138-858c-6a7052790ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d05ca4-5b42-4f69-b875-4af456cb022d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0598a1ed-6e0f-4852-a95b-3c49bbcfe713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1060a86-4d5a-4466-9f1d-ceacd4d2a10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac3cfb0-4c75-48cf-9f86-4261b344dc1b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be97544-0781-4a21-aca5-0a46c708c46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f565e25-3210-4b08-a524-ca3932668489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdc1c99-ebe1-4ebf-8ca6-95c7d0748822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "473141c0-3a27-43ed-bd9e-8058146c5754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d810e252-dcf8-439c-a235-02c72fae82f4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfb066d-b291-4d70-b12d-9506c6a64110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919314c5-60c9-48c2-b8be-2b9137721d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee72ebb1-00ba-4510-ae94-b4fd63b874c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a30fa732-98ab-4d63-9660-aec85e033378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd4ed7f-6921-4fc7-a66d-ba2b8345258f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fde179f-b619-442f-9445-256906812043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71b5485-fe2e-4b52-9829-4c5451d2ca2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2881b4e1-2f6c-4ede-b0a4-fa9ab925e586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f02e67db-7169-4d79-abdc-d02e900460f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33847af-b1d7-429c-867a-c39b35a4e524",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20b8e4f-f30b-4080-be6e-50a0830bdb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492213ca-104c-4a60-8b16-eaf24cbc0875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e786843d-7982-4710-808c-30a832804019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f67ba1e5-d98c-48a3-8ab1-9c2d8161c3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69ee41b-4692-4d49-9415-1e4961803c35",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62362c82-af0f-4eea-a09e-6498ad865acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b891d4-13dc-4a04-a457-bb9f4750e459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6daa7b81-f040-4263-a46c-3377c729b276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41bacfcc-c98d-40f1-a0f4-77fd70dcb39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3804fa5-6c87-4503-b55e-4649b7f13211",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1f224f-222c-4119-9593-5810d6fb5831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0af0e4-d82c-4724-8e2e-758f0ea186e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d3e86d-73b8-4462-b71c-0f7dd3c0d23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c104f552-a6b6-4663-85a9-2b5ff34a1355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3fc970-1bb2-4180-87a0-55e4d8bcf925",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1913d5-76e4-40c2-bded-a87028cd06a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fcc35c-adbc-43f4-bf00-21c1243cb62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4003a7-0d3a-4d52-83ec-6a8888260865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba597a6e-5125-41da-a7cc-70ef56e65314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150ed674-fb73-407a-a77f-183106394be1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c467e9d-e36f-462f-89ce-539005398b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdcbadf-0c29-4682-946b-63f80cdb2565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1303b3c-45e6-48b6-be54-e1e157917961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dff16aed-d2ce-4f76-a715-60aea48afd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa072fbd-5592-4e43-b579-6885e6589521",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b49021-a450-46bc-9c35-ea1d1feb9570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f823dd13-00b0-467d-9cb0-8a7d6c8980c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fecb5f-9190-4f73-ac6e-85cd5d32c31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28691b3b-89c2-48f1-aea5-6d48d38b216a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6681d95-4c9b-4e43-9daf-fc61c8fab254",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e646f0-c056-4809-96bf-824f205ec724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6152cc3a-88dd-4bd0-8bde-654ab25970df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb33f48-1d5a-45b2-b536-549ad06f3601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42ba2e0b-e28a-420f-97c5-90ebc9bff2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6345dc8e-b4a0-4cdc-927a-605816fc7d09",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c39705-f2b7-465b-bbab-21e5bd3cf144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2ab139-f8ff-4526-90af-81ba27e9e817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa2b78a-1225-444c-861d-b623fff7df16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "490e1e90-3ad7-4ed2-9801-1c76007d4d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212231f7-86f0-4167-8766-79b04759979a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de4d9fb-c176-436d-9e2b-1a020bf5966c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f523e7d-b4c3-4e63-ae3b-6261bc76bf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38194560-2c8a-4478-9ba1-229f5a2d651e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfbf3021-264c-4864-83b7-d82d1ff0ba1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f501cfb8-1569-4fc8-8049-b1f89ff2637e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852dd2d1-c924-4e93-aaf0-a1f9d7f7c7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648970c9-df2e-49ea-b9ad-141cd72bd375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de683b5-caff-485d-ad51-da158bb34548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e61bdd0e-0fa9-4538-96c1-54f8bc99a818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80279ab-9e77-4ebc-b43e-96e45507d6e5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654900da-000c-4892-8de1-e9ea470353fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7b7f61-e470-459c-8eff-023aefd709e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479d2852-cb1c-4bf1-94a4-9cd2e59b2311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbc639a6-b397-475b-9a1f-a9c7e2cd6b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bc9811-a637-488b-aa6b-27fa065b5e45",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dba13b-925d-4e0b-9f14-6c67509d19fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ef1b3a-87dc-4c67-8c97-7fd9a789b53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59912916-b270-440c-b226-0a9e557c949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9c351e5-0505-44c9-9844-fea60f29fea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5f299a-62bc-44e3-87b2-20b51929dccf",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539ffc08-9217-4098-a565-2d099d35bc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5917fb-defc-4d60-b4d4-b858eac0c934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2052e55-5b0e-4895-a955-b1b5b103b455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c16758f-e2cd-45ee-9229-8f7df0867e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3342ef69-04a7-4937-ad0d-adcebf0046e5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b31bdb7-a45b-43de-9759-afc8847adb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89e63de-1e54-436c-9817-5aecd17db680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e7b3cc-3f38-4859-889d-e1494c5c374f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3655878d-78fd-4ea4-b456-ab20b3668b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b510b7-fcd7-499e-aea8-905228cf9044",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82266d23-bd37-49f9-9d64-91c4198570c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddf5bca-76a5-40b9-ac74-f6cde8f57fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36a9ffb-4bf4-471f-ba25-b5c53a6c4e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97792271-1da4-49eb-b656-457d53b77176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b41eb6a-18e2-4826-8776-ccd2d96091e9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c4794e-80f8-4357-8c5f-b654abafe6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33226797-8148-4d93-8ae4-1e04e0519f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623b8e18-1dbc-4b28-9aa0-a863d515ae3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "592101f2-49a1-4cde-9b54-9a4aef0c9a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c28913-9a76-46ad-98de-164611c90044",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60dd11f-9475-438c-8367-78cd49738d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc66e51-02cd-4f19-b874-ba03469c20af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff30414-a913-4045-b18b-0f58501dc2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed21623d-c568-4b4a-a5f3-f024734c876f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc27256-74f1-44f4-a96c-2522b459c038",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435fd6b6-ead1-43b3-93db-b0304590465f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f81afe44-362c-49b3-9b18-9272e19e4ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c4c126-1e8c-4b95-8a32-297e8de8ba7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "377ec532-2739-4024-88ac-77692ec1126f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddae6de7-7754-421a-bbc5-b8e2c53d09a1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40b4100-0903-4dda-be1a-cd909f09a32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba94fd59-4a1f-43f2-b7c2-2f192586e859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f149332-16b2-4c2a-a1cf-77c36d8a85cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1cf8243-6eb5-4fab-a909-7086fa9efb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e58d74-ba4e-44d4-aa62-5f6ccdcb9817",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e9a233-af64-464f-a874-7ccfb555b996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95257162-590d-42db-9303-2e94fa55086c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf19ff37-2134-494c-b3a3-df582881fd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8deb0e81-bbaf-460b-8b57-5dd3d85c30ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21551702-82d3-46c5-ab53-cfa15dcd0a41",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ad03a3-ba21-49d9-a05b-1123dba34e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6689ceb9-2c77-4d66-8881-e1f064426a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f909f45c-56b4-49f3-8fe6-54b7b91bde7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cce0cdb-744d-4714-9ab4-aeb17ecac2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c09c12-f1d2-4bee-877b-2ee3e5a09738",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7222da2d-5d03-4d76-9d08-09859ad0dcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea6702c-96d4-4937-8ae8-d183864380c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2b80e6-c9f2-4b0c-9e80-96ed7cbad49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "923891d2-6689-446b-89ad-386e465eb869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6e18ce-7f08-4c39-93cd-fa5d617f5437",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060829d9-e3a0-4926-8261-dee3b0d42cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dba167-4154-493d-bad7-95b590ee469f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b335c7-7338-40e6-a4fb-dafe3639a294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81ab025-28fd-4a20-8b01-fa821b4d11c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c567ff4f-58c0-432c-8ca2-a64b870e855c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bb6b04-0649-440c-89a2-af93fb0b9461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd7f260-5838-4feb-a21f-07e9ac2efb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965ed817-65a0-4813-8b39-992e8173b1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7defeec-ada2-454f-ad6e-e0a3ae9ded58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace21b3c-c48d-4efc-ab18-f15ef56d0b6c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc356c0-0548-4da1-9dd6-c2db2bba4d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a5865e-17a4-497c-a961-bcdf30161f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53afade9-0a1a-45b7-83a8-2f333079ce49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d35b0d9-c2a1-49dd-ac4f-047d45efb3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f44214-6aca-486a-abb2-868b03e79ef5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9856bbf4-20cf-4817-b232-cd73ad662aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d448ae2-ef53-41b1-933e-d779700b1b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c694099-165c-4d54-bd51-25c096160f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "29c1cec3-dee9-49f3-aec5-298d3fb85a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217cfc5c-8419-4682-92c8-5a5ddbd31330",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a762bf4e-a819-42a9-a7b0-be6e1193c456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d43eb42-28b2-43b7-a8f0-81a638f8433e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd53be05-0933-4920-9a10-6694c411b8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "454ae406-79d1-4a41-adee-3509328c5dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec99800-56af-4455-a773-8f5064aed488",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2962b17a-dd03-45b9-a6c9-236e26d266b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef870cfc-0183-4492-bba4-d6bc61f28bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0106e3-00eb-4fea-b13c-b76954b819cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "008a3187-03cd-4e07-939b-c153f7559364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f84dd27-1601-44e3-ac43-2e41baea1984",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6941b24-b572-47bb-8326-616d54e7717e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0137ba-f2f9-472d-a78a-2331a07f58ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e3b479-ce5c-4abe-ba53-8bceb3166f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a75bbad-b78e-43fc-bd46-22fae22f81a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b991cb5-8488-473d-8dac-17b90e9426c1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635dfd9a-2fe0-46c3-83bf-af3d8573908d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450c1737-4bdc-4d47-9d2d-d8d4b83ba577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab93298-8d3e-42d7-b2dd-c9b274a4500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed8d7f0-e9ec-436d-96c8-50826a883fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8bf637-1cdc-4a9e-b635-d0232f606492",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c619666e-40d0-45bf-9c83-37cfc84e5ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48089ad-f11d-4000-a62a-9d70f51481ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607644f7-ced3-4a59-8ef1-c797e05501aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1a3c70-0627-4eeb-a653-9aaa43d95813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1eab30-9257-4bb3-8eac-aab8c01af3f9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd633423-fbd7-4b43-99a2-7af4677efea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3ced9ba-adaa-4435-8d7d-da83d5a0ed13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb389053-9b83-4f98-8446-e2d19204c6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aea576c2-5648-40da-a284-dfd2e4a7558b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e966181-e652-4731-b388-2b2fff69b1ec",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f355514-d603-4a55-868a-e591440ed09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31052dfe-209f-4690-a4c2-9452e5956983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59972a48-6854-4b81-9146-9567bb10cad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8c752a-cae1-4fa4-ad8d-094881cd1731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82b9416-da76-40de-8c3e-c1453997bf79",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27765a2a-33d0-40ae-9c26-df864572a30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d106e5f-713e-43fe-ad1e-45f9e15988ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129686f0-fe19-4e0e-a5ee-4c3115e6b4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e6b0ac-7ae6-4a44-9324-635e080d0467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1d619e-3a33-4c7b-aa4c-48840c15a4ad",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8da5300-f20a-4788-aab6-843845f2fea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59af9f8f-1c55-4a58-a166-da83d7575f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4390603f-e308-4d33-9381-d91368d9e4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fab1b19-e4b9-4038-9771-7b598a4ac6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4eb012-720c-4cac-9535-f96ce3510287",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10cf29c-c50d-42be-94ce-a9f303b5f619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba563c67-17a0-4c58-9715-f4ee48373fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd60efd-44bd-45e1-bebc-88727bbcd582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "780eb5e1-7453-41ff-98ab-57020e758491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc96df3-bc99-4aa9-b710-241061757729",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7477ddda-92e3-4ef4-a853-64f6ced6f643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca46d7d-6809-440f-bad5-800a45f170af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df5277d-c2fe-44d2-987d-c656e2805e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "67ec2a98-882d-487f-b505-455d6986f8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c60175a-7313-4e45-97ea-b8343b800cd0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61d95b8-245d-44c5-94b8-20e00ec400bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18a0a72-689e-4860-9a54-b7dd1b57d472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fc3edc-c28e-46a3-8c5c-3098fd620ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fc22473c-d831-40e2-8e5d-8194ea1e5880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44f7422-f850-46c7-86da-03d0eee2962e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7797f9-0d19-4b0b-b03e-1addc3ea8181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b95e5b-64d7-4d92-8a5e-c4fcdceca714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d58508-63e4-4acd-bbd6-29bdbf5f1e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d18d80-74c4-4030-862f-45da35ba2437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1123938-5797-4eb4-814e-7c938a7f8a2c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ec4ea4-b3a7-47ca-8dc9-ddc498826911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e124501b-9b57-4ac9-98aa-1314af754076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcfc310-fdc1-4f99-b2c1-89c5c916d431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "af1a3f38-c26d-41bb-8075-6b6e63433297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e675036d-d3b2-419d-94a3-5d142623555b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec069191-71a5-40e1-a54c-eb1cd894387b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81425035-a0e4-4d3c-a3f0-6c5f320a891d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd2d86c-745c-42fa-98d9-69b63ea87c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57b3ed3-ca59-4457-b71f-303f4684ef31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25801210-9618-4b6c-9477-4826ba791cd5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8ce270-99f6-4b80-a6b1-921c95640bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9f11c0-76f3-4ffe-abc1-05f77c95b88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c2b08c-8c75-4455-9a6d-ce39071c41dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2c91b9-863d-4a9a-854f-07f1b0a92e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e72ea1-9e7d-4c42-ac0a-1b735ff0d54e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9b52ad-dd17-4aec-bc7d-cd30d3533d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482d50c0-cd39-4d65-aee4-1aaebca0a20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395f4b64-7b1d-4325-9ecc-ad2c1626e65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9296394-f403-4f66-8224-615733577c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d706910a-29b3-4151-87a3-3fe7e6f4bee0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2da844e-0b40-473e-a217-1f0f41f27e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0d1de3-49d6-4f26-ae62-2a5859f32e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3818ca8b-e164-49fe-bdfd-b70ec4b2b004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d85407-ceba-44db-be4e-d4b1bb14ab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be434a56-2413-46ea-9dcf-6bb5a58802ca",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd87c8e-3ab5-491b-95db-f6f8700d4d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34033056-0c3e-4b22-a6e5-70a0bbc9ac83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddb3058-a8fb-4d7b-9be9-7c1eaefa96f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7d67a2-4059-4b70-af54-590faf66c15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536fb23f-44d9-4c60-88fb-232988c9855f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d04cf7a-c643-48c4-98e9-56a0d7abb5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4881801-6400-4ef2-812a-a19c3dd2e4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0865a15-af46-4ca5-8ec9-46439d77c182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed87f912-2f95-47a2-8286-4aba8414bf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44aeeee6-0a67-4653-9a0b-d7cc3716aacd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef9bbbf-8beb-4700-94aa-1e7011c1f67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd90526-251c-4544-adc8-0b954af8b570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddee44b-eb8b-40e8-87e6-b1deb2e7850c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6981a0be-8457-45c9-969c-c08fd357da34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01b6304-109f-46c1-9721-97b01092f170",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aa8bfc-111b-4d87-b66f-6bfa2adc377f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0222e52-9821-4c0d-b19e-55e44a0145c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bc92e7-8644-42e3-a302-6a9a931c92bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d7f0f3-67e3-4c25-8049-31cfc0da6d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa730fe-abd7-41ad-a31b-ece8373a7916",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d81667-549c-4f05-b0ca-91ffce2ecdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97807158-320a-4db1-9b2e-7b42ddca1ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b60c63-d5f3-4217-8261-a2ca79c7ea70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a76362-16de-4225-ac14-35f8758a7105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c7e50d-c2b2-4584-a902-ae4fcfeb18f0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0162a5-547c-47f6-818f-e66aeaca5fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec08256c-d6c1-4d5a-9eba-9ef141594435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4334319a-a9f1-40b0-b50f-d3597c110f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21b97ae9-3882-4572-acf6-3c9a60861670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c54d53-1deb-4d19-a300-8cb72be08c8b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7f0e35-cd73-4be3-9435-e9ef44ee5379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5fd026-a4a2-4079-a5ed-7bf1a74a7529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246f4dd0-30f3-4c30-ae1c-9711c3335982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "376bebaf-e8ae-4f83-a30a-3470d517c46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6e7b6e-9475-435c-a196-3f82ab8aae0b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9aab6a-6289-4819-a394-227af032d2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39628f8c-cca7-4362-b396-81d979d44749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d84f71e-c85b-4c9f-8596-62a080d5462a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f0545cd3-6a96-4304-96f7-ddf95b77dd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86f2e0a-7135-4053-9ca3-1087ba456bd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a93933c-e569-4107-8b0b-49d2d791630f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7ab1a9-c8d5-48b4-9ce5-a8376f78d1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d199987e-9910-4b34-b3a2-aba11b19360c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ada4c20b-c8b2-4a53-b5e9-acebb7cd21ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9f6b02-644f-476a-a71f-6f01f206b896",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2841e2c2-6137-471c-a0af-e23e803b168a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd9b9f8-29db-499b-a0ea-f4873d962a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff9a5fc-4b40-4a70-a43c-d246df22feab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b28aad3-8a2a-4ef7-9f6c-2565fb5541d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53983c32-e190-4944-b91c-282bffff76a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5087e1-ce83-4b3b-9a9f-efbada217f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c97a61c-24da-42d3-982b-96cb2df57b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a08158-0dd2-4dd2-aa50-f96b0d2c610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1614b64e-9866-47f8-9252-e5909f97bb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9b499f-a968-4f7c-8761-e419fe0c1c24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092b61f0-b9e3-4f05-b21e-11103fe4fdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78863910-e1d6-44d4-99d2-e4ff3830fcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3a2f99-f52b-419f-96e4-1b38965a6023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3ac316-107f-404d-81c3-d918f15547b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8199c01e-081c-4d5d-8574-6701f9662efb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ee3f76-3d38-43de-ba2f-f6822dded669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded57843-0618-436f-b7a3-28c1bf67a5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b9212c-18e5-47bb-afce-1a4cf4ec2900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c12ca7a8-1219-4828-9506-1f29f632c4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821af91b-d70d-40ea-ac8d-3d3ee71e9ae9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22da33d8-3d38-4e21-96df-1c2d9a525515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4640542-fc16-46a7-8d86-d8d9606781c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131aec9b-dad6-42fb-8010-e9629c2a9925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdca6bb-a0c2-45e4-a5ce-510fae4fb0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab26989-0109-410d-b8f7-776608f08b2d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d905ee45-624c-4222-b0d8-4e0e2c085da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735a102a-3196-4669-914a-1fcc4ce6cd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a281498-29e9-45fb-bdae-10713e683460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0f3ee6-20a4-41db-a52d-c4a4e87dfcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e19546-57c5-4dfe-bd75-087a125d273e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659800d7-e508-47fe-9cf2-def19f49cf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ab57bc-1fde-4ccd-8c7f-3fbb3dfba66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f8c17a-0dcd-4057-99bf-3faee504c9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7efada-7985-4268-953e-f4fdaeb1fe92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8de232a-9fbd-41bf-a52d-34c8e7fd49e0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b731f71b-f6c5-4a50-aaba-710fa49a1a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d6189c-251f-4976-b785-9f7409597e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485deb8c-036d-4a4b-bb5e-a161c85e7c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fad644c-d0c1-4122-b4b8-6fd288a88ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55895dcb-dfb2-4ad8-a30b-ca99f0c4bd58",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d63bd8-a892-43cf-b349-85975730375c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c36cdb8-df70-4227-87ec-603ec4f327c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023cfeda-6a02-4787-a0cc-b0d18122f650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94175247-e8da-4413-9ab7-d6df5f7bb497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30cf917-5f12-4669-be7e-c54c120fdf7f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c805a1-9604-4f04-9ec1-c8180c996316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4adf98cc-ee09-4992-b89b-4d9cdef0a3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f418f858-6cae-44ad-b576-3217a83bdd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a55c5e2-2517-499c-a047-17629bd780e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ca6569-36e2-495e-b68c-bf5261cdf1df",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f62878e-3f36-46dd-ba50-c60cfa5cfba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15db62f5-62cf-4c8d-82c8-a78ff4af793d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4de39c2-415a-4783-bba7-3641f74a1e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "feb79a23-ac28-4bfc-8915-7a311140347b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f27f073-afcf-4398-b002-3a25bf9321eb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dde7c8-44be-4f0e-90d0-5d58e132e65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ada7194-4800-422d-a08a-b5e297646cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35b4f12-129a-478d-b881-bebcac8c3e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "92c6e668-e03f-43b6-acdf-5648891ecfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5b484e-2869-46ba-99a4-ab4c41e8228a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8130919e-c2e1-40fd-a634-10e9da1aaad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8b89d8-fa20-40df-83c4-7573a19e6fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4feb6fbf-82bf-4a75-9734-204e23210b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "162702b8-9472-40df-9af8-f3b85f66c95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0867f648-52b8-42e8-8bcc-08b8f1ecd14e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5a8e54-833d-425e-862d-092082385534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2cd65f0-2106-4724-88be-b5cc5adfc0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622035fe-5460-4210-a2b0-856f6380eb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a73f075-4676-4be7-9d6c-5fa9f7036103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776e9dd0-2791-4f96-aef9-2f5586bb7829",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ce17df-fa8d-42e8-8c7e-62a76e7e75a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bc3a61-48bb-4c5f-8f75-9c21ae70787a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d29a3b-0b14-4032-bf49-40db865e0050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "919c553d-5efb-42e8-85df-de11d6cb17ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527cf62d-561a-4a4f-b125-53acccdcc999",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462bb975-ee70-4494-b8ef-7617e2f08ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b91d393-68d0-46c5-b051-4d05e42b10b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9555f5d9-8678-4b82-b88b-26a63d8b7a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16acb891-83d9-42b5-9e8e-a2abe76c6f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe100ca-9c74-429b-8ea7-e647e0aab07e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b226b11-a5b2-4174-890c-d4681a92a286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a32baf-7877-473b-ad59-eccb3041eb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed52d5c-1fb8-4aeb-a1e1-4da7d4a4ca35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f231b04-07af-463a-a2d5-70c8d04a6563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f4e264-6622-40a0-bce1-2b33d0d99494",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca271f0-c874-48bb-89e1-9759d777218c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b425739c-623a-4bd5-b2c6-698b41fa44d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97a3d57-d101-4be3-8175-e9c657581356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d86e2ce-bac6-41f7-b135-c9f5086b8103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc9ba5b-416d-4559-af5d-74ed1cdaddae",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5145cfb-9a2e-4ebc-95ef-f093d0fbc259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67c1b29-7320-4c50-95f9-92ea7df865f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dabe36d-292f-4e8e-ad4a-4d0167044551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "887af0d2-d629-41a0-96a7-2dc5415a19af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbe60a7-8cdb-48e9-b342-4c90703bb4fc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21ce332-885a-488b-973a-0b1021f91ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103049c5-c3e4-46c3-8ea8-67c4a6dea281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75f87a0-190b-42f0-987f-4a72773bab5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd219e1f-8825-4235-a0cf-c3a56a5528b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a76c6b-e95d-4f1b-b52c-50feebe8eae3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca866bb-5ce3-4b3e-a566-d98136406056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d2106e-3149-40c8-8a51-9297cffc916b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213f396d-285d-4ef1-90e2-475e1635beb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa6d2b8-c90e-4d7a-a995-f460d3377f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc26aa99-434f-4f22-8177-ad4b7fff4738",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53aa40e1-ace8-45e9-9642-c7346559085a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63916099-8838-4529-be6e-621b859ee956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662c7f4c-9ff4-4ade-b9aa-c6d16bb11c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eadc197-290e-431e-a79a-3b094970a9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d938c6b-acbd-48a6-a755-d670cd70b83f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85b9b75-d575-44b2-a2f8-ac75377cd6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25133f2d-59ef-419a-8119-bf3c1a669547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283445dd-77f7-4d9e-8e2c-897cac362a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90c0b437-555d-4265-beee-db4846aa5b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c407d952-1fa2-4c47-a502-6204819351cb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f690d6-d63c-47f6-862d-c6e5962fd00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79d9006-d54a-440b-90a6-9b0ef9ecae3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb2f418-2da3-480b-a219-4988b84681ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f27daf-2cf5-4f7f-8350-8437d7a1bc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0049a56e-2ca9-440b-930b-f8204f4df5b5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eed3af9-a32b-4c22-b3ce-e6e05211abfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d421ee07-2fcf-4998-8004-693653cd5f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec96354d-efe4-4507-83fa-f44771fec95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cff498d-0264-4a59-93cb-8ee793c135b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19194cbc-c8c9-4531-9892-8c9146c6f770",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add936b1-4903-4b76-b899-7a85309ac266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e0bdc8-e1bc-4194-8c2a-d67e5ace6b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd943b19-6866-427c-8d31-5b624eb9897f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8adaac-a720-4db0-b317-f10bb200e156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4444d6c6-6c9e-4174-a590-dac7ce2d2213",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fc88c2-5f8d-4f38-aa86-9c7c5468edc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77935d05-0f97-47f3-9e63-52202a197095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f1dd6c-f1e1-410c-bff8-8869daef7329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eca0499b-9d6b-48f9-9d9a-b69fbe457067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645fa379-f13c-4fc2-a469-1754f4d478f3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cecec1-2d7e-4137-b987-e53a130b6fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdb4761-c8da-4a47-afa8-b8242ea79a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b40d2b-a885-4595-b318-31d75def6d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "979b5881-b9d8-4100-9e91-25b628021ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b814a2c7-a460-4484-b4a2-8739ca63cc48",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eabec22-1ddf-4e7d-b747-39cc3887a553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ab598d-0585-4a93-a612-6804d2bcac62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e321c353-bccf-433f-af59-e74b59ad8fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eedb590-1512-4a1b-9f1b-fdaeea535c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f617a9-e96d-4f3f-83b5-7ec69a24dc8c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9627209c-58ee-432c-8a19-1336ec2d889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2804a624-d5d9-4188-8649-b8a42fe527bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2571ee-c13e-49a2-a795-494ac51e676b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06856eca-8727-434e-959f-2ef5dc13b891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee431c8-eb31-4b2b-8530-03737a9c4840",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b08dc37-a3eb-4519-a419-54c5ee384bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1dbd28-406a-4c49-8a5e-0696f29489fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fdb6f2-be6c-4ce1-a0d3-ef94e216a30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd9c0c4-8ae1-4efc-b6c0-5a7218795f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de28fda-30d7-4d15-b0b4-53b6d138d1d8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fa13a7-40df-421b-908b-02aca9f83dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d007fa0-5cbc-4efb-9e97-69f3d8c75047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16f4c4d-8233-4a35-b6ab-064971e01d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a577b647-1147-4ab2-aebc-8cf7dd95a3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05b5351-3e9b-4168-9364-11596ceadde5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551c76ac-65f3-43ef-9e9e-3d0616ed305f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59154aff-9286-4315-8a08-280198c0e70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd1d32c-4465-454c-9d2b-e62bd67c047c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd40bb7-c5c8-48e3-8a55-0b42e917b4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c33a12e-66c1-4034-8e63-e66572bec043",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679a4274-a4ed-4f84-9ff3-7dba7d5ccdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f72aa16-03c9-493e-958a-e84a85a61f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ba67f0-f2bf-43bf-86da-d9310fe36355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "85a4c9b9-8363-461f-9bf2-1098ad7ee59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e72d32b-ea69-4933-8cbb-a5f8b71b2b7f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1022c1-f8b2-4c88-9ade-a3f809c0084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5da17326-c29b-4d86-a7c7-af2821767c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b845435-613f-4503-8787-6260494080f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "29f7059c-1b29-499f-b61d-21779ca6269e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d262380-0fab-43a5-bbce-ccdccf06ff87",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bb0261c-a9a0-4372-8568-8abf9bb49a71",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bef858-287f-4bad-a778-6a323119deab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4623376-a797-4899-b204-be7b231f2617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919b4097-1280-47e0-8275-530e3c6084ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fe879fec-f9fc-476b-85ea-8bb055d6da86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d685db43-f243-4c78-97d5-9d17b0e1124b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a7a046-b54a-4733-8605-772f1537d157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbf536da-041e-4c9e-8527-8d0db5ea5c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751c1942-99b4-480c-bd27-bbeec8e0ec8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3c577ac1-10fb-4e79-bb68-8f2a7e2c0cb6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcb430db-7199-4680-85a4-5686b2734707",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f45b49d5-4203-435d-8a31-60091908d912"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fcfaaf3-0b5e-4081-8e08-31ffff575f68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c431a18a-8204-408a-8bbb-e66809a9911e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "961fec7d-e2f9-4509-8523-ce3bbe5067e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3433938e-8de6-46cd-a7bb-41787a3b3f84"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef8883d6-8be3-4a3d-b5f2-d07fdc8c99d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f709b67-edf3-4729-820d-a887f0031d48"
                }
              }
            ]
          },
          {
            "id": "ceec37e7-2089-4a36-9b6f-2e7338aaced5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d039a877-6571-4a76-9bc8-79d9fc34e317",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1605703d-54e4-4963-b99e-148672f3559e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b64afd02-28e2-45ce-8d4b-cd5281e958e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f216761f-09c6-4e17-a9b3-6c727e25c080",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "342e88e1-6df2-451d-baa4-469a545f9151"
                    }
                  }
                ]
              },
              {
                "id": "80583d8f-4f9f-41ec-bb0d-ebb5d8901e98",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "532db314-e997-4cff-a8b4-b5c2a274e1d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad63b9a1-0e34-47ba-9e06-3a568ad7d979"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9b6121c-19aa-4add-ad92-18aea87f12a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87bd1570-9d1c-43f4-a303-62eefc27f6db"
                    }
                  }
                ]
              },
              {
                "id": "914babda-ec3b-49c3-8a9c-46ec395c1221",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a2609a3-8827-4a48-8398-51c0c9aea5e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc00cc3e-fd55-424a-8a43-f916880301d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fc5b8ab-8583-43c9-b300-9183ff3be40d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c8c24da2-fd58-40ba-aab2-132a30dd2213"
                    }
                  }
                ]
              },
              {
                "id": "50c34d21-d55a-4064-93e2-fc15e5851c45",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3b0f12e-693a-4891-8818-0759002ffb8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35037bb0-63bf-42f5-ba24-75aa1ef65047"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c6c9287-2049-4f66-93d0-3f668e6e9c3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3ffc94bb-fcd5-4bbb-8c09-e117e0f0ecd9"
                    }
                  }
                ]
              },
              {
                "id": "b5ab46cf-57ed-4c48-9bf9-55c9810a93c2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d4ab0be-787e-40d5-ad6d-be9f73dc4d30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "733266b2-6494-493c-be2d-ab0806026f8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f14ec03-ec46-4068-b94e-9532732180bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a73dc41-110b-4d6c-8575-151ba525fe31"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a61ea2e-c0db-43a1-9e1e-42043d1afc0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "645db963-52d5-4c32-a167-fac3d5073827"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0883ecf8-ca24-4a12-bed9-0eae89435131",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05442b7a-a432-45c7-b70c-7958162d96f3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88109286-2130-428b-9e0d-79f0b1d4c4b5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "73f4184e-e1f7-4757-884d-8b4730cf1d22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c33bef5-4d72-4471-aebb-bcc460722516",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0457470f-ad6c-4e39-b7b1-ae6932fa04ad"
            }
          }
        ]
      },
      {
        "id": "644fff99-7efb-4523-987a-ac8495efc5f6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "89982f0c-d8c9-4eaa-84e7-0e766af9fbc3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1959c532-ee9c-49f9-bcc8-9ca6d5fe1cf2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca0b71cc-9e55-45d6-af21-648fcdfabbbb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cecb9d-e9f2-4200-952b-3678000112bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b3c1f2-066a-416a-8c38-0d1395f5d569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad19f9f-ce3f-45ad-9c14-bf692c9502d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e768c951-56fd-49bb-8650-cc4802ac3069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb947f1-cf22-47f7-8bea-07054d64bb3e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c5a3de-9984-4e37-acce-9cb7bbeeb95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae46cd0-28f8-450c-8d20-923cc9283186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a468d770-4d15-44af-8f74-531fa6a204fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70a2946-707f-474f-a874-23a2c7686908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f51b39-b4c4-48e9-a391-ae1e34e99d44",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed53c67-ca94-46e7-a70b-24953a70ff8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764c3b4d-71cb-44b3-be08-33048222766f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5394fcf-a0de-4f21-bd56-85af71914640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b72957e-ec66-4120-bead-f00fb99156b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad9f9fe-1579-44ba-95ae-a3fed9e87dd6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adef55ac-e9d7-41f2-8855-8112e5ec5e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae887948-1f12-4bc4-9b53-d4e6eb674a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4e301b-b7b5-4b6d-a250-56e9285d1fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dafa3b0-5897-40b7-8d5a-b183e6257ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8e5003-3140-486c-bb96-6261907c4ea9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3062b4-28b3-4c8c-aed7-cbd9f3a7f463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75759278-68dd-4237-b514-1ce4ed7a25fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fd07ef-e551-4732-9257-826ce55b6322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53078b06-8697-49ce-9924-410de1028966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f66ade-c6ca-4355-b331-2ac2b6ae532f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0c1f03-1332-4910-a5e9-965134428788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae288f61-6b3d-4141-bb01-32bc9e39af18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529d16d3-9048-4835-a02a-3e7abb73c270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c795ca8e-984b-4304-8626-5f7ceeb74988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88fa6c0-6466-4064-86a9-73bedb3e9842",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eebaf06-674a-43d6-9e23-2faeebe9ac6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d9b262-0937-4e36-8477-80507990d037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d270d44f-d2cc-4b58-85ed-e88dfcf599c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5559c3fb-0b28-4356-a1cc-7e0a11acd24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c147d7c-eecf-47b6-9974-4e975dc5ebce",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de7fe35-349a-46a6-bf1b-b4ef6a8aada7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7a94ea-e8e4-4de7-939b-7196806b8c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192795fa-0c35-4434-b956-3096b428ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5882fd4e-8d44-4ba6-95ed-1757836ecf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82355967-5f24-48b3-ab65-7a4e12e0c669",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cf2dd1-5566-4cf1-a29a-972e615c1982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856b642d-0e24-4c3d-9d27-28b1db4f77a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20092a4-ec5c-4e33-8cc9-f2e9cef9b75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1950f444-d0d8-40f4-b722-4f251978c1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71c8f49-a87a-4846-ae3e-31476d990c5f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55d9710-b1e4-40e8-90d7-3e31fc3b35b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e48d78-27d4-4b56-9caf-4248919a5e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e188be9-3196-473d-9e83-0d77c791045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7410567d-518f-4002-9483-a53b3853eee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b79f03b-05b9-4df9-955e-454fc500bc43",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fa5569-7994-49ad-b8d7-3d18471bf1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a864fa8-4b21-4517-892a-327344af7a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34921f5e-eb3a-4edd-91dc-922bd1d5279d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bc79af7a-d7b4-4fd3-9444-53001357eaae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428a7c19-8a02-464e-9945-24b42a93178d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b2073d-0fb1-4086-a474-1395fbc048fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffac4f7-23d6-4ed4-b157-5f2839834c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213516bd-acc6-4b08-8cb2-c2bd88e42886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66c033ef-c627-49df-9f9f-2bf56fdd1442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648ac39d-6088-48a6-9203-4a49f43bd2ee",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfc82cb-8d23-41c5-b4c2-b98a2c71549a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fb919f-6892-4bb9-b1d8-254b3132f780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c688dd82-3f7a-43aa-a698-25e266f1c793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d925dad0-2d29-4a29-84a6-5ed4a9879fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea3a0be-dfd2-461e-874b-ff498abca7ce",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c297194-5509-47de-bae9-4350defaced9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe394f90-b985-4e79-ba97-7a24c00788a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b50160e-345d-4dff-a6d3-35b35c560cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee06a18-4165-4360-8a3e-43dcd82a2306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713c4081-36c7-42e5-9f90-95b68666fbf5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8e21e1-8c5c-4513-a1b2-52772faa4139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a4c522-e38d-4337-8bb6-1e66a9da6079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181a33df-8cd4-4827-8fe6-31032ae22d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d83552e-d8a8-4cea-bf8f-368062741f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576629ef-d46c-49c0-9902-03dc5ff926f9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15be980-727d-4a77-a0e3-fba200fdc5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc80df6f-9230-48ed-8cc0-4f980313bd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0feb1f1d-b986-48c0-9640-5aa8a63cd149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1db19d3d-39d4-4cc4-848a-addd2e2a980a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da172dc3-2f10-4186-a2f2-1de0204a0f31",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b956965-b524-46bb-9f4c-8e08e64ad505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022db9a0-abb4-48fa-b2d1-e0d0f07c3c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f64102d-ac51-4ceb-aed1-4a4a60c3b2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f736e2c4-3a66-447c-80ed-224cea6723a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85deb8ab-9ef5-4adb-906a-4cb1d2138f41",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f930c9-2a57-480c-9266-bd5431a09ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e90232-9e49-4aac-8aaa-415604a72b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526d30d6-22ef-4371-a07a-23b3c4d67654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b060c2cf-fd30-4f59-819f-e7531f305611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3054be6e-a983-4fba-ae1b-dfde7cab9540",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fed986-f1b4-4422-aa7f-2e37d362f7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a071805d-bc0e-41a1-8a74-f4503d519529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba702cd-7a0a-4a68-86ec-c3ad67d51219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6966249f-742b-48c4-8a71-814a9bea13bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8089ff77-5800-42e2-b968-5f3eb1d8056d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4194eebe-dacf-4b9c-8b8d-b8123e698853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67abb94b-5fd9-45e5-830b-243ff029aef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6495fe-b491-4d4b-b25f-0205f3fce790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94735a56-62b5-474f-8099-bad8ce0231cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23372da-a304-4967-bedb-c0259a99c3a5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288e03cb-7617-4b2b-9540-2910cecbdda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1e2ac7-f94a-493b-89b1-24f5a230dfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d81a9d0-a8de-4244-8d99-a3528872da64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a22986-42e1-4795-8234-cf48ec8d8930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34ab6ca-c709-41b3-8c58-0c4dc823f90a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f786d831-f725-4385-b490-df9192ac2f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad9f636-56a5-4fb9-b3d0-399654fcb925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34327d2-f510-4fff-8f77-ec61e84353f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce79481-07d1-4f63-b51a-2446adfafada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d7df7d-9035-43d5-a363-488169918444",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a99b318-6e39-41de-84a4-48caa0dfbcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff259311-f211-4af3-aa3c-0ae8228af448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ef1d15-da3b-4a5a-a5ee-19970c183e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76256153-a86d-4001-b38a-c5e6616987b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8ae50f-44ba-455c-b45b-cdc849eaebf1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec18472-0494-4f61-8420-5520d99eea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e730dc41-5d24-478d-8d2b-bc585a8ba9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da50db1-e3e3-4f55-88c9-f2c39575d18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea219867-d6f5-4524-b05b-91045d38687c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dd4f30-6960-4443-beb5-21a0ea9c66b5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a3b301-884d-43db-9b31-5d7deeb79305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5273d4-bcea-466f-a8ff-15f2808f1432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a6b13b-d6b4-490c-9e00-7653db580955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02a7494f-a044-46f9-958e-35ccb9546e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb2ee97-0a99-4884-849c-13c112b324ff",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842603ef-d7e2-4475-874e-5029ed16f910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716f3cbe-ed7b-40e3-95c2-b40f017f13b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199c340a-0e4e-4f2b-a7ce-b739020500d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0822a8b-1b70-4ad0-b788-17b065f030c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebb33a1-237b-4f92-a7e6-d09487549e41",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a36a1fc-636a-4430-bbbc-2ca07a7cbbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dce2f0a-ec49-4645-9679-8980213578a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b33ab04-e1ce-4ea2-87d3-eda7de7673df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc54333-acc6-4d99-8375-70f8eaea459c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3b42ff-84cd-43a4-9b32-93c041f5e51b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8004a7-a68e-4631-8977-28f92144bda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2652727-3ea0-4608-a479-61b3ed1f2e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c04acb2-3000-466d-b7da-0c6d7680da60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a57de93-fd92-4b07-ae95-e21c9a9963ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c394f38f-0fa3-4c9c-aced-8ee9d7120349",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01e7c61-e489-4291-9da7-88a6b2cec1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa55959-0fe6-4af1-81da-ff9f9b64bbc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7085cc02-1ac1-4888-bdb1-80bf70f8d2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95065ed3-6517-4806-8d18-0cfc39dd7f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14ce1cf-6634-4ebb-8c1a-b9e5d0e9b795",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ec24f5-d706-4415-b4a3-cf35b3661c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27e5547-5725-4330-a486-51455dcc2cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897c087b-0382-44ad-ac3f-d7533aef6c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9b5438-3627-4c87-bdb0-fb693cda76a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a7072c-5519-4dc4-b4ad-f4e864a8f555",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93685af-586d-4efd-b117-56d58bd2fc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a7f05e-2326-4d95-a466-aac16315c11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2a4ff3-9e9a-4ca0-8493-047a8d695a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c64995dc-1850-43d0-be86-1b51c98ca446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3131fa3-e1a5-4393-9985-5a5912b98c58",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f776eae6-aea9-4cb2-9f79-a1ee5bc168a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be55dd4-db09-479f-b655-0d88a172ec32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b346c9f-155d-4993-b622-af4025fc8e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605e1ce9-d422-4f73-8e08-d185dc48df5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "abdddbd0-2625-4f36-bb2b-4fd840ba658b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90b9a44e-f1c0-44e1-9df6-27b3dc46a417",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1f6994-d828-4e83-b4c1-961ce0cbe54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9abe03-dcdc-4260-9427-ec8860fa9bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cf65fa-2693-4482-920a-f1c495527f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44ff26ba-c7ac-4ca2-a361-cef8084c4d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a2cebd-cf55-46b5-afd2-77f3d0356ae3",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dc0d9f-b9f6-468f-8443-7f9c7723eb33",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8febdd8e-77dd-43c1-8604-19b4d9162353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "802e59cd-2349-4d3f-aa13-39858a27d1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ab54022-9180-40a7-9d46-d30c70cb414d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc4f1bee-bbd9-444c-92fd-35207036bc40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c38acd08-6b76-4400-a711-7a25a3ed93fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50bbcfe6-d3b1-4c96-a22b-c27df37294fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd74c54b-636a-457e-8da6-63be1fce4d36"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a975eb08-4e24-4248-879d-be3f2c5c0c7a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1b2133e9-0139-4a4a-8ece-77e735fa54fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35b2362f-82f7-4d49-a1c5-21f8a8a64a3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c4e16a7-4e0c-4cf8-944f-a4bf4e413d16"
            }
          }
        ]
      },
      {
        "id": "1c7898a6-a5de-4e89-9834-26db71f7f25e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0f5b2e16-c0a5-4fe4-b1fd-bfa51abd8441",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87f4d98f-41c9-44da-a95d-d9f112402fd0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "faa39793-086c-4e7e-b609-8a8f31093f7b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbf52c6-9390-4ca6-9945-cd343324df78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8441fada-f6c7-4aee-90f6-9971657f7cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7facf62c-251b-432b-a12c-c8396e850413",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59798797-c1b9-473d-89b5-1b0090747b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066447a4-edd8-41ea-b2cb-8536173afd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9259d4-b87a-40d8-8137-ba050ab24feb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7b9a61-ba9c-43f1-8490-5661130091e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af11fb9-0043-4a31-8dc7-27f8ba0fdd40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0429326-25bc-4937-bd6a-747c7eff7804",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40818990-0109-4af8-b6f0-bd39c7fc6568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c3e41a-d4ff-448b-abde-4555ab75de68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b849de52-c26e-46c5-b0ea-cde0d292f3ba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fe85f7-1425-4be5-800c-a0d1c605bbea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d9d4fe-b682-4eba-8e29-685b44043d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efcb597-a936-4ac0-94d0-1fdd5c264d2d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8761c5ba-70de-482a-a18d-366494a876f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4d9058-35c8-411f-8c6a-3fc3b640bdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e40bca-6b54-4564-a18f-03035bf18745",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8d877e-bc24-450e-93d8-fd3331dfaf14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5de8b7-c054-4a02-b886-628c20a69634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5b6ee2-3ae1-4713-a562-542975a5bb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de04e8d-727a-41f4-96bc-e800c2131258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aadf2c-1213-4f24-b58a-0e36824b9f4f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c5b441-acd2-4b02-b149-5eb1cc189d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6abd1f20-6adb-455e-8d45-e7baab5124cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb09c5e0-ca16-4acd-856f-190895780fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc45618-a4b7-4d85-ba11-ee70e5bfe6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea4d34c-9c36-4a8f-a989-4406f88a63ee",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b0fa9d-290a-49f8-8890-70f4bb69115b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "336e17dc-98dc-4fd8-9f00-31f0facff5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74f8ae4-7061-4a66-be1d-4b117242b260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ceefee-a5cc-4ff2-8277-39b59a9c5f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af65ef8-e8d8-476b-8195-7564727fb8ad",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7c6964-7208-44bd-9b86-9d8f51b55d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e683016-8427-4efb-9233-4fb071fe7d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6922e32c-12a0-486d-86dc-65ae60fc5a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f84a4b3-20d8-4f0e-a6de-6b25d7cf9e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c231e77b-5e84-44a0-b203-84217132de82",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506c9b90-faa5-492e-af1c-163f8b37bb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3014126-ae87-4c03-bff5-5a208a09a677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860ae67b-b13a-4220-8947-dbe788c5fb56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7374d36-cbee-4b35-bdb1-ff4480199562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecad7b56-604c-428a-89be-6f1e6729a81b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8828bac-1079-4305-800f-f8cc51ab4f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19eb0121-49d0-4ed8-8663-c15b14d4823a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce64a08-2a4f-4d8b-bf39-aa302110df7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5175fb8d-a395-4853-85b5-8a2841081f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3533428-9f45-4ddb-93eb-5878cdb813a8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f6dbcd-c278-45ae-bc87-493db4dd67f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cc5da48-5f5d-4f0a-bb0d-9f3a243f9fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1205a3c1-177c-403a-a1e1-6e4742f18f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142531ff-6b45-479a-8f6a-0feebcd775e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cada4afb-3436-4647-a99b-f2e2a173e377",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf227c8-1ab8-47d2-86ab-fc55b5af9b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f7b210-af5d-4063-ae72-f890a959f7ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fd3627-1ea3-45d6-97e1-1be8f0a5fdbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b76fca-3565-497f-a086-6bb64e40c727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02032b67-9c07-47e3-a5ea-93cdaeee8066",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1667b2c-4b63-4272-bda1-8edf2778a536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a793559-71f4-4e93-b022-00ea787f1815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459d0e91-3212-4d6b-af83-599ee917d891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e13c9b-43c3-4173-832c-bc058f39689e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea7814d-17ab-4e62-9885-1f82217bf138",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458403ff-e5bf-4883-b702-6f17ef33f0f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed3d44c-e26f-41c7-99d2-656510e1f1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12d047a-3ce4-43b4-9e6f-102a2f691b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91adb802-be66-43a4-97c2-e6c75527e7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078c8bb0-c4dd-4933-87bc-1e2a67f38ac4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4a81e7-43a8-4a07-aaf4-8b35ab5e3d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa443d7-455d-410f-9854-d71b4cc0e550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec720e1-6bc8-4b79-8853-832b7d8f0d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca2d29f-48fa-4758-bb34-e3f7d51cf5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769d2f35-69fe-4192-a628-ee6926414329",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da54f18a-c258-45af-bda3-30a9ceac0579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d92db66-3a39-4417-990f-828d1bd89bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32f5583-4776-4c30-80d8-3e07a2f261c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ee0ccd-a00e-4023-8dba-a7f4d7ea1fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4471109-b108-4e17-9e90-a1c5ff5ca1ac",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014dd97f-fea8-4e14-8603-9d2e44e13e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055f8ed4-da9a-4edd-8fd8-61df1dad9e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d09531-f28d-47ae-8435-e890e2a14d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086433d7-3ae9-4fea-a567-cc5e363288e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3923328e-545c-4060-b85e-26bc4be52b68",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffae7191-2f4f-47fd-a548-4c1668b4ee97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f6496f-eb73-4eaf-8ce2-2aa4e46d46bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1550124-58ee-40c5-ae48-c3900fc8e720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb79f185-1dd0-41df-9c60-14763ea250e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee290b19-7019-4310-99d6-8d1d414cf13f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ecf232-96b0-43ae-8d3b-bcb0b17f0949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446bb2a4-9f16-4711-b4f4-beacd014b0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62a7656-fafe-49b1-bf41-a65f9ae460d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9600b2-4444-4805-834b-0268e2b0bb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabf8c13-6402-4995-8237-fc9ebf17f72b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ea23e7-6161-4ac8-aa66-2cad4c59eccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd429de-492f-4d97-a796-e85a34f648fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "547a307e-1fa9-4361-85cd-1abd6f5987ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71abf832-addb-4dde-bfb2-ee1b3383eb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4900ac-c5c8-4626-9a41-bfd010843701",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd99277b-5b71-41fc-9de6-73b0b48ce8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdf9d9f-90b5-4fc2-af3e-bdaf0954b6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f136ad98-136d-48dd-a7f2-9bd72933714f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1e6ea6-c197-4c2b-8d92-043c573ef2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c2b575-0b48-450e-b826-62d70390eaa4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2991ae-1872-41f6-9f35-4c3723e3b3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0322500-4065-415f-88fe-7b0089aca9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d454db3a-8967-4876-b728-ade20f5cdd0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e490bd-5223-48b6-84c2-031287594b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963c187c-19c2-434d-95ac-7e471129127f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198c5c8d-7af6-46f4-b8bf-1963e1608403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f3f673-8ea6-4932-aff8-7372b5919b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702ae72c-5a03-4f97-95c8-6aaacf25d63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8475b4e6-60a6-4d3d-bd0a-c283d20e8b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a859606-b00a-4c12-ab31-78a2db05a067",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6df0916-2299-4f8b-aed0-2d9f4f508fbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ccff44-a333-4618-b0c4-4d332075c755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f905e68b-88ac-4b2a-9e65-254e73b90f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6035da83-5cd9-41b3-a1fa-02b57054567f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2593b6-4971-4a07-ac50-cff276587251",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56ea807-9fb5-4d6f-9cc8-ef3b1831c42f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1a52802-4d9a-489e-8b67-c68ce9106987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89888af0-1324-4473-915b-140b4713d37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b1cbc1-d25e-4d9c-8c59-fa71246eca6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f496aee-b8db-454e-b095-bacbb2f6839d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316c64e4-6d3d-4870-8270-cd83f488929e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe3b3bf1-6d9c-4f1a-8e2a-9f2342c80a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5320bac-a896-4f28-bd44-be1a5f5c4639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc54574d-0853-4896-a90a-09b94a8650ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d731523-d232-4440-92b4-5829fe36daa3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8897b0-44b5-490a-b6b3-f772bc182d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c295314-3537-4451-9b7b-c10a49d65ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ac81c5-bb8d-4b3a-94cf-0502383f007a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680e9c10-4e89-4751-a53a-2f9d1ad5728c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738af7a7-8efc-4380-a973-0ef39e0064f3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0701e796-11f7-4a48-b9b1-10fe39834f45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9b0ae1a-2a35-4f6e-9c68-13f5256228c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d346584-b94c-4821-a7b4-10f6e0d75497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df520f8-9d64-47d0-b5ee-1f8c08fc659b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a380c7c0-8f07-442f-9cef-511d86e94465",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1dd961-1b7a-4d85-a0cd-ce21f06945da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a11a93-2960-42c0-a7b8-c106700f78c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b959f763-e822-400e-b514-4c32bec7141f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0caaf4bb-cfb1-4dd2-8101-b797c095d87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700149b4-381d-4fe1-a975-259b8f790cce",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f319c6f-651d-4b53-a60b-588daaeb4ea8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644b4e55-08ba-4756-9e71-36a9ba1ab91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f563681-00f3-4cef-af1e-74f7e643b93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b223b24f-6259-4db3-afff-3a92a500630a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8655a679-b6fb-4ea6-83ae-557c9fa1c275",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa01d39-8876-492c-9ab5-cf49ea6df1fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b59e17-6e59-4842-96af-c40ef2f22559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e1b160-9e29-4f54-a9f1-8687212f58b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19aab69e-0f76-4911-af59-e99b72fd2a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11c9fb9-f269-40d4-9667-f1f831649d69",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d075bd20-6ef6-4e3e-9df4-ed47725f0369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c6480b-325f-41e5-a52f-bceaffcdeb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ccf45b-e3bf-4976-9618-3deafe0f2cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5a254a-71f2-47c4-a53f-4aee98c4f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025aed9c-6989-44e4-9f0c-b4420407cc8c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa932e61-d25d-4915-aba7-f91d8f1194c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "038e651d-aee7-4ea8-a4ba-75c4c6359992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5518d3f2-6bee-4a47-9757-2f5c9bb9fd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3090f1-5457-4dd1-8603-09e426bf400c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38118feb-d748-4cbf-ae1e-cb387285ef20",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a443f39-015b-4885-9261-1af87ee5c5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b4f352-f877-4ec4-b100-6ab44a72d10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eb920b-0430-47e1-9649-f97240cffd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d77791c-b214-4227-8faa-938885a2e839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da39af10-bb67-433d-9532-e824c4a3a989",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06084ec3-6509-41c4-8f07-7f4c4901fcc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14af25c6-f47f-4a25-a39a-9851d3950ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93ca600-cdd6-4c4c-94c4-fa6061c6d404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8946093-6030-4346-93a2-3fe98db6112c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf037d0-a998-446a-8af0-8f1ccbf00456",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f58995c-3ca7-452b-a343-a1fbdfb44e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa1947d-5ca1-4217-b2d5-5d072f1d7220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85411691-abe7-464a-b08e-78092c578c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea73724-93b5-4941-924d-c11da43a32d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5f2d1a-900d-495c-88eb-b51916ea66a3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad70168-7c59-448a-b065-fd6ef3a64781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696d71cc-4805-497a-81c6-16f5a8452916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6933f403-1476-400d-a751-fef8bc09fd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575def5c-8984-4b42-abba-164d0690a989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c0321e-c45d-4350-b610-c86854a17278",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33fb0d5-a7c6-4023-a687-247a09712b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6d8817-568a-4737-b55b-92c320e0deda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5e8b3b-7201-41a2-8c1f-c36db7dfe939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3c7b8f-0561-4772-a4bf-f3e5105e1781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e6dcbf-f87f-464c-8145-1ec5c236e317",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1422d1c-20d1-43d8-aa8f-67d5c462e486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ca60a2-a799-4fe6-8899-dbd469964760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98820e35-3a4b-41ff-9d18-89bab10edb58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2621a685-192a-4df7-8e02-9b46e55bda17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae60b15-f211-4cea-9d5a-b44f5a257028",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fb6c99-3034-4ba4-a78e-6700cbb6bede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e2cf4e-b5c2-45bc-a908-1e4ff4e4c89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4192653d-e77e-4f65-af6c-1bd5fa234569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b007418b-42fc-4c56-b821-2b7554f669c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00f68b4-8ec4-4b47-ba93-10eaf80c8440",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb5544e-58b4-427c-b7ff-8b1532301eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd29e223-6269-4ce1-b467-cdd46ec6950c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaec5316-57b2-4697-a8e7-24b930e2f237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697e9e7b-4710-42f2-ac05-06c0f9ea2360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cfe03e-c48f-4315-9985-54d3f33da6e4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c723c5f-fb85-4b74-a14f-25ec5e6ded4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa081adc-9ebf-4270-9b34-f5f08fc3f57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa3743f-0e40-481d-bb3d-529962061858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b026663-3df4-4591-a5ec-da4244c1af66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2c05a2-cbab-4735-87dd-e6126ce9e096",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3736ca13-eb29-4a01-a879-b739f5ac3011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f341441-eb05-4619-913e-bf4985d8dd14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc02eb9e-914e-4dc8-8ce0-ec55fe59db2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d770351d-855a-4884-844c-792bec1a117b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c66d78-0c59-40eb-af5f-152f47cf0555",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beba059f-8afd-4aec-be4e-80d778de2396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89074a1d-4d9b-486d-86ab-d0b9ebc62c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b2dffd-defb-4a55-8ca5-5d65b2ff84d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86724d26-05b2-4c9a-abfa-db8062c9b491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfa8456-ffdf-42ab-8c17-29495074faad",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b76e84-add1-4c57-8582-1434cd7782d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf752861-c281-402e-a620-b762fb360bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bc4f81-62a8-4cdf-b1a0-813665f38d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d288962c-8141-4ca8-a4ae-889122c523e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f051f8b-697e-4986-be2f-8e4197b55a5a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c37b8b3-bfc0-4f0f-97c1-57a7c18d4bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8addc19a-1b7b-437a-892c-a3f93e11cacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5b3736-1891-4ec5-b384-7e4c08c79016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3da274a-9783-49e5-b0e9-fcba627d717b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be05e7e-e567-4b79-9326-33d30fa3598c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11624677-4e81-47b9-babc-3ec18b0aa9c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d954e6fa-86bc-43e2-a96f-fd926faee11a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34e4819-860c-4617-a976-d8885f8dea34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4595bfb9-d2a4-4395-b263-e01f6ac0d723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231eff4d-86c6-48d4-90f8-ab25cc25aa38",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cb9d5b-ecc7-44bd-9c46-bebbdf87f772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464e4c9b-d9fb-4a0a-b02b-85187cf5c4fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca728a40-478d-4e37-a64b-379a95044397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cfeb6a-5b9e-41ce-843c-9317d84e3e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46315a30-caa7-418b-8582-aeb5b71b0137",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4726918c-3e82-4094-be51-3702d5dc7eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9767e7ea-fa4f-4518-a382-cc7b2f1d4772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10410f3b-8919-44c7-931a-7b843f69a2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d77930-1c19-4559-8ef1-f7b6240e8a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc3079e-6d60-4bcb-8bd0-6634e871cc1e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3367e7c4-a12c-4029-bcd5-08b91ee129cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc99519-78a1-46d4-8233-7c8e5f45d282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cadac5a-c5a9-4171-b8e7-2fcedf3139d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9440b46e-0167-487d-adbe-ab8aa2666222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973c76b2-fefa-428f-9097-aa665277e426",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264c18b3-23e3-4bab-b96b-49f9f843035d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63be3432-29c8-4c8a-9317-e74ce1c0ac5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51467ffe-6efb-40df-bad1-2ba3d91b8e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020e9e61-6aef-4b13-8500-d5cad32681c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c8cbe9-c718-40c9-99bd-1298e8433cb5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435fa5d4-4a98-4149-b1e2-4288461daa1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40af8a12-87b8-4a81-84d2-ec8d7503f530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e364816-7782-41ae-9e91-55eda675ae88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47edfe8c-ea34-4ed9-8c92-57f02c0e8eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b865c8-7ba5-44c6-96c0-62ea305432d4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5648936e-aa89-4803-b22c-ba3143a9497e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4da40d-585c-4cf5-807b-02fc3bc07af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b074cf7-96d7-4c97-977d-e683f11e69f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d05ad94-638d-4279-84da-380d523a144e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a02413-8aba-4853-8e63-7815b171617e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b640ff0-5c42-4abb-85f8-f2e2b078bfde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e76f3d-6e32-418a-8b28-568b0ed68e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dcc8a1-5966-4b2a-b71d-af213c0b2f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a703caa8-a8d6-418d-aa5d-2d06b8d13c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77f9d9e-c3fd-4157-af2d-cf3d8ed66482",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1162148f-7900-46cb-bad8-9d7810bb98f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3771de15-9730-4025-be32-d4d585c05abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cd4195-5cee-4571-ad81-a5326a5a0887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e6a297-65cf-4710-b095-38111ed32a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d414793-ed1f-43f2-9047-9440fe052f13",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84c155e-d742-46b2-9e89-7d12a1955ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f77a9b-77bf-475e-8eb7-144c58debbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fac22d-b897-4be9-ae6d-1b6113cd2b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3d0876-22b6-4aba-b23e-7a20fe7d750b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7e526e-9337-4626-bf6c-c2537076ff57",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453ac597-6a9a-446c-9c5d-adebbd8a1012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eedd63-e95b-4cb8-bce8-4a946bf3e525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c24bfa-15ea-484e-9704-e7497d912a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681231ef-e801-4c90-b1f9-f07fa7470a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b326a7c-815e-4a3e-b2ca-e648fc4520b4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f98c23-2877-4c9b-89e9-e19c98871e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528e97c7-9d53-4cad-9b85-1739214b34b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "416b2ade-e436-4e96-8e35-7e9ffa979f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899677b0-c31e-4ec8-93d5-c577b006ae73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6f3af8-2669-487a-ae79-f4e614720504",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a60eeb-3630-467e-925e-6f7a844b9fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca21fb7-6b57-43f1-b0f1-6dc4ef96fc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30acff49-4b94-4f6e-913e-6802bd4a9903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0e30b2-833b-4776-9dd7-f66eaf08183d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e245798-6104-49a5-8bac-7c0648585611",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88a162c-de06-41f8-979f-14b1dcc342a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1dd200-ba28-489b-81f6-6a6ef385df47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daf182a-3666-4ddc-8806-3df8d139d206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1804500-8d77-447a-8527-ba887cd1ef53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39028b60-f60f-4db6-b6f8-4d16f64a1725",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83856125-c555-403c-9716-b273368324c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5a2766-d993-453d-b30b-ad17d235a2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd8274c-4666-49d5-b66c-e4f01e70c8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529de8a1-1006-4e43-8222-96e0abf1a50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556ac5c7-234f-497f-983b-3b98d426f74c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67f638f-230b-42e7-aeb2-ec5a59ded125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd69a9fe-1949-47c3-89c6-1a2b98d7a16e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc355cc2-d9c6-4c1b-8f3d-b85450fb264e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d76a1c4-4135-470e-ae88-890191a0e1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd25976-ad2d-4b9f-9bd9-5fed51f5d5f5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c857ba6d-5329-4d2e-a988-fcd6dceafd83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2223174-d008-4288-9e1c-4d661cb57178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f77ec9-f9fe-4fe2-a1a2-cd181256bedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95310ff4-5b6a-4a6b-b033-c0c03aa94417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1716258a-4481-4a19-94ff-04af385f0ffa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42ed904-f08f-4a1e-8866-a09182a18309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c37e9b-3051-45ca-bb4f-d11b249f3d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1274cc2e-87be-4dd8-bd05-620b645143eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f0e652-08fe-47ed-aaf7-3170d3c8b9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8b787a-0f06-4c99-8b25-f651d656e910",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa08f387-2766-4ac3-9e03-8d07fdaa7dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f87c83f9-aeec-4b12-993c-697ff3ef68ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2dc872-d238-450f-af9d-6a9fe77e87d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc74a282-81ad-4ce9-9029-ed72eb5cb840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2ba9db-faf6-49e6-9a7d-3c27152615dd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4c7419-4ae6-40de-aeff-b65cab312a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c94c8a9b-9ebc-4f5b-b9f7-c063282c04d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93513cf1-aaee-4f4e-bfe2-799f8335bbc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a27405-b902-4053-86a0-3eb84daf8840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9707e3eb-f221-45e0-ab2f-c3144d6c880a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744112bc-ca3e-494a-8bc3-47a0cbd1501e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b9ef65-45ed-4045-9c30-3822e0ea07db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bceae4-b09b-4331-8160-26740fec5db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f032c91-f124-4610-9f48-54d1e98909cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b336d4b-a225-44d9-ad41-ee7ed70f394c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d1bc83-c88a-40a1-ad3f-5f19152a3e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353b6c95-4993-48ba-beb2-7754b2466b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e70979-0020-432b-bbb2-76c99d964002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae86583-9733-4b0a-bf2e-1e58f37d9535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5cb89a-f6d6-4ce0-aa6c-c8a1514aae56",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94acf3a5-ce09-4f93-87e1-153b9a7c58a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51bd3f48-7074-4af4-a10d-f9bacebb5805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c92ffa-d19c-4e45-af45-b92ee4ade2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8a4e03-bfb5-44e8-9c82-07c3e5a2e7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f86c4bc-e7b8-45c4-8218-492841fb07bb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493d81a7-8a97-40fc-82c7-52ea765f3cb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3e8286-d68b-4846-8598-a3e4728017c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd1cb0e-4b9b-4ba4-85bf-114a07ffc80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346bfc69-bdbb-466e-927d-b28791e80fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c17c58-d64d-4515-a0f6-45f703a6ec4e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674db4eb-44da-422c-9242-b1aca5052e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d548f0-7c62-49b7-8ee6-7ed49bf41b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c053c9-ea2c-44b4-8f97-33abef2d60cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3dbbfac-48cd-439d-b0d6-30e1c2809c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47e97fe-b45e-4f3d-8f17-5a528a5bf949",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32e374b-1518-4f36-b23c-7aa5a8fc49ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a93f55ab-b466-4862-ad9a-00b93d97efa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142355b0-c185-4651-85c4-cd9d3d55b855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b48132-09c7-4f7e-a0ce-330f56d6d69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9d4965-1943-4930-8069-d49098dc8881",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a7553b-48eb-4ba5-9a9d-b19581b5d5e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8273301e-4396-4f9a-b366-60e3c3236d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f8375f-b8a5-45c9-93ea-c5e4db96bfc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e290a0-a175-458e-bf76-859310aeda12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fc6a58-74a4-4e69-a9db-e621af8ebc77",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8d6dd2-e11b-44ac-bcab-a42a5f5383b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85de16fa-0a71-422f-b028-54fe9267d219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ebc723-77f6-4e0a-a7e4-a4858053da2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64644756-6fc7-4382-83b8-9b9d92570d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d2a381-b325-423d-a6ba-ed95a7275c7a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21ba5c5-8b2a-4968-bec3-67417d624774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07fbfb4f-4788-4572-a85a-90b79860dd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c60a23-b58a-43e4-bb73-8804a9669fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9652c034-ac1a-4c0e-b23f-216a83f4603e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58bf7c0-d4e3-458a-8ed2-75026d8ae1e5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eece986-7534-45ec-863a-5019171872d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d7371c3-d56a-4f4e-9245-bb4e38ff15ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66710ceb-4cb5-4dd8-a451-6e38edcc1dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcae2b2-f3a3-4b8f-b9e3-2245fd46b43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e117dce-5add-4ba4-afa2-67aeba52e3c3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f88d8d-66a4-4a53-9ef1-ce90907efcf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0394660e-f897-43d1-aa8a-ecebbb260897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e54d69-5512-42b7-a7d3-127b3aa0d34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72360f6-a41f-45d1-a968-5472d9e4aaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f89f08-d1ea-49bd-b69c-0488e2818a86",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda3997d-99cd-4232-a505-4498d06c3043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af8150f-5f1b-4718-87d6-1984d596da65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81af6d5-6b35-4c8e-907d-25dc4cc457f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73b192b-8e37-40fd-9cae-929b7b00e654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51920cd4-6c1c-493d-973a-5a86001f1e9e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db807c7-dac2-488e-99d3-888c623bb3f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caaca7a1-2eef-4244-9fde-b0e12578ac69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247f951f-651d-43cb-8492-d500183cab04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e845d5-27c8-4c98-9c03-d7b23f6c821e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d03a336-4477-4a6a-ac3e-52a66cd9388a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119409de-f1b3-4435-a986-360a8c292043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46df685-e3e4-4f92-9561-e9c07f33af28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f6b5b3-58b6-4ed5-a29a-796bad9364a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54818ec-46e1-4c50-b1e3-e301480fb680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a55c157-5080-47b1-bea6-12c794145215",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7046d399-80ff-4761-90c0-9c4e030534a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb8822b9-c9cb-4b89-b970-4ce66b2600d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f552c287-a803-47ad-b15b-e7619d9d0351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d1160c-32e8-4e3b-9d4b-776a4e064336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a884f6c3-fd3a-4ade-80ed-b9688820045f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f23a14-10bf-49d7-ac2f-4807968ef74e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "584f1104-b0dc-402c-8f54-fdccab49443c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea9dbe0-9759-4b46-9538-0f4a12ca592c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e562c1-1fb5-4e4c-8c83-dfb6529c5a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea94cb48-2cf6-4e9e-bbad-c88a044dcfd8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a242bdc-0e7c-41e0-99e9-8767bf8426e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef7abc7-cbdc-4526-8046-1c8f25cab7f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0048f5e-2ac6-462c-8916-6b70f02b5008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef06480-67e7-48f4-87f2-3617aae8dadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed715ac-c54f-4748-8d06-cf49de80170d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed594d38-fdef-4a8e-b9ea-8d9d3715bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0152c908-f93e-41c0-baf0-2c8b2dccff82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab15a5e-b9ee-41c9-bb57-ca2b26e32bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3729f8-258a-407b-8610-f8acb688725c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d0a7b1-73be-4245-a6f7-8de6b298f398",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f76550-1547-46cb-88d4-34328cc91dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f8d371c-f143-4435-8ad3-de08d40b8746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c97cad-17e3-4d75-9dd6-4639a87d6b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c70af5-e4c5-4cce-8835-dd281fee9e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6e8c66-d539-4f83-90ad-aa589427fb10",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996f75ef-a85c-4085-92b7-b962cd57d9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd71f67-8064-41c0-b9a9-e6106f0aae09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2058da8c-c52c-41e9-87b7-635ab6e3c4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9471bc24-f434-43d8-a71f-4cf20ab87591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e212a039-c46d-4200-aace-5ca1d0a3deac",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e6ed76-55a5-4f2c-9f1f-2ff4f6a09fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15ca13ee-2b58-412a-b8a1-718e53342909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbf70cf-3892-45c1-ad84-34cbece06ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857072d6-92b2-4be9-8c6a-2330fd8c76ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4025c56e-96a8-4eee-b965-40ece9fd47b6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62adf55-b219-4072-9cfe-563f492a3e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "801f5b79-3414-4a67-afc6-22e8399f392a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f1bcde-66b2-404d-afeb-31d4f6c8d28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784801c9-fbbd-4060-872e-09cf2400b70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b900cda-6640-488e-bf22-715f00411730",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbbce1f-4248-4275-8570-9047afe840bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0320af5-dd21-437e-96a6-c7c25f497aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1863bf-1cee-4f5c-8673-396a811b5bd6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92140e47-bd31-4c1c-b9c6-42f61541a939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d1c52c-1ffb-4980-bffa-0ec05fd0a844",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef992c13-c723-4a2c-ba22-a1bcf6cebeef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6aa7fb0-2da0-4520-b930-7593b1c42f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a8b458-d5ab-4f83-b2c4-d15a015dc7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db33298-2235-48d6-9eab-27e6bb3d43ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1280a94-0724-4836-a3a5-cbf02aa72ad7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86f9ede-4b8d-4d5a-b43d-e5352063031f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e11e7202-6076-437d-93e2-2242ce27bc56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bbfdea-2727-4db6-b4aa-944a6398523f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d80f2e4-76f7-4522-8c0e-6dac92bc3f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1caaa091-cb58-4547-a1d0-feab96a7ae95",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3420a84e-6ac6-40a5-aaee-16944ce07ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57735b51-6478-47a8-9619-c12bfd8c2885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3d2d08-2b5e-43eb-8796-53e4a1520fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d570696-6957-4b7a-83ec-18ac2ef678e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1051d2fb-23c5-47fb-8be4-9b02121ec05c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114166a0-dac4-4bb2-a571-1b1d31333a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115b9aab-eeb8-4eae-9eb6-1b4b7a191ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6e7ac2-4bd4-42f5-b6e6-e5c75ffdfc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6875e9-f65d-4389-bb39-a591f9176116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b45a607-f939-4bed-991a-9c132a91f356",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba096abc-4d78-43a1-94d3-011800e8496b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42de67d8-37b9-4cce-8c77-bf964e4fa957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a3786-34d0-40a5-8383-1217f6e0672d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa4244c-b7af-4d66-96c2-2f5ebef5f78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d690aec-5ac9-488d-88c9-30fe81a5b2c4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ad968e-6939-4b18-8e32-cefc960d5bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e640b4e1-e629-44a9-9b38-f2e01d8b24a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42df7b0d-31e9-4d40-a914-4a3d4cd396e2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2ecb52-97f3-4463-8b07-ac98b5b3ec98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcf34fd-5e32-4334-a838-ffd8bd36367d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378020a8-7543-4110-8cee-2ef5ead5b384",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f316ab0-885b-48ae-b5cc-8d74da2d745f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e58098a-f7d5-44b6-b398-a0924050153c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862fc99d-a15c-4cb1-bb1b-ae742c9ff5bb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a29b1a1b-f5bf-4474-bb3f-b11bfbebd45f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "707618c3-6aa9-4b17-ad63-a82675903ab6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "454437a4-08ca-42cc-87c6-0d7708bd9886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d9c5a15-be4f-4c69-a8dd-b9de2784fc69"
                    }
                  }
                ]
              },
              {
                "id": "2588f723-b5b7-4c02-8562-18f8a453350d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "166d5579-bf7b-43a9-bb7b-3defa8bf3ac3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd36bff1-1954-42d6-88ab-ca72038eaad0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dded66be-9881-47c7-8420-df1e068405d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfff53c-ad5b-411d-a09c-08202c6dfd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44c5ff6d-a4d2-4679-aa38-c39b41f41eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18af6dfd-fbae-4f7c-b445-5a11225b2ba0",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce26382a-c3ae-4c55-bf46-636217501a5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d8bf9de9-5d58-4cc1-ac54-92497fd92d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa086407-ebae-4887-9e3e-a4c892feb1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e962f952-2f72-4e6c-835c-7ea5e81dbad5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c469c36-b39d-4544-a0a6-e4a4a3bcac9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d28c739f-a29e-45a3-9f86-12087b98289c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "049cea3d-3289-4c05-8988-a6f3176febe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a65c2520-216e-413f-a01e-ab090ad64e06"
                    }
                  }
                ]
              },
              {
                "id": "dbedc69f-6f52-4323-86d2-bc0c83580034",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a54b0659-4433-4b31-b6ff-2835fba1a13a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ae18fa-65e7-497e-bc40-e844c2220ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b2158d22-9bc6-4d26-a45d-b4de1e2a9a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edda414-fafd-4329-9209-2520c19e2ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a7c57d-7588-42d4-b1a5-a3c8990758e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "da9979aa-fcfa-42db-aa6d-4c47de95aa86",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38f1485c-5538-4d72-9f99-24b8448ae8ec",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b778519b-f58a-40cf-8859-29a17fa60bec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a120c70b-037c-45d9-b375-2c2e1f7551fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79dc9685-0032-4305-93ef-a48eb5ac74fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f656cad-e78e-4d75-a87f-deb0fce93b77"
                    }
                  }
                ]
              },
              {
                "id": "e65625de-22f8-4ae6-beae-f7df5787755d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcb76f99-86d9-4533-987f-cd01517b5fa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f16b2833-4b59-4276-b57c-2f5eab8fd8fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56a715a9-5660-4877-9fbf-451213fdb9d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27978d76-b229-41d2-a632-1b5e688f4c9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21cbdad1-d81a-4d76-89e1-24e2a584bd3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9b0b7aaf-7209-4ff3-89b0-89419e0c6d64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3ca7de0-a5e2-4a7f-9678-21e8f50e0f9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6fe7077-97ee-48c1-9b13-83a23a1dc6a9"
            }
          }
        ]
      },
      {
        "id": "e74c885b-5f66-4cf8-b1cb-deff0726cb23",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e8e54de7-bf2f-45db-bb5e-02edc8a48c86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed1d3aa1-068e-4c43-8be4-c959c6c83aee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dd9c45-7069-4d41-a8ea-52eefcc10687",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f807d6fa-2748-4240-b90b-86d4b257255c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0999ff-d8c8-4763-a0ee-cfa2f4828dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9f581be-1ce5-4e03-b7f0-24d3d3f5649d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2762c04c-3ac0-4639-aa72-d39bb1bb23b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "176b63de-5d46-47a4-a120-1873a52df373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba8ec16-9861-4e4e-bc1b-d1467c43fe7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0309bc2-f0af-445e-ba33-b04438a675bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "581454ef-2dc1-4dcb-8798-5367b63f2c0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b45fcb8-a81b-4a3c-b785-3c2e29e6755d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcdca01d-e3a7-453d-86e7-52e67ff4238c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "261c57e1-b84a-4bcb-bb63-40604c08b7c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a7259b8-e22d-4e06-9958-50df3af7db91",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "75c52497-179a-4dca-a87a-4be712df4d6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd91605f-aaf4-49cc-9398-c9ce792819ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c0f9598-7519-44e7-8f75-ed9318568965"
            }
          }
        ]
      },
      {
        "id": "772179de-5f4d-4bd5-880b-963d5605451c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "57ac22e8-97e1-4d57-9a02-8dcaedb0fdea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fda4d1e-c512-4fb7-9068-67fae3bd51cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17662f09-ceb4-4977-b62b-8c1cd0e58605",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "233c1321-db1f-4645-97bc-0507f70f40cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a06175-9b7a-4948-b01a-4644120c4458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea3307ef-2927-4493-ab99-3a55b6b0d1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1d39cc-81a6-4ba3-8678-81174107124f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "222756b1-8ea7-43af-b178-4d548528bd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1f8ec5-3449-44af-81d7-a79538e15992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bba35fc-8dc2-42b5-8c0a-72f0fe2305d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e2c5728-2cab-4725-8ee5-9b1eb99a887e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e871ca9-424a-4485-951e-9c780485f885"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43625dab-5b77-4bee-a6eb-04d77822e645",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cba5497-bf6f-4f66-9134-bc6f7ebc9218"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ce75993-7db2-4305-b995-9a6b8fb17bba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2a6be260-1a17-4c7b-b6f0-f0e9dc250eda"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fefc26a3-441e-40b3-b66a-5113a165c19e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "200bb6bc-1424-4bb7-a6f6-df07a5f87a2a"
            }
          }
        ]
      },
      {
        "id": "86308706-d1a4-4ca1-a97b-f2ae7e3d9716",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3c069292-1ea0-4257-b016-05980702d0fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60db2122-3808-44f8-a1eb-4ca3823fbe9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7082b6-a96f-4810-ad0a-bebb1920b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1fc739c-3081-48d1-ad3a-2ecd7f24520f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3aa89e-80fa-4598-86c2-93bf5464f36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f0faa78-66c0-41c4-9553-6d7eaf5c8293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb136de0-62a7-4638-959e-2d9f9975d8e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b169396f-ddbc-4871-a207-59f12aa46238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5d587f-1cc4-4a5b-bdfa-8eca3ad5727c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c66db8f-f3f7-4149-b60e-ecec2c2b6436"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ad15b44-4e9a-4b47-a94e-3b98e21112c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3b10a4c-3eb0-40d0-a616-0a1c1880a27b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "beede801-0b62-4cf1-ac35-f9311ac971d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae93e549-0cae-4d24-bcad-621bcbc62c7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1de807a6-2878-4c3b-91c8-619626a0598e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9ca3cb3c-bce5-4123-b078-26cf3a08db91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b29f57f-6ed6-4bc6-adf4-e4fd8856e926",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "217254bb-8e61-446c-be20-d0c0b12654b6"
            }
          }
        ]
      },
      {
        "id": "9a4e59ea-713f-4e17-8000-58841faaa4ca",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9552853-860c-40e2-ac7e-b2081c5a8782",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "471cb9f1-6c3c-47c8-a833-da25becd9d7e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "64ee80ab-0db1-4be4-b950-c4938f7f4cdb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49e360b4-5901-4ab9-a6b3-3a16890dde4b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea406462-23cf-45e6-9dbf-8343d2e9eea1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 331.472566971501,
      "responseMin": 22,
      "responseMax": 7651,
      "responseSd": 1250.0606772669248,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675816773236,
      "completed": 1675816915523
    },
    "executions": [
      {
        "id": "41c7c671-b8d3-49fb-a083-b3238e1b370b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "362174b7-55a9-4fc1-a29d-54c4272d203f",
          "httpRequestId": "332958e9-0cb5-4a82-a9e5-b20167674d5f"
        },
        "item": {
          "id": "41c7c671-b8d3-49fb-a083-b3238e1b370b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d8b27909-31e3-48db-9962-d57aae499345",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "21a9bb58-70eb-4399-81df-8ed9ad9175b2",
        "cursor": {
          "ref": "92aba458-e005-425d-aca6-ba19cf703329",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f2778458-1a7a-460b-aac5-8d0ee212cd8b"
        },
        "item": {
          "id": "21a9bb58-70eb-4399-81df-8ed9ad9175b2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c7c95f47-10ff-4d25-b8c6-04ff0a1ae1d7",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "62dd3049-dd2f-499d-873a-c1439784b377",
        "cursor": {
          "ref": "4f303e2e-9b09-446d-abe0-c445fa6878f9",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "48ae009b-fd71-470d-9bef-3fdf75c7faf2"
        },
        "item": {
          "id": "62dd3049-dd2f-499d-873a-c1439784b377",
          "name": "did_json"
        },
        "response": {
          "id": "a3ff9e89-76e4-4cd3-9057-783f4f04a1f1",
          "status": "OK",
          "code": 200,
          "responseTime": 582,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af066321-b516-429f-9413-ddc6a1bbbf37",
        "cursor": {
          "ref": "c382e358-f383-4eec-b5a4-5a7a530733cb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dc9a67ae-1f6a-4f3c-914d-b80c18a8ac8d"
        },
        "item": {
          "id": "af066321-b516-429f-9413-ddc6a1bbbf37",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f76f36a-5556-4d56-af2e-fa050be1cd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af066321-b516-429f-9413-ddc6a1bbbf37",
        "cursor": {
          "ref": "c382e358-f383-4eec-b5a4-5a7a530733cb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dc9a67ae-1f6a-4f3c-914d-b80c18a8ac8d"
        },
        "item": {
          "id": "af066321-b516-429f-9413-ddc6a1bbbf37",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f76f36a-5556-4d56-af2e-fa050be1cd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679d366a-e67f-4f7f-95aa-3a032fe73edb",
        "cursor": {
          "ref": "470b91d6-f253-486c-be3e-2f7700fab04c",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9485b04b-cc02-463f-958c-be83eadcbf2d"
        },
        "item": {
          "id": "679d366a-e67f-4f7f-95aa-3a032fe73edb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a4205292-bf0e-494a-9e2a-b3298267adff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 165,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3d0be9-33c3-4072-bc2b-4831af393afd",
        "cursor": {
          "ref": "1efc9806-1d4b-4f20-81f6-da6adf74ca22",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2a827c3a-6830-47aa-8081-168da3f5316a"
        },
        "item": {
          "id": "de3d0be9-33c3-4072-bc2b-4831af393afd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d5ab6591-bbec-46cb-9f0b-965720d2eead",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcb82e8-5aa5-4c89-afc3-0d56b673cc57",
        "cursor": {
          "ref": "e035f4a4-6126-488d-b297-f2fa7e6dbc5c",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7c94c158-8ff5-4846-89e9-f8999eb4200b"
        },
        "item": {
          "id": "7dcb82e8-5aa5-4c89-afc3-0d56b673cc57",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1750ace9-7d8d-4590-af42-57a52385f829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e4294a-0db3-4b4d-bc06-2a8862dc3b7f",
        "cursor": {
          "ref": "a89b3ea2-c232-4700-90d6-5a19b161bb57",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c5412196-d08b-4cf2-8948-f3f1de360c01"
        },
        "item": {
          "id": "a2e4294a-0db3-4b4d-bc06-2a8862dc3b7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "298bb664-ee70-4933-86e1-d7aea86e7213",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a2e4294a-0db3-4b4d-bc06-2a8862dc3b7f",
        "cursor": {
          "ref": "a89b3ea2-c232-4700-90d6-5a19b161bb57",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c5412196-d08b-4cf2-8948-f3f1de360c01"
        },
        "item": {
          "id": "a2e4294a-0db3-4b4d-bc06-2a8862dc3b7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "298bb664-ee70-4933-86e1-d7aea86e7213",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "757abf6f-823c-4ec4-9aab-32732ff928bf",
        "cursor": {
          "ref": "bb7cf652-db0e-40b5-977c-938394c66704",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b2a4fc76-4bc5-4dc2-b98a-84bebb718d54"
        },
        "item": {
          "id": "757abf6f-823c-4ec4-9aab-32732ff928bf",
          "name": "identifiers"
        },
        "response": {
          "id": "99222116-bfec-4000-8b93-1b3394c93a12",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa4f006-8935-4922-b807-248d303d9955",
        "cursor": {
          "ref": "9dfaf897-d31b-463e-a578-a264605a8e9f",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "221d4138-9b2d-4346-a4c4-9b18027775b5"
        },
        "item": {
          "id": "8fa4f006-8935-4922-b807-248d303d9955",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d744738d-d5d6-41f2-a184-960e6d2168ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "8fa4f006-8935-4922-b807-248d303d9955",
        "cursor": {
          "ref": "9dfaf897-d31b-463e-a578-a264605a8e9f",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "221d4138-9b2d-4346-a4c4-9b18027775b5"
        },
        "item": {
          "id": "8fa4f006-8935-4922-b807-248d303d9955",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d744738d-d5d6-41f2-a184-960e6d2168ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5d71a6c4-d3b3-4c9c-93d1-e43183b4921d",
        "cursor": {
          "ref": "bb9496c8-5b42-428c-9f41-5c2065137974",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "02476ed4-9daa-413b-81a6-4226de061307"
        },
        "item": {
          "id": "5d71a6c4-d3b3-4c9c-93d1-e43183b4921d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "18b4a5f0-b2fa-4f75-ac60-e142a720fbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3b3d39d7-36a0-49f9-8cba-9d7d709a59c7",
        "cursor": {
          "ref": "155ec6ed-651b-4b52-b184-e8612f31602a",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f202254f-4311-4f43-8f9f-6b783941de94"
        },
        "item": {
          "id": "3b3d39d7-36a0-49f9-8cba-9d7d709a59c7",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "b85f8b22-f8b6-44c4-ab00-52265ae30af8",
          "status": "Created",
          "code": 201,
          "responseTime": 180,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0ac3cfb0-4c75-48cf-9f86-4261b344dc1b",
        "cursor": {
          "ref": "9e4db231-8532-4a54-bc79-9f8753f65fc6",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "86e4c875-0397-4439-8ac1-9d9757da6e41"
        },
        "item": {
          "id": "0ac3cfb0-4c75-48cf-9f86-4261b344dc1b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "49033206-7c8c-4948-afd1-2b5f632f6ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d810e252-dcf8-439c-a235-02c72fae82f4",
        "cursor": {
          "ref": "9c433123-076a-4bfb-90c2-cb8728346bcc",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6a8463c9-a7ce-48a9-a8be-f1bab0c11443"
        },
        "item": {
          "id": "d810e252-dcf8-439c-a235-02c72fae82f4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d62acb0e-bbec-4059-8552-adfca8ee3916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6cd4ed7f-6921-4fc7-a66d-ba2b8345258f",
        "cursor": {
          "ref": "e83fc5b5-e878-4a12-be2e-2f70d76742a6",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "714319ea-027c-4e85-ace3-c0270de57e0c"
        },
        "item": {
          "id": "6cd4ed7f-6921-4fc7-a66d-ba2b8345258f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0ecf4da8-1ad6-4602-94f7-03541e7a8ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "a33847af-b1d7-429c-867a-c39b35a4e524",
        "cursor": {
          "ref": "ade68acb-c09d-4bc5-a4a0-6153eb0d7bf5",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "470e1585-1a23-43fe-aa73-5217c778a490"
        },
        "item": {
          "id": "a33847af-b1d7-429c-867a-c39b35a4e524",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "df3e4afc-8166-4efe-8fca-fa2d89875728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e69ee41b-4692-4d49-9415-1e4961803c35",
        "cursor": {
          "ref": "e10df134-d389-4a96-b24d-3d95a4ef9adb",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "47a721d4-e5b8-479d-ab66-e8e951a2916b"
        },
        "item": {
          "id": "e69ee41b-4692-4d49-9415-1e4961803c35",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9135724b-c89e-4d5e-9b1a-8ceaff12bf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e3804fa5-6c87-4503-b55e-4649b7f13211",
        "cursor": {
          "ref": "3bbe6cc1-f82a-4342-aae2-19f9a2dba8d6",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6b16f270-e940-4b1d-acf2-0d0f5dd4ccdd"
        },
        "item": {
          "id": "e3804fa5-6c87-4503-b55e-4649b7f13211",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "33c1ede0-4387-4df8-8075-4c25e1f1241c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "1d3fc970-1bb2-4180-87a0-55e4d8bcf925",
        "cursor": {
          "ref": "f41b53fc-9aa6-43d4-8539-c59c9209f280",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e7895547-d4b6-4ec2-b085-a6e06d577ab1"
        },
        "item": {
          "id": "1d3fc970-1bb2-4180-87a0-55e4d8bcf925",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "33abbb17-24a4-45f8-9154-337e89dbb1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "150ed674-fb73-407a-a77f-183106394be1",
        "cursor": {
          "ref": "20f8011d-d946-4f3e-ab6d-713e4d16b7f6",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f981f590-423c-43cb-8a7f-49eed74951d0"
        },
        "item": {
          "id": "150ed674-fb73-407a-a77f-183106394be1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "048eeea0-2086-458e-b9bf-668dedbdf56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "fa072fbd-5592-4e43-b579-6885e6589521",
        "cursor": {
          "ref": "8e702f76-7cf1-4ab3-9383-f11ca4405a20",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8f8c77e6-9661-4a96-bc09-d2136d50e63a"
        },
        "item": {
          "id": "fa072fbd-5592-4e43-b579-6885e6589521",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "df218942-3779-49fb-a910-d54aaf7857b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d6681d95-4c9b-4e43-9daf-fc61c8fab254",
        "cursor": {
          "ref": "9cf0063b-7874-45e7-a699-357f022d1c88",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "98def18c-772e-4c18-b93d-066bfe59653d"
        },
        "item": {
          "id": "d6681d95-4c9b-4e43-9daf-fc61c8fab254",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f5599538-fe4d-4165-80eb-ad4320a88d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6345dc8e-b4a0-4cdc-927a-605816fc7d09",
        "cursor": {
          "ref": "32a47934-59f3-4e98-9809-aa6e891d8335",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3a555015-8da4-40b6-af8a-6c135deb08de"
        },
        "item": {
          "id": "6345dc8e-b4a0-4cdc-927a-605816fc7d09",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "40f20755-53a0-4d29-a95e-0b8eaeb1aa1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "212231f7-86f0-4167-8766-79b04759979a",
        "cursor": {
          "ref": "0c405827-d807-4efe-8494-e86247cbfb9b",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "22255ef4-595c-4744-8d0a-b2b272cb0934"
        },
        "item": {
          "id": "212231f7-86f0-4167-8766-79b04759979a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "766392de-ad2f-421f-89bf-4d2bacd91cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f501cfb8-1569-4fc8-8049-b1f89ff2637e",
        "cursor": {
          "ref": "94ba08ec-509a-4f77-88a6-1aa9c9bc8f57",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f4f5e0e8-9738-4cea-b4fa-515d17c31330"
        },
        "item": {
          "id": "f501cfb8-1569-4fc8-8049-b1f89ff2637e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ed9f40a6-92ce-42dc-b6ce-cf762fb0697d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e80279ab-9e77-4ebc-b43e-96e45507d6e5",
        "cursor": {
          "ref": "9f841e56-491a-4c36-aa0d-83251403789b",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "292add27-fadd-473a-a885-ac49435971a7"
        },
        "item": {
          "id": "e80279ab-9e77-4ebc-b43e-96e45507d6e5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "85d05ea9-f348-4d13-b34f-a0c8fd309f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "64bc9811-a637-488b-aa6b-27fa065b5e45",
        "cursor": {
          "ref": "bfe4cd08-279d-47fc-8ad8-a355c149367a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c24184cc-95a8-4480-a2dd-5b84cc3ab9cd"
        },
        "item": {
          "id": "64bc9811-a637-488b-aa6b-27fa065b5e45",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2cca2ee5-dfa7-4c06-a73b-ae56af6cf7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0b5f299a-62bc-44e3-87b2-20b51929dccf",
        "cursor": {
          "ref": "f5dd4a64-7aba-4ef3-8f9e-af57ed0edc86",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "83535035-55ef-4aac-9b14-55061c686a37"
        },
        "item": {
          "id": "0b5f299a-62bc-44e3-87b2-20b51929dccf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "397d377b-a490-4ebb-aa57-c98e9a4767b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "3342ef69-04a7-4937-ad0d-adcebf0046e5",
        "cursor": {
          "ref": "2f6f1c00-0924-4a7f-89cc-3ff168f4a81e",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "db7c8527-63aa-45ce-a511-82400e252001"
        },
        "item": {
          "id": "3342ef69-04a7-4937-ad0d-adcebf0046e5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2b8760ca-848e-4ccc-99d6-0fdc3405ed3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "62b510b7-fcd7-499e-aea8-905228cf9044",
        "cursor": {
          "ref": "72373a46-bef3-49dc-8528-074b25c22266",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1f5c4f8e-11cd-4917-885f-c8305284522d"
        },
        "item": {
          "id": "62b510b7-fcd7-499e-aea8-905228cf9044",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ad5550e6-b228-4940-a84e-0978dc1700c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "0b41eb6a-18e2-4826-8776-ccd2d96091e9",
        "cursor": {
          "ref": "6f482e90-219d-45bb-b8a2-e13dd75c4dd5",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2b0c4c64-76f7-41e2-af9b-2cace9be2558"
        },
        "item": {
          "id": "0b41eb6a-18e2-4826-8776-ccd2d96091e9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6d548ac3-ddac-4047-8efe-9d089bf3d9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "40c28913-9a76-46ad-98de-164611c90044",
        "cursor": {
          "ref": "e35561bb-316f-4204-8687-2d1ec12a8a49",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1649a976-fc5a-41cc-a0ab-f882fe9984b7"
        },
        "item": {
          "id": "40c28913-9a76-46ad-98de-164611c90044",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "299e3cc2-4f67-4f66-9db0-d176d1918a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "bfc27256-74f1-44f4-a96c-2522b459c038",
        "cursor": {
          "ref": "eb6959c5-1295-48e4-93cf-948f440c67c7",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1c76d0f3-6049-4db5-8af2-09849ca80d75"
        },
        "item": {
          "id": "bfc27256-74f1-44f4-a96c-2522b459c038",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "52b01956-db76-49f2-a253-dbcd00a2a141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ddae6de7-7754-421a-bbc5-b8e2c53d09a1",
        "cursor": {
          "ref": "420a4512-6026-4e18-aae1-8ce339d03e57",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d9437c7d-d168-4675-8b83-010e2f5c4664"
        },
        "item": {
          "id": "ddae6de7-7754-421a-bbc5-b8e2c53d09a1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bf502c85-643b-4797-ada8-2bed1a786203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "08e58d74-ba4e-44d4-aa62-5f6ccdcb9817",
        "cursor": {
          "ref": "ba264a78-b2f6-4ffc-b102-3b07333da531",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "22fc60b3-4a67-41f0-b19a-e2d608eccfab"
        },
        "item": {
          "id": "08e58d74-ba4e-44d4-aa62-5f6ccdcb9817",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "194e8f37-df72-4537-8c41-98ec5ab29954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "21551702-82d3-46c5-ab53-cfa15dcd0a41",
        "cursor": {
          "ref": "8394c641-054a-4fff-b2fa-ce2698921608",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0c30493b-ae10-476c-9fc1-cbef3bb728a9"
        },
        "item": {
          "id": "21551702-82d3-46c5-ab53-cfa15dcd0a41",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "53e923bb-b8d6-44cc-8607-be0eacd1359b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7651,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "18c09c12-f1d2-4bee-877b-2ee3e5a09738",
        "cursor": {
          "ref": "2b271330-e245-4864-890e-16678f2015af",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c3f1f6f3-a62b-4f45-9df8-02c95a2a3568"
        },
        "item": {
          "id": "18c09c12-f1d2-4bee-877b-2ee3e5a09738",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4f4658da-700f-41f7-8a64-2606bbd2bdeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5949,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "4b6e18ce-7f08-4c39-93cd-fa5d617f5437",
        "cursor": {
          "ref": "d098bf79-17e2-40c9-a6c1-edd207da3da6",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2a0fda9a-4015-4846-9905-b4c15c0c41e0"
        },
        "item": {
          "id": "4b6e18ce-7f08-4c39-93cd-fa5d617f5437",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e64d279a-44c5-436c-aaa8-b404aa8c3235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6737,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c567ff4f-58c0-432c-8ca2-a64b870e855c",
        "cursor": {
          "ref": "c7e3786e-bce8-4a8f-9dfa-b4ddae19ec66",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "39fb265a-ad01-4924-9416-d3d219f566aa"
        },
        "item": {
          "id": "c567ff4f-58c0-432c-8ca2-a64b870e855c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b9bdec18-3027-4097-8d81-0be730bea43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6767,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ace21b3c-c48d-4efc-ab18-f15ef56d0b6c",
        "cursor": {
          "ref": "da4da5a4-3cca-4eb7-bf3e-3dc4bdf67680",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "67ade914-91e5-4740-ae47-e0dac08f5f17"
        },
        "item": {
          "id": "ace21b3c-c48d-4efc-ab18-f15ef56d0b6c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3bb834d2-81c7-48c4-b6e9-f6c9ee9a63ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5547,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e5f44214-6aca-486a-abb2-868b03e79ef5",
        "cursor": {
          "ref": "97125950-a1aa-4f21-955c-a5a81d03e6fa",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "90d71400-11e8-4e7f-8d9c-2ab0c3f5ab3b"
        },
        "item": {
          "id": "e5f44214-6aca-486a-abb2-868b03e79ef5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "aa5fd984-dcd0-42af-b3b3-084891d0a9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "217cfc5c-8419-4682-92c8-5a5ddbd31330",
        "cursor": {
          "ref": "b6706318-ec2c-422f-b2c1-b2be715c52ba",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e2272b44-7548-4d46-9083-ee30c3646631"
        },
        "item": {
          "id": "217cfc5c-8419-4682-92c8-5a5ddbd31330",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "85bef0b7-df9a-4197-8b7a-b90ba24162c4",
          "status": "Created",
          "code": 201,
          "responseTime": 6516,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "dec99800-56af-4455-a773-8f5064aed488",
        "cursor": {
          "ref": "608869c9-f7e0-4bb0-ad14-2d400164ccf1",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "09c5b0e1-fb89-4628-9652-de6410a13ce5"
        },
        "item": {
          "id": "dec99800-56af-4455-a773-8f5064aed488",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b8efb4c4-4b2d-4f09-b2c7-d045a847418f",
          "status": "Created",
          "code": 201,
          "responseTime": 5253,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8f84dd27-1601-44e3-ac43-2e41baea1984",
        "cursor": {
          "ref": "0a590469-2011-4322-a701-b030197c8684",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b45fd30-304e-4173-8ae2-f0aef2afc16b"
        },
        "item": {
          "id": "8f84dd27-1601-44e3-ac43-2e41baea1984",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "093c792b-1a3f-4b8c-a9aa-af8167735822",
          "status": "Created",
          "code": 201,
          "responseTime": 6648,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7b991cb5-8488-473d-8dac-17b90e9426c1",
        "cursor": {
          "ref": "7871d520-4fa1-4e36-9bb7-7d81d3a152a6",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "06ff7dd9-bc7b-4227-9e02-5db5d75069c3"
        },
        "item": {
          "id": "7b991cb5-8488-473d-8dac-17b90e9426c1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "95a4db9b-365e-4576-ac65-37925c8609a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4e8bf637-1cdc-4a9e-b635-d0232f606492",
        "cursor": {
          "ref": "bcbb6043-2249-4a78-9378-419ca68b7b32",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "28732da6-7472-4107-afc6-dfc52edb2f39"
        },
        "item": {
          "id": "4e8bf637-1cdc-4a9e-b635-d0232f606492",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "db2d2632-4cb9-414a-a5a0-b0d9a3683216",
          "status": "Created",
          "code": 201,
          "responseTime": 4868,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1d1eab30-9257-4bb3-8eac-aab8c01af3f9",
        "cursor": {
          "ref": "4cf11396-972d-4181-b757-1d35ad21e1f2",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "22dce7b6-537c-4a64-b07e-af57a37f8a93"
        },
        "item": {
          "id": "1d1eab30-9257-4bb3-8eac-aab8c01af3f9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a68f933d-9a3e-43e0-9aea-cc8c916bba01",
          "status": "Created",
          "code": 201,
          "responseTime": 6874,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0e966181-e652-4731-b388-2b2fff69b1ec",
        "cursor": {
          "ref": "4cfd7a01-eab3-4454-a83d-eee197442730",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5427e160-2fb1-4cfb-90c9-7c48e0483905"
        },
        "item": {
          "id": "0e966181-e652-4731-b388-2b2fff69b1ec",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d299472d-d2c1-4afd-8c7e-29b55aeee521",
          "status": "Created",
          "code": 201,
          "responseTime": 4905,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f82b9416-da76-40de-8c3e-c1453997bf79",
        "cursor": {
          "ref": "4930911b-b69f-4af3-85a9-67c7dc771b85",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c19a2d68-42f5-458f-b7ae-178b29d403ae"
        },
        "item": {
          "id": "f82b9416-da76-40de-8c3e-c1453997bf79",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4a30eef5-3fce-4b2d-a443-f4d5b32c3b08",
          "status": "Created",
          "code": 201,
          "responseTime": 7076,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9e1d619e-3a33-4c7b-aa4c-48840c15a4ad",
        "cursor": {
          "ref": "824137c5-303a-430f-b70c-a6e928293eb3",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a1880bdf-6558-4df4-a4bd-7f803b10deb9"
        },
        "item": {
          "id": "9e1d619e-3a33-4c7b-aa4c-48840c15a4ad",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "39414626-3cae-41e3-aca8-ebe941bad828",
          "status": "Created",
          "code": 201,
          "responseTime": 4948,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7e4eb012-720c-4cac-9535-f96ce3510287",
        "cursor": {
          "ref": "49588006-e8d4-4ce4-ba7d-c9263bc626f8",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dc76b05e-b72a-406d-ba45-bcea1e9f7457"
        },
        "item": {
          "id": "7e4eb012-720c-4cac-9535-f96ce3510287",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "38bb92fc-efc0-4591-97a9-cc26c157fe1f",
          "status": "Created",
          "code": 201,
          "responseTime": 7128,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5cc96df3-bc99-4aa9-b710-241061757729",
        "cursor": {
          "ref": "34bf1f44-5cdb-471a-bcee-6007b028b793",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "902c413e-e768-441b-ab04-bc4530ca4919"
        },
        "item": {
          "id": "5cc96df3-bc99-4aa9-b710-241061757729",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7cf02b09-34b6-45d6-a884-b2f92095b39c",
          "status": "Created",
          "code": 201,
          "responseTime": 5261,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0c60175a-7313-4e45-97ea-b8343b800cd0",
        "cursor": {
          "ref": "6cc0dc7a-2570-4f40-80eb-e8bae59331d6",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fb140bea-1e25-43f7-a327-24707e4412e7"
        },
        "item": {
          "id": "0c60175a-7313-4e45-97ea-b8343b800cd0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2743f0bf-7bad-4a54-9a81-470c9f2b0491",
          "status": "Created",
          "code": 201,
          "responseTime": 6527,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f44f7422-f850-46c7-86da-03d0eee2962e",
        "cursor": {
          "ref": "8a3ee309-e2cd-4995-b9c4-8d76bb88eb17",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "649eade8-1d6a-476c-ba3e-231636330b54"
        },
        "item": {
          "id": "f44f7422-f850-46c7-86da-03d0eee2962e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "328b78e5-18e3-4c5a-a062-7ac27f93361a",
          "status": "Created",
          "code": 201,
          "responseTime": 5149,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a1123938-5797-4eb4-814e-7c938a7f8a2c",
        "cursor": {
          "ref": "f52ef439-c9d7-464a-b233-fb55be712702",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "07675518-eef1-4039-bd48-7483b72f2ed6"
        },
        "item": {
          "id": "a1123938-5797-4eb4-814e-7c938a7f8a2c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cbd6daed-b08d-4edf-82f6-7b04393ac3e7",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 4229,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e675036d-d3b2-419d-94a3-5d142623555b",
        "cursor": {
          "ref": "a5fc177d-e2fa-4da8-9baf-ea3cfeff52c7",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "572b14ec-4d71-4f3e-911f-bc79e85ee25d"
        },
        "item": {
          "id": "e675036d-d3b2-419d-94a3-5d142623555b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e3e4c527-c214-47fb-8955-fb880a3e4e7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "25801210-9618-4b6c-9477-4826ba791cd5",
        "cursor": {
          "ref": "07c4ad22-1c4f-42f3-8244-5b6656aa5072",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "53d1ba26-c5a6-467f-a6f4-261f911cfb74"
        },
        "item": {
          "id": "25801210-9618-4b6c-9477-4826ba791cd5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "105c99b5-4d75-4726-ab57-78b62d58fc41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "e6e72ea1-9e7d-4c42-ac0a-1b735ff0d54e",
        "cursor": {
          "ref": "3599496b-b374-484d-b6db-01ce816d45b4",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ac303040-b2d1-45e1-848c-bb9d9d3ef969"
        },
        "item": {
          "id": "e6e72ea1-9e7d-4c42-ac0a-1b735ff0d54e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "05a255d2-3093-44e3-b524-536e35fdd65d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "d706910a-29b3-4151-87a3-3fe7e6f4bee0",
        "cursor": {
          "ref": "5e51c620-36c9-4e7b-b785-03462dfd2020",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "416fa1da-8e2b-42fa-af8b-af3d44747663"
        },
        "item": {
          "id": "d706910a-29b3-4151-87a3-3fe7e6f4bee0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "777643b3-602f-40d6-bac4-ef4063434499",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "be434a56-2413-46ea-9dcf-6bb5a58802ca",
        "cursor": {
          "ref": "d3b3371a-5c10-45f4-908a-23e7c36178f3",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bb70d7b8-3ea8-4248-adf6-99cfe7e9c247"
        },
        "item": {
          "id": "be434a56-2413-46ea-9dcf-6bb5a58802ca",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4287c8f7-a859-4519-9942-1b5430890b7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "536fb23f-44d9-4c60-88fb-232988c9855f",
        "cursor": {
          "ref": "89a739bc-25af-4ab5-b98d-9449142fd360",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "448f0908-f5df-4893-b7e8-67da0d0017fd"
        },
        "item": {
          "id": "536fb23f-44d9-4c60-88fb-232988c9855f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "095a4bf3-3e61-43b3-90fa-fcd93dacfe5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "44aeeee6-0a67-4653-9a0b-d7cc3716aacd",
        "cursor": {
          "ref": "c0fcbb81-af15-427e-b045-23aa2cceb56d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e4ac20d6-24b6-47f9-9d01-4c2d3b7aae8e"
        },
        "item": {
          "id": "44aeeee6-0a67-4653-9a0b-d7cc3716aacd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6e275206-1f99-45a0-a2c4-ef994a50f8c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "e01b6304-109f-46c1-9721-97b01092f170",
        "cursor": {
          "ref": "59c55653-cd65-4faa-9f31-2655751d51ab",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "899a199c-a215-4ca0-b0c0-5e64b3f19a55"
        },
        "item": {
          "id": "e01b6304-109f-46c1-9721-97b01092f170",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ceff70bc-d9ff-4c66-8b0c-2c0315e77d48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "1fa730fe-abd7-41ad-a31b-ece8373a7916",
        "cursor": {
          "ref": "dc0f9c9e-16e1-40d1-81b0-9e926b0c5a87",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "93f8057d-b844-4c37-8e45-e4f9cc76e948"
        },
        "item": {
          "id": "1fa730fe-abd7-41ad-a31b-ece8373a7916",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eb595518-052d-40cf-857a-e7362da2090d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "33c7e50d-c2b2-4584-a902-ae4fcfeb18f0",
        "cursor": {
          "ref": "23e1c7dc-9253-4393-902a-2a873b926c85",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e17edc8d-aa5c-45c1-9a46-40cfff3da27a"
        },
        "item": {
          "id": "33c7e50d-c2b2-4584-a902-ae4fcfeb18f0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "29a9dab4-ddb3-4360-bcf5-d4c48b98a853",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f5c54d53-1deb-4d19-a300-8cb72be08c8b",
        "cursor": {
          "ref": "63928909-6823-44cd-869e-a487d77f3e3e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "61c08f8d-264b-4d99-948e-afa95e08d1a0"
        },
        "item": {
          "id": "f5c54d53-1deb-4d19-a300-8cb72be08c8b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "aad0651d-bb37-4dbd-9be3-b24add6cfac5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4e6e7b6e-9475-435c-a196-3f82ab8aae0b",
        "cursor": {
          "ref": "3efa6d12-6e94-4a2a-84ea-9baae7104049",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f23ada2c-97d7-4b6b-9113-328d65f2c8e4"
        },
        "item": {
          "id": "4e6e7b6e-9475-435c-a196-3f82ab8aae0b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d8307774-5997-4950-a218-4a724d41834f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a86f2e0a-7135-4053-9ca3-1087ba456bd9",
        "cursor": {
          "ref": "6ad612b8-4827-48cc-ab5d-fdb4b120a90f",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "33158896-7982-442c-9616-6ae99dcf07fa"
        },
        "item": {
          "id": "a86f2e0a-7135-4053-9ca3-1087ba456bd9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "85d28598-8137-4883-834f-5db3056af843",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bb9f6b02-644f-476a-a71f-6f01f206b896",
        "cursor": {
          "ref": "a302ce57-588c-4ab9-ab2a-e6e6033e2bb9",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5f802e90-3dc1-48b1-9a4b-9ee4a2c6c3ff"
        },
        "item": {
          "id": "bb9f6b02-644f-476a-a71f-6f01f206b896",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5d42ae68-3de5-49c4-ac08-e50638ea3804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "53983c32-e190-4944-b91c-282bffff76a4",
        "cursor": {
          "ref": "3f827ac5-3cf5-4092-9a39-b6a567ebd55d",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9d055a6b-9739-4c5e-83af-efed06c2554e"
        },
        "item": {
          "id": "53983c32-e190-4944-b91c-282bffff76a4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d6117335-8ecd-4205-b369-a5a1fd98c2f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ff9b499f-a968-4f7c-8761-e419fe0c1c24",
        "cursor": {
          "ref": "789a934f-6f8c-42c7-858e-53064854414e",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c885bc1a-ef12-45c4-b0a2-40a7a4a3e7e2"
        },
        "item": {
          "id": "ff9b499f-a968-4f7c-8761-e419fe0c1c24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "48da53aa-e107-4d99-ab4f-75524d375294",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8199c01e-081c-4d5d-8574-6701f9662efb",
        "cursor": {
          "ref": "47ec11c8-2793-46e6-b1fd-2110fc1b222c",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e8b86983-114c-41a4-a584-8bd4a95f30fe"
        },
        "item": {
          "id": "8199c01e-081c-4d5d-8574-6701f9662efb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3d7dee97-7026-4f0b-8a84-662285432293",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "821af91b-d70d-40ea-ac8d-3d3ee71e9ae9",
        "cursor": {
          "ref": "4885f9df-c0a4-4320-b047-47653bd46a0c",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a46d1e72-678d-4ce1-9a09-e550266c9dc2"
        },
        "item": {
          "id": "821af91b-d70d-40ea-ac8d-3d3ee71e9ae9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f91a074d-e04d-41a9-b24d-e59b92a07131",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "dab26989-0109-410d-b8f7-776608f08b2d",
        "cursor": {
          "ref": "a3e3c479-127c-4907-afa9-e97931aa33fb",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9f8a6b3d-3e02-4049-9812-171a40534c48"
        },
        "item": {
          "id": "dab26989-0109-410d-b8f7-776608f08b2d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9b3264be-b418-45fd-ab6e-303b1a705c38",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "c9e19546-57c5-4dfe-bd75-087a125d273e",
        "cursor": {
          "ref": "643c1221-165b-48e6-86c6-518fcbfd976b",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "350e7081-a1d8-4608-9011-11d42dbef4e3"
        },
        "item": {
          "id": "c9e19546-57c5-4dfe-bd75-087a125d273e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8bc64a90-4542-4ffa-8933-6cb1cffec942",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "b8de232a-9fbd-41bf-a52d-34c8e7fd49e0",
        "cursor": {
          "ref": "02ed8548-1005-4038-801e-bf1b34087712",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e9456063-eb72-4341-9b34-0a7882343324"
        },
        "item": {
          "id": "b8de232a-9fbd-41bf-a52d-34c8e7fd49e0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f764627f-4d6b-42c6-a8cf-ddab947c5beb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "55895dcb-dfb2-4ad8-a30b-ca99f0c4bd58",
        "cursor": {
          "ref": "59cd0947-241d-4a0a-9ae4-ba00e054990e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a74840c1-3328-4ee3-a9b3-c51cbe2d8054"
        },
        "item": {
          "id": "55895dcb-dfb2-4ad8-a30b-ca99f0c4bd58",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c2e73c43-9943-40db-8af4-ba52445ea624",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "a30cf917-5f12-4669-be7e-c54c120fdf7f",
        "cursor": {
          "ref": "53dd7563-a686-4782-ab81-66164e16ba89",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2ebea27d-3213-473e-8c15-1dc3e0436491"
        },
        "item": {
          "id": "a30cf917-5f12-4669-be7e-c54c120fdf7f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "87f43b00-5372-4848-be57-d564b0b93b04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "a3ca6569-36e2-495e-b68c-bf5261cdf1df",
        "cursor": {
          "ref": "c436b891-c86f-455e-af7c-81a36924bfe2",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "648f05bd-a411-4864-8b33-04ac6864ffc5"
        },
        "item": {
          "id": "a3ca6569-36e2-495e-b68c-bf5261cdf1df",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8bd0ac7d-a179-494d-b57b-6554f9bf7775",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "2f27f073-afcf-4398-b002-3a25bf9321eb",
        "cursor": {
          "ref": "a5a288ea-d8dd-422d-941a-7ffbff101411",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "032c6610-6735-4b28-9dce-9328e2e07d60"
        },
        "item": {
          "id": "2f27f073-afcf-4398-b002-3a25bf9321eb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f74bb50c-dac6-4020-a235-190ddad06fef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "ce5b484e-2869-46ba-99a4-ab4c41e8228a",
        "cursor": {
          "ref": "471858ca-d81f-47cc-8f56-e1f73f9ca6e0",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0c3f3dbc-8e07-4b8b-b5fb-c5b470eebd94"
        },
        "item": {
          "id": "ce5b484e-2869-46ba-99a4-ab4c41e8228a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "aad9a77c-fa8c-4eab-b969-ef1078b35ce4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "0867f648-52b8-42e8-8bcc-08b8f1ecd14e",
        "cursor": {
          "ref": "93345a52-b368-4e68-b611-9dbd038bfccd",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "50d5cca6-3514-4854-9a54-388fb9fb31d2"
        },
        "item": {
          "id": "0867f648-52b8-42e8-8bcc-08b8f1ecd14e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "233c5c41-2ae8-4651-8bfb-8e91254f1016",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "776e9dd0-2791-4f96-aef9-2f5586bb7829",
        "cursor": {
          "ref": "23762ee8-7925-4d44-823e-81bb3fa4cc4d",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "230793b9-7d2f-43e5-b427-da1071c62cc5"
        },
        "item": {
          "id": "776e9dd0-2791-4f96-aef9-2f5586bb7829",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e165f2c3-5fbe-4cb7-b181-8a9368b6d562",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "527cf62d-561a-4a4f-b125-53acccdcc999",
        "cursor": {
          "ref": "70090c1d-7112-416c-ac20-7d90bc334b09",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "119b1eed-3864-4a7b-b148-ed6e0c4e984b"
        },
        "item": {
          "id": "527cf62d-561a-4a4f-b125-53acccdcc999",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6ebc9fcf-ae11-4829-92f7-c797f2f14599",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "bbe100ca-9c74-429b-8ea7-e647e0aab07e",
        "cursor": {
          "ref": "7c50ebd9-b4de-422f-809a-4923bf960e34",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1d273cf0-c510-4d37-8de1-fca82bbfdfee"
        },
        "item": {
          "id": "bbe100ca-9c74-429b-8ea7-e647e0aab07e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9557bf4c-58ed-4d63-b92a-06a02d01c404",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "50f4e264-6622-40a0-bce1-2b33d0d99494",
        "cursor": {
          "ref": "d44c5f15-e45d-4fa1-a0f9-478e19a0d7d0",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5fcdb86e-6aec-484f-b5ff-4c7e6729ec77"
        },
        "item": {
          "id": "50f4e264-6622-40a0-bce1-2b33d0d99494",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "55584c30-679e-4139-98e9-76c6126116e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "ecc9ba5b-416d-4559-af5d-74ed1cdaddae",
        "cursor": {
          "ref": "7f20b50e-e5f6-4a15-9923-b0d39a8ae7df",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "64fa9fa3-ad4b-44be-8c70-628b0eb48b58"
        },
        "item": {
          "id": "ecc9ba5b-416d-4559-af5d-74ed1cdaddae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "420f657a-e62b-40d0-8dbe-4f27807999fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4dbe60a7-8cdb-48e9-b342-4c90703bb4fc",
        "cursor": {
          "ref": "b6265f0b-e888-4f2b-b788-cb200a3b7fca",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3d94b46a-6a87-4372-ab03-0db798cdb0f6"
        },
        "item": {
          "id": "4dbe60a7-8cdb-48e9-b342-4c90703bb4fc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a8cd8ba8-3b61-4285-b429-cbc1f3b8bcfc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "35a76c6b-e95d-4f1b-b52c-50feebe8eae3",
        "cursor": {
          "ref": "686c6dcf-6dcd-4d84-a7b4-99fd0d92f1bd",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5bf662d9-1e95-4c4d-a977-f31b40a676c8"
        },
        "item": {
          "id": "35a76c6b-e95d-4f1b-b52c-50feebe8eae3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "675fe1e1-3c31-44c7-9a34-7609abfbc2cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "fc26aa99-434f-4f22-8177-ad4b7fff4738",
        "cursor": {
          "ref": "7f2e6c5b-bc20-4f92-8b31-076abbaec1b8",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "546ff417-2d66-4453-a58d-4f72d11a6daa"
        },
        "item": {
          "id": "fc26aa99-434f-4f22-8177-ad4b7fff4738",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "009b96f5-65c3-4883-8ab2-755340943d9d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "0d938c6b-acbd-48a6-a755-d670cd70b83f",
        "cursor": {
          "ref": "4423fb7d-bd75-49e7-92ba-40e29b2dd266",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "58dfaa9f-8807-4554-8293-69394ee9d12f"
        },
        "item": {
          "id": "0d938c6b-acbd-48a6-a755-d670cd70b83f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "11f5bc16-00f7-4e9d-b0ed-e5ba846bdb7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "c407d952-1fa2-4c47-a502-6204819351cb",
        "cursor": {
          "ref": "df962b10-19ce-4fc1-9bce-061166e4f58c",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b13f623f-0efc-4e84-bf84-c788d52171e1"
        },
        "item": {
          "id": "c407d952-1fa2-4c47-a502-6204819351cb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8c9a8d3c-6dbf-4b43-a35c-8c89447cd35c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "0049a56e-2ca9-440b-930b-f8204f4df5b5",
        "cursor": {
          "ref": "0ccb4522-9020-4338-8a09-717de6ca3dc0",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "49a48dcb-171f-4d7d-9aaa-58e42472f0b3"
        },
        "item": {
          "id": "0049a56e-2ca9-440b-930b-f8204f4df5b5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3437bf57-521a-4b29-bba2-d15d47099630",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "19194cbc-c8c9-4531-9892-8c9146c6f770",
        "cursor": {
          "ref": "83615185-6feb-4593-876e-e5521ca0eb5c",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2a1fb344-ecaf-4c42-8478-6bb5e2c53051"
        },
        "item": {
          "id": "19194cbc-c8c9-4531-9892-8c9146c6f770",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6852bbf8-8b19-43aa-9320-1c26d8dfaa24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4444d6c6-6c9e-4174-a590-dac7ce2d2213",
        "cursor": {
          "ref": "ae78162b-0fcc-4712-a1b1-937dc2549a3c",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2e26d9cd-6711-444f-9fb4-5b4f79a0e8d8"
        },
        "item": {
          "id": "4444d6c6-6c9e-4174-a590-dac7ce2d2213",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "69e11420-b626-451b-b765-a40fd2fd9b06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "645fa379-f13c-4fc2-a469-1754f4d478f3",
        "cursor": {
          "ref": "a272d8a5-064d-42ff-a298-84c407ebd47b",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f139c864-9093-42bb-ad65-1fd432550b7b"
        },
        "item": {
          "id": "645fa379-f13c-4fc2-a469-1754f4d478f3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8e3bfd61-e793-45fe-aa0a-249a3b8e4390",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "b814a2c7-a460-4484-b4a2-8739ca63cc48",
        "cursor": {
          "ref": "eeee59da-85cc-4c05-aff7-802a76e7b331",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4c630f35-0f72-4ce7-948b-b5c7888fd3a1"
        },
        "item": {
          "id": "b814a2c7-a460-4484-b4a2-8739ca63cc48",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d372ba61-6e6f-4898-9c37-aad92d9ef374",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "54f617a9-e96d-4f3f-83b5-7ec69a24dc8c",
        "cursor": {
          "ref": "329d9baa-9ac4-414b-8852-4b76dec8672b",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "59b281c3-c572-468c-b9d5-92acf98c8d1a"
        },
        "item": {
          "id": "54f617a9-e96d-4f3f-83b5-7ec69a24dc8c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "72184465-369e-4e1f-b417-23b019dab75b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "dee431c8-eb31-4b2b-8530-03737a9c4840",
        "cursor": {
          "ref": "38ac37fc-6f00-4662-a63d-2892948f7b8b",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8dd86807-e376-4cb3-936e-e12f64dc4f76"
        },
        "item": {
          "id": "dee431c8-eb31-4b2b-8530-03737a9c4840",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f0f4bfb7-c82a-4d99-be80-3bcd3a9b846e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "1de28fda-30d7-4d15-b0b4-53b6d138d1d8",
        "cursor": {
          "ref": "891358b8-a963-43d0-bcab-7b96012c9d61",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "89153189-4160-49f5-af87-854d0aa756fc"
        },
        "item": {
          "id": "1de28fda-30d7-4d15-b0b4-53b6d138d1d8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a710a88e-821a-4f88-a72b-3014f79b6997",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "b05b5351-3e9b-4168-9364-11596ceadde5",
        "cursor": {
          "ref": "d90d86e9-45a3-44a1-8f3a-9f9c4805eee6",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0370db00-0043-4526-93a6-e1e85c44287d"
        },
        "item": {
          "id": "b05b5351-3e9b-4168-9364-11596ceadde5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7d1cea9b-6aa3-4189-90bc-c1c4a22b8994",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "0c33a12e-66c1-4034-8e63-e66572bec043",
        "cursor": {
          "ref": "3ec856c3-4c09-4af2-9448-1bb2ebe253c6",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7f394af8-0cfc-4148-b785-843117cf3d41"
        },
        "item": {
          "id": "0c33a12e-66c1-4034-8e63-e66572bec043",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "44386653-fd20-4852-82b1-6e715946ee20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8e72d32b-ea69-4933-8cbb-a5f8b71b2b7f",
        "cursor": {
          "ref": "4aebbca8-0bef-4cb6-977d-832ef0db499f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "df41eed5-07b6-487d-b3fd-3d9bc3b5ea9e"
        },
        "item": {
          "id": "8e72d32b-ea69-4933-8cbb-a5f8b71b2b7f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3d2c9a7f-3c6b-4449-b984-603a5211a0e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8bb0261c-a9a0-4372-8568-8abf9bb49a71",
        "cursor": {
          "ref": "1303f2e2-1e17-4d71-b34d-82eb99427dd0",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "412988ca-5f7d-4cf0-be2f-b7caf9173ba1"
        },
        "item": {
          "id": "8bb0261c-a9a0-4372-8568-8abf9bb49a71",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ecb006a9-4b4f-4721-8fba-aac1e52589c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d685db43-f243-4c78-97d5-9d17b0e1124b",
        "cursor": {
          "ref": "397a147a-a37f-4378-b697-51156976123c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "13e4683d-f355-4889-a52c-a13c0e3a7574"
        },
        "item": {
          "id": "d685db43-f243-4c78-97d5-9d17b0e1124b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0711cd15-e30b-4c98-92af-d880345a3404",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "d039a877-6571-4a76-9bc8-79d9fc34e317",
        "cursor": {
          "ref": "82265ba3-fe46-4f1f-9bff-b1e50a8aea2f",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4643d512-2633-4864-b554-4ad8e1309757"
        },
        "item": {
          "id": "d039a877-6571-4a76-9bc8-79d9fc34e317",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d382a48c-12af-4a87-9042-e8e9d88d63c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "80583d8f-4f9f-41ec-bb0d-ebb5d8901e98",
        "cursor": {
          "ref": "cd005554-60ba-4c70-84cc-aed12f56012e",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "209bc8c0-5a7d-475c-85ac-a977d86be411"
        },
        "item": {
          "id": "80583d8f-4f9f-41ec-bb0d-ebb5d8901e98",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4d81995b-9dbc-4ee3-a01a-1ea899965bfe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "914babda-ec3b-49c3-8a9c-46ec395c1221",
        "cursor": {
          "ref": "8c4609fa-ca10-4fe1-aa09-f43886c886c0",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "36c68a21-c7f9-4103-ad51-495b0ae04b3c"
        },
        "item": {
          "id": "914babda-ec3b-49c3-8a9c-46ec395c1221",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6ca9954c-8b68-47a6-a9b1-b897d43b8df9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "50c34d21-d55a-4064-93e2-fc15e5851c45",
        "cursor": {
          "ref": "c8406145-d1f4-48c6-b9c1-2d9651aaaf23",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "aae02296-3eaa-41d7-afb3-4310e7130d61"
        },
        "item": {
          "id": "50c34d21-d55a-4064-93e2-fc15e5851c45",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "84407b89-1c94-4c7d-bb2e-61925a56b26e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "b5ab46cf-57ed-4c48-9bf9-55c9810a93c2",
        "cursor": {
          "ref": "daf55535-3842-4824-82fd-57eed77fbcc2",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ea0d2b86-526a-4dfb-b7ac-5eb4448ec665"
        },
        "item": {
          "id": "b5ab46cf-57ed-4c48-9bf9-55c9810a93c2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "816a24c6-4185-4ab1-86da-692cce24f5e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "ca0b71cc-9e55-45d6-af21-648fcdfabbbb",
        "cursor": {
          "ref": "045e6f55-45ef-4ce5-a1e6-d08d8fd617fd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "64dac9c0-bc47-4598-8dd7-f13c165c6b09"
        },
        "item": {
          "id": "ca0b71cc-9e55-45d6-af21-648fcdfabbbb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "23a323db-21d3-4034-b5ce-95ce5732bf77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ca0b71cc-9e55-45d6-af21-648fcdfabbbb",
        "cursor": {
          "ref": "045e6f55-45ef-4ce5-a1e6-d08d8fd617fd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "64dac9c0-bc47-4598-8dd7-f13c165c6b09"
        },
        "item": {
          "id": "ca0b71cc-9e55-45d6-af21-648fcdfabbbb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "23a323db-21d3-4034-b5ce-95ce5732bf77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ddb947f1-cf22-47f7-8bea-07054d64bb3e",
        "cursor": {
          "ref": "ea5c2113-63ca-4207-8a5a-d807b3028fed",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "84664924-e50f-4763-bda4-ef60f9ff2e6e"
        },
        "item": {
          "id": "ddb947f1-cf22-47f7-8bea-07054d64bb3e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d4cdf7a3-5b81-47cf-892b-9e5960fb1e92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ddb947f1-cf22-47f7-8bea-07054d64bb3e",
        "cursor": {
          "ref": "ea5c2113-63ca-4207-8a5a-d807b3028fed",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "84664924-e50f-4763-bda4-ef60f9ff2e6e"
        },
        "item": {
          "id": "ddb947f1-cf22-47f7-8bea-07054d64bb3e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d4cdf7a3-5b81-47cf-892b-9e5960fb1e92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b3f51b39-b4c4-48e9-a391-ae1e34e99d44",
        "cursor": {
          "ref": "e8f0357a-e020-4655-8a3a-769276b27695",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9862b4eb-4d0f-4194-9216-72e4f99ff4f2"
        },
        "item": {
          "id": "b3f51b39-b4c4-48e9-a391-ae1e34e99d44",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "151b10a1-3497-4df9-8eee-6b79205ea6e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b3f51b39-b4c4-48e9-a391-ae1e34e99d44",
        "cursor": {
          "ref": "e8f0357a-e020-4655-8a3a-769276b27695",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9862b4eb-4d0f-4194-9216-72e4f99ff4f2"
        },
        "item": {
          "id": "b3f51b39-b4c4-48e9-a391-ae1e34e99d44",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "151b10a1-3497-4df9-8eee-6b79205ea6e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "dad9f9fe-1579-44ba-95ae-a3fed9e87dd6",
        "cursor": {
          "ref": "3c4763eb-89c5-4384-94ed-2e3835029cb9",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f484a6b2-2373-46b2-8bff-8d2c99fa4898"
        },
        "item": {
          "id": "dad9f9fe-1579-44ba-95ae-a3fed9e87dd6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ef2970fd-1922-43bf-8de9-8fdd710712f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "dad9f9fe-1579-44ba-95ae-a3fed9e87dd6",
        "cursor": {
          "ref": "3c4763eb-89c5-4384-94ed-2e3835029cb9",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f484a6b2-2373-46b2-8bff-8d2c99fa4898"
        },
        "item": {
          "id": "dad9f9fe-1579-44ba-95ae-a3fed9e87dd6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ef2970fd-1922-43bf-8de9-8fdd710712f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0d8e5003-3140-486c-bb96-6261907c4ea9",
        "cursor": {
          "ref": "f0708e48-db75-4f26-8c09-f495e8ae547e",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ddee2972-00f3-4c66-a188-b09c63f013d0"
        },
        "item": {
          "id": "0d8e5003-3140-486c-bb96-6261907c4ea9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c10aad3e-5a7c-4394-8c42-4d990372ebac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0d8e5003-3140-486c-bb96-6261907c4ea9",
        "cursor": {
          "ref": "f0708e48-db75-4f26-8c09-f495e8ae547e",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ddee2972-00f3-4c66-a188-b09c63f013d0"
        },
        "item": {
          "id": "0d8e5003-3140-486c-bb96-6261907c4ea9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c10aad3e-5a7c-4394-8c42-4d990372ebac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f2f66ade-c6ca-4355-b331-2ac2b6ae532f",
        "cursor": {
          "ref": "3fe7af48-ae5d-49fc-873d-794c79d81602",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "deab6f81-cc4f-4e66-bffe-dcd850e5d729"
        },
        "item": {
          "id": "f2f66ade-c6ca-4355-b331-2ac2b6ae532f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e5a15d72-e008-4aff-911f-abb52e2c6fe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f2f66ade-c6ca-4355-b331-2ac2b6ae532f",
        "cursor": {
          "ref": "3fe7af48-ae5d-49fc-873d-794c79d81602",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "deab6f81-cc4f-4e66-bffe-dcd850e5d729"
        },
        "item": {
          "id": "f2f66ade-c6ca-4355-b331-2ac2b6ae532f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e5a15d72-e008-4aff-911f-abb52e2c6fe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c88fa6c0-6466-4064-86a9-73bedb3e9842",
        "cursor": {
          "ref": "4cb034de-2c11-469c-b853-6be8ae61d85d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d154e822-d42f-4c69-a5d5-e8db781a1baa"
        },
        "item": {
          "id": "c88fa6c0-6466-4064-86a9-73bedb3e9842",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "da55c986-9714-449d-93ae-27018d3e5f31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c88fa6c0-6466-4064-86a9-73bedb3e9842",
        "cursor": {
          "ref": "4cb034de-2c11-469c-b853-6be8ae61d85d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d154e822-d42f-4c69-a5d5-e8db781a1baa"
        },
        "item": {
          "id": "c88fa6c0-6466-4064-86a9-73bedb3e9842",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "da55c986-9714-449d-93ae-27018d3e5f31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9c147d7c-eecf-47b6-9974-4e975dc5ebce",
        "cursor": {
          "ref": "046f9eec-7d63-4466-8b52-adfcdfe9f1f1",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "245aca9d-a177-457f-a0d4-23a2ff32f526"
        },
        "item": {
          "id": "9c147d7c-eecf-47b6-9974-4e975dc5ebce",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f8b86412-b64d-44cd-b7c4-32d14ef53c48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9c147d7c-eecf-47b6-9974-4e975dc5ebce",
        "cursor": {
          "ref": "046f9eec-7d63-4466-8b52-adfcdfe9f1f1",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "245aca9d-a177-457f-a0d4-23a2ff32f526"
        },
        "item": {
          "id": "9c147d7c-eecf-47b6-9974-4e975dc5ebce",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f8b86412-b64d-44cd-b7c4-32d14ef53c48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "82355967-5f24-48b3-ab65-7a4e12e0c669",
        "cursor": {
          "ref": "75a85970-589f-4fa1-91ef-a8786946668d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "48971cf5-c4cc-4d18-82c3-8d11676f5fac"
        },
        "item": {
          "id": "82355967-5f24-48b3-ab65-7a4e12e0c669",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "64a83512-8b58-463b-baf9-25af886f8129",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "82355967-5f24-48b3-ab65-7a4e12e0c669",
        "cursor": {
          "ref": "75a85970-589f-4fa1-91ef-a8786946668d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "48971cf5-c4cc-4d18-82c3-8d11676f5fac"
        },
        "item": {
          "id": "82355967-5f24-48b3-ab65-7a4e12e0c669",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "64a83512-8b58-463b-baf9-25af886f8129",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a71c8f49-a87a-4846-ae3e-31476d990c5f",
        "cursor": {
          "ref": "dd829daf-2bba-4842-bb56-3ecd441220ed",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ec6385c9-0448-41d6-9e4c-5595f21b4e2b"
        },
        "item": {
          "id": "a71c8f49-a87a-4846-ae3e-31476d990c5f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3417010f-5acf-4c98-9c66-cecc2b7a1a59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "a71c8f49-a87a-4846-ae3e-31476d990c5f",
        "cursor": {
          "ref": "dd829daf-2bba-4842-bb56-3ecd441220ed",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ec6385c9-0448-41d6-9e4c-5595f21b4e2b"
        },
        "item": {
          "id": "a71c8f49-a87a-4846-ae3e-31476d990c5f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3417010f-5acf-4c98-9c66-cecc2b7a1a59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8b79f03b-05b9-4df9-955e-454fc500bc43",
        "cursor": {
          "ref": "96525282-02e2-4ff1-864a-6cb13cf6af09",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cf185bc1-b484-467d-b735-a6237effc3d5"
        },
        "item": {
          "id": "8b79f03b-05b9-4df9-955e-454fc500bc43",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9b26620d-e10b-48f2-be4f-22bfcf13414f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8b79f03b-05b9-4df9-955e-454fc500bc43",
        "cursor": {
          "ref": "96525282-02e2-4ff1-864a-6cb13cf6af09",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cf185bc1-b484-467d-b735-a6237effc3d5"
        },
        "item": {
          "id": "8b79f03b-05b9-4df9-955e-454fc500bc43",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9b26620d-e10b-48f2-be4f-22bfcf13414f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "428a7c19-8a02-464e-9945-24b42a93178d",
        "cursor": {
          "ref": "30d543f0-0a37-4603-b275-77671f985859",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "42a895fd-e523-4985-9858-960bd5253505"
        },
        "item": {
          "id": "428a7c19-8a02-464e-9945-24b42a93178d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ba3bccb1-23d0-435c-84ac-2bff807eb0a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "428a7c19-8a02-464e-9945-24b42a93178d",
        "cursor": {
          "ref": "30d543f0-0a37-4603-b275-77671f985859",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "42a895fd-e523-4985-9858-960bd5253505"
        },
        "item": {
          "id": "428a7c19-8a02-464e-9945-24b42a93178d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ba3bccb1-23d0-435c-84ac-2bff807eb0a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "648ac39d-6088-48a6-9203-4a49f43bd2ee",
        "cursor": {
          "ref": "da53752f-9878-4c37-b000-bab85edeb0b4",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2432e3a0-cf5e-445d-b8a4-2f2b47e013e2"
        },
        "item": {
          "id": "648ac39d-6088-48a6-9203-4a49f43bd2ee",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "20b8d624-6fff-4112-a451-2539bd928de8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 62,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "648ac39d-6088-48a6-9203-4a49f43bd2ee",
        "cursor": {
          "ref": "da53752f-9878-4c37-b000-bab85edeb0b4",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2432e3a0-cf5e-445d-b8a4-2f2b47e013e2"
        },
        "item": {
          "id": "648ac39d-6088-48a6-9203-4a49f43bd2ee",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "20b8d624-6fff-4112-a451-2539bd928de8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 62,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7ea3a0be-dfd2-461e-874b-ff498abca7ce",
        "cursor": {
          "ref": "bb7cce8b-7baa-4837-8890-3cb280ab3947",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "28d06953-97e5-4990-8683-4c1b8dfe1494"
        },
        "item": {
          "id": "7ea3a0be-dfd2-461e-874b-ff498abca7ce",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8969559-b98f-4ea4-b6ea-69c6d66e091b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7ea3a0be-dfd2-461e-874b-ff498abca7ce",
        "cursor": {
          "ref": "bb7cce8b-7baa-4837-8890-3cb280ab3947",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "28d06953-97e5-4990-8683-4c1b8dfe1494"
        },
        "item": {
          "id": "7ea3a0be-dfd2-461e-874b-ff498abca7ce",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8969559-b98f-4ea4-b6ea-69c6d66e091b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "713c4081-36c7-42e5-9f90-95b68666fbf5",
        "cursor": {
          "ref": "e54159ed-7762-452d-8463-3835d8a1887e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3e4ededc-acf6-4477-925d-748f808883d6"
        },
        "item": {
          "id": "713c4081-36c7-42e5-9f90-95b68666fbf5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef5fe06e-da01-4e06-ba5f-44bf41a9daf8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "713c4081-36c7-42e5-9f90-95b68666fbf5",
        "cursor": {
          "ref": "e54159ed-7762-452d-8463-3835d8a1887e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3e4ededc-acf6-4477-925d-748f808883d6"
        },
        "item": {
          "id": "713c4081-36c7-42e5-9f90-95b68666fbf5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef5fe06e-da01-4e06-ba5f-44bf41a9daf8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "576629ef-d46c-49c0-9902-03dc5ff926f9",
        "cursor": {
          "ref": "e6492045-4688-4305-b437-822084552d4a",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a8510048-e93f-4ee6-838a-ece5d4a3f823"
        },
        "item": {
          "id": "576629ef-d46c-49c0-9902-03dc5ff926f9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "88cf8618-b826-4551-a9ac-7063e3833592",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "576629ef-d46c-49c0-9902-03dc5ff926f9",
        "cursor": {
          "ref": "e6492045-4688-4305-b437-822084552d4a",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a8510048-e93f-4ee6-838a-ece5d4a3f823"
        },
        "item": {
          "id": "576629ef-d46c-49c0-9902-03dc5ff926f9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "88cf8618-b826-4551-a9ac-7063e3833592",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "da172dc3-2f10-4186-a2f2-1de0204a0f31",
        "cursor": {
          "ref": "56777e65-d54c-4757-b4e5-67ec2b43b8c7",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9c11943d-50af-4e52-a398-2ba0791c85c6"
        },
        "item": {
          "id": "da172dc3-2f10-4186-a2f2-1de0204a0f31",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c050c11e-7232-4bfc-af68-22fad41e8c72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "da172dc3-2f10-4186-a2f2-1de0204a0f31",
        "cursor": {
          "ref": "56777e65-d54c-4757-b4e5-67ec2b43b8c7",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9c11943d-50af-4e52-a398-2ba0791c85c6"
        },
        "item": {
          "id": "da172dc3-2f10-4186-a2f2-1de0204a0f31",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c050c11e-7232-4bfc-af68-22fad41e8c72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "85deb8ab-9ef5-4adb-906a-4cb1d2138f41",
        "cursor": {
          "ref": "7bc5716d-741b-4667-a809-a0adaa28a4ec",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f1218bab-fddc-46e5-9db3-fdbca42e6a8c"
        },
        "item": {
          "id": "85deb8ab-9ef5-4adb-906a-4cb1d2138f41",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "74ba9841-5ee1-4f0a-91af-6806adbd1272",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "85deb8ab-9ef5-4adb-906a-4cb1d2138f41",
        "cursor": {
          "ref": "7bc5716d-741b-4667-a809-a0adaa28a4ec",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f1218bab-fddc-46e5-9db3-fdbca42e6a8c"
        },
        "item": {
          "id": "85deb8ab-9ef5-4adb-906a-4cb1d2138f41",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "74ba9841-5ee1-4f0a-91af-6806adbd1272",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3054be6e-a983-4fba-ae1b-dfde7cab9540",
        "cursor": {
          "ref": "b9bab589-5bbf-4407-9b89-d04d85eb4378",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "613d3a50-fe42-4ce6-bde9-67a02424109f"
        },
        "item": {
          "id": "3054be6e-a983-4fba-ae1b-dfde7cab9540",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "996c931d-3fa8-43c5-b214-b6330401b87c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3054be6e-a983-4fba-ae1b-dfde7cab9540",
        "cursor": {
          "ref": "b9bab589-5bbf-4407-9b89-d04d85eb4378",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "613d3a50-fe42-4ce6-bde9-67a02424109f"
        },
        "item": {
          "id": "3054be6e-a983-4fba-ae1b-dfde7cab9540",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "996c931d-3fa8-43c5-b214-b6330401b87c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "8089ff77-5800-42e2-b968-5f3eb1d8056d",
        "cursor": {
          "ref": "2df6fa51-f71a-45c3-a404-9833aee831b1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a800168e-663f-4f6e-b06d-2252d009be25"
        },
        "item": {
          "id": "8089ff77-5800-42e2-b968-5f3eb1d8056d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b386bdb2-e3b7-464e-81b4-519639609911",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8089ff77-5800-42e2-b968-5f3eb1d8056d",
        "cursor": {
          "ref": "2df6fa51-f71a-45c3-a404-9833aee831b1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a800168e-663f-4f6e-b06d-2252d009be25"
        },
        "item": {
          "id": "8089ff77-5800-42e2-b968-5f3eb1d8056d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b386bdb2-e3b7-464e-81b4-519639609911",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f23372da-a304-4967-bedb-c0259a99c3a5",
        "cursor": {
          "ref": "9a88ec7f-e57e-4414-81cd-e522d5714e66",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3aab8c9a-c5e5-4efd-9966-54c1dabc9d68"
        },
        "item": {
          "id": "f23372da-a304-4967-bedb-c0259a99c3a5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0893e4c9-91c1-4359-a5fd-ea217351e1e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f23372da-a304-4967-bedb-c0259a99c3a5",
        "cursor": {
          "ref": "9a88ec7f-e57e-4414-81cd-e522d5714e66",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3aab8c9a-c5e5-4efd-9966-54c1dabc9d68"
        },
        "item": {
          "id": "f23372da-a304-4967-bedb-c0259a99c3a5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0893e4c9-91c1-4359-a5fd-ea217351e1e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d34ab6ca-c709-41b3-8c58-0c4dc823f90a",
        "cursor": {
          "ref": "955fafc1-b9eb-436b-8095-a5f22ad34153",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "52dfb169-2ccf-4343-8093-23ee792f3ab4"
        },
        "item": {
          "id": "d34ab6ca-c709-41b3-8c58-0c4dc823f90a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4e1eec46-9bb2-49e8-a4b6-391947c86164",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 62,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d34ab6ca-c709-41b3-8c58-0c4dc823f90a",
        "cursor": {
          "ref": "955fafc1-b9eb-436b-8095-a5f22ad34153",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "52dfb169-2ccf-4343-8093-23ee792f3ab4"
        },
        "item": {
          "id": "d34ab6ca-c709-41b3-8c58-0c4dc823f90a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4e1eec46-9bb2-49e8-a4b6-391947c86164",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 62,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "39d7df7d-9035-43d5-a363-488169918444",
        "cursor": {
          "ref": "10bb8e17-e1aa-498c-b94d-5fb6570e2aed",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1dd710fa-181a-4974-9144-cdae7e9f7e90"
        },
        "item": {
          "id": "39d7df7d-9035-43d5-a363-488169918444",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "11cc731f-2c81-4f1a-9ec7-96d541423cb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "39d7df7d-9035-43d5-a363-488169918444",
        "cursor": {
          "ref": "10bb8e17-e1aa-498c-b94d-5fb6570e2aed",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1dd710fa-181a-4974-9144-cdae7e9f7e90"
        },
        "item": {
          "id": "39d7df7d-9035-43d5-a363-488169918444",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "11cc731f-2c81-4f1a-9ec7-96d541423cb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0e8ae50f-44ba-455c-b45b-cdc849eaebf1",
        "cursor": {
          "ref": "cf32f1b0-a223-4ea2-ba40-eaf1a1edf9e7",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "14c02e9d-35f2-4bbd-9ec3-ea072748ac74"
        },
        "item": {
          "id": "0e8ae50f-44ba-455c-b45b-cdc849eaebf1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cd3386e1-d51c-4c78-978c-870cc050b608",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0e8ae50f-44ba-455c-b45b-cdc849eaebf1",
        "cursor": {
          "ref": "cf32f1b0-a223-4ea2-ba40-eaf1a1edf9e7",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "14c02e9d-35f2-4bbd-9ec3-ea072748ac74"
        },
        "item": {
          "id": "0e8ae50f-44ba-455c-b45b-cdc849eaebf1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cd3386e1-d51c-4c78-978c-870cc050b608",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "52dd4f30-6960-4443-beb5-21a0ea9c66b5",
        "cursor": {
          "ref": "8c96d868-9d2b-49ba-93d8-706888d22e1a",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f49017af-8166-47a5-8375-7c12111f6289"
        },
        "item": {
          "id": "52dd4f30-6960-4443-beb5-21a0ea9c66b5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc5e8fdc-8e48-4cf6-875a-6fb096576ee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "52dd4f30-6960-4443-beb5-21a0ea9c66b5",
        "cursor": {
          "ref": "8c96d868-9d2b-49ba-93d8-706888d22e1a",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f49017af-8166-47a5-8375-7c12111f6289"
        },
        "item": {
          "id": "52dd4f30-6960-4443-beb5-21a0ea9c66b5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc5e8fdc-8e48-4cf6-875a-6fb096576ee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1fb2ee97-0a99-4884-849c-13c112b324ff",
        "cursor": {
          "ref": "0a243327-e2f2-4fc7-bd27-9539b9c89cf6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f702c016-6b61-4a14-b88b-3567e7966174"
        },
        "item": {
          "id": "1fb2ee97-0a99-4884-849c-13c112b324ff",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "568235f8-d8ec-42ec-8567-10e23412ab72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1fb2ee97-0a99-4884-849c-13c112b324ff",
        "cursor": {
          "ref": "0a243327-e2f2-4fc7-bd27-9539b9c89cf6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f702c016-6b61-4a14-b88b-3567e7966174"
        },
        "item": {
          "id": "1fb2ee97-0a99-4884-849c-13c112b324ff",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "568235f8-d8ec-42ec-8567-10e23412ab72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1ebb33a1-237b-4f92-a7e6-d09487549e41",
        "cursor": {
          "ref": "fdee3d3a-7c9b-4b4b-801a-c379ecb640c2",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cfeb4076-e155-42eb-88e2-cc405e06c508"
        },
        "item": {
          "id": "1ebb33a1-237b-4f92-a7e6-d09487549e41",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7fd12d55-29e7-4d1c-9f86-bc29b2639d92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1ebb33a1-237b-4f92-a7e6-d09487549e41",
        "cursor": {
          "ref": "fdee3d3a-7c9b-4b4b-801a-c379ecb640c2",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cfeb4076-e155-42eb-88e2-cc405e06c508"
        },
        "item": {
          "id": "1ebb33a1-237b-4f92-a7e6-d09487549e41",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7fd12d55-29e7-4d1c-9f86-bc29b2639d92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0c3b42ff-84cd-43a4-9b32-93c041f5e51b",
        "cursor": {
          "ref": "b5ef6cdb-f367-42ec-a0d6-5ebceed10f33",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ef503ba-600f-4409-b8da-4f20103578b0"
        },
        "item": {
          "id": "0c3b42ff-84cd-43a4-9b32-93c041f5e51b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d55e035e-ed3b-46ea-84bd-d35100c9a139",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0c3b42ff-84cd-43a4-9b32-93c041f5e51b",
        "cursor": {
          "ref": "b5ef6cdb-f367-42ec-a0d6-5ebceed10f33",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ef503ba-600f-4409-b8da-4f20103578b0"
        },
        "item": {
          "id": "0c3b42ff-84cd-43a4-9b32-93c041f5e51b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d55e035e-ed3b-46ea-84bd-d35100c9a139",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c394f38f-0fa3-4c9c-aced-8ee9d7120349",
        "cursor": {
          "ref": "333fe34b-e393-4e3f-a097-ff863b20c481",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "13493f9a-4233-4504-9da7-02212a32d840"
        },
        "item": {
          "id": "c394f38f-0fa3-4c9c-aced-8ee9d7120349",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4e2e7a82-5b2e-4e14-82a2-89e403935132",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c394f38f-0fa3-4c9c-aced-8ee9d7120349",
        "cursor": {
          "ref": "333fe34b-e393-4e3f-a097-ff863b20c481",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "13493f9a-4233-4504-9da7-02212a32d840"
        },
        "item": {
          "id": "c394f38f-0fa3-4c9c-aced-8ee9d7120349",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4e2e7a82-5b2e-4e14-82a2-89e403935132",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c14ce1cf-6634-4ebb-8c1a-b9e5d0e9b795",
        "cursor": {
          "ref": "ef9c73db-c3cd-4da0-b850-b68af95610c4",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2d906a13-ecc3-43b5-a170-af700e4b7d63"
        },
        "item": {
          "id": "c14ce1cf-6634-4ebb-8c1a-b9e5d0e9b795",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6a01fe26-a8bc-4b23-9dc9-654ba6c0e6d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c14ce1cf-6634-4ebb-8c1a-b9e5d0e9b795",
        "cursor": {
          "ref": "ef9c73db-c3cd-4da0-b850-b68af95610c4",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2d906a13-ecc3-43b5-a170-af700e4b7d63"
        },
        "item": {
          "id": "c14ce1cf-6634-4ebb-8c1a-b9e5d0e9b795",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6a01fe26-a8bc-4b23-9dc9-654ba6c0e6d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e8a7072c-5519-4dc4-b4ad-f4e864a8f555",
        "cursor": {
          "ref": "3c9695ea-bd95-42c0-805b-35e41d9c0ec7",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "972f9d0b-c569-45f4-bdef-c54b5837f2aa"
        },
        "item": {
          "id": "e8a7072c-5519-4dc4-b4ad-f4e864a8f555",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dae91dba-b649-4f71-a2b3-2712be14d154",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e8a7072c-5519-4dc4-b4ad-f4e864a8f555",
        "cursor": {
          "ref": "3c9695ea-bd95-42c0-805b-35e41d9c0ec7",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "972f9d0b-c569-45f4-bdef-c54b5837f2aa"
        },
        "item": {
          "id": "e8a7072c-5519-4dc4-b4ad-f4e864a8f555",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dae91dba-b649-4f71-a2b3-2712be14d154",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c3131fa3-e1a5-4393-9985-5a5912b98c58",
        "cursor": {
          "ref": "e15dbb67-7ae1-4592-8daa-b410def8b0bb",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4f400a1a-2dbe-4f05-8445-11d4ddd73dc3"
        },
        "item": {
          "id": "c3131fa3-e1a5-4393-9985-5a5912b98c58",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d022c282-9671-4704-a567-326e5ca28bc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c3131fa3-e1a5-4393-9985-5a5912b98c58",
        "cursor": {
          "ref": "e15dbb67-7ae1-4592-8daa-b410def8b0bb",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4f400a1a-2dbe-4f05-8445-11d4ddd73dc3"
        },
        "item": {
          "id": "c3131fa3-e1a5-4393-9985-5a5912b98c58",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d022c282-9671-4704-a567-326e5ca28bc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "90b9a44e-f1c0-44e1-9df6-27b3dc46a417",
        "cursor": {
          "ref": "c3effadb-0a22-40f4-995d-b0d196e33469",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e0a29146-72f6-4f89-b84f-7ddc4c236110"
        },
        "item": {
          "id": "90b9a44e-f1c0-44e1-9df6-27b3dc46a417",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2e5db404-fa24-41d5-98aa-f98f7db69684",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "90b9a44e-f1c0-44e1-9df6-27b3dc46a417",
        "cursor": {
          "ref": "c3effadb-0a22-40f4-995d-b0d196e33469",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e0a29146-72f6-4f89-b84f-7ddc4c236110"
        },
        "item": {
          "id": "90b9a44e-f1c0-44e1-9df6-27b3dc46a417",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2e5db404-fa24-41d5-98aa-f98f7db69684",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "15a2cebd-cf55-46b5-afd2-77f3d0356ae3",
        "cursor": {
          "ref": "d2ec683a-8b71-4282-a0ab-1180b10d50b5",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7624167d-6c82-4e9d-a78b-05b8f04d925b"
        },
        "item": {
          "id": "15a2cebd-cf55-46b5-afd2-77f3d0356ae3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3bc38d1c-9ce7-451a-aa74-7e53be972c61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "15a2cebd-cf55-46b5-afd2-77f3d0356ae3",
        "cursor": {
          "ref": "d2ec683a-8b71-4282-a0ab-1180b10d50b5",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7624167d-6c82-4e9d-a78b-05b8f04d925b"
        },
        "item": {
          "id": "15a2cebd-cf55-46b5-afd2-77f3d0356ae3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3bc38d1c-9ce7-451a-aa74-7e53be972c61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "faa39793-086c-4e7e-b609-8a8f31093f7b",
        "cursor": {
          "ref": "1c448b73-13ec-47ea-8b27-a6ec2c404e41",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "24e4d63f-5765-4bf9-961f-339a18c4456c"
        },
        "item": {
          "id": "faa39793-086c-4e7e-b609-8a8f31093f7b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d319c7d0-d30a-43d5-b47a-f9342f38e1ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "faa39793-086c-4e7e-b609-8a8f31093f7b",
        "cursor": {
          "ref": "1c448b73-13ec-47ea-8b27-a6ec2c404e41",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "24e4d63f-5765-4bf9-961f-339a18c4456c"
        },
        "item": {
          "id": "faa39793-086c-4e7e-b609-8a8f31093f7b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d319c7d0-d30a-43d5-b47a-f9342f38e1ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "7facf62c-251b-432b-a12c-c8396e850413",
        "cursor": {
          "ref": "877e2483-4f8e-4670-9bad-52cfa658a750",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5797872d-472c-4df3-982b-5cb1eb1954ca"
        },
        "item": {
          "id": "7facf62c-251b-432b-a12c-c8396e850413",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "97c4e222-b878-4438-950e-897e1fe1fdc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "7facf62c-251b-432b-a12c-c8396e850413",
        "cursor": {
          "ref": "877e2483-4f8e-4670-9bad-52cfa658a750",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5797872d-472c-4df3-982b-5cb1eb1954ca"
        },
        "item": {
          "id": "7facf62c-251b-432b-a12c-c8396e850413",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "97c4e222-b878-4438-950e-897e1fe1fdc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "db9259d4-b87a-40d8-8137-ba050ab24feb",
        "cursor": {
          "ref": "fab52705-e7af-4f43-9d3a-bb96e56e4d8c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0d314575-b1c8-4ae9-bc45-805b39bfeffa"
        },
        "item": {
          "id": "db9259d4-b87a-40d8-8137-ba050ab24feb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d2926137-a95d-4687-8d9c-dd7fef118a18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "db9259d4-b87a-40d8-8137-ba050ab24feb",
        "cursor": {
          "ref": "fab52705-e7af-4f43-9d3a-bb96e56e4d8c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0d314575-b1c8-4ae9-bc45-805b39bfeffa"
        },
        "item": {
          "id": "db9259d4-b87a-40d8-8137-ba050ab24feb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d2926137-a95d-4687-8d9c-dd7fef118a18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c0429326-25bc-4937-bd6a-747c7eff7804",
        "cursor": {
          "ref": "da35b4cb-b7d9-4e44-9485-575614939dfc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bb598cd6-0020-4bab-8608-505bd84ef186"
        },
        "item": {
          "id": "c0429326-25bc-4937-bd6a-747c7eff7804",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7d3db0dc-76e6-4db5-a89b-3bfc7d79d32e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "c0429326-25bc-4937-bd6a-747c7eff7804",
        "cursor": {
          "ref": "da35b4cb-b7d9-4e44-9485-575614939dfc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bb598cd6-0020-4bab-8608-505bd84ef186"
        },
        "item": {
          "id": "c0429326-25bc-4937-bd6a-747c7eff7804",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7d3db0dc-76e6-4db5-a89b-3bfc7d79d32e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "b849de52-c26e-46c5-b0ea-cde0d292f3ba",
        "cursor": {
          "ref": "2d872f8b-9b70-4a3b-929e-c58f55c0b361",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6e25fa52-0db7-4b69-84a0-4d46fcaf0315"
        },
        "item": {
          "id": "b849de52-c26e-46c5-b0ea-cde0d292f3ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "da7c1803-a9b7-4714-99c7-9e51a9d74076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "b849de52-c26e-46c5-b0ea-cde0d292f3ba",
        "cursor": {
          "ref": "2d872f8b-9b70-4a3b-929e-c58f55c0b361",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6e25fa52-0db7-4b69-84a0-4d46fcaf0315"
        },
        "item": {
          "id": "b849de52-c26e-46c5-b0ea-cde0d292f3ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "da7c1803-a9b7-4714-99c7-9e51a9d74076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "4efcb597-a936-4ac0-94d0-1fdd5c264d2d",
        "cursor": {
          "ref": "56e08858-9b21-4c6f-ad2e-d81bd1a46564",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "335e8d30-fe42-4891-b68b-4e0832992afa"
        },
        "item": {
          "id": "4efcb597-a936-4ac0-94d0-1fdd5c264d2d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8ceb90d6-a8e2-46ba-b8c7-e60d376c6250",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "4efcb597-a936-4ac0-94d0-1fdd5c264d2d",
        "cursor": {
          "ref": "56e08858-9b21-4c6f-ad2e-d81bd1a46564",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "335e8d30-fe42-4891-b68b-4e0832992afa"
        },
        "item": {
          "id": "4efcb597-a936-4ac0-94d0-1fdd5c264d2d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8ceb90d6-a8e2-46ba-b8c7-e60d376c6250",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "64e40bca-6b54-4564-a18f-03035bf18745",
        "cursor": {
          "ref": "a1d019e9-421c-4022-9985-26f8ee31c98a",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "97d2e757-b591-4363-a923-6ba794a5dcf1"
        },
        "item": {
          "id": "64e40bca-6b54-4564-a18f-03035bf18745",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7aa6b251-cd04-43b9-ade3-08023928b07f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "64e40bca-6b54-4564-a18f-03035bf18745",
        "cursor": {
          "ref": "a1d019e9-421c-4022-9985-26f8ee31c98a",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "97d2e757-b591-4363-a923-6ba794a5dcf1"
        },
        "item": {
          "id": "64e40bca-6b54-4564-a18f-03035bf18745",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7aa6b251-cd04-43b9-ade3-08023928b07f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "63aadf2c-1213-4f24-b58a-0e36824b9f4f",
        "cursor": {
          "ref": "a134c8ef-c35e-4b4c-9778-ef91f26854d2",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "897d6a49-47f2-4b9c-b7c3-710dfb771394"
        },
        "item": {
          "id": "63aadf2c-1213-4f24-b58a-0e36824b9f4f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fc510215-90f9-4f05-8f41-9130e36c83d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "63aadf2c-1213-4f24-b58a-0e36824b9f4f",
        "cursor": {
          "ref": "a134c8ef-c35e-4b4c-9778-ef91f26854d2",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "897d6a49-47f2-4b9c-b7c3-710dfb771394"
        },
        "item": {
          "id": "63aadf2c-1213-4f24-b58a-0e36824b9f4f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fc510215-90f9-4f05-8f41-9130e36c83d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1ea4d34c-9c36-4a8f-a989-4406f88a63ee",
        "cursor": {
          "ref": "07aa57b6-e47c-4ef5-afd4-c1c570119f8b",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "736991fe-7293-40e0-8c2e-94db3f026a6e"
        },
        "item": {
          "id": "1ea4d34c-9c36-4a8f-a989-4406f88a63ee",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "47b12e66-fff4-40ec-9c72-c1d23faf2757",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1ea4d34c-9c36-4a8f-a989-4406f88a63ee",
        "cursor": {
          "ref": "07aa57b6-e47c-4ef5-afd4-c1c570119f8b",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "736991fe-7293-40e0-8c2e-94db3f026a6e"
        },
        "item": {
          "id": "1ea4d34c-9c36-4a8f-a989-4406f88a63ee",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "47b12e66-fff4-40ec-9c72-c1d23faf2757",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "3af65ef8-e8d8-476b-8195-7564727fb8ad",
        "cursor": {
          "ref": "42197abf-6de2-4cb9-b7da-1d6ffaa6f8ae",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "31df6bed-ab7a-4227-8044-d4678d644c31"
        },
        "item": {
          "id": "3af65ef8-e8d8-476b-8195-7564727fb8ad",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "07e134a0-48f1-4254-a41e-f5311315fe24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "3af65ef8-e8d8-476b-8195-7564727fb8ad",
        "cursor": {
          "ref": "42197abf-6de2-4cb9-b7da-1d6ffaa6f8ae",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "31df6bed-ab7a-4227-8044-d4678d644c31"
        },
        "item": {
          "id": "3af65ef8-e8d8-476b-8195-7564727fb8ad",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "07e134a0-48f1-4254-a41e-f5311315fe24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "c231e77b-5e84-44a0-b203-84217132de82",
        "cursor": {
          "ref": "0246a980-6618-405f-8c90-25dc5132148d",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2ef65165-c175-499f-b34d-e94063a408fd"
        },
        "item": {
          "id": "c231e77b-5e84-44a0-b203-84217132de82",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "072a600c-3576-41d7-95fe-3f67fd160cee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "c231e77b-5e84-44a0-b203-84217132de82",
        "cursor": {
          "ref": "0246a980-6618-405f-8c90-25dc5132148d",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2ef65165-c175-499f-b34d-e94063a408fd"
        },
        "item": {
          "id": "c231e77b-5e84-44a0-b203-84217132de82",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "072a600c-3576-41d7-95fe-3f67fd160cee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ecad7b56-604c-428a-89be-6f1e6729a81b",
        "cursor": {
          "ref": "47f59251-1bc6-4f7a-89d8-f4a7d4cf30de",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7df64af8-80f9-4031-af06-4ce8ba49260f"
        },
        "item": {
          "id": "ecad7b56-604c-428a-89be-6f1e6729a81b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "23c05610-e88f-4a8e-8f36-80d83e256260",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ecad7b56-604c-428a-89be-6f1e6729a81b",
        "cursor": {
          "ref": "47f59251-1bc6-4f7a-89d8-f4a7d4cf30de",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7df64af8-80f9-4031-af06-4ce8ba49260f"
        },
        "item": {
          "id": "ecad7b56-604c-428a-89be-6f1e6729a81b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "23c05610-e88f-4a8e-8f36-80d83e256260",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "c3533428-9f45-4ddb-93eb-5878cdb813a8",
        "cursor": {
          "ref": "14eeefaf-e5c2-4523-91be-b216a8c9b8cb",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8f586b00-985f-4d2d-bc90-51e1e55b54f3"
        },
        "item": {
          "id": "c3533428-9f45-4ddb-93eb-5878cdb813a8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3b805446-801d-4d93-a26f-13d3ec83ef69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "c3533428-9f45-4ddb-93eb-5878cdb813a8",
        "cursor": {
          "ref": "14eeefaf-e5c2-4523-91be-b216a8c9b8cb",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8f586b00-985f-4d2d-bc90-51e1e55b54f3"
        },
        "item": {
          "id": "c3533428-9f45-4ddb-93eb-5878cdb813a8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3b805446-801d-4d93-a26f-13d3ec83ef69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "cada4afb-3436-4647-a99b-f2e2a173e377",
        "cursor": {
          "ref": "9317006a-ea12-4e3a-a8d0-4f2f62ad2edb",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3a42e865-acc2-42e8-b3fe-3c6fa2869ff2"
        },
        "item": {
          "id": "cada4afb-3436-4647-a99b-f2e2a173e377",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d6e8ed09-99aa-4040-b7ac-a8d4234f84ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "cada4afb-3436-4647-a99b-f2e2a173e377",
        "cursor": {
          "ref": "9317006a-ea12-4e3a-a8d0-4f2f62ad2edb",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3a42e865-acc2-42e8-b3fe-3c6fa2869ff2"
        },
        "item": {
          "id": "cada4afb-3436-4647-a99b-f2e2a173e377",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d6e8ed09-99aa-4040-b7ac-a8d4234f84ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "02032b67-9c07-47e3-a5ea-93cdaeee8066",
        "cursor": {
          "ref": "70838885-62ee-41f8-9f9f-77c0f8fd5098",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a60e7a5d-0f92-4665-8333-2425801aa11f"
        },
        "item": {
          "id": "02032b67-9c07-47e3-a5ea-93cdaeee8066",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e6c66649-a4ae-4778-b26b-6a4e5abe575a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "02032b67-9c07-47e3-a5ea-93cdaeee8066",
        "cursor": {
          "ref": "70838885-62ee-41f8-9f9f-77c0f8fd5098",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a60e7a5d-0f92-4665-8333-2425801aa11f"
        },
        "item": {
          "id": "02032b67-9c07-47e3-a5ea-93cdaeee8066",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e6c66649-a4ae-4778-b26b-6a4e5abe575a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "bea7814d-17ab-4e62-9885-1f82217bf138",
        "cursor": {
          "ref": "85526a02-c514-49f8-849c-11ebf866c367",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "32442a83-2937-4719-9d4c-185952f95521"
        },
        "item": {
          "id": "bea7814d-17ab-4e62-9885-1f82217bf138",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "060c1e4d-3e4a-43b2-b8b7-50c4b81c7923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "bea7814d-17ab-4e62-9885-1f82217bf138",
        "cursor": {
          "ref": "85526a02-c514-49f8-849c-11ebf866c367",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "32442a83-2937-4719-9d4c-185952f95521"
        },
        "item": {
          "id": "bea7814d-17ab-4e62-9885-1f82217bf138",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "060c1e4d-3e4a-43b2-b8b7-50c4b81c7923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "078c8bb0-c4dd-4933-87bc-1e2a67f38ac4",
        "cursor": {
          "ref": "bf7b571f-7b8f-4e94-bf22-dc69d22e3d25",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2fec4bb5-605c-4f4a-9835-40c17cfddb60"
        },
        "item": {
          "id": "078c8bb0-c4dd-4933-87bc-1e2a67f38ac4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f66b7cbe-2aff-4b47-9039-9c53f8d1ab38",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "078c8bb0-c4dd-4933-87bc-1e2a67f38ac4",
        "cursor": {
          "ref": "bf7b571f-7b8f-4e94-bf22-dc69d22e3d25",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2fec4bb5-605c-4f4a-9835-40c17cfddb60"
        },
        "item": {
          "id": "078c8bb0-c4dd-4933-87bc-1e2a67f38ac4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f66b7cbe-2aff-4b47-9039-9c53f8d1ab38",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "769d2f35-69fe-4192-a628-ee6926414329",
        "cursor": {
          "ref": "6a27399f-b8cf-48eb-8230-5340cf71c82c",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0cdd7b07-e24b-4114-a0c9-9c02ea8070e4"
        },
        "item": {
          "id": "769d2f35-69fe-4192-a628-ee6926414329",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "9123a169-31b4-4e1f-a8c7-b4a78002a23b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "769d2f35-69fe-4192-a628-ee6926414329",
        "cursor": {
          "ref": "6a27399f-b8cf-48eb-8230-5340cf71c82c",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0cdd7b07-e24b-4114-a0c9-9c02ea8070e4"
        },
        "item": {
          "id": "769d2f35-69fe-4192-a628-ee6926414329",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "9123a169-31b4-4e1f-a8c7-b4a78002a23b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "c4471109-b108-4e17-9e90-a1c5ff5ca1ac",
        "cursor": {
          "ref": "d35b7c5c-d0b6-47f7-95f9-e95ccf108b9c",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2f6981cb-f414-408a-95de-cb7061519857"
        },
        "item": {
          "id": "c4471109-b108-4e17-9e90-a1c5ff5ca1ac",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8f982b89-6d55-44f7-abab-a130b45d50b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "c4471109-b108-4e17-9e90-a1c5ff5ca1ac",
        "cursor": {
          "ref": "d35b7c5c-d0b6-47f7-95f9-e95ccf108b9c",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2f6981cb-f414-408a-95de-cb7061519857"
        },
        "item": {
          "id": "c4471109-b108-4e17-9e90-a1c5ff5ca1ac",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8f982b89-6d55-44f7-abab-a130b45d50b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "3923328e-545c-4060-b85e-26bc4be52b68",
        "cursor": {
          "ref": "0fc0821a-e0ea-4863-8075-f0ef80668981",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4a3b29e1-f908-478c-94ef-053a4c845474"
        },
        "item": {
          "id": "3923328e-545c-4060-b85e-26bc4be52b68",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1edf4320-1413-42ef-beed-200e69019815",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "3923328e-545c-4060-b85e-26bc4be52b68",
        "cursor": {
          "ref": "0fc0821a-e0ea-4863-8075-f0ef80668981",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4a3b29e1-f908-478c-94ef-053a4c845474"
        },
        "item": {
          "id": "3923328e-545c-4060-b85e-26bc4be52b68",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1edf4320-1413-42ef-beed-200e69019815",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "ee290b19-7019-4310-99d6-8d1d414cf13f",
        "cursor": {
          "ref": "84f8f9e5-8228-4a8f-ad3f-22895c181e58",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d798096a-7432-4ad9-9490-3d43dccaa9e4"
        },
        "item": {
          "id": "ee290b19-7019-4310-99d6-8d1d414cf13f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a183d730-1abd-45cf-ab06-7d3af4e2a9a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "ee290b19-7019-4310-99d6-8d1d414cf13f",
        "cursor": {
          "ref": "84f8f9e5-8228-4a8f-ad3f-22895c181e58",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d798096a-7432-4ad9-9490-3d43dccaa9e4"
        },
        "item": {
          "id": "ee290b19-7019-4310-99d6-8d1d414cf13f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a183d730-1abd-45cf-ab06-7d3af4e2a9a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "aabf8c13-6402-4995-8237-fc9ebf17f72b",
        "cursor": {
          "ref": "c28019df-a306-46fd-af9b-ebfa998c2b65",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "76407ab3-1d8f-441c-bc9a-b5ee1f906d59"
        },
        "item": {
          "id": "aabf8c13-6402-4995-8237-fc9ebf17f72b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e61b3533-a54a-42cd-9d27-d6273f8f8a6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "aabf8c13-6402-4995-8237-fc9ebf17f72b",
        "cursor": {
          "ref": "c28019df-a306-46fd-af9b-ebfa998c2b65",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "76407ab3-1d8f-441c-bc9a-b5ee1f906d59"
        },
        "item": {
          "id": "aabf8c13-6402-4995-8237-fc9ebf17f72b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e61b3533-a54a-42cd-9d27-d6273f8f8a6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "5b4900ac-c5c8-4626-9a41-bfd010843701",
        "cursor": {
          "ref": "f1e4fa67-37d0-4c0e-b672-eeb39c0e1d35",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f4171965-5008-4734-bb2c-5faa33f49721"
        },
        "item": {
          "id": "5b4900ac-c5c8-4626-9a41-bfd010843701",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4ca0e62a-8f8f-400d-bcb8-32965f1089c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5b4900ac-c5c8-4626-9a41-bfd010843701",
        "cursor": {
          "ref": "f1e4fa67-37d0-4c0e-b672-eeb39c0e1d35",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f4171965-5008-4734-bb2c-5faa33f49721"
        },
        "item": {
          "id": "5b4900ac-c5c8-4626-9a41-bfd010843701",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4ca0e62a-8f8f-400d-bcb8-32965f1089c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "36c2b575-0b48-450e-b826-62d70390eaa4",
        "cursor": {
          "ref": "19afd1e8-f69f-4532-b7de-d2f7620e698e",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "735b52f5-f433-49de-b4b2-03cffd8b2afe"
        },
        "item": {
          "id": "36c2b575-0b48-450e-b826-62d70390eaa4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5d975623-69be-4549-b9c4-490846200283",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "36c2b575-0b48-450e-b826-62d70390eaa4",
        "cursor": {
          "ref": "19afd1e8-f69f-4532-b7de-d2f7620e698e",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "735b52f5-f433-49de-b4b2-03cffd8b2afe"
        },
        "item": {
          "id": "36c2b575-0b48-450e-b826-62d70390eaa4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5d975623-69be-4549-b9c4-490846200283",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "963c187c-19c2-434d-95ac-7e471129127f",
        "cursor": {
          "ref": "a9b8a43d-ae76-4287-8989-0a4542e863a8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "77052e0c-9691-4cdb-8e47-cfad72f2743d"
        },
        "item": {
          "id": "963c187c-19c2-434d-95ac-7e471129127f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4bc66f23-aada-4955-aadb-16119b0177ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "963c187c-19c2-434d-95ac-7e471129127f",
        "cursor": {
          "ref": "a9b8a43d-ae76-4287-8989-0a4542e863a8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "77052e0c-9691-4cdb-8e47-cfad72f2743d"
        },
        "item": {
          "id": "963c187c-19c2-434d-95ac-7e471129127f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4bc66f23-aada-4955-aadb-16119b0177ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7a859606-b00a-4c12-ab31-78a2db05a067",
        "cursor": {
          "ref": "0397ea62-1a49-4990-be31-d7569eee0484",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6f1c0056-a000-4eb0-8d5c-49fa7080c46c"
        },
        "item": {
          "id": "7a859606-b00a-4c12-ab31-78a2db05a067",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cf7d2e2e-0329-4a92-bd20-cea993a1e3fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "7a859606-b00a-4c12-ab31-78a2db05a067",
        "cursor": {
          "ref": "0397ea62-1a49-4990-be31-d7569eee0484",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6f1c0056-a000-4eb0-8d5c-49fa7080c46c"
        },
        "item": {
          "id": "7a859606-b00a-4c12-ab31-78a2db05a067",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cf7d2e2e-0329-4a92-bd20-cea993a1e3fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "ae2593b6-4971-4a07-ac50-cff276587251",
        "cursor": {
          "ref": "6298c688-3601-4244-853d-c529b3a23ee5",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5f1ee969-6aa9-456d-bdcc-34c08d3b778c"
        },
        "item": {
          "id": "ae2593b6-4971-4a07-ac50-cff276587251",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8189486b-00ec-43cb-b22a-ba33f2cd3ad3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "ae2593b6-4971-4a07-ac50-cff276587251",
        "cursor": {
          "ref": "6298c688-3601-4244-853d-c529b3a23ee5",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5f1ee969-6aa9-456d-bdcc-34c08d3b778c"
        },
        "item": {
          "id": "ae2593b6-4971-4a07-ac50-cff276587251",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8189486b-00ec-43cb-b22a-ba33f2cd3ad3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1f496aee-b8db-454e-b095-bacbb2f6839d",
        "cursor": {
          "ref": "94db3b4e-815c-4571-b20b-684568443f06",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c206404a-2f6c-42a7-a8b2-5a2a70a12ef6"
        },
        "item": {
          "id": "1f496aee-b8db-454e-b095-bacbb2f6839d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "740b3edf-187b-4dc6-a200-a7149a254482",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "1f496aee-b8db-454e-b095-bacbb2f6839d",
        "cursor": {
          "ref": "94db3b4e-815c-4571-b20b-684568443f06",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c206404a-2f6c-42a7-a8b2-5a2a70a12ef6"
        },
        "item": {
          "id": "1f496aee-b8db-454e-b095-bacbb2f6839d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "740b3edf-187b-4dc6-a200-a7149a254482",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "5d731523-d232-4440-92b4-5829fe36daa3",
        "cursor": {
          "ref": "89cba3c8-f771-422f-b682-e4cf9c7618ae",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bb187eaa-9303-4dbf-b0a0-f29382495de4"
        },
        "item": {
          "id": "5d731523-d232-4440-92b4-5829fe36daa3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "046b0069-af1f-4cf5-97dd-a98f53ea9aff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "5d731523-d232-4440-92b4-5829fe36daa3",
        "cursor": {
          "ref": "89cba3c8-f771-422f-b682-e4cf9c7618ae",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bb187eaa-9303-4dbf-b0a0-f29382495de4"
        },
        "item": {
          "id": "5d731523-d232-4440-92b4-5829fe36daa3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "046b0069-af1f-4cf5-97dd-a98f53ea9aff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "738af7a7-8efc-4380-a973-0ef39e0064f3",
        "cursor": {
          "ref": "9d059bc1-1a8a-461e-9da0-30ce6fa32109",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "934b11bc-5b4b-46fa-a01a-833065bc0634"
        },
        "item": {
          "id": "738af7a7-8efc-4380-a973-0ef39e0064f3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4b35ab0c-bb51-4434-9758-3c674055deff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "738af7a7-8efc-4380-a973-0ef39e0064f3",
        "cursor": {
          "ref": "9d059bc1-1a8a-461e-9da0-30ce6fa32109",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "934b11bc-5b4b-46fa-a01a-833065bc0634"
        },
        "item": {
          "id": "738af7a7-8efc-4380-a973-0ef39e0064f3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4b35ab0c-bb51-4434-9758-3c674055deff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a380c7c0-8f07-442f-9cef-511d86e94465",
        "cursor": {
          "ref": "26b4c1d9-913c-4866-9a38-5e0345927831",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6f43bbbf-00b8-4e4e-9647-b479f0a95482"
        },
        "item": {
          "id": "a380c7c0-8f07-442f-9cef-511d86e94465",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b7a52f1e-8fe9-42eb-925e-165fb0420335",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "a380c7c0-8f07-442f-9cef-511d86e94465",
        "cursor": {
          "ref": "26b4c1d9-913c-4866-9a38-5e0345927831",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6f43bbbf-00b8-4e4e-9647-b479f0a95482"
        },
        "item": {
          "id": "a380c7c0-8f07-442f-9cef-511d86e94465",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b7a52f1e-8fe9-42eb-925e-165fb0420335",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "700149b4-381d-4fe1-a975-259b8f790cce",
        "cursor": {
          "ref": "768e69ba-4ae7-48d2-86cf-e59db9cb635d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ffe2d72a-6300-4b9d-8b6c-04b9f2795a10"
        },
        "item": {
          "id": "700149b4-381d-4fe1-a975-259b8f790cce",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "383cd835-7714-43b8-92c2-83db3edccd26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "700149b4-381d-4fe1-a975-259b8f790cce",
        "cursor": {
          "ref": "768e69ba-4ae7-48d2-86cf-e59db9cb635d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ffe2d72a-6300-4b9d-8b6c-04b9f2795a10"
        },
        "item": {
          "id": "700149b4-381d-4fe1-a975-259b8f790cce",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "383cd835-7714-43b8-92c2-83db3edccd26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "8655a679-b6fb-4ea6-83ae-557c9fa1c275",
        "cursor": {
          "ref": "d58aa67f-0ad3-46b2-bbcb-61fa53b078c4",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "da7f96b7-d24a-4e1e-82ac-12439ee02968"
        },
        "item": {
          "id": "8655a679-b6fb-4ea6-83ae-557c9fa1c275",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "23742983-ac71-43c2-9d96-4c18b5f8d66a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "8655a679-b6fb-4ea6-83ae-557c9fa1c275",
        "cursor": {
          "ref": "d58aa67f-0ad3-46b2-bbcb-61fa53b078c4",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "da7f96b7-d24a-4e1e-82ac-12439ee02968"
        },
        "item": {
          "id": "8655a679-b6fb-4ea6-83ae-557c9fa1c275",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "23742983-ac71-43c2-9d96-4c18b5f8d66a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e11c9fb9-f269-40d4-9667-f1f831649d69",
        "cursor": {
          "ref": "a9a6c1cc-db2a-4bff-9d04-1aa50e329f9d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "406304ae-251f-4708-95a5-e1d35b11f9ef"
        },
        "item": {
          "id": "e11c9fb9-f269-40d4-9667-f1f831649d69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "03e3103e-eaf6-4ef3-82d7-25e40e93e0c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "e11c9fb9-f269-40d4-9667-f1f831649d69",
        "cursor": {
          "ref": "a9a6c1cc-db2a-4bff-9d04-1aa50e329f9d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "406304ae-251f-4708-95a5-e1d35b11f9ef"
        },
        "item": {
          "id": "e11c9fb9-f269-40d4-9667-f1f831649d69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "03e3103e-eaf6-4ef3-82d7-25e40e93e0c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "025aed9c-6989-44e4-9f0c-b4420407cc8c",
        "cursor": {
          "ref": "e5ed5b78-421f-495b-9f3e-7392b659e92b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5d2bdc66-b709-4f8f-a642-3fdd2dbabdf7"
        },
        "item": {
          "id": "025aed9c-6989-44e4-9f0c-b4420407cc8c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d8198453-2295-4210-a031-0d1e2fde7ebf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "025aed9c-6989-44e4-9f0c-b4420407cc8c",
        "cursor": {
          "ref": "e5ed5b78-421f-495b-9f3e-7392b659e92b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5d2bdc66-b709-4f8f-a642-3fdd2dbabdf7"
        },
        "item": {
          "id": "025aed9c-6989-44e4-9f0c-b4420407cc8c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d8198453-2295-4210-a031-0d1e2fde7ebf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "38118feb-d748-4cbf-ae1e-cb387285ef20",
        "cursor": {
          "ref": "bba16b95-390e-4a93-8eea-6ab5834bd2be",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f136bc2c-4202-4fad-8284-408143fd5e4d"
        },
        "item": {
          "id": "38118feb-d748-4cbf-ae1e-cb387285ef20",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "73f51c1b-1859-4017-b4c6-30aec0b6c725",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "38118feb-d748-4cbf-ae1e-cb387285ef20",
        "cursor": {
          "ref": "bba16b95-390e-4a93-8eea-6ab5834bd2be",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f136bc2c-4202-4fad-8284-408143fd5e4d"
        },
        "item": {
          "id": "38118feb-d748-4cbf-ae1e-cb387285ef20",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "73f51c1b-1859-4017-b4c6-30aec0b6c725",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "da39af10-bb67-433d-9532-e824c4a3a989",
        "cursor": {
          "ref": "32107a02-875d-49f9-8a4f-d6936987f115",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2fecf63f-d6da-4f77-ba06-c83e48619fac"
        },
        "item": {
          "id": "da39af10-bb67-433d-9532-e824c4a3a989",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f06e3b88-c280-4b81-b1f7-6668a296d0bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "da39af10-bb67-433d-9532-e824c4a3a989",
        "cursor": {
          "ref": "32107a02-875d-49f9-8a4f-d6936987f115",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2fecf63f-d6da-4f77-ba06-c83e48619fac"
        },
        "item": {
          "id": "da39af10-bb67-433d-9532-e824c4a3a989",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f06e3b88-c280-4b81-b1f7-6668a296d0bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "ddf037d0-a998-446a-8af0-8f1ccbf00456",
        "cursor": {
          "ref": "3ae41463-f47f-4b8c-97c9-a2293e86f4b2",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "809da00c-458d-4c71-97a9-eba64df9087f"
        },
        "item": {
          "id": "ddf037d0-a998-446a-8af0-8f1ccbf00456",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9455795f-fadb-4f12-b5ec-9d4c09bbdb35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ddf037d0-a998-446a-8af0-8f1ccbf00456",
        "cursor": {
          "ref": "3ae41463-f47f-4b8c-97c9-a2293e86f4b2",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "809da00c-458d-4c71-97a9-eba64df9087f"
        },
        "item": {
          "id": "ddf037d0-a998-446a-8af0-8f1ccbf00456",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9455795f-fadb-4f12-b5ec-9d4c09bbdb35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2a5f2d1a-900d-495c-88eb-b51916ea66a3",
        "cursor": {
          "ref": "c87fae82-33bc-4fd6-9e2c-b51df54d15c4",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "01fa5580-0026-4aea-9bda-0ba84ded1849"
        },
        "item": {
          "id": "2a5f2d1a-900d-495c-88eb-b51916ea66a3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "93505428-593a-4d4d-878f-9f57f7b28433",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "2a5f2d1a-900d-495c-88eb-b51916ea66a3",
        "cursor": {
          "ref": "c87fae82-33bc-4fd6-9e2c-b51df54d15c4",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "01fa5580-0026-4aea-9bda-0ba84ded1849"
        },
        "item": {
          "id": "2a5f2d1a-900d-495c-88eb-b51916ea66a3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "93505428-593a-4d4d-878f-9f57f7b28433",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "63c0321e-c45d-4350-b610-c86854a17278",
        "cursor": {
          "ref": "840f5cf7-3cbe-4b44-8381-f11a70906a18",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8c838b9f-0c26-4508-8d20-39ef3c71da3d"
        },
        "item": {
          "id": "63c0321e-c45d-4350-b610-c86854a17278",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9ee8e27f-6f55-4d05-82dc-408bb2ca3311",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "63c0321e-c45d-4350-b610-c86854a17278",
        "cursor": {
          "ref": "840f5cf7-3cbe-4b44-8381-f11a70906a18",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8c838b9f-0c26-4508-8d20-39ef3c71da3d"
        },
        "item": {
          "id": "63c0321e-c45d-4350-b610-c86854a17278",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9ee8e27f-6f55-4d05-82dc-408bb2ca3311",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b5e6dcbf-f87f-464c-8145-1ec5c236e317",
        "cursor": {
          "ref": "0cbe9be3-bf50-4966-bb2a-43f4f5dfac90",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "00c36cc7-36a6-4f78-8272-55b05c9123b0"
        },
        "item": {
          "id": "b5e6dcbf-f87f-464c-8145-1ec5c236e317",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6e4f87fc-2a94-4b38-aaf2-7838748e3105",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b5e6dcbf-f87f-464c-8145-1ec5c236e317",
        "cursor": {
          "ref": "0cbe9be3-bf50-4966-bb2a-43f4f5dfac90",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "00c36cc7-36a6-4f78-8272-55b05c9123b0"
        },
        "item": {
          "id": "b5e6dcbf-f87f-464c-8145-1ec5c236e317",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6e4f87fc-2a94-4b38-aaf2-7838748e3105",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7ae60b15-f211-4cea-9d5a-b44f5a257028",
        "cursor": {
          "ref": "289b7e40-129b-427d-bc81-896a06867711",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "504ac012-55de-41c7-b391-25f2b6ebfa14"
        },
        "item": {
          "id": "7ae60b15-f211-4cea-9d5a-b44f5a257028",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "90e1a849-30c5-4c39-b9cc-67983882e118",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7ae60b15-f211-4cea-9d5a-b44f5a257028",
        "cursor": {
          "ref": "289b7e40-129b-427d-bc81-896a06867711",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "504ac012-55de-41c7-b391-25f2b6ebfa14"
        },
        "item": {
          "id": "7ae60b15-f211-4cea-9d5a-b44f5a257028",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "90e1a849-30c5-4c39-b9cc-67983882e118",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c00f68b4-8ec4-4b47-ba93-10eaf80c8440",
        "cursor": {
          "ref": "0495cfcd-66c3-4c18-b1d5-fbe402ec8fad",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2b248b87-ebd4-4f5d-af54-8aa02802f216"
        },
        "item": {
          "id": "c00f68b4-8ec4-4b47-ba93-10eaf80c8440",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0ad46e90-feb4-4686-bb89-4c35c9991a7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c00f68b4-8ec4-4b47-ba93-10eaf80c8440",
        "cursor": {
          "ref": "0495cfcd-66c3-4c18-b1d5-fbe402ec8fad",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2b248b87-ebd4-4f5d-af54-8aa02802f216"
        },
        "item": {
          "id": "c00f68b4-8ec4-4b47-ba93-10eaf80c8440",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0ad46e90-feb4-4686-bb89-4c35c9991a7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "d7cfe03e-c48f-4315-9985-54d3f33da6e4",
        "cursor": {
          "ref": "a574a81f-c117-4fd4-a8a1-3fa91fe5b65f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7c3ec7f5-8846-40b0-b79f-2b66d7408cc6"
        },
        "item": {
          "id": "d7cfe03e-c48f-4315-9985-54d3f33da6e4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e76f0a59-cd60-4b97-a1e9-cd4a43ee1c3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d7cfe03e-c48f-4315-9985-54d3f33da6e4",
        "cursor": {
          "ref": "a574a81f-c117-4fd4-a8a1-3fa91fe5b65f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7c3ec7f5-8846-40b0-b79f-2b66d7408cc6"
        },
        "item": {
          "id": "d7cfe03e-c48f-4315-9985-54d3f33da6e4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e76f0a59-cd60-4b97-a1e9-cd4a43ee1c3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "fc2c05a2-cbab-4735-87dd-e6126ce9e096",
        "cursor": {
          "ref": "20a542d6-4cfa-499a-9646-afdf2dbd04ad",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca4c7735-f40f-4a15-ad79-08fd8c55f9bf"
        },
        "item": {
          "id": "fc2c05a2-cbab-4735-87dd-e6126ce9e096",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f6817c7b-239a-467c-a667-12c87ff35be4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "fc2c05a2-cbab-4735-87dd-e6126ce9e096",
        "cursor": {
          "ref": "20a542d6-4cfa-499a-9646-afdf2dbd04ad",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca4c7735-f40f-4a15-ad79-08fd8c55f9bf"
        },
        "item": {
          "id": "fc2c05a2-cbab-4735-87dd-e6126ce9e096",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f6817c7b-239a-467c-a667-12c87ff35be4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "38c66d78-0c59-40eb-af5f-152f47cf0555",
        "cursor": {
          "ref": "ed572276-6909-404e-8d8e-a5b245f96755",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "88fc58fb-5bf5-45fc-9d4f-7cc539d98b2f"
        },
        "item": {
          "id": "38c66d78-0c59-40eb-af5f-152f47cf0555",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e70c9ea0-0d29-46a8-bcfc-50ecded43c10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "38c66d78-0c59-40eb-af5f-152f47cf0555",
        "cursor": {
          "ref": "ed572276-6909-404e-8d8e-a5b245f96755",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "88fc58fb-5bf5-45fc-9d4f-7cc539d98b2f"
        },
        "item": {
          "id": "38c66d78-0c59-40eb-af5f-152f47cf0555",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e70c9ea0-0d29-46a8-bcfc-50ecded43c10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ecfa8456-ffdf-42ab-8c17-29495074faad",
        "cursor": {
          "ref": "96488603-9deb-4dba-97f0-86620075a7ae",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "93ecb5ef-e63a-42be-9ea1-72b9202e79ef"
        },
        "item": {
          "id": "ecfa8456-ffdf-42ab-8c17-29495074faad",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "66ed5a6e-455b-4ba4-b03b-9af4ed27c7f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ecfa8456-ffdf-42ab-8c17-29495074faad",
        "cursor": {
          "ref": "96488603-9deb-4dba-97f0-86620075a7ae",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "93ecb5ef-e63a-42be-9ea1-72b9202e79ef"
        },
        "item": {
          "id": "ecfa8456-ffdf-42ab-8c17-29495074faad",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "66ed5a6e-455b-4ba4-b03b-9af4ed27c7f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "4f051f8b-697e-4986-be2f-8e4197b55a5a",
        "cursor": {
          "ref": "38cd45f9-c7d8-46d0-91f9-6551380e39fa",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c704a585-7301-408f-8b43-579311e3a7ac"
        },
        "item": {
          "id": "4f051f8b-697e-4986-be2f-8e4197b55a5a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d426b46a-ac39-4473-945e-53cab631d606",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "4f051f8b-697e-4986-be2f-8e4197b55a5a",
        "cursor": {
          "ref": "38cd45f9-c7d8-46d0-91f9-6551380e39fa",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c704a585-7301-408f-8b43-579311e3a7ac"
        },
        "item": {
          "id": "4f051f8b-697e-4986-be2f-8e4197b55a5a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d426b46a-ac39-4473-945e-53cab631d606",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3be05e7e-e567-4b79-9326-33d30fa3598c",
        "cursor": {
          "ref": "f157ffaf-3f03-4f83-a202-32a1cd25fcad",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "91c20e45-ec90-43c2-b007-505e4b656774"
        },
        "item": {
          "id": "3be05e7e-e567-4b79-9326-33d30fa3598c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "de245300-4aad-4cdd-bb35-90286f82e061",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "3be05e7e-e567-4b79-9326-33d30fa3598c",
        "cursor": {
          "ref": "f157ffaf-3f03-4f83-a202-32a1cd25fcad",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "91c20e45-ec90-43c2-b007-505e4b656774"
        },
        "item": {
          "id": "3be05e7e-e567-4b79-9326-33d30fa3598c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "de245300-4aad-4cdd-bb35-90286f82e061",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "231eff4d-86c6-48d4-90f8-ab25cc25aa38",
        "cursor": {
          "ref": "b70d55ca-d2a2-43a5-beb4-e21341b90132",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "718f39b1-5dd7-4338-b4a1-ef0758fd9776"
        },
        "item": {
          "id": "231eff4d-86c6-48d4-90f8-ab25cc25aa38",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d2dc589-12b5-4773-8b6b-e614de7eea77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "231eff4d-86c6-48d4-90f8-ab25cc25aa38",
        "cursor": {
          "ref": "b70d55ca-d2a2-43a5-beb4-e21341b90132",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "718f39b1-5dd7-4338-b4a1-ef0758fd9776"
        },
        "item": {
          "id": "231eff4d-86c6-48d4-90f8-ab25cc25aa38",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d2dc589-12b5-4773-8b6b-e614de7eea77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "46315a30-caa7-418b-8582-aeb5b71b0137",
        "cursor": {
          "ref": "16e2d3f1-02bb-4778-8698-2c81a8bbb39c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "97bfdc06-028c-4b54-9e52-631302a069c9"
        },
        "item": {
          "id": "46315a30-caa7-418b-8582-aeb5b71b0137",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "50be5d95-b020-40a5-8a30-3d1c3d1b0a72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "46315a30-caa7-418b-8582-aeb5b71b0137",
        "cursor": {
          "ref": "16e2d3f1-02bb-4778-8698-2c81a8bbb39c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "97bfdc06-028c-4b54-9e52-631302a069c9"
        },
        "item": {
          "id": "46315a30-caa7-418b-8582-aeb5b71b0137",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "50be5d95-b020-40a5-8a30-3d1c3d1b0a72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "1dc3079e-6d60-4bcb-8bd0-6634e871cc1e",
        "cursor": {
          "ref": "7113d9bb-200d-463f-a6c0-8229f8db523f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8c14a718-668e-4e9f-b927-6b8305b3cb7a"
        },
        "item": {
          "id": "1dc3079e-6d60-4bcb-8bd0-6634e871cc1e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9ab7589a-04cb-41b6-83eb-4a55e108dac4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1dc3079e-6d60-4bcb-8bd0-6634e871cc1e",
        "cursor": {
          "ref": "7113d9bb-200d-463f-a6c0-8229f8db523f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8c14a718-668e-4e9f-b927-6b8305b3cb7a"
        },
        "item": {
          "id": "1dc3079e-6d60-4bcb-8bd0-6634e871cc1e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9ab7589a-04cb-41b6-83eb-4a55e108dac4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "973c76b2-fefa-428f-9097-aa665277e426",
        "cursor": {
          "ref": "df858a82-d6d9-42d6-8acc-87a70a3fc7dd",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a7a5ca09-c508-4bc6-87c6-f64ec13fda4a"
        },
        "item": {
          "id": "973c76b2-fefa-428f-9097-aa665277e426",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "39a207fd-9721-485c-8218-c968640a6ce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "973c76b2-fefa-428f-9097-aa665277e426",
        "cursor": {
          "ref": "df858a82-d6d9-42d6-8acc-87a70a3fc7dd",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a7a5ca09-c508-4bc6-87c6-f64ec13fda4a"
        },
        "item": {
          "id": "973c76b2-fefa-428f-9097-aa665277e426",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "39a207fd-9721-485c-8218-c968640a6ce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "71c8cbe9-c718-40c9-99bd-1298e8433cb5",
        "cursor": {
          "ref": "51d56d45-9775-46d2-883e-eb9abb284052",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5d4f4fe4-aa28-4d4e-bff1-eada1b96b551"
        },
        "item": {
          "id": "71c8cbe9-c718-40c9-99bd-1298e8433cb5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "54280622-ba9a-4088-b72e-c8aec2836a82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "71c8cbe9-c718-40c9-99bd-1298e8433cb5",
        "cursor": {
          "ref": "51d56d45-9775-46d2-883e-eb9abb284052",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5d4f4fe4-aa28-4d4e-bff1-eada1b96b551"
        },
        "item": {
          "id": "71c8cbe9-c718-40c9-99bd-1298e8433cb5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "54280622-ba9a-4088-b72e-c8aec2836a82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "69b865c8-7ba5-44c6-96c0-62ea305432d4",
        "cursor": {
          "ref": "b998e66e-f18b-4bda-9359-184930c36d2f",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e30e997d-0f06-4417-aae2-8567dd81c5fc"
        },
        "item": {
          "id": "69b865c8-7ba5-44c6-96c0-62ea305432d4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c4614725-c148-4630-9cac-ab040bcf9c3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "69b865c8-7ba5-44c6-96c0-62ea305432d4",
        "cursor": {
          "ref": "b998e66e-f18b-4bda-9359-184930c36d2f",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e30e997d-0f06-4417-aae2-8567dd81c5fc"
        },
        "item": {
          "id": "69b865c8-7ba5-44c6-96c0-62ea305432d4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c4614725-c148-4630-9cac-ab040bcf9c3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "68a02413-8aba-4853-8e63-7815b171617e",
        "cursor": {
          "ref": "ea3038c9-ab8f-4650-9100-c25b05df6a77",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f19ecebd-929d-4b46-abe3-51035c119d99"
        },
        "item": {
          "id": "68a02413-8aba-4853-8e63-7815b171617e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d7edc80c-22f6-414e-94bc-d12a759d08dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "68a02413-8aba-4853-8e63-7815b171617e",
        "cursor": {
          "ref": "ea3038c9-ab8f-4650-9100-c25b05df6a77",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f19ecebd-929d-4b46-abe3-51035c119d99"
        },
        "item": {
          "id": "68a02413-8aba-4853-8e63-7815b171617e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d7edc80c-22f6-414e-94bc-d12a759d08dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "a77f9d9e-c3fd-4157-af2d-cf3d8ed66482",
        "cursor": {
          "ref": "ae9cc939-1534-4fdb-845d-a042a690c5c9",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "25f494c3-8bc5-4328-9679-b503bd1288b8"
        },
        "item": {
          "id": "a77f9d9e-c3fd-4157-af2d-cf3d8ed66482",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9ac5b99c-1eca-4a3f-97ed-0db3083f774e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "a77f9d9e-c3fd-4157-af2d-cf3d8ed66482",
        "cursor": {
          "ref": "ae9cc939-1534-4fdb-845d-a042a690c5c9",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "25f494c3-8bc5-4328-9679-b503bd1288b8"
        },
        "item": {
          "id": "a77f9d9e-c3fd-4157-af2d-cf3d8ed66482",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9ac5b99c-1eca-4a3f-97ed-0db3083f774e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "0d414793-ed1f-43f2-9047-9440fe052f13",
        "cursor": {
          "ref": "1b663af3-20fa-4fd7-bf77-5fafc15c2483",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "00c40e69-ef84-4623-9bd2-21409f42f86c"
        },
        "item": {
          "id": "0d414793-ed1f-43f2-9047-9440fe052f13",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "58dd033f-ebea-42a0-8023-42ab548ff9f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "0d414793-ed1f-43f2-9047-9440fe052f13",
        "cursor": {
          "ref": "1b663af3-20fa-4fd7-bf77-5fafc15c2483",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "00c40e69-ef84-4623-9bd2-21409f42f86c"
        },
        "item": {
          "id": "0d414793-ed1f-43f2-9047-9440fe052f13",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "58dd033f-ebea-42a0-8023-42ab548ff9f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "1c7e526e-9337-4626-bf6c-c2537076ff57",
        "cursor": {
          "ref": "13e75d88-cbb6-4fb2-b82c-39e7618854e5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cdfc130f-b759-48f5-976e-35c6fc08317f"
        },
        "item": {
          "id": "1c7e526e-9337-4626-bf6c-c2537076ff57",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e166efd3-f470-4387-8aa8-bdc6c2ea99e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "1c7e526e-9337-4626-bf6c-c2537076ff57",
        "cursor": {
          "ref": "13e75d88-cbb6-4fb2-b82c-39e7618854e5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cdfc130f-b759-48f5-976e-35c6fc08317f"
        },
        "item": {
          "id": "1c7e526e-9337-4626-bf6c-c2537076ff57",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e166efd3-f470-4387-8aa8-bdc6c2ea99e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "3b326a7c-815e-4a3e-b2ca-e648fc4520b4",
        "cursor": {
          "ref": "e5e1b3ad-fa5d-41f8-97f2-014ba9e5cc98",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b8c1a9a9-5ae6-4384-9e9f-a268d536b02f"
        },
        "item": {
          "id": "3b326a7c-815e-4a3e-b2ca-e648fc4520b4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "385d7566-56fe-4b44-b095-e13f9b6692f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "3b326a7c-815e-4a3e-b2ca-e648fc4520b4",
        "cursor": {
          "ref": "e5e1b3ad-fa5d-41f8-97f2-014ba9e5cc98",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b8c1a9a9-5ae6-4384-9e9f-a268d536b02f"
        },
        "item": {
          "id": "3b326a7c-815e-4a3e-b2ca-e648fc4520b4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "385d7566-56fe-4b44-b095-e13f9b6692f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "9d6f3af8-2669-487a-ae79-f4e614720504",
        "cursor": {
          "ref": "2eac290a-84b7-492d-8638-61776cd0e756",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "aeefbc41-c426-4a17-8676-499bf8e31310"
        },
        "item": {
          "id": "9d6f3af8-2669-487a-ae79-f4e614720504",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2dfd34ad-6102-4051-a7ab-9d8ec516a4e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9d6f3af8-2669-487a-ae79-f4e614720504",
        "cursor": {
          "ref": "2eac290a-84b7-492d-8638-61776cd0e756",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "aeefbc41-c426-4a17-8676-499bf8e31310"
        },
        "item": {
          "id": "9d6f3af8-2669-487a-ae79-f4e614720504",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2dfd34ad-6102-4051-a7ab-9d8ec516a4e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4e245798-6104-49a5-8bac-7c0648585611",
        "cursor": {
          "ref": "7042f1fe-e5a3-4e4f-ad3a-fe8b4a2d8f04",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c3f05a16-0d2a-44fe-8d68-08a8f5249815"
        },
        "item": {
          "id": "4e245798-6104-49a5-8bac-7c0648585611",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f2a5f9d9-d713-4ef6-9771-2cbd2b431baa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "4e245798-6104-49a5-8bac-7c0648585611",
        "cursor": {
          "ref": "7042f1fe-e5a3-4e4f-ad3a-fe8b4a2d8f04",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c3f05a16-0d2a-44fe-8d68-08a8f5249815"
        },
        "item": {
          "id": "4e245798-6104-49a5-8bac-7c0648585611",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f2a5f9d9-d713-4ef6-9771-2cbd2b431baa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "39028b60-f60f-4db6-b6f8-4d16f64a1725",
        "cursor": {
          "ref": "05a5f5f2-1092-4eb8-a777-ae8b56d41495",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7185d42d-8f2f-484a-88ba-66abd05df48c"
        },
        "item": {
          "id": "39028b60-f60f-4db6-b6f8-4d16f64a1725",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8282833d-4fde-403e-ad66-e977a4271fb4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "39028b60-f60f-4db6-b6f8-4d16f64a1725",
        "cursor": {
          "ref": "05a5f5f2-1092-4eb8-a777-ae8b56d41495",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7185d42d-8f2f-484a-88ba-66abd05df48c"
        },
        "item": {
          "id": "39028b60-f60f-4db6-b6f8-4d16f64a1725",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8282833d-4fde-403e-ad66-e977a4271fb4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "556ac5c7-234f-497f-983b-3b98d426f74c",
        "cursor": {
          "ref": "d417d0dd-8aa1-42e5-a63f-ca34b2a92551",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "aa148fba-93af-47f3-984a-d0e5a948e7aa"
        },
        "item": {
          "id": "556ac5c7-234f-497f-983b-3b98d426f74c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "17fb5a39-6f4a-456c-b21c-8155d9e38be0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "556ac5c7-234f-497f-983b-3b98d426f74c",
        "cursor": {
          "ref": "d417d0dd-8aa1-42e5-a63f-ca34b2a92551",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "aa148fba-93af-47f3-984a-d0e5a948e7aa"
        },
        "item": {
          "id": "556ac5c7-234f-497f-983b-3b98d426f74c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "17fb5a39-6f4a-456c-b21c-8155d9e38be0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fcd25976-ad2d-4b9f-9bd9-5fed51f5d5f5",
        "cursor": {
          "ref": "10dce02e-e085-4136-a06a-f8b8f5e2d38e",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4065aa57-6ca7-43c1-869b-7a5cbb854e54"
        },
        "item": {
          "id": "fcd25976-ad2d-4b9f-9bd9-5fed51f5d5f5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "84ea2ab1-b0a8-4f19-a545-cef70ab8803f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "fcd25976-ad2d-4b9f-9bd9-5fed51f5d5f5",
        "cursor": {
          "ref": "10dce02e-e085-4136-a06a-f8b8f5e2d38e",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4065aa57-6ca7-43c1-869b-7a5cbb854e54"
        },
        "item": {
          "id": "fcd25976-ad2d-4b9f-9bd9-5fed51f5d5f5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "84ea2ab1-b0a8-4f19-a545-cef70ab8803f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1716258a-4481-4a19-94ff-04af385f0ffa",
        "cursor": {
          "ref": "adc345d7-2a25-4073-86e6-767e1c3985f4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "46839d0e-3f73-4391-a40d-bb57450c96b3"
        },
        "item": {
          "id": "1716258a-4481-4a19-94ff-04af385f0ffa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5a1e558e-f837-4009-86a5-402097fcdd04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "1716258a-4481-4a19-94ff-04af385f0ffa",
        "cursor": {
          "ref": "adc345d7-2a25-4073-86e6-767e1c3985f4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "46839d0e-3f73-4391-a40d-bb57450c96b3"
        },
        "item": {
          "id": "1716258a-4481-4a19-94ff-04af385f0ffa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5a1e558e-f837-4009-86a5-402097fcdd04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "1c8b787a-0f06-4c99-8b25-f651d656e910",
        "cursor": {
          "ref": "9cb3587f-6e2e-4372-bca5-0fddbe84a7d3",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b6b94af6-830c-44a7-b63f-fe09737c09eb"
        },
        "item": {
          "id": "1c8b787a-0f06-4c99-8b25-f651d656e910",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7afbe246-5595-4e8f-8409-28342cd2993a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "1c8b787a-0f06-4c99-8b25-f651d656e910",
        "cursor": {
          "ref": "9cb3587f-6e2e-4372-bca5-0fddbe84a7d3",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b6b94af6-830c-44a7-b63f-fe09737c09eb"
        },
        "item": {
          "id": "1c8b787a-0f06-4c99-8b25-f651d656e910",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7afbe246-5595-4e8f-8409-28342cd2993a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ab2ba9db-faf6-49e6-9a7d-3c27152615dd",
        "cursor": {
          "ref": "2d36ff6f-e7b6-4396-9968-5b2ed68553be",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5283cccc-de15-49b8-a64f-2bed86833798"
        },
        "item": {
          "id": "ab2ba9db-faf6-49e6-9a7d-3c27152615dd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "36be6571-e8e5-4d9e-9eaa-9f4334765789",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ab2ba9db-faf6-49e6-9a7d-3c27152615dd",
        "cursor": {
          "ref": "2d36ff6f-e7b6-4396-9968-5b2ed68553be",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5283cccc-de15-49b8-a64f-2bed86833798"
        },
        "item": {
          "id": "ab2ba9db-faf6-49e6-9a7d-3c27152615dd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "36be6571-e8e5-4d9e-9eaa-9f4334765789",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "9707e3eb-f221-45e0-ab2f-c3144d6c880a",
        "cursor": {
          "ref": "98992260-9866-455c-b1da-f57d887d02bf",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "341939e0-3229-47bd-8166-e2231e8f6caf"
        },
        "item": {
          "id": "9707e3eb-f221-45e0-ab2f-c3144d6c880a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d66c7103-679b-4239-871f-632a25931dc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9707e3eb-f221-45e0-ab2f-c3144d6c880a",
        "cursor": {
          "ref": "98992260-9866-455c-b1da-f57d887d02bf",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "341939e0-3229-47bd-8166-e2231e8f6caf"
        },
        "item": {
          "id": "9707e3eb-f221-45e0-ab2f-c3144d6c880a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d66c7103-679b-4239-871f-632a25931dc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "3b336d4b-a225-44d9-ad41-ee7ed70f394c",
        "cursor": {
          "ref": "40df31dc-587f-4715-bf89-3ce31680f41e",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d2d55847-5831-47fd-9fee-7ce658a308b4"
        },
        "item": {
          "id": "3b336d4b-a225-44d9-ad41-ee7ed70f394c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fe9c7d34-cd18-49b7-a721-636a0c32acdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "3b336d4b-a225-44d9-ad41-ee7ed70f394c",
        "cursor": {
          "ref": "40df31dc-587f-4715-bf89-3ce31680f41e",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d2d55847-5831-47fd-9fee-7ce658a308b4"
        },
        "item": {
          "id": "3b336d4b-a225-44d9-ad41-ee7ed70f394c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fe9c7d34-cd18-49b7-a721-636a0c32acdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "0a5cb89a-f6d6-4ce0-aa6c-c8a1514aae56",
        "cursor": {
          "ref": "20383a1f-c9cc-4294-9729-0894f5f54549",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a2bb137e-8039-436f-b4e2-1b650c386c77"
        },
        "item": {
          "id": "0a5cb89a-f6d6-4ce0-aa6c-c8a1514aae56",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b3b9a09c-f93c-4bfe-b6cf-1629e2362873",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0a5cb89a-f6d6-4ce0-aa6c-c8a1514aae56",
        "cursor": {
          "ref": "20383a1f-c9cc-4294-9729-0894f5f54549",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a2bb137e-8039-436f-b4e2-1b650c386c77"
        },
        "item": {
          "id": "0a5cb89a-f6d6-4ce0-aa6c-c8a1514aae56",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b3b9a09c-f93c-4bfe-b6cf-1629e2362873",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5f86c4bc-e7b8-45c4-8218-492841fb07bb",
        "cursor": {
          "ref": "d44e4545-4285-4d53-b2a0-0947830cc071",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "edab517f-af27-4a04-9e35-b52287d64f8b"
        },
        "item": {
          "id": "5f86c4bc-e7b8-45c4-8218-492841fb07bb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b34df5fb-ab4f-4c89-a070-c9681b8349d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5f86c4bc-e7b8-45c4-8218-492841fb07bb",
        "cursor": {
          "ref": "d44e4545-4285-4d53-b2a0-0947830cc071",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "edab517f-af27-4a04-9e35-b52287d64f8b"
        },
        "item": {
          "id": "5f86c4bc-e7b8-45c4-8218-492841fb07bb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b34df5fb-ab4f-4c89-a070-c9681b8349d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "33c17c58-d64d-4515-a0f6-45f703a6ec4e",
        "cursor": {
          "ref": "a35ed9ca-3ac8-4242-89fb-ab4ba0dbb388",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e93f20a4-d4fe-4676-b17f-7f9a2967888a"
        },
        "item": {
          "id": "33c17c58-d64d-4515-a0f6-45f703a6ec4e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ad6ad733-389b-4786-9e1f-c5f11e269993",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "33c17c58-d64d-4515-a0f6-45f703a6ec4e",
        "cursor": {
          "ref": "a35ed9ca-3ac8-4242-89fb-ab4ba0dbb388",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e93f20a4-d4fe-4676-b17f-7f9a2967888a"
        },
        "item": {
          "id": "33c17c58-d64d-4515-a0f6-45f703a6ec4e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ad6ad733-389b-4786-9e1f-c5f11e269993",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e47e97fe-b45e-4f3d-8f17-5a528a5bf949",
        "cursor": {
          "ref": "4cdbcc3d-5c30-46a1-b0c0-090f217bbe05",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "66130dda-40f9-474b-85e2-d877f3dd3666"
        },
        "item": {
          "id": "e47e97fe-b45e-4f3d-8f17-5a528a5bf949",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4e96b34a-af60-4cc3-b47d-beb4bc8fec53",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "e47e97fe-b45e-4f3d-8f17-5a528a5bf949",
        "cursor": {
          "ref": "4cdbcc3d-5c30-46a1-b0c0-090f217bbe05",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "66130dda-40f9-474b-85e2-d877f3dd3666"
        },
        "item": {
          "id": "e47e97fe-b45e-4f3d-8f17-5a528a5bf949",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4e96b34a-af60-4cc3-b47d-beb4bc8fec53",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4d9d4965-1943-4930-8069-d49098dc8881",
        "cursor": {
          "ref": "008fe391-ff72-474f-bfcd-400265d83d77",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cc69e0e4-531b-4985-9970-7219180aece4"
        },
        "item": {
          "id": "4d9d4965-1943-4930-8069-d49098dc8881",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1e4d0e17-a08a-421f-b72e-c1da979702bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4d9d4965-1943-4930-8069-d49098dc8881",
        "cursor": {
          "ref": "008fe391-ff72-474f-bfcd-400265d83d77",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cc69e0e4-531b-4985-9970-7219180aece4"
        },
        "item": {
          "id": "4d9d4965-1943-4930-8069-d49098dc8881",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1e4d0e17-a08a-421f-b72e-c1da979702bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "23fc6a58-74a4-4e69-a9db-e621af8ebc77",
        "cursor": {
          "ref": "887cf15c-1e38-44cf-aeba-0f7db7fc7377",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b7dae42e-cbd1-4cdc-b114-903fa096983d"
        },
        "item": {
          "id": "23fc6a58-74a4-4e69-a9db-e621af8ebc77",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d0810d70-5cfa-4971-8cc6-939564788d4a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "23fc6a58-74a4-4e69-a9db-e621af8ebc77",
        "cursor": {
          "ref": "887cf15c-1e38-44cf-aeba-0f7db7fc7377",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b7dae42e-cbd1-4cdc-b114-903fa096983d"
        },
        "item": {
          "id": "23fc6a58-74a4-4e69-a9db-e621af8ebc77",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d0810d70-5cfa-4971-8cc6-939564788d4a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "72d2a381-b325-423d-a6ba-ed95a7275c7a",
        "cursor": {
          "ref": "675668c2-f5b1-487f-b91f-b57380982f1a",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d8b791c4-c79b-4f7f-a265-41bd5d81973f"
        },
        "item": {
          "id": "72d2a381-b325-423d-a6ba-ed95a7275c7a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "58dcb78e-b960-468b-ac0c-c64386db74af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "72d2a381-b325-423d-a6ba-ed95a7275c7a",
        "cursor": {
          "ref": "675668c2-f5b1-487f-b91f-b57380982f1a",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d8b791c4-c79b-4f7f-a265-41bd5d81973f"
        },
        "item": {
          "id": "72d2a381-b325-423d-a6ba-ed95a7275c7a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "58dcb78e-b960-468b-ac0c-c64386db74af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e58bf7c0-d4e3-458a-8ed2-75026d8ae1e5",
        "cursor": {
          "ref": "6fd179f3-32b8-428e-bce1-4c9623c1f181",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0c93ecb8-ca64-4fc9-be0f-e63636aed9eb"
        },
        "item": {
          "id": "e58bf7c0-d4e3-458a-8ed2-75026d8ae1e5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a4cef443-1f0b-4e5c-a378-d47643c4760d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e58bf7c0-d4e3-458a-8ed2-75026d8ae1e5",
        "cursor": {
          "ref": "6fd179f3-32b8-428e-bce1-4c9623c1f181",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0c93ecb8-ca64-4fc9-be0f-e63636aed9eb"
        },
        "item": {
          "id": "e58bf7c0-d4e3-458a-8ed2-75026d8ae1e5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a4cef443-1f0b-4e5c-a378-d47643c4760d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3e117dce-5add-4ba4-afa2-67aeba52e3c3",
        "cursor": {
          "ref": "fe696475-8fbb-4f13-b5b7-9fd7f5d3e0b8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "301b0991-374f-45f0-aa47-02327b52027b"
        },
        "item": {
          "id": "3e117dce-5add-4ba4-afa2-67aeba52e3c3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0d09d62b-599b-437b-a70e-1da3d1e3c2f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3e117dce-5add-4ba4-afa2-67aeba52e3c3",
        "cursor": {
          "ref": "fe696475-8fbb-4f13-b5b7-9fd7f5d3e0b8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "301b0991-374f-45f0-aa47-02327b52027b"
        },
        "item": {
          "id": "3e117dce-5add-4ba4-afa2-67aeba52e3c3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0d09d62b-599b-437b-a70e-1da3d1e3c2f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "19f89f08-d1ea-49bd-b69c-0488e2818a86",
        "cursor": {
          "ref": "e28c7d04-98c0-4f77-b63e-ac470648c5a3",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bcc47278-6289-4fc4-85d6-33c3143d0fde"
        },
        "item": {
          "id": "19f89f08-d1ea-49bd-b69c-0488e2818a86",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e649d74c-32c5-4aa4-8c01-2f0964b3c972",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "19f89f08-d1ea-49bd-b69c-0488e2818a86",
        "cursor": {
          "ref": "e28c7d04-98c0-4f77-b63e-ac470648c5a3",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bcc47278-6289-4fc4-85d6-33c3143d0fde"
        },
        "item": {
          "id": "19f89f08-d1ea-49bd-b69c-0488e2818a86",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e649d74c-32c5-4aa4-8c01-2f0964b3c972",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "51920cd4-6c1c-493d-973a-5a86001f1e9e",
        "cursor": {
          "ref": "b3d6382b-e383-486a-ad99-c8a582346ae2",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e2df9e35-cd31-4436-a63a-9cc082ca3ff0"
        },
        "item": {
          "id": "51920cd4-6c1c-493d-973a-5a86001f1e9e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f74776dd-7030-4d92-aa6f-2aed8d2d612b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "51920cd4-6c1c-493d-973a-5a86001f1e9e",
        "cursor": {
          "ref": "b3d6382b-e383-486a-ad99-c8a582346ae2",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e2df9e35-cd31-4436-a63a-9cc082ca3ff0"
        },
        "item": {
          "id": "51920cd4-6c1c-493d-973a-5a86001f1e9e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f74776dd-7030-4d92-aa6f-2aed8d2d612b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "0d03a336-4477-4a6a-ac3e-52a66cd9388a",
        "cursor": {
          "ref": "9fbd651b-68b3-4926-876b-3301bb7ff8fd",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d7d77dfb-0461-419f-8752-2b98bbd83544"
        },
        "item": {
          "id": "0d03a336-4477-4a6a-ac3e-52a66cd9388a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8f28558d-332e-4f13-9f3d-8f296a0ad2ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "0d03a336-4477-4a6a-ac3e-52a66cd9388a",
        "cursor": {
          "ref": "9fbd651b-68b3-4926-876b-3301bb7ff8fd",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d7d77dfb-0461-419f-8752-2b98bbd83544"
        },
        "item": {
          "id": "0d03a336-4477-4a6a-ac3e-52a66cd9388a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8f28558d-332e-4f13-9f3d-8f296a0ad2ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "7a55c157-5080-47b1-bea6-12c794145215",
        "cursor": {
          "ref": "92a94d8a-8108-42cd-ae52-6e2051987065",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ffa0aca9-57fe-4621-9ee1-7f85d9d8157a"
        },
        "item": {
          "id": "7a55c157-5080-47b1-bea6-12c794145215",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "65ddb85c-f433-4c57-a5be-41d36990d738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "7a55c157-5080-47b1-bea6-12c794145215",
        "cursor": {
          "ref": "92a94d8a-8108-42cd-ae52-6e2051987065",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ffa0aca9-57fe-4621-9ee1-7f85d9d8157a"
        },
        "item": {
          "id": "7a55c157-5080-47b1-bea6-12c794145215",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "65ddb85c-f433-4c57-a5be-41d36990d738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "a884f6c3-fd3a-4ade-80ed-b9688820045f",
        "cursor": {
          "ref": "5a74f4af-53ee-454f-9dd6-316266f093c5",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "93458071-df70-4c8c-a806-0283e5dd105c"
        },
        "item": {
          "id": "a884f6c3-fd3a-4ade-80ed-b9688820045f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f449cd9a-7a11-4cf5-a781-2caf31cb3679",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "a884f6c3-fd3a-4ade-80ed-b9688820045f",
        "cursor": {
          "ref": "5a74f4af-53ee-454f-9dd6-316266f093c5",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "93458071-df70-4c8c-a806-0283e5dd105c"
        },
        "item": {
          "id": "a884f6c3-fd3a-4ade-80ed-b9688820045f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f449cd9a-7a11-4cf5-a781-2caf31cb3679",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "ea94cb48-2cf6-4e9e-bbad-c88a044dcfd8",
        "cursor": {
          "ref": "c4d08345-6e12-4140-a681-9871dee9520d",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b678cdf2-bcb7-4c3d-b1be-3109fc3ca48b"
        },
        "item": {
          "id": "ea94cb48-2cf6-4e9e-bbad-c88a044dcfd8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff5ae0a0-793f-4b4a-85f3-884059861e6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "ea94cb48-2cf6-4e9e-bbad-c88a044dcfd8",
        "cursor": {
          "ref": "c4d08345-6e12-4140-a681-9871dee9520d",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b678cdf2-bcb7-4c3d-b1be-3109fc3ca48b"
        },
        "item": {
          "id": "ea94cb48-2cf6-4e9e-bbad-c88a044dcfd8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff5ae0a0-793f-4b4a-85f3-884059861e6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "1ed715ac-c54f-4748-8d06-cf49de80170d",
        "cursor": {
          "ref": "4d390c76-7734-441d-ab5e-d574237299fe",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7457639e-adb1-4181-951d-20efbc2b753f"
        },
        "item": {
          "id": "1ed715ac-c54f-4748-8d06-cf49de80170d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6b49e548-d2bb-44d3-859d-51f9f93dbc2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "1ed715ac-c54f-4748-8d06-cf49de80170d",
        "cursor": {
          "ref": "4d390c76-7734-441d-ab5e-d574237299fe",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7457639e-adb1-4181-951d-20efbc2b753f"
        },
        "item": {
          "id": "1ed715ac-c54f-4748-8d06-cf49de80170d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6b49e548-d2bb-44d3-859d-51f9f93dbc2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "52d0a7b1-73be-4245-a6f7-8de6b298f398",
        "cursor": {
          "ref": "1d9a90cf-8e78-4843-95be-7cce48d8ceb6",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c6ef9d15-9b1a-4dfc-b134-f49329bd489b"
        },
        "item": {
          "id": "52d0a7b1-73be-4245-a6f7-8de6b298f398",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3a9ae428-175e-4878-9d81-dfa1acbf71ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "52d0a7b1-73be-4245-a6f7-8de6b298f398",
        "cursor": {
          "ref": "1d9a90cf-8e78-4843-95be-7cce48d8ceb6",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c6ef9d15-9b1a-4dfc-b134-f49329bd489b"
        },
        "item": {
          "id": "52d0a7b1-73be-4245-a6f7-8de6b298f398",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3a9ae428-175e-4878-9d81-dfa1acbf71ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "7f6e8c66-d539-4f83-90ad-aa589427fb10",
        "cursor": {
          "ref": "505b30bc-c4b0-4778-b5bf-e1433929e35a",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "995e1304-d6a8-40b3-bf0f-6c76bf809b1c"
        },
        "item": {
          "id": "7f6e8c66-d539-4f83-90ad-aa589427fb10",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7bcacc99-e9f3-4263-a4f0-f8b1c7cb3c17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "7f6e8c66-d539-4f83-90ad-aa589427fb10",
        "cursor": {
          "ref": "505b30bc-c4b0-4778-b5bf-e1433929e35a",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "995e1304-d6a8-40b3-bf0f-6c76bf809b1c"
        },
        "item": {
          "id": "7f6e8c66-d539-4f83-90ad-aa589427fb10",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7bcacc99-e9f3-4263-a4f0-f8b1c7cb3c17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e212a039-c46d-4200-aace-5ca1d0a3deac",
        "cursor": {
          "ref": "35d0e8af-2577-4640-a9f0-3decd1d773de",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "77e72cdb-7684-4753-b335-bf173d059428"
        },
        "item": {
          "id": "e212a039-c46d-4200-aace-5ca1d0a3deac",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cd992474-3837-43f7-b8a3-00404064bb95",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "e212a039-c46d-4200-aace-5ca1d0a3deac",
        "cursor": {
          "ref": "35d0e8af-2577-4640-a9f0-3decd1d773de",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "77e72cdb-7684-4753-b335-bf173d059428"
        },
        "item": {
          "id": "e212a039-c46d-4200-aace-5ca1d0a3deac",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cd992474-3837-43f7-b8a3-00404064bb95",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "4025c56e-96a8-4eee-b965-40ece9fd47b6",
        "cursor": {
          "ref": "e82e3094-3953-4203-8cb0-46fbbc5447e4",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7421ee62-d8f6-4d83-a1ec-7826c8b1f428"
        },
        "item": {
          "id": "4025c56e-96a8-4eee-b965-40ece9fd47b6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f1ccd0c1-4c04-4047-ad08-2bd78cdab6c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "4025c56e-96a8-4eee-b965-40ece9fd47b6",
        "cursor": {
          "ref": "e82e3094-3953-4203-8cb0-46fbbc5447e4",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7421ee62-d8f6-4d83-a1ec-7826c8b1f428"
        },
        "item": {
          "id": "4025c56e-96a8-4eee-b965-40ece9fd47b6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f1ccd0c1-4c04-4047-ad08-2bd78cdab6c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "7b900cda-6640-488e-bf22-715f00411730",
        "cursor": {
          "ref": "d143e633-7039-4a0d-85e7-aed98e002088",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "94e0c140-de29-4efd-8622-1852b612c39e"
        },
        "item": {
          "id": "7b900cda-6640-488e-bf22-715f00411730",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2a47bcf4-6ff9-4d38-9d4c-62cf02f6e8ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "7b900cda-6640-488e-bf22-715f00411730",
        "cursor": {
          "ref": "d143e633-7039-4a0d-85e7-aed98e002088",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "94e0c140-de29-4efd-8622-1852b612c39e"
        },
        "item": {
          "id": "7b900cda-6640-488e-bf22-715f00411730",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2a47bcf4-6ff9-4d38-9d4c-62cf02f6e8ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "a1d1c52c-1ffb-4980-bffa-0ec05fd0a844",
        "cursor": {
          "ref": "5616b29a-7c34-42bc-bbdc-54a6198230e3",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c43f1a52-21d8-433c-9151-016ed657e313"
        },
        "item": {
          "id": "a1d1c52c-1ffb-4980-bffa-0ec05fd0a844",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "77b94c17-f59b-4939-8c8e-f325b3303f62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 90,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "a1d1c52c-1ffb-4980-bffa-0ec05fd0a844",
        "cursor": {
          "ref": "5616b29a-7c34-42bc-bbdc-54a6198230e3",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c43f1a52-21d8-433c-9151-016ed657e313"
        },
        "item": {
          "id": "a1d1c52c-1ffb-4980-bffa-0ec05fd0a844",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "77b94c17-f59b-4939-8c8e-f325b3303f62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 90,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "a1280a94-0724-4836-a3a5-cbf02aa72ad7",
        "cursor": {
          "ref": "729d8832-ac0a-4aa0-b397-163b58a13dc5",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b59ec0b9-05c2-4a31-aac2-a04cab433a87"
        },
        "item": {
          "id": "a1280a94-0724-4836-a3a5-cbf02aa72ad7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b497937-b438-430a-9d32-37b50aea39dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a1280a94-0724-4836-a3a5-cbf02aa72ad7",
        "cursor": {
          "ref": "729d8832-ac0a-4aa0-b397-163b58a13dc5",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b59ec0b9-05c2-4a31-aac2-a04cab433a87"
        },
        "item": {
          "id": "a1280a94-0724-4836-a3a5-cbf02aa72ad7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b497937-b438-430a-9d32-37b50aea39dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "1caaa091-cb58-4547-a1d0-feab96a7ae95",
        "cursor": {
          "ref": "fc29a4e6-26fc-4e9c-bc8e-b725ac5a32cf",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "95a4f4b2-75b2-4ddf-98f6-53359a8c95a1"
        },
        "item": {
          "id": "1caaa091-cb58-4547-a1d0-feab96a7ae95",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f15221d7-0f57-48b6-b85b-1dd20bce72f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1caaa091-cb58-4547-a1d0-feab96a7ae95",
        "cursor": {
          "ref": "fc29a4e6-26fc-4e9c-bc8e-b725ac5a32cf",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "95a4f4b2-75b2-4ddf-98f6-53359a8c95a1"
        },
        "item": {
          "id": "1caaa091-cb58-4547-a1d0-feab96a7ae95",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f15221d7-0f57-48b6-b85b-1dd20bce72f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1051d2fb-23c5-47fb-8be4-9b02121ec05c",
        "cursor": {
          "ref": "2a447f7d-8fda-4e2f-b6a0-5ce77c26e96f",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f767dfa2-7f33-4aea-9715-ea57d4319d78"
        },
        "item": {
          "id": "1051d2fb-23c5-47fb-8be4-9b02121ec05c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8bb5bde2-6563-4b36-be59-dd4bcee6f4fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1051d2fb-23c5-47fb-8be4-9b02121ec05c",
        "cursor": {
          "ref": "2a447f7d-8fda-4e2f-b6a0-5ce77c26e96f",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f767dfa2-7f33-4aea-9715-ea57d4319d78"
        },
        "item": {
          "id": "1051d2fb-23c5-47fb-8be4-9b02121ec05c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8bb5bde2-6563-4b36-be59-dd4bcee6f4fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2b45a607-f939-4bed-991a-9c132a91f356",
        "cursor": {
          "ref": "53b29e19-718b-4b16-b0ca-193a6ad2b5d2",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ea30917b-2f1d-4e8a-be9f-923ce2e65739"
        },
        "item": {
          "id": "2b45a607-f939-4bed-991a-9c132a91f356",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca805350-4a06-44d6-9466-43a4db34df66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2b45a607-f939-4bed-991a-9c132a91f356",
        "cursor": {
          "ref": "53b29e19-718b-4b16-b0ca-193a6ad2b5d2",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ea30917b-2f1d-4e8a-be9f-923ce2e65739"
        },
        "item": {
          "id": "2b45a607-f939-4bed-991a-9c132a91f356",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca805350-4a06-44d6-9466-43a4db34df66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4d690aec-5ac9-488d-88c9-30fe81a5b2c4",
        "cursor": {
          "ref": "46c22362-4b39-4e83-a04f-ea804ce88d7b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f0e6869a-103d-4053-a89a-b6bd54e58aad"
        },
        "item": {
          "id": "4d690aec-5ac9-488d-88c9-30fe81a5b2c4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b1ef0027-cfbe-4597-940b-8cf09a734334",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4d690aec-5ac9-488d-88c9-30fe81a5b2c4",
        "cursor": {
          "ref": "46c22362-4b39-4e83-a04f-ea804ce88d7b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f0e6869a-103d-4053-a89a-b6bd54e58aad"
        },
        "item": {
          "id": "4d690aec-5ac9-488d-88c9-30fe81a5b2c4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b1ef0027-cfbe-4597-940b-8cf09a734334",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "adcf34fd-5e32-4334-a838-ffd8bd36367d",
        "cursor": {
          "ref": "e067b083-4e11-42ba-ab98-d16ab836e48e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "90c02ba3-cdf6-40f7-8816-0fae4b48b75d"
        },
        "item": {
          "id": "adcf34fd-5e32-4334-a838-ffd8bd36367d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "99d86cd3-48ee-4e22-839f-0d70275e3162",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 81,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "adcf34fd-5e32-4334-a838-ffd8bd36367d",
        "cursor": {
          "ref": "e067b083-4e11-42ba-ab98-d16ab836e48e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "90c02ba3-cdf6-40f7-8816-0fae4b48b75d"
        },
        "item": {
          "id": "adcf34fd-5e32-4334-a838-ffd8bd36367d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "99d86cd3-48ee-4e22-839f-0d70275e3162",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 81,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "166d5579-bf7b-43a9-bb7b-3defa8bf3ac3",
        "cursor": {
          "ref": "d72dca91-4e7a-4d8a-bc2e-0a602950a717",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d0a047e8-e13f-4089-8068-6ddd447e8f00"
        },
        "item": {
          "id": "166d5579-bf7b-43a9-bb7b-3defa8bf3ac3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca0c418d-9598-483d-bd3a-abf5c20ebeef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "166d5579-bf7b-43a9-bb7b-3defa8bf3ac3",
        "cursor": {
          "ref": "d72dca91-4e7a-4d8a-bc2e-0a602950a717",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d0a047e8-e13f-4089-8068-6ddd447e8f00"
        },
        "item": {
          "id": "166d5579-bf7b-43a9-bb7b-3defa8bf3ac3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca0c418d-9598-483d-bd3a-abf5c20ebeef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "18af6dfd-fbae-4f7c-b445-5a11225b2ba0",
        "cursor": {
          "ref": "9d538318-245a-4155-9189-460e2cf37aa7",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4f20bb88-30d3-41ae-ae75-f9597be284cc"
        },
        "item": {
          "id": "18af6dfd-fbae-4f7c-b445-5a11225b2ba0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "45f17fc7-1177-4b8e-aeb1-690aa89bf351",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "18af6dfd-fbae-4f7c-b445-5a11225b2ba0",
        "cursor": {
          "ref": "9d538318-245a-4155-9189-460e2cf37aa7",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4f20bb88-30d3-41ae-ae75-f9597be284cc"
        },
        "item": {
          "id": "18af6dfd-fbae-4f7c-b445-5a11225b2ba0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "45f17fc7-1177-4b8e-aeb1-690aa89bf351",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "a54b0659-4433-4b31-b6ff-2835fba1a13a",
        "cursor": {
          "ref": "b48cfab8-a6db-4df7-be2e-b5e313aee574",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2d87e9be-1448-4b59-b339-3c9e60d21f0f"
        },
        "item": {
          "id": "a54b0659-4433-4b31-b6ff-2835fba1a13a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d82fc23e-9919-46e9-aeb1-0cdd4fe07f1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a54b0659-4433-4b31-b6ff-2835fba1a13a",
        "cursor": {
          "ref": "b48cfab8-a6db-4df7-be2e-b5e313aee574",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2d87e9be-1448-4b59-b339-3c9e60d21f0f"
        },
        "item": {
          "id": "a54b0659-4433-4b31-b6ff-2835fba1a13a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d82fc23e-9919-46e9-aeb1-0cdd4fe07f1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "38f1485c-5538-4d72-9f99-24b8448ae8ec",
        "cursor": {
          "ref": "0d8f3ecf-6ced-4399-a7bb-b4029b11d5b8",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5ac3c637-d048-4de0-b558-7d995f8d35b3"
        },
        "item": {
          "id": "38f1485c-5538-4d72-9f99-24b8448ae8ec",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f3dda4ce-e2e3-4ca6-aac8-7c69be910965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "38f1485c-5538-4d72-9f99-24b8448ae8ec",
        "cursor": {
          "ref": "0d8f3ecf-6ced-4399-a7bb-b4029b11d5b8",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5ac3c637-d048-4de0-b558-7d995f8d35b3"
        },
        "item": {
          "id": "38f1485c-5538-4d72-9f99-24b8448ae8ec",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f3dda4ce-e2e3-4ca6-aac8-7c69be910965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e65625de-22f8-4ae6-beae-f7df5787755d",
        "cursor": {
          "ref": "13aa5d63-ea78-434a-ad3c-ea4e2c761bb2",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b04c2374-49fb-495d-bdfb-49d1b81b8f70"
        },
        "item": {
          "id": "e65625de-22f8-4ae6-beae-f7df5787755d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "186af7c3-c24d-435c-9db3-45be2a2a528b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e65625de-22f8-4ae6-beae-f7df5787755d",
        "cursor": {
          "ref": "13aa5d63-ea78-434a-ad3c-ea4e2c761bb2",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b04c2374-49fb-495d-bdfb-49d1b81b8f70"
        },
        "item": {
          "id": "e65625de-22f8-4ae6-beae-f7df5787755d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "186af7c3-c24d-435c-9db3-45be2a2a528b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
        "cursor": {
          "ref": "786be007-2d4d-4929-9f27-196544bd0092",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "460e7b05-bdee-4102-8cb6-0f2d52035fdc"
        },
        "item": {
          "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
        "cursor": {
          "ref": "786be007-2d4d-4929-9f27-196544bd0092",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "460e7b05-bdee-4102-8cb6-0f2d52035fdc"
        },
        "item": {
          "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
        "cursor": {
          "ref": "786be007-2d4d-4929-9f27-196544bd0092",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "460e7b05-bdee-4102-8cb6-0f2d52035fdc"
        },
        "item": {
          "id": "921b72e3-e669-4ede-b3b1-43f939c2510e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
        "cursor": {
          "ref": "85349156-0721-4639-8e24-05fdfc52c34d",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b431854d-1b73-4d4a-8608-dae735cb4ec1"
        },
        "item": {
          "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
        "cursor": {
          "ref": "85349156-0721-4639-8e24-05fdfc52c34d",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b431854d-1b73-4d4a-8608-dae735cb4ec1"
        },
        "item": {
          "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
        "cursor": {
          "ref": "85349156-0721-4639-8e24-05fdfc52c34d",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b431854d-1b73-4d4a-8608-dae735cb4ec1"
        },
        "item": {
          "id": "b0c6a9af-e158-43a6-976d-4ecbf6a4ce92",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
        "cursor": {
          "ref": "26476412-8f20-4e03-b12a-da942ba4cbe0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd2a919b-bbd1-4da8-9d1b-668b853081ce"
        },
        "item": {
          "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
        "cursor": {
          "ref": "26476412-8f20-4e03-b12a-da942ba4cbe0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd2a919b-bbd1-4da8-9d1b-668b853081ce"
        },
        "item": {
          "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
        "cursor": {
          "ref": "26476412-8f20-4e03-b12a-da942ba4cbe0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd2a919b-bbd1-4da8-9d1b-668b853081ce"
        },
        "item": {
          "id": "5302b4a3-4b7a-43a3-8582-90f342cbad38",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
        "cursor": {
          "ref": "f8790a42-a0df-44a8-b6b7-6678ea8c3658",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d6057323-c2a8-4a2c-8a65-f3d4904a3429"
        },
        "item": {
          "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
        "cursor": {
          "ref": "f8790a42-a0df-44a8-b6b7-6678ea8c3658",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d6057323-c2a8-4a2c-8a65-f3d4904a3429"
        },
        "item": {
          "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
        "cursor": {
          "ref": "f8790a42-a0df-44a8-b6b7-6678ea8c3658",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d6057323-c2a8-4a2c-8a65-f3d4904a3429"
        },
        "item": {
          "id": "85b87722-bf4f-4592-aca3-cc3d66c4bbc1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
        "cursor": {
          "ref": "aff07e41-bc72-4345-a1b6-12d870330ea3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26bd7064-a731-4c5e-aa09-0f426774e834"
        },
        "item": {
          "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
        "cursor": {
          "ref": "aff07e41-bc72-4345-a1b6-12d870330ea3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26bd7064-a731-4c5e-aa09-0f426774e834"
        },
        "item": {
          "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
        "cursor": {
          "ref": "aff07e41-bc72-4345-a1b6-12d870330ea3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26bd7064-a731-4c5e-aa09-0f426774e834"
        },
        "item": {
          "id": "cb0eda94-3cde-4db7-a691-8000fe8d8168",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
        "cursor": {
          "ref": "b3962c9a-3ec8-4025-9bc4-ce7e5b38fddc",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a745e3c7-3d1b-4daa-9c9f-8a95456ff3d3"
        },
        "item": {
          "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
        "cursor": {
          "ref": "b3962c9a-3ec8-4025-9bc4-ce7e5b38fddc",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a745e3c7-3d1b-4daa-9c9f-8a95456ff3d3"
        },
        "item": {
          "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
        "cursor": {
          "ref": "b3962c9a-3ec8-4025-9bc4-ce7e5b38fddc",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a745e3c7-3d1b-4daa-9c9f-8a95456ff3d3"
        },
        "item": {
          "id": "0acce525-89c1-42a1-9f08-f9eb1dc492fc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}