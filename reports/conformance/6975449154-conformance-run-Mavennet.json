{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "af43101b-5133-4046-b96b-be5bfc134a55",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5db9be75-242c-4339-a50c-ead3da270c30",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa74c9ba-4e5e-47bc-8242-a84d86e00046",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3a73b68a-45e1-450b-84f4-dcdd2a082f5e"
                }
              }
            ]
          },
          {
            "id": "e1af6f2a-3bbe-4918-9006-6f14de39be30",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f15a3b72-3def-48c6-839b-9943ab36795b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a63f70e5-fed9-41a3-9668-94a4039167fd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "57e2711b-609e-4acf-9168-dce7e763639f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e6e87bc6-d347-42f4-9e15-45c50168b939",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08cb36d1-72df-4b0e-9c03-9529010874a0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "872f7784-5801-4cfb-9947-3d1e3cdf5db9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0e7bd5a-d512-4ab4-94a8-82b7e9f5b009"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36237892-3a09-4cbc-9fed-02523c1743d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "470c60ec-54aa-480b-b505-8206449a77ad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4ea360d-1ec4-46a0-976b-174983cf5d94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "148c04a8-3afa-4f50-a09e-7cf793f67f94"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3dab757-5cc2-45bd-810b-464a0b4f00ee",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c3c6ffd3-4d6a-48c3-8948-7427497cbfc0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dfa0b40-4270-4584-9aff-dca5157b9913",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a986054-3f44-4106-b08b-4139bc0ebb9f"
            }
          }
        ]
      },
      {
        "id": "cabf58df-1e3c-40eb-9646-c9acf274314e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "10447aaf-0fd6-430f-a205-6421ac71a3f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bce78d0d-4127-4424-b3d9-82259dfdaf4a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2227d578-a7cd-4838-9bd3-f967a815a895",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43720a76-1b8d-4a72-81a7-489658fd6231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8c0adbb-8ebb-4c51-ab92-3d0cef9d8dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d6b460-1695-432c-adb6-648a6317eb13",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429223fe-bfd9-4ab5-a28f-8dffa57dc28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84fba6d2-43c2-4407-a89d-c8edca9e05fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2564a4b-452d-406d-933c-ab38780567d6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d07b204-a5a7-4b8a-b60e-0c04aee3f612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e39b34af-7380-491c-9010-388952bf3fa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e7ce5f42-a7ec-4af6-af71-7ec546e1385f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61abb0fe-3fe9-418a-995d-d7bb4ee98419",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6192cf-e8fd-4247-959b-7b70834282b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7592760a-0753-4b61-8664-77075a5ab2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a12d241-4793-486d-9793-55d5a16fe1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac6a8c7-c463-44cc-8a30-7648948c8a42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "70e92bed-a1b6-4902-9a75-2348570488ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f1425b5-72e7-4e68-82c5-dbcec9143aa9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e77b5fb3-d919-4270-a518-85d39472807e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "91494d09-d3ee-4c9f-9ddf-df3ff95c7e88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31288396-db0b-4d7a-829c-1e954e9bcc82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a3a45f77-81c1-470c-8822-6e70f22ce98f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4448978e-e501-42db-a330-39eba7ab0817",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5e1a8d6-79c8-4748-88f7-db13912d2d0d"
            }
          }
        ]
      },
      {
        "id": "fbaadd09-1b89-42cf-bb3f-6b2472ffcba5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "98391d7c-f7d4-466b-8589-3c718eeb226e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a67489f9-df76-4238-aa83-58102e7f209a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4a5a791c-63c8-4eba-884a-90875fe82ee1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa45e5fd-9609-4a76-8e62-3a55231bb6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1232502-2b4e-4af0-aea9-4d9c28df44f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da496dc-dafc-4bbf-8043-1b559c16a1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "882029c1-de59-4716-980e-7d76e5f2d56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302a4bc2-d008-4cf6-b0f7-ae4892efa369",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dfc4d1-ad2f-4426-9c03-ccb37f4e7ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967c670f-e8a5-4db8-8865-ed7303287745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7e647c-eb5d-428d-aea5-9cf0db574bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a76813e-0b3a-4bd6-a540-17c35998a1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a9d3a3-e946-44bb-bd20-7d45c0c1d8c1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa338ef-70b4-41fd-9723-c833cbaab7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1824a676-04aa-44c6-a9ac-7619e5fc83a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e56ea9-c15a-406d-a01a-02133a215e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06c0bf79-55b1-4bcd-9b50-58804a925f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20327e0a-5ce6-4eed-934d-db1355611d94",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d9b403-4796-4f0e-857d-e5dbad745f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bc3dd7-a8f1-4772-9823-a877f4e847f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e38becb-f3b5-4d45-8a01-3326b2774357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7c90963-b50b-4e3f-9cd6-b58e99a75ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3eb387-9fa1-4011-b1cf-bb2613a4b2bd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a3ca61-ba35-476f-84ec-e0f10f16d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ee224a-2a20-4398-a854-b34399b30d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7e24f2-a7cc-4a91-ba53-02299ea9d3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc914aea-a672-4dc8-93cb-f4ad84c5f833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9aa6c4-d50f-4ee8-a4b3-70e1c2936373",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be4d5ab-aa32-48d5-8fff-2c5fa837f918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cb5def-fe47-421a-9e34-3a07f7b19eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1767f6e-3155-4451-9add-bd1a5504d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20054daa-cbc8-445e-8981-394ea7a52e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eea15f9-00cc-4164-96e9-6e1c9070fbb3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75188032-08bf-42ec-b4da-bbc74f3e2be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64ab145-7a6a-4384-a9d6-6b555bd55590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6930f43-a5ec-4747-8a8b-e4e553169c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "013f1ac0-acc4-4552-ac90-b814fab0a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e858315-3897-457d-af5d-9fe271a140c8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c13bbdc-9992-44a2-b760-29117afb45c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c78595-59b2-4dcb-8270-c13267bc29d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11eac769-b362-4269-b0c3-9717d4d52db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e4f2e64-ce3d-4e1c-ae31-799922a28674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c5c944-0053-4852-a021-9e8296e54aac",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfc7583-cf4a-4d10-a973-901a7cc9b6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b2531f-1c6f-47be-b531-b94dbf37c207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c18ce5-fc96-4206-8376-ec951b095958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66f34bca-1e19-4e58-943d-cfe26c0b756f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77623fa4-4af9-4b48-ba5a-118b9da08d74",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f07f9d0-4226-4e89-9289-c1d7c5217949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa065546-2671-4f5a-b9b7-9e7aeb651969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cccd729-ce05-4be5-8b9b-cb539902d96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2781783c-e9f1-44e6-b8c8-1613764ca115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c422bfd-01ec-4084-89ed-f2a32c56ef8e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a93757-24f7-40f9-8cbc-ceb06a0fec2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27516d6e-cfe6-443f-b3b8-4202a7180cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9baca442-4087-4ef4-be82-b8f12d25f6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eb31684-91c9-462f-a583-747b47ee72c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5783ba6-dffb-4148-a45e-1eccd7453eb0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7447ce-9c00-4070-a043-0fce490dbac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb9cf79-e87b-4421-bea4-ff4919444c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a95d8b-13d8-4147-b283-d125ca718f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e51c837-9ae0-4372-b1f3-f6632c78d84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f595863-1f57-42b9-a3ef-578b967663dd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7392f1-78fb-4437-885b-85e246ea14b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889ba73e-20fe-41ac-9401-86873e5f57b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21994e87-90bc-4012-bf7d-122a7453f9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63774e1b-7ea6-4572-8f21-737a90025b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4dd077-99fb-4613-8a06-4201ea2a9b95",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55058ca-604e-478a-bad6-6cef39a0a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c439a6c5-a1e6-4962-bb95-e664a9a75b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc414aaf-faf5-4f37-b440-7ecf61b9e02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "daa30837-3452-44d5-9e52-45f6d221aba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9aa7b1-a624-4111-afe8-c9f74dde3e14",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab84c1a-9cda-4d7a-92bd-616aa6aa2b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815ebe21-9ff9-457f-b89b-1f1f1972d61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b99a1-c26b-4598-865d-746b310e6b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2672acab-915b-43ac-b216-65cf10fcf56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b1b0ca-a148-44dd-84d2-e7d5bf5136f3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e738de-e5c2-4d3d-b1df-2b92cb01c33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf454c1-8066-488b-814f-9b415781fded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2f3069-a087-44fe-b888-a581cda97854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "181575b4-257a-40af-9c94-5219b54fb380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc187c3-2708-4c75-885c-364e226ed7ed",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f173ffd-9595-404e-a090-d3dfc85e7103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf62f7c-487f-4336-811f-2a1a0a523ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556e739b-86cb-49d7-8a07-e4b01f4ba164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05c30c9c-9831-413b-b84d-836f3bb60022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2314748-2a29-43e5-a51c-51c4dac6c4e1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053a842e-0dc0-4874-9da6-064f9f7ee4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de682802-d911-45bd-bf75-d41979b5a30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb8d812-296b-4afe-b9d1-092a56a775e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6bf0e5-9c2c-4bb0-b34d-b710b9c1261d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22017adc-e1b6-4099-bcf3-65ecdbdb0a54",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ed6cf0-82fb-47e7-aa2b-181cebcc00eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72443557-d5aa-4d50-bdd2-706d0eb21fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3362a2-88b5-4bf5-9d9a-5dbc4feba648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38627666-ab6c-45f4-8c40-cf89d190634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55db64e-d9c7-4755-a8cb-58a9799581b3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d501f26-dfa7-4c06-821c-831f642f73c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5647aaa-bb3b-4e17-bdcc-ee52757fd25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21339daa-163b-4a2a-b233-07910ed34db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbfafbf-cf21-4b6f-9b0a-4ab34e876bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00d1489-839d-48bf-a3ec-b30fcc0bd987",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db09c20-aef3-46af-b42c-40c53d6679ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a839916a-c480-49cd-8df0-d2fb4cbf2586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4581d17-391a-433b-9855-99287a6bafa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6b3e95-0b15-41cf-8c22-a0b1737fe7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc7cf20-8aa5-4375-a3f0-a121d3cacb89",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45210868-7904-4797-ad54-c15745b8f4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940c9462-2497-48a2-bde0-dcab781e8d41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71cf47c-8f9f-44a2-93a8-ab5895c27756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec057f95-9296-41e5-aa91-171c4f9473f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdd41c9-1ebe-4e44-b8d6-bd1340a17f79",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1534104-9b15-4f5a-ba80-75073be2395d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7904cb3-b233-438b-b18b-7cb1da46422b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8204e94c-95b9-4962-a28b-9fa213445f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b61d5ba-d028-434e-ad75-a61038a0beb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e85b8d3-4770-4b95-b25b-f179a85a16a6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d96c12-c159-41ea-8dd4-032f4e32144e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f0adb3-2221-4b1a-bb06-97040b66feba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dced791e-f26c-425f-9847-4904d4310c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0eaf1b9-dc08-4447-b691-1aa07cfcc50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2132fa96-cf16-4f7f-a90f-d004fca18926",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f837f27-bfcd-453c-bfb7-2c9dd27ab7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e739316d-df16-471a-ab1f-8f35d0a5f7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abd540c-141e-49d6-a043-3faa790476c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9750e841-e2d5-428b-bb11-007c0da9c484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dd222d-c88f-4763-8fcf-fcd98c699620",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097d7d20-8a94-4c8f-930a-48605e399518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d05749-2f94-47cd-b5da-0c2b33d78d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e340e58-579f-47c3-af9d-cc670db5b85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1117603c-c6a5-425a-ab05-c5d66689e24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606bc377-fa3b-4a3a-8af9-b2f6030437cd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534a992b-b82d-4f24-8432-59e285be140b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bcefeb-c1d1-4a53-b641-0d8dbfd9285b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27611752-a05d-4cc1-9caf-d96786beddbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "981984a0-4e2e-4d74-b8c2-565ed643908b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228dd03e-b200-48cc-a0e6-353c57bf65d4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312885a9-4761-4d2f-8abb-46d7649aa4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3900fef-9492-4d3f-8ae9-7c03eb575529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f84086f-bc8d-49de-a7e4-534a19fac7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f8ea0e-28c1-45e9-a5cb-e78799646e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd27b72-45f6-479e-947c-dfc104960cab",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f383b0f9-0de4-4778-88d0-cf73e3ae2efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d749312-4f70-47e8-9183-818990be9ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108be141-f490-4613-bcd3-e0943bfe9d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42896329-05a7-46ef-a8ea-19c04fd9034c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d80b2c9-09ff-47eb-b90d-931347eb54ee",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5e1e15-7540-4649-910d-718ff7bb8c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fae768-fea7-4512-b57f-9416017c67c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d92e83-54b7-4984-b308-243bcc3f60e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6027998a-9283-45cf-bf6d-7839227ee1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aecd2bd-b79c-4a71-aeee-e26b740551e5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643306bc-3769-4c94-b30e-85ac40e1dedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65e86b8-3689-4c89-b976-c28c60b715a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2797926f-3e8d-4a95-a5d7-380bcd5fb5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2893cc50-1753-4339-8031-04d83be79d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23242549-6dc8-492b-8da5-068078db9d9c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e887590-e918-4784-810a-aea22e8198c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb980e3-2801-4c82-8a28-8b2793bbb4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2e5405-8ac9-4bfe-9a8e-b26c26bdb85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96bb55dd-5269-4bc9-9dbb-c86e4b9948ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25503fab-889d-4eb0-9ecc-b51f8005dffd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4191d55d-3130-4338-860f-da23c16d24d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd89264-4a69-4fbf-9e76-64b5a6df57ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c917f7d-aaff-40c6-a5d9-8231dea84d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ed11bb-e689-45d7-8793-738a80d27a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400d856d-a787-4519-a2c6-226ed8e0d724",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d295203c-977c-4d08-864f-c174c1523729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93da9a41-144a-42d0-9698-343a3f235088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c4b2d6-79ff-4489-a4c6-1eb660d3b78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48bb83d3-2140-4762-9c25-9a0bd40659c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa471ed3-8115-4f70-a33e-a7a8fefa2728",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864c607f-87a4-454e-a520-58d4218b6539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a8d4bb-760e-4cc5-a322-233885708b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ec1455-d344-48ca-9f24-085d3d75b7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf83042-f22e-49a0-a6d6-c0f70ffecafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9564deb-ebea-4986-8821-c737c46fa03a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8239865b-663f-433f-af34-ba0a672aa654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddb7ba6a-2aea-4110-8656-74eef024e54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4409644-9c39-42fb-8f1c-54da01029b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8f1e80-3dc2-4ce6-9a92-1fcc42af5b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffa2509-b1a0-4b05-a91b-8ebaa034fffe",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daad396-5e04-47e2-8061-a43ccdbac6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5d95e5-55d7-4a95-9147-70b56a866b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ed680d-58e8-4646-9071-13d12b9f5eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5c28f6-d0e2-40b7-a073-16b0d15f059c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83f30b2-70bb-4efc-9965-4500dbfe1a54",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d1757b-2d48-4d62-b71c-7face3421b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec8aa24-31bf-4c3f-b27c-9199d50e00b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbff428-716a-4479-8a8e-fad7911bd119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed69769c-8c56-4763-8044-85e1f1f1102b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24715fcb-7dde-48cb-a4a1-1de8ff231a5d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a29223d-eb8c-47a1-86de-f659d606ca6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92271f1-df1f-4f6e-8479-86988e038104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cefecf3-7089-4db4-821f-b75f95a6b09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "79d98613-d66c-45d8-9c2d-2a4d358cd07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b09b21-e0b6-4fbe-bceb-cb05e147f66f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e447b21c-94df-4806-afe2-2d12b178291c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f1880d-086c-4a4a-bc2a-91788f3e4a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7934b5-786d-4a9f-a9e1-4b43d0673c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "da91c4b1-2a85-4653-8a37-adf3a0ffde1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad72731-fcce-43cb-ad21-37e5e3cb48b6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9532acce-30bf-47e0-ac5c-85e65ee026aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7c5a57-4aa9-4058-9bb5-778dcc087453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f51bb44-a461-4153-9a08-37b001080d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6f2dda-1a19-499a-af31-6ef38c4a356f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b662b8fb-ed21-4a64-9144-ce3bbccf53bf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27262f9b-7aad-4143-99f3-b6090edafb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4932fc-c9da-44a7-bd10-3215b49bd475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05518f7-de69-4ae2-98cf-a9447740fea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "839c6091-0f66-4269-b994-a71d8558d5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac8e0d4-c480-4ed8-a3ed-ffaa64ff81f1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fa43c9-58f7-484c-97f2-bcbb9f5b03d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ed6251-17cf-43d3-b977-6404d5f75462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19eee800-9683-40c3-b251-1a4dcfa7e9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dee86d7-64fc-4275-ab69-7aad5117cb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100466ae-34fd-49a9-a520-33f6d87e0a87",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9974d4f6-6521-404e-9b9f-5b76c82edc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9c6b41-a56a-4588-a55f-7d5dbfd11edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd8fc65-7839-4a9f-992f-5f3fb41c60b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "56794d52-70d5-4271-8103-7a9856a147e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d0a9a1-cfcb-4f55-ace9-5495e37c5dfe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd768580-719b-4465-8e6b-770f9994a392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2adffd-5395-4db7-85c5-382d0585dd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0968e65c-fbc2-45a8-87dc-20c5b93aeaad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7aa4ff-944b-4dd8-8613-43ce2b587ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2305effc-7f03-47a2-a43a-a71851c8b8ec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c14315-c974-4ad2-841c-30469d6d9581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7917c8-e261-491b-ac06-6d5abb6fc29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2323d2db-d1bc-4f62-86db-6f67929af700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86bf8520-d4d2-4824-8122-99c73ccacfc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500e0ef1-21cb-4145-8dda-bda9fb5b56fb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d3afad-d4a6-4de8-9f2c-d94de09e6d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420055f8-01f7-4dd9-ae84-8f94988dc2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c756ac0d-a5cd-479a-b111-84851fc34406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "011024f1-2661-4696-8829-ab92b3bfd5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26099b39-acd2-4516-9e80-80be68ea4333",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638627a2-9821-4c04-a6d1-7e45e794ff69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e95d30-9657-468c-b773-9c065aede170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8dcfb8-5f2b-401f-b7f5-d2c2706761f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "285b4234-83ff-4d77-8402-8a80054a3bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d8a67a-c8b9-4916-a401-18de9d79c529",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3292da-e8ea-4b42-8737-fa856966a2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa64c1c7-a447-4cb0-ba3e-7404e967512b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f561ce9d-eaa7-4edc-96f7-3dcfefc1b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30c83b3b-18ff-4f90-a8e9-ef860f0d6e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827aa58e-0cdf-4327-906e-f0fb3b1314b2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cbd15c-8a98-4737-8261-9d8f72411fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfddac6-3f2d-4abe-b0d3-fba08cc0c1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e1fd10-7946-43a7-b744-f3b10faeaa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b76d0c37-ad3b-4d32-8895-02f149822145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66b1f11-1ca7-4c64-ab8f-d3c4b2362e6f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618ad9b3-dd64-4dcf-bd15-d4e08571f9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6273c243-355f-4765-8d79-93253bdd2805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe52abab-6f6a-49b9-9168-33d7f9761e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2354b52-a538-449d-93e2-16fb57746c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734e59be-d466-46c2-8fd4-f6f844dd1e4c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4827ff-9996-4818-bd27-4dd1cb89f4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c62cfe5-8165-43c9-811f-85560a977657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ebbf42-aeb9-425f-bac6-6d2ac24c6ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e10b4a2a-808d-4a65-9d37-9c2a38292278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccc73dc-ad8c-41d9-830b-b8f79b996303",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef02032c-808c-4c60-803f-c77e39851afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd03e9e-f4ef-42a7-b446-28eccf9b882d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d119e4e-b65b-4bf6-8f92-2a00b61418c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c379c2e5-0271-4128-814a-765b6b2178ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2a48e4-a6c9-40fa-93bc-0ea12b9f3ac4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc7c70a-2e52-41a8-b47e-81cc160ac44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6809798-2846-458e-9c8c-802d1a0fd617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9b2b2a-ad42-4efe-882e-652ae1074805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc5fe63-6e88-4c2e-ac45-556cbb72676f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0a9e81-4ca2-49fd-b2fe-111d71db85dd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d6a99e-02f3-405f-9694-7479be36a129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e17552b3-7e98-4758-92ae-11c1d1974808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ee000d-007e-4237-826f-7e948622e5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9efa7488-d52d-4d6a-a1d0-7ac8ed51ff8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3baeda-dd53-4968-a38e-66fcd58ea26d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e71462-9ffb-4292-9472-317f5f9f70ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76280663-2f52-40f9-ac6e-307f4e826d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e73af-c62d-46b1-8044-8244283aa03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2795112b-a5e3-4fb0-8938-c3405c11cb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990ea9f5-605b-45b2-9323-45b0cb7fcfbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dae5d3-e20a-4d5b-adb4-f25328165939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b030f5-af05-43ae-832f-e4cfa34f96a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb14e14-b0ae-4c2e-b577-932df1a3d03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "931c61dc-1105-40cf-8c76-db02fa6ad0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21472b2-3da3-49ce-bffd-c645bfdab93d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5445171-3794-405b-a7ee-f5aa02da4b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4971d1-5cf6-4526-9007-1f686832a0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bafee9-bd47-4a18-8c1b-bcb072c838e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "916af479-1385-4cbf-be81-f8afac9afeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd52f52e-8563-48f3-90fb-dcff49a9357b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1597dcc3-c678-4667-b55a-21078fcc4d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0f2e76-b91d-416b-a076-782170e9d033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32dcfa5-5cea-46a1-afbf-7c50482c00dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "94b684f9-debf-495b-9378-2c9d02c9fafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed61718-5ade-437e-91a4-319263ced86a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58313fe-a67f-4559-b063-02878f871158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47546cf5-8106-492e-8917-969e2be87d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733618b6-509d-416d-b731-931a13742852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "62f4e4e1-d72f-4f0d-aded-776352cb8b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53e74cc-9f2d-4ddd-84e2-b1dfa1442a5f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2123386b-b708-421c-9aba-a445f33393c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b7b70b-7c96-493e-8189-7b58474363ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496826ae-055b-421b-8b50-1ed77fe6a4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6679a088-0633-4e6d-9adc-14429ceab2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adec0e48-97c4-4270-83be-b703648f21d3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e57221-575b-43aa-9828-ee97ce4351b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24482092-3374-4fc5-a59d-f3c1cbf3a25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc977bc-52fb-4e1f-be5d-03bd02a4799a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5487495d-479f-4d82-9370-b36536f4c651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f4b7f0-bba2-45f9-8189-dc02bf197e41",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44be5534-f7bf-4fe2-8e2b-87f5b96d19dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8e3616-83d2-41e8-af51-8d42ad1a69fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b355879-5fbd-49df-90e0-b75fd303401d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf2753de-c5fb-48ad-9b5c-47ae62c7a6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db035ab6-03b6-41b7-b5c7-bb5e0cf5dd7c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f236558-e00d-434e-9e62-67b52c7997de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9676d185-d77d-473f-89dc-d5e15b157b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cc6eac-11e1-4159-9d8a-d3cede6f8c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c69de4e-7ecf-4c04-8de5-be706e7792e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6822d92e-cee7-443f-ba49-c43ce98b60d8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a888d10-4196-4496-9e17-cf198db27a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7737d5-17be-44aa-924c-1f0b43b7027d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723a66be-ba1f-4d23-9bbb-d21efc7ff8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "514e2c2d-9d4e-4451-b193-55628e509dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cecd57-f8df-48fd-a7e3-a1f79e54f3a3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f61207-bb61-4735-8f6f-821aa96cc10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425adde4-a84d-4508-b457-f22343304d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06bc250-a4dd-4e4e-97c6-f467bd99c88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c36d6dd-1855-42ee-844e-a1c97c1e4d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a0d923-8c19-43fe-ac57-de8ff5c8bddc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84104b96-2ec1-4f2c-875a-c17045f0a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b30d729-147e-446c-b860-cf8920e932c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fcd594-3240-42c5-80af-e096bbd87f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68f7159e-806d-4467-8755-d9bbe1594c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8dfe5f-e3ca-4200-bf46-bd33bc5ec195",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d442b1b0-433d-4cab-83e5-a1843ea59fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c10c88-8db7-41f5-ae03-d9cef69558f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e11b066-8766-4917-baca-7c27744df271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bb75e7-cc0f-4f1f-aa09-e415016d1c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fded68e-9bf7-459c-9fae-d138b3bcb5d8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f96f64-f35a-4ab2-8626-1c68a4ee49f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620c7502-e7f5-4f48-83db-54c3c357d914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb94532-d045-428a-aba6-8fc66f2b43e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea2733b-845f-4f83-a67c-8a66916e123f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2cf306-29b8-465b-9d40-7d56dae4ccb6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de66b8cf-1c29-4fc4-8426-6ef400e6f0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718d9baa-b295-49a6-b346-00f6ae23ab43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2a96c2-051a-4de5-8e13-8c88ee1a302a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e65beb-22e5-418c-9e13-eeac524335be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74942e4-c0ff-4ad9-9976-c5b6b986cc19",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9464b632-30ac-48b1-9ed3-4881d9721599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a19858-be38-43a6-9061-883e0d2a73c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5d573f-1946-4a86-8351-e26b14946759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "794ba6f2-39e8-489e-ae72-e1c48ae39be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb697a16-4488-4178-bb80-054d74173bf2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b39ddb0-e61f-4bb1-8a37-3288cccd232b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d3359d-e968-421e-91fa-3164eea9cf19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51386351-0c0e-464a-8a83-196f235b3a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90741a7a-8026-4702-800c-0dc5b698632d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c972b0c8-35dc-4c21-a7b0-9d6973fdde8a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872dea3b-d578-47d9-8186-57c5ca7ab323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7ad835-7668-40e8-8f40-0f04ab71aa5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39661728-d6ca-4ccc-a8c5-ef56dace489b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebc6dc8-361a-4cdb-8431-2d69ac448436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1a5a29-04da-49d4-99dc-a2bd5a78e4c0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16e5f3c-39ac-46d2-afb9-9556e85af637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c0ad99-dd7b-4b70-b56c-d79174a2ae70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee038a02-87c2-42ec-ae5d-27ee8b42c5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cfc147-17fc-4c1d-888f-ff718a872764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379d2b2b-9618-45a3-a487-fc8467899b28",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc436b3-5333-4791-906a-2eb61c132c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9557d5d7-1aaf-48b6-94a3-368ffa15046e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e7fa61-9f44-45a7-8fcf-f274edc30b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "071fc03e-7f41-4674-8b63-004ab45b3967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00ad22d-5275-44fd-ba5b-6e3c3cd374bd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5bf1bb-9da0-472e-902c-fe2f7469cbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42f4714-1673-4afe-ace4-8ea437a90072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441a1892-d90e-472f-afed-3ae624b711fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6549fce6-f945-4723-ab48-a846cc739051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62988810-7f77-4065-a45f-5b2f9c97f814",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bdeeac-01a7-42b5-b158-02717258e78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07dc9c78-e1fb-4f98-bf20-343fb2c2a02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b47b859-c72e-4da0-9bb1-cbb1de8b7035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27512960-3077-4b2a-93fc-d87b696160f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40093cf-7c70-44c1-a37f-c0a1c0c844af",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7098b1-2633-4d36-926b-13feaaf7edbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41abe32d-16df-4db4-8e27-ca922fb79430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6cf4f7-d171-45d4-a971-28ab9c55d7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c870a72-37b1-49d3-88c4-27850dc61a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e6dbe6-33ed-46f8-b9ea-55f26d6b0cc2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953a8187-0e8e-40cf-bf0a-7e91b9b8dae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9fa990-b66c-4517-afaa-7e72d02c91bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84bb280-160c-49ea-9219-524dfdc48f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "baac6588-7323-4b42-abe8-bab85576497f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0391e35d-d0be-4835-91a2-f8753778a5d0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a77522e-9a17-4816-95b9-28988d8bf653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62d38b2-cbfd-47f0-bd3a-0e2e28d6b852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafe31e3-8cd1-43f1-a27b-58c9510512b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7299b3b-0ae9-47a1-b8a5-14ad9d5d5a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cce452e-58d3-4126-b1ec-1e1e739fd9c0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c04751a-25f5-4517-b250-17c93f323318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be294510-0e24-4d02-b6c7-026f19fbfd81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14b5f02-e963-4bdf-a455-f3e7b3453883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edf1945c-9e30-40d7-9798-d596bbc8d49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99e4728-6533-4ad1-9ad6-76949377a1bf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587b4b7f-08da-4adf-8aac-b87f9f438e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a144f4b-5e2a-48a6-98c4-6caa3dfbbcf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175a72d1-6913-44f3-84a3-7e1fa36cfa5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca15512-0cc2-47eb-b5d6-60a6cabc4d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d42e982-7296-4a53-b87e-b5ed529e4465",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa660fb5-7ef5-4ef3-82f9-2222256bfd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed983df4-0344-42f1-9ae1-e2e155f50b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185659b2-b193-42a5-8b1c-760f38568888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7d3f50-9701-4de6-b52a-b220db71e30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec39902e-78a8-4ea7-8990-636e6ca4520b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c434855f-1ac8-4ea3-a056-ad3b291275ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8413d9e-5bc6-424e-9e98-09d9fa056e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a37baf-9684-48ef-983e-597b02e1cafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f448f1dc-e2ac-4122-8d0f-3b7ab5ffb471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6561af-a872-4438-b710-707ab99de762",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbad1a51-0e4c-4159-8bc6-3964fecc7fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678f2edf-6033-4071-9482-bc303870072e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64570de7-6675-4af3-8592-f3a2c8e22168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0036b69f-a426-441d-9023-75a50747c148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78379124-b1f9-469e-815b-45dbbc94bf5b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f859216-0593-4aea-a43d-3fc00a5403c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9953039f-c46d-4fa4-a579-4d58f56b2655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db5a48b-88cc-402a-88f6-685ef4a68e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b7538e-6429-42b6-9ba9-ba80d57ad1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc1e713-0272-4af4-b8f1-c3e20eb6e88e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbe0234-6312-48b9-bea6-6f6cbfd3371e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d75cb1e-ddce-4a9c-8d19-558f31e5d4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1c3dbc-7414-492a-bcce-30d60d11d79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d975e99-c4d2-4b6f-b1ae-f33fa2cb82a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb9f734-234d-4263-86cf-e546f70098c8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f0cbf6-093b-4c31-9129-1d82702f6b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82f0c31-be0c-49d7-b209-b98e664ea8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781c4b20-05a0-44fe-a067-db684cf6329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72df0ec6-6ed3-4271-9caa-731f9b6e2146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe316b5f-e34e-4039-b431-67d04f1fdd6b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d8a279-1d59-4c04-9da4-2ff5681ab2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e104d7f-72cc-438f-af6d-37ee346eb61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a324f415-2e32-4d38-89ca-e840e224c33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aec5c9-134d-42e6-baa6-09ff58eaedeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c99574-d814-4979-a937-7d1832b2c45a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96d59ae-6579-4b1d-a4e9-203c586cddd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8daa317-f020-4fad-b14c-2b55db04a971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c48a05-a718-4bb8-952e-f34321cee0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8891d28e-b611-4edc-a125-54a69b2e6df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd970aa-8f65-407f-9b65-708306665b13",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeb9ea0-f7da-45a3-8971-c99ad5bb804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10660d63-a02d-47b5-8f25-6be3bde190d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5866fb98-d93e-4eb6-9767-c7625b0fab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb41019c-4cea-49cc-98d2-8c5bb5a38e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce55a691-8c6c-4902-b21f-bbf1570085dd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135757b3-5bbb-40d5-a201-77def6610eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4db02f3a-4ede-4977-8a5a-d6514ca85b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8b4eb8-e78d-40bd-bb33-fad7e32a5d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b179603-a63d-4e1d-81e3-b811c450c0c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1c3cd16-35e4-4e26-af72-1e38fec84a96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cde3937e-69c7-43c2-82ea-8adf9b659946",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62f9b0c-d11f-4e23-a1c4-ba8fc2ae4a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7a8b340-055b-4480-b54c-b78aa0ecdcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b1f9c2-3105-487f-a750-b6225544093c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0a77cce-7976-4a04-92de-2e62e5e0b421"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40763e23-e6dd-4092-b97a-b17565db47a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b2bf84a-c017-4d61-9fd7-b5e3d5293029"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea49bf03-abbe-4c6d-be2c-78ebbc2096f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4f8576f-4d8b-4b72-ae80-c57be74b328a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c8fdf24-6dfd-47c7-aa5b-b4ba5f2a958d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44132309-a382-4111-86f2-369c26ba65db"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8aa0a713-120d-4d33-9359-3d833a7b8a4e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56cef359-5aaa-436f-b321-bb3cd660e7d4"
                }
              }
            ]
          },
          {
            "id": "0fa46455-f91e-43ed-824b-a165ff5b3e03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "136db07c-0d31-44b2-bcff-2ebbd29b809e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "3da35de7-5fce-4709-8a9e-c4fe9d219bbe",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f73d53-a65a-4613-892f-a93224a20d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09a5fd7e-c4bd-4df0-a190-ba64c3f52509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb9b31f-f193-438a-bffb-905f89048f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a362489-76f9-4ee9-adf2-e6973217be6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c83328c-acfc-457c-8098-7c4ba27e573d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91898c6a-4594-46cb-aecd-d3db14dc6eef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8477354-9332-4ca9-9629-b31dc1215bb8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffa5bac1-f7fe-4a69-8923-ebc63d0d4f34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05f080be-e212-46ee-9e28-d43c92c9ef7d"
                    }
                  }
                ]
              },
              {
                "id": "eba35e94-f80b-4e7c-8489-fe65c9cb5b21",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e85d2c4-f3e3-4937-a5d2-d6c065d9c681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3e4885b-cc14-4896-a39f-4494846c8fa3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04864c44-2cd7-4dfb-a168-7e0de1677263",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d12a9634-cb1a-4bc3-8aab-921b3cb8633c"
                    }
                  }
                ]
              },
              {
                "id": "c1aac806-53b0-4034-b8d6-0798fc881677",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d011b73-6992-46bd-8d9d-f79e9f71284d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc6ce292-be31-479d-81cc-485e196637db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c30543f8-484a-46a4-999d-80846237dbd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4cddb622-8632-4ad6-a531-f0447366b7ba"
                    }
                  }
                ]
              },
              {
                "id": "dbc30420-93c0-4715-973c-291a10f2af3e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08343357-d39a-4fb6-9edc-d69be507af02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39d2a9f5-ddbc-43af-acf1-ab2f1f340e4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61f23d31-5089-4129-9240-0b7927264fc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "04bc5418-ebc3-47eb-b0c6-806ec37fa920"
                    }
                  }
                ]
              },
              {
                "id": "4430eebf-5de7-4ea0-af49-234fb2a70e45",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43926cfc-4d52-43ac-b7be-fc5867560855",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e51f9d97-c50f-406f-86a5-6f66e5ae3af3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e55d1801-8773-49b4-81e8-9fb3811c1629",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "30d01dcb-fedc-4f5c-a618-bb7c961a994e"
                    }
                  }
                ]
              },
              {
                "id": "086120b4-8ff0-45f0-8f65-94ece0433a53",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "636b199e-e7eb-4028-9b50-f4d51de3ee70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14cb47df-4671-42c2-9cfe-7dbb98f107e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8085c8d4-8519-4524-8a9b-97df4b98482a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78569931-fcb9-4339-9588-f8c4e94fffde"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b631783-def1-46b6-86ad-3c0edc51ba90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20e85eb5-03a6-4830-80b1-2e7cc0bc615a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85dc271e-561b-4411-bd34-9fedadb35645",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b51d7636-4873-4e03-b65c-4bf5efb476ab"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3dda81c0-500c-4c50-85e1-eade8ef1f9d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1cf74f06-a794-4897-a6bb-67f5dbb06783"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7255038-b30e-457c-b272-526f60136748",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f868b69-4845-47e5-ac4e-4eba2bf15368"
            }
          }
        ]
      },
      {
        "id": "1373e75a-da75-463b-8320-ffdf66555ec8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c91dc2a7-5540-4eef-baae-723b6fc1d2f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05591b10-0d4e-46ab-8de2-89af278c78fc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e282b50-f666-4838-bcfe-bec5a88b7069",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe65fca0-c92c-4331-8cc2-8b0e45ec2800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116aa2a8-594c-4746-981a-880a5cbe922a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e945c2-0d81-45f1-adb8-4d787c2e4485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "61336a78-ba0f-4c4c-920b-b6d80c799b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b5c377-4eb9-4a62-ab62-8e13e1445040",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b14830b-836c-419c-9568-d056c98bcde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60e8bd9-c8b8-4fab-820c-b1c1cd30271d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2bbc4f-5718-4987-8533-3a9530745f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc43c68-6f85-4fb6-b052-ea68969e7206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93c3512-09dd-4c2d-b6be-914146955c9a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54451be-e88e-44c7-9a43-2ce79c09d03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b306acba-fb92-4754-bd5d-ad6802a5c0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3f96e2-3fd3-4a2f-a01c-46377e69d745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c48b421c-d99b-4f43-a8d9-57d4206be111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb101bd-f18f-44b1-9bd9-27fc29302a18",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938258fb-e17e-430c-906d-ee47e998198d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7192a935-4e47-44f9-b3a3-bb5284636a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0d74d4-b04d-4fc0-ac57-2bdb90f4f83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b972e2d5-7cd9-47d7-aa7d-620fc76b4eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30879fcf-f35b-4e3e-a8ab-ca23bac80eb0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ab8d6f-71e0-4bae-bd4e-92157c054d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c50602-564a-4599-8532-994a787f566c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6207d6f8-aaec-4454-89e1-03ac88aaa277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd109f1b-3b57-40e6-a4c2-f1827d9ebb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df72ec69-7fbe-4c24-8d59-1f72518a5488",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5112440-6031-49ea-bf0c-71a94f5b55ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8d8855-ebf4-4723-a132-b711e198a68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741a5ab2-34fe-4d36-9d01-676f91d1b9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b171478f-df48-4d76-bf7d-e96e3664ef63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a236fec1-d352-4882-85eb-a7b4ac75912f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b200445-782d-40f8-80d1-4da035bbe4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a407e43-5bf3-48b3-8c8f-d0edea4b7a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d36cf7-235f-485f-bba1-bcc4cb921fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "efa285a5-bd27-400e-8b23-c1300609c51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61b482a-d7a5-4c20-87e9-abc5e65d7316",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079dfdaa-9edb-4d66-b1eb-03275e6a6da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27c876d-aaa3-4ca0-aca5-4e6b8ce39c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6678610e-64e6-4f5b-adc6-a9c297a8b3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23a57af6-7829-4dbc-a5f1-2d7fb27e3afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cb79ad-049e-423f-adf6-42be54fa4dca",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1086295b-ca33-4584-91a1-1d0f6d30b5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a828fc41-b089-4e3c-a61d-f23bd3571112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788e95c7-f493-4cc8-9a84-32b3d847ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f284212f-1dd8-452f-b55e-402df04827ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a44a104-15ac-4df0-b5d2-92f7b938cc0b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b643c7-d059-4e39-97a9-0f3e514c2f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0821d545-a23b-47eb-84dd-ebbf88debf6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9742a809-a98c-4831-a7bf-ed7023a41321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b88f1ca-38ee-444d-9a6a-64352947b73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4fffde-e983-421c-b80a-cd223b2d5b27",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a41169-78a3-46b1-b2d5-6d69b9759127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f616377-43c4-493a-b7d3-2af41a1719b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fce66e4-84ab-4537-ab3b-5051189f215c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8e006f-eb61-47e2-805e-1a73df181db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d634636-79dc-48d0-9202-8890e466c4bd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd218843-e111-4cf2-bfad-e1eb2a93e969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35396f9-5699-4815-b612-d1eca5587c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07924108-8c09-406b-856a-6f952ddad5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "363f1597-07e6-4bd4-b4c2-6b3dbf54a3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44841827-68b5-40c9-b6fd-9f7b4e3e79d1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983f7cc5-14a3-4981-a6d7-aba901c2c075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3724e8f3-00a7-4f46-9a08-008c2df16a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9333095e-cc22-4132-b4f0-4fde74eaa6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93d44e46-6326-417d-b970-1b5cae5a6117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca3b40e-f741-4c8d-a526-56552a475026",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b2aec9-ebaa-4fe6-8269-41ba4af69a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc528ae1-76de-4cfd-901f-5fa0012e114d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba4568e-ab3c-4541-b468-b94e44027d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5a928b-a9aa-4186-8e65-ebee3d664db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d09045-6e67-4ad5-830c-f9499a6305a5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd46797-8d05-4f7b-a55b-436ff5243e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef01c6c6-c380-4fec-95e9-d577a7b37cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96032483-a354-481b-a843-dcef0731e4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f946d5-247f-493a-a0ff-2089568e2da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd099e7e-415c-4632-b0dd-f960c7525af8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565530c7-f7e2-4a6f-b0a3-00e835cbc4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef07f17c-bea0-48e9-926f-fd95049a06b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b940c7bc-9bb3-4a38-a609-1d5481e0afb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "510c1237-b9e9-4a8b-af62-1c20b9e737b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4f9119-8595-4a2d-9589-b70733bea4d4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e7c0cb-14fc-4745-ad24-cdccb10801ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc750087-bf89-44e7-add6-2eeaa0cba93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d964a51a-d826-4834-9631-46326e0d6020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a24008-9a6f-4d87-905d-a3ee14ec4285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a730b9-daf0-4b9f-a3ae-ccf78313876b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc02c23-b56c-4bf2-862c-33285dc75cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af55af38-4b41-45f8-a6d8-40c9b9fbc9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc55e37d-1952-4d19-a557-fd1645cd8b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b02fc26-fd75-428e-b85b-b8df0fc0cec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f304d15b-c385-45af-9ba8-72084453b6b8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b546d6b4-86e3-4374-9cf6-91ba4632ed6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bfc47e-034b-4a2c-913a-a29e4a4d177f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3820d6-263b-4933-9eac-fe507a942d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1f9a8b-9530-4b1f-979c-18118e18143c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10df6367-65ea-4584-819f-c6de7a9b319b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b721bcc-856f-4e66-adc7-9903e66e5810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a9ad86-0c38-48a2-8578-c43e96866a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d722e7f-d101-4bc3-aa73-9b10e5452c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de54b3a-8507-42f3-bc73-d8ff823c7824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0236923e-cb8f-46c1-ace8-22954964330c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a8ff5a-d2e6-4c95-a7f3-7ded112a1070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801c1ed0-f774-4b56-9ac8-c2a8242fa910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ed23ac-1428-49b1-ab52-123e5308b833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23533942-7d79-4462-881e-ce7c1e304274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4306f1a-68ce-413c-b77d-7041675929f3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9251c483-1703-4d4e-a50b-bef9eb6150a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4314c59e-02d0-47c6-ae64-8040b31b7343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f943ed2-36d7-4fc2-ac2a-caa3b2368f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf561968-b94b-42e1-b82d-822d45adccd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee7d3f8-5e9f-44aa-8e2e-e0a614b856d4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141ca929-ec8b-4c73-9e44-8f59e2c2e1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f101edf3-9ea4-49e1-ab60-fe55e6e111e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ca7e36-3cd4-4b68-befb-be4d7a8f6afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "419b8870-5a96-4a7e-9586-ef93a3fcfeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b34852e-f9ef-4156-a380-b8a37ab8520f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e9a360-8ae9-434e-9032-981ed1df8c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19166a32-2254-429b-9ff4-ee56ea75abeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130303da-1825-47c1-8c27-b7b4789a8322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4be99062-ca44-4105-a092-34d5f211d49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d83e967-d73b-4325-948d-1c62878a3279",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7872155a-ab2a-4d72-9cbc-de59adc57e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4937d5d-a56a-46bd-a502-7c00c8594f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0eeb76-3f6e-40f9-b9a4-6fa3d49f178d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29f2761-88ab-4bb4-84ed-7e0bf601fcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5fa054-5d1b-4e42-911e-041dfb62a4b5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9399cd2c-1941-49b6-9c15-c68839a6be43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529210ad-b050-477c-abdf-480c052971f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da8dc21-0ce1-4d62-85f2-56e4d746364f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bffb4c2e-7945-4f19-a289-75ccd45e70c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ddb5f8-a598-4df6-a14f-cfea675e472a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95557b4-e671-4969-b453-a1963174bcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eaa6545-d1a6-4d25-a5c1-2894d08c3f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbe15c4-01c0-410c-a5ff-d29b8e6f7df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4601ddd4-0392-481f-9399-234dc458485a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab665af-13d4-441a-8e84-ef726a9f0f5f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c179c2c-43ef-41b1-9d06-1cf91e6bc708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ad73bd-52cf-4a18-8e45-ace3c7091d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0503218-4e10-40df-a614-f999bfa61aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cec77592-cbe0-4c2d-8358-a998440683e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dae5fa-ad73-4fda-9ad6-c0bd27bc01f9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030f8724-7031-499b-b0c0-0cdc338d7a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67f1682-5f4d-4d2f-b0e3-f9d8b8a34907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640b0cde-4c00-44f5-99b0-222b60d35477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c2b57c-e393-4916-94c6-aafaaa4f2f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0f9a1a-68d8-4703-9d7f-97523386ef0b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17e14f2-7a22-49ea-8792-e5b201d7a9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150a2d2c-cfa6-47c3-8081-a2f7132a06f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c610cc4b-88b9-4679-80a0-32ad4df36622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4988c6fa-b495-48e1-9938-d6e2970eaf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92aa23cc-c372-4ea0-9477-230d43a287a8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c96d00-7a48-4b50-9e9b-aeb354d8c100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e857f28b-ff27-46ec-baed-dd395bf2f37d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c747da80-288e-497c-a96a-6c199ada0342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "310f5887-62ce-42f4-b724-f52ca53395e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb2718c-c8e9-453b-aa14-563817681946",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7e58d9-1269-4e84-984d-ec0eb0f92935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1b2c87-eaaa-4701-83ce-da7a46a10933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad60b8d-2246-480f-b452-673bf768deb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ff5693-2bd1-4de4-bcb4-8a9388aacf98"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "346c4393-95a9-41a3-b880-cd068250b682",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab64c184-ca38-49e3-9e92-4fc81adc127b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e396a6-62f2-4088-9606-ad76d71ce8a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "197f9c12-0aef-4cb7-a869-e6a95b0b8385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd54d40-3053-43d5-aa1c-6afe7c54fedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e920661e-c38a-47f6-8ba8-4ae81aed34f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23358f3f-e046-49b5-8a06-6e227f4e35ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79bd61c3-ad58-4bc7-95df-baf40265d05a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8066fdbc-8270-42a0-afeb-e4698a7ef76e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff6bea6b-8e2e-4730-93f1-e84609bbeb11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a5e4870-0606-473f-81af-93aa836eafd1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1310d759-27c3-4b36-acac-5b8d2b2a8998"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1cdb5d5-207e-458d-8057-8603f8fc5a50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea19b626-a4b7-4062-9f56-188428c121b9"
            }
          }
        ]
      },
      {
        "id": "ab099f45-de3f-4c64-98ec-54356b1c8a88",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "13bc9581-8ee0-4b1d-ace6-cc351a011c51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "978f1057-52dd-4ccf-ac75-8c328c416821",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74d4a0e1-3e2d-4068-98b1-2a81c616f339",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e75b1f-9646-4684-9007-476f79f045fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3769abc8-8e9e-4795-92f5-53d96b6006d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b08a59-99fd-4409-af5e-93a68380f3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "08072b9f-5b44-4b8e-a945-0109e0da075c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec10979-cfc7-416d-9d81-12a2c671ecd6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152cdecf-79a2-449a-8e63-f9621834de43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb162721-1103-485d-92ef-7cf3e09e16b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcb8c47-474b-4443-bed3-51d00646fbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0934597a-1aa4-4f67-81ea-436d77d3425f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce2e766-ba93-4d97-a52f-2df1a14c9a0d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44548f3-1015-4aab-a21a-7afdb883b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b64b2dc-6dab-4871-b122-23b6988b6689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f829e2c2-934d-4f4c-b982-548ae65d1d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59c73695-a0d2-4942-9886-2c31be0ed1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d03d03-8328-4846-b8d6-3508edf6837f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1722f222-76d0-400a-b5f5-e4b0d163b41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0ed639-5829-4e01-ac6e-c28f62c88aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a361c3-897e-4549-920b-eee705009841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "412b5709-d78e-44ee-bbb5-0573b10d749d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b22bb6-02a6-4e82-87e4-62238313452f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd4c872-6dc4-452d-b1cd-3c73cc015e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774ac010-9655-4c0c-975b-1534e1e30b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e78050-134b-4246-8efc-2d23bd8b705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f069503f-f4f9-43a4-8da0-57538fdd088b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de344cee-e05d-4403-a948-cdbe29e59f7c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc1f337-78b6-4a18-b85e-a804362dafd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98de444-7515-4965-a8a9-944043fb83a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc557c3-ef53-4936-b1ff-809f86ad5090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2f4bd5-9abf-456e-854c-58f25a659653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a49263-06b5-4805-aa90-420f0c944d38",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b98cf29-a77e-435b-b2c7-3309db05b6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21b7ba1-97d0-42f6-aab2-ae20adbe3691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874e4f99-30cd-4afb-bba9-c2c4300b0254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "28d1f690-dc8b-49ec-8fbb-ac13c73e35fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8bd566-6c1d-45f8-a481-eda57bc73697",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d1e67c-16c7-45bc-be92-2b9d65bac8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66c8b6f-d114-4ccc-80c9-2a539a1da01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd2f432-1b11-4921-9dc0-47f832b7f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee001e1-7141-4802-bc04-2292fec6bb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8adda83-4cc0-4e8d-9446-3489e28435e2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427c918d-0830-4841-abe9-62ce528d05eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a894998-81a0-4fbf-a0e6-0a3f592907a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b182b4-e5d6-4b33-93d2-13975b334db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63428e6c-bbc4-432b-8c04-7ab8c8e3bd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9223f6db-0229-4278-8214-72d2b6a749da",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e2c060-10a3-4029-8510-89487ff0aec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0360504-1c2f-4012-8334-a9fb9ccd74d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99eac359-bda3-4f06-962f-084dbe3bb911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ed27dc-849c-4305-9483-0ad70aa58471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654d062a-24cc-4f54-9135-a72ca236aa82",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dcad4b-5531-40f6-a6ee-866137295cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955f767f-84e9-4bae-a5a3-0f9d6b125041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa1c14f-ecbc-46eb-b87d-1612e856996f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d780c33a-d8a4-4312-a028-c8aa77b7b6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed627c8e-36ae-4939-ad40-0a08acbdfad6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74d9122-b13c-4ae8-9f6b-00980baa4955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ff7ec2-d7d1-4c31-9763-2fd347461313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3d7125-029a-45af-85ea-2f3ef30106c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf568c32-29d7-4967-a5ef-3db4eed4a01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2e686b-9b0c-4e29-b145-53e1ef8e383b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fff3eb7-841c-4022-a035-fc14703da58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e851964f-5d88-4d15-b965-8c7885b532b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52652b38-73f7-458a-bd46-0b6441e96979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d583fc10-913e-4a02-9f1a-cc9849587fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9c2c90-b5fb-4437-88c7-8de49d9af768",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f0ef85-83e1-4855-acbc-97d4c19c00fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34600e4-2083-42f3-afee-729c55ebb03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdb3682-f297-47bb-b74b-dd4e19cb3d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "47086b29-425a-4f90-a823-d36224f252fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aff7fa9-3144-4d4e-93cd-c370a1270719",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c62d47-3afb-4145-bfbc-268b4fee304b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141c5203-f345-4782-81d3-8a2872d24c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f50e5b2-06db-46c3-8b70-23a4939ccfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d00696-4694-4035-92a4-cdb49108690c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960cd5e4-c6a2-48f7-9663-5a6d9bbf68cd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2402d825-5011-4c62-88fc-3a0f41c7ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54653772-8c8d-4bb2-907b-25415e03876f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d297a6b-56b8-4dd6-9dd3-08b58d4ec509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2eba122-cee9-4260-9ce7-07f45b5a6b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4def9951-b912-4749-a747-7c3204a7e875",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b454be5-2e4c-4d30-ad2b-28d856c76d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f25293a-cd92-4010-9447-8345681eb85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbe0c82-2903-46a6-9388-af8278b784c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba28a2f-0b17-439e-9675-d3a2714ffc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e42e10b-2edf-47c2-865c-3209214bd68a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e5e25f-5592-4b76-ba28-b123176e2f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6877814-11f7-44ef-ad7e-55a1bda57918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3be193-da66-4bb9-9839-34eec183542f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "95c1ccd4-56b4-4195-80ac-d00bb9613f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a226a9b-8ad7-44ed-815d-024b332ce6d3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ec46ae-b306-4d72-8d9f-5c63cf110660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce1cc49-e1e7-4c66-b212-57d054061128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4d4bb5-7294-4344-926c-f0bf7d1b6179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c137279c-c33f-4242-9f1f-fe3c1fe200a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee67963c-897f-455f-b5b4-492ff275927c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3932e843-7026-4549-afa0-ce0d22380851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4603c408-84b3-4fe3-beed-530acbfc083f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5f6631-a61b-4179-ac49-7ff7d37e26b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c161fc23-db97-4713-88a2-c35339afcaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2d06bb-8def-4076-a1ed-253a5397bea7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2360ae78-f5c4-4c1d-9734-f0061dc9ed03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821df851-f96d-4579-963f-60cfc09d5fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfa8205-5cc8-459b-8019-70705b9d5ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be54a1bb-95d4-4ce7-b9c6-0d556417f384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dc3eec-b52b-4a91-9f78-f20020300b6c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ded3b4-a97f-4df2-af31-3a1b4159405a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698aa402-c223-4308-a36f-0a03e154c533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9922bbfa-5e66-4b92-b477-135c6ad46883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cefc9c72-35fb-4090-b236-872b41612323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e659fe-2229-4386-b0b6-8bb832fd9773",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb5bd02-2ea1-420c-b2b0-a396132d101a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afe58e4-c48a-48ff-a24c-82acc5937525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f750b-2abc-452e-ab95-8e28cc67964c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8caa02ec-6a5e-451d-8c46-1c9139510099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7c4514-bb00-4e6e-b6e4-f0c7d500bf17",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd2a66-c191-4120-8fd5-dabb00f32027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5567a73-6b9a-4eac-b697-1b45906de805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855ca5c7-00ed-41d2-8e0d-4830785f5197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb49c62-b270-45ee-a513-8eb70d90c636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5180711b-bc07-42a2-8b27-63b708fbe775",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60347a7-9482-433c-8efd-e5b112b606f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc36dbd0-7b7e-4c4b-9581-0b0f1f90afc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a4dfca-31eb-4db2-90a1-96a7766bd982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "732c5170-549f-4b89-95ec-36cd3bf1d745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae7d913-4b54-456c-ba32-3f3874b8248f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35942b44-b903-4e5e-b0ce-e7744a1883aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b11768-0617-498f-a700-f23c37c93c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0cf590-e6af-4fc5-8309-a9d84e33c8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec663a36-b312-4f39-be64-32408147b36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e4445b-d012-4ab7-8c8e-b7baf7cde9ea",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6de602-9116-4118-950a-817cff634fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fd31e7-aaca-4352-b3ce-9fe29f793679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25e3a89-c079-4390-9219-51c4a937af30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de68ddd7-7dca-46b2-b6f0-3c3c741e8e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755d069c-9fe6-44d3-a7f7-046f7d485307",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c05ab6-5257-46e8-a3a2-1fee5fe96b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c210ad-71fb-4a96-be81-8e04bd9f508c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219ef629-6275-455d-888a-37f575677cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c139fde3-7eb9-4566-bb2c-f3de8b0974a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d669a137-b14b-4773-bc5f-e36fa9b1487f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403446e7-435c-4024-94dd-e32739c62fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a180978-9c86-486d-a9e2-c2e72e895361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c45462f-82e9-4d17-ace6-eb3860a6f612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56829a67-c08e-4b88-8850-78b5fa6da614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489b8165-e7d9-454f-9f14-81ff63320477",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bb49e7-4bee-4b5c-955e-0ec01038f6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbd327b-6b20-493d-bfa7-8e5681b8bbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be16bc8-e674-41c1-91bd-3ce388770722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a10be60a-5437-4cb4-a50c-934704032799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a826d32-c20e-45b2-aa16-90e8513099b0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c534bfc1-462d-423b-9264-2b8cc2100919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a34ca6-9144-4a87-9146-62b446b64de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcab8b8d-f569-4565-ba11-42a98a660356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e629d34-36bb-4be4-8e22-4e17772597a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c80e442-b99a-4a87-8a09-f1a866cd41de",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb524649-94a6-40f8-a30d-07b10a110376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa39e3bd-8308-4b16-8082-adabc7049769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b68cd51-92c3-4970-819f-7a10814cfa75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74069fab-e1c7-4f7c-b2a8-96e5b8ac1fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3769b231-f2ad-4ce9-9a8d-4e1c87fd2741",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c98af1-9214-4fb6-a9dc-fa19d1688212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7109387b-94b5-49e9-b505-527136348736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c5cad6-6be7-47c0-a672-d94eb9a07203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50e5b586-b35c-44a8-9b79-ed1e26031302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f689dbc-882f-4b1d-838a-e7d7588a48af",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fe61ec-7905-46a5-a969-48894d00bf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866384af-20f4-43b0-9fff-17420bb3ba01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d741d6fb-b2cc-4d67-b41d-d64753795d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64fc00d9-ae89-4fa4-8c31-14ad80d51991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78967e9-642f-4d3c-a12b-7454ed6578ab",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a50f11-9b0c-4af3-87e0-98408283a990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7ca2a9-e9c1-408a-a9fc-9f76faeb5f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e926ca-8047-4d60-9210-fe0b2a0cebf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95484d76-e4f0-4dc0-a249-9bb0c9f6e904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6584dbce-916e-4144-9874-5801ffb40176",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f0706e-5d9a-45cb-bd5c-109028abd6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facb7b0d-2123-41ee-bcad-47b069aca85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9c03ec-8e42-4286-bb8b-ea0da889a5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c802b56f-9e9a-450f-b00a-c4ae4f178f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701cc782-7a97-4b8f-badc-c86848683f6d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87644a7f-f8ef-47ea-91ad-c1252af496c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd1c8f9-b69d-4752-8a71-d963fcdccdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c758b8-0d7d-4677-8bb4-555a0d0f032f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "748c8fa3-62a3-4d0a-8cbf-4c1d346cf24b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7cf67a95-593a-46b5-ad28-a67eb0034531",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87f40444-b9e1-48a7-a27b-6a7f7330d179",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971f3a25-1368-42bd-b3ce-eaee4056c42c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c23332fb-736f-40ed-9450-f9ce395b8eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44de5feb-3c32-476d-a450-ffe2b1646ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "840e826d-7a69-43aa-b9a6-94f1411ff7ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed24dcb4-41fd-44df-af51-43cb8ea262f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df2cbbf1-f513-45ae-b355-7fd39776eb54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3babfa68-68dd-4351-9282-16d50895780c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10d83e40-95e1-4613-8786-989a7f9c53e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce160bc6-bf2f-4a73-aaf9-2c2c070216aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "57401a7d-5e18-4a43-abaf-12bc62ce49c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10339189-59c0-461c-b483-59c45defb003",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22c0295f-bed5-4c12-bd2b-9e1e432da592"
            }
          }
        ]
      },
      {
        "id": "618c98fd-6f9b-47f4-9156-60c7ceff64a0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ec5985f2-d251-481d-858d-0def1bd88838",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2b5e667-2882-45a5-92e4-edd236b9df45",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "076ede23-dbe2-4aa2-9511-f032d0d60eee",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f78169-801f-4722-9b92-ce6223ad6952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d16a49-d86b-4470-9cf8-68511dd0d63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3452b70c-816e-44df-8964-8a069c89ce2d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ea6fda-4d9d-4233-bcaa-f1a05b7224a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76bfeda-b9bd-4464-a9b2-995f072f739f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93adc7a6-c1d2-4bac-8397-6e15a92d63d4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5db4a8-791a-4425-8529-def14f636324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62d2903-5c42-4146-b63b-5b3818e7f7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f94e8e5-0e34-4381-8be8-788e8510e321",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc060aa-31c3-48f7-ae67-11e52dd11481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3e5184-da39-4cb8-ae14-8c0b1b3faf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae783e9-4aac-4aa6-9e88-30fe03f64ec0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2541f257-24b9-43ed-9b7c-4ecd49e7780b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43af96cf-6ab7-4042-b70a-4a316c134e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5882f061-5495-4f93-8b87-10652025817b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1881495a-18a5-4ae9-b935-cf2964b84253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db76939-614c-45db-8b93-f464c47a7ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755b1c56-d856-4882-aef5-56995541323f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e98640-8cbc-4aee-b769-73a1a5885b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d514a1-8c59-48b3-933a-9a6a21a76880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c39179-4989-497f-a808-c680612252ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b145336-1508-4c1c-9d25-7d2ba6224b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a272dc2-934c-4bdd-b763-244c5736ebeb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4b706e-2559-4bc2-8c0b-ca2c19e1ccf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7e4291-e06f-4747-a33b-38519d53393e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56a2256-d054-4201-a531-457f97e9b060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb28927-ff84-440f-841d-ace0a4fe7572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9fef52-9383-4141-ad87-d96365bb4a5b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3fd8cf-5920-499e-bf58-c96d4f0275d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8901663-0062-4837-ac00-0223c08a2f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b2a0b4-95d8-4d48-96ec-e5d8cb4d8ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69641835-57fd-42e9-9458-812f5110d084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db925f3a-5da5-459d-871f-674b2a351bb2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3e8cc4-dc25-4148-af91-07903254a2fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f51462ca-c933-404d-a832-315f5595591a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7733a5a7-009c-4559-990e-d12fa9c6ac06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc57fa30-7609-45fb-ac47-0111008dc110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cb86a3-5161-4235-8dd3-785373d3ff7a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c008d3b-dc4f-4929-a518-ca70e4f2eee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d8dacb-d50e-47f1-b6df-b8727f76b4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d33ec08-0895-4552-9455-7d10df22b2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f69f2f6-93b7-48d0-8158-836316204957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d512d37-3270-4ca1-87f0-dfb231f313e5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb49f37f-8364-4ef6-b5e2-03f274c09a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a296f440-6c87-4755-8aa6-aae1e8e4aeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdc4732-a65c-4cb5-8372-f2313cd0c053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f2b48c-1e48-46f0-b4eb-2d1227500e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc03633-0bc2-41a3-905f-855eb6172140",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502ef64a-f40d-4320-9b40-413de0098426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f68e48-d3c0-4744-a63a-e1c99703dd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d0a0b7-87a0-4fd3-9b5c-ad47fd394627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1ee841-2cb1-4534-8009-969723afe20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6227fe1-6c49-4340-a5c9-b0444084ba34",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f62f8ee-61c0-4c21-9615-f02b5d4ca746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9a37d90-8ed5-4509-b6d8-5e4856aa1741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dc6bac-1153-4ef9-aa73-4f205e48397f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ac0a2e-d46f-499b-ba46-d831b7a5c8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0861eb61-87fd-48ff-9456-d23eaee2b5e1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a99ac34-1b4b-4133-b8f3-437f38837528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92975fd-00ed-4ba1-80cf-e4b8899a6eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75356dc5-2151-4b1e-89af-c42038bce151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a355326-49cc-4a6d-8be7-812705376a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cffedd-476c-4cb4-ab0a-f96e88843687",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d19594f-8982-4bd9-b7b4-608b05320d81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de9ef7a-9c7a-405a-a332-3244d211ec11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262994f5-9e24-40ca-a24b-7fa0d0bd1745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ad6b0c-f5a1-47ef-9190-fdbdf5d9b679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3406ae-a94e-44a7-8180-e0ae9b55a0fb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2684903-1179-4213-b1b7-29f98e8550c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5456c353-d19f-482b-adb0-fe41ac35e598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a63a5f8-d163-477f-9ac7-b2451cb4a394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9e9a61-ed86-4b7d-8f03-ab1b43446ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83104fd-4e2d-45a4-b32b-9fcfe5e32cd5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d97a3c6-49d6-495c-a0ae-5dc4d7900cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705ff513-2ff2-4eca-b618-7232b785a006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9f6fea-b501-4365-b851-b36bc24744a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede3e7cc-02f3-427e-9846-09de2ffa4901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f7da10-eb34-424c-b7d6-12329c05c24e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72bf152-738f-4069-9ca5-415e71a2bff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54fed40-7a37-4ce4-969b-d622643105ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681d84bf-bfc9-42f9-8310-c3fea8a93fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73008a77-a34a-452d-b9fb-01d0185dd8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c4c95d-44e7-4cce-9ab8-01bbdc9fb59c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb42e25b-6ab6-4648-a95b-512b08980742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdeea00-1846-4ee3-be3e-c3b942fc0c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2e496a-c5a1-4c62-9c21-038cc88f858e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c40b559-6661-47b1-8fe6-8aff959dcbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b1e6c9-44ae-4370-8bbc-da76d40aa397",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd8ccde-b650-4231-846e-9309a0917fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ca696d-b788-47ae-98b5-eee1d658b050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b04e2a6-375d-4c2d-9a49-da6d22e308aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f61860-b8ca-4758-9608-c31cc4b532c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26258224-d147-45c7-80f5-ed67e0acd0e8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d936a6c7-8bc1-4c9a-ac59-54c08817a0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aeb0a31-8124-45d4-93df-1a70fdc141fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e822dff7-c975-4e46-ab9d-804ee419362d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e829df-2385-4ce1-8ffd-79cd90201565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6199a70f-bdd4-4262-a7e7-7043c21dbb72",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb31cd52-a93b-40a3-976f-3d8d619d5415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1eca65-8251-4d7c-89e3-78e8564fe1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1d4bfe-fc81-49ae-b6ec-5640c24507dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20bb925-4032-4ff4-9921-c0601ee3cd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6524a71f-dc6d-4ff5-9251-9dcd36cf73fc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85f71d0-2f9c-48c7-9945-eb3bf7a2964b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7ed4541-cf9f-4df4-a534-401377a783ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bc8786-ac1f-46fb-83fe-17057519fde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0814f23d-cab9-459a-a380-e1775e2b5287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a250e3fe-d175-4fab-bf50-29fdb0f663f5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4d363e-cd30-4d17-bce6-7534cce95068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25d9ec5d-b6af-4c73-aeeb-8b94ad3b7b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee12211-dc40-49e1-a678-7cd8f29b955a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8354f994-37f5-4fa8-9cae-06396657e18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9442fbca-0986-479d-acfd-f3e922acd5dd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba13c01-75e7-4eff-afc9-796acba6a2a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e8984ee-b089-4b52-95ef-abfe0859caab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f45cca-c0b0-428d-8391-753b7402ebd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33a15ca-2a77-441f-8227-b38a089de693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb68908-4bf2-45a7-9e4c-87fd0adff330",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92f9a44-3462-4aaa-9246-8e6d7ddf01ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763a6548-ba72-4f1f-881f-bd9dda591edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e637d1f0-588d-454c-ba22-ebba1a008609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160d067d-0336-41a8-b59e-a8738153ac8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e456658-cc06-49ca-bc19-e0690e2ea6c1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b99f2a-ea04-441c-bb20-e5da32388b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedc472d-681f-4d2f-badf-ed1444185d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732ba778-2018-4ca1-82ab-de8f2af27665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f7b096-70dd-4679-9bf7-ef0e288d1e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6271df6f-e053-4446-98a8-39403942c6e7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b799224f-90a1-41fa-827e-8a99078b983c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40a7581-100f-4bd9-be37-f7bf48234ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b035ec9-1391-4fd0-a6e3-87fe853131fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47df31e3-fa09-4530-b313-392aa3ed4b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0737073e-cf4d-4793-8bb0-160cf0779744",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263a3762-97f9-4b1b-b68e-2b060c538c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57c6e61d-52aa-46b1-a659-08ffa3fcfe19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65274a46-5d97-4dda-9813-6249aba02872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84a51bf-9bf6-4ba5-a15c-4a3ee8c1fe01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40be0ea8-80d3-46f7-81d1-a3e0e3d271b9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a6673d-573e-4a01-b347-928f08f83f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff6e6fd5-48a8-4022-8363-9e07e312f678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "637e3c1b-3764-4ea5-89b7-e5de1f955c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf497ace-d71f-430a-91bc-321d9481bd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8002e6-9fa8-44dc-9f14-718bda5c024e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e34b6c-b9e0-4ef7-bc3e-9e7b03f10865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37449a70-d796-463a-8052-48cc8d020fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb76258-e2cd-4b15-9adb-f3144c2667df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218972d3-c5c1-4470-824d-d33477e909c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57eee495-caea-4636-82c8-d32b35611df4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358f404e-5578-4f68-b260-369d84d62318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e6e2d57-6bc1-4682-9ee8-9e793b405796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d9ee5a-c379-4959-bcb4-d36d45408c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15d1f8e-1de2-4be2-9118-73ef38562986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc473a8a-e184-4386-af04-581b9d659b6c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe3c523-26ed-4cc4-b2f9-afa7443ba1e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "064b16f0-87d0-43ff-a95f-5788165b9f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a406f129-8e88-48b6-83e5-835d8c79112a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e12a74-4705-4d8f-86d4-4c8ffb1e35e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e132b3d-363b-4244-a392-e35f2eb2f367",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a95a11c-e10f-48e2-b617-49bfcac912ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3d647c-d149-4de3-a41b-b31342d69cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948c28d7-40c4-4ddd-bdb3-875084b0374e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec4a953-f47f-41fb-95f5-4ff767dbbd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220177b2-e464-4dce-b38a-4f1a6b8d68cc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d3cce5-0eea-4384-bec4-062edc664c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9b3a5d-2b33-44eb-988a-745025e82a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e1ca38-02ed-4e07-bff5-1d1cd6a38621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40aa9e29-9777-4414-83fb-021f14e234ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43172ff-d2b7-4454-a09b-8582dabdc7f9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb965ead-83c6-4895-90bf-8745cd71b800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28519af1-3163-4d20-96d2-19e638343bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9112468-283f-4096-ae8d-f82642472227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7cef96-0195-48ce-8b51-9bca0ff508f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9eadc6-790b-45b0-99d3-dbc2e6be5a8e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22117b75-4adf-4967-88e3-37e867764671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65febabf-fd9a-4cf8-bf04-bb6d0a3f5e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a47567-73f4-4f3f-a055-f48f627bb32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9b51f2-8674-4dfc-806c-a5a3ecfe0554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b8d1bf-d185-4d8a-9893-ac72041a74b7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6089340f-3114-45f7-91fc-807fb54a3a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c843c2bd-8def-4052-8543-bcbe98c56eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361af19c-2406-4ac5-85dd-8d2eadd92760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a84cbb3-610c-46e5-9c94-f2cb79e3154b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4a1240-a9bd-4c01-93fb-1c344b48d6b8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8417ac77-8697-4a1b-af1e-932eaf1d6a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d2ee9f-de16-4599-8621-c3613cbc16ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00848aa8-d92a-43a0-8d89-4f1b37f38df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ab1f06-89c2-415f-8677-60b950bc0cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a4d72c-be07-4b12-824d-6ee47314d05f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7707a7d2-d3db-4b1c-8e78-e20fb146a599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d985ca96-9805-4ccc-a81e-d620954f404c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f697ca-b35e-4151-8ca5-a214618f16a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca48ccfc-dd21-41c6-b08a-c95e3971bf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767e7f0a-1413-4a06-8914-819f7471017a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a29d76-fe75-4d9b-8db6-b56b7f4fcd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856faad3-f54d-4ba8-9a82-b0e5b2a212c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad6abf3-9794-45b4-b41d-c10d30ea3101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9028f05a-4e24-40c5-a856-0b56d6f0b1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ebf396-1cd1-49db-8012-bc419f5a1ecd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28824ad-9cd2-42c7-beb3-e288be094371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8694192-bb2e-46fb-aa00-68833bbade92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1154677-f7c2-42cf-827d-e0ffcf3ef345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e3679f-2b70-4e21-9d87-18310cc6e1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fab5433-f13f-4124-920e-236be68ffab7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75729dc-b9a8-4397-9d9c-e7faf751d257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378f8c3b-f5ec-4c02-81ab-0ce8bd2b1571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a57832-6c83-45bd-ad1f-bba556951e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99881586-d45b-42aa-b8f5-cb04f26eb064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11085db-fca8-4a7e-8094-a587440301c1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ca5016-9fb1-4d6c-bdc9-985a56b09aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c7fb85-44d1-4a03-a4bf-4ab4303a9608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9a2dd6-787f-4fe0-8bb3-96503a6bdf23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a67e75-d53b-4908-b3a7-da7ff671e3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9deebbb-5547-40ce-af02-4542b508e614",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b36dd3-2418-4cab-8ac2-33575d6dd7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18637d67-75e3-47f0-bb93-bdba643dd66c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695e18cf-57da-48e3-88a2-f775cbb35a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8a5eb0-bca3-45e9-9e44-b6c170839e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a4bc06-d0ea-47fc-8e09-8716ce4471d3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae012bf5-433f-4ac2-a952-597a62ad2a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1c0ed7-bd9f-43d4-b349-710e93e1fbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4548530c-057e-4a0b-a16d-8fe213bbd4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e787a3-739d-40ed-8d47-c4e0785180c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904c1445-d4bb-4a3a-be8b-5d424eb4a951",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0016cb7-e15e-4288-aca3-f422da9552ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31dde8b1-9b2f-4858-a4cb-1b9f0243d528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bbbfaf-4faf-41f0-ab6e-b9c598bcf99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e75540-5930-4aff-93e7-ca9d10a575bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab5af8f-100e-4f1e-8536-873e95d07682",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6472500-5f56-42c0-9bec-9fa81f5a3a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31f1b76-ff75-4f40-adf3-2966220127d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7740bd91-01d8-4eb5-b4c2-fe873b51e9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4a51af-0a34-4375-8139-0047de430b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a69f8ee-124d-430e-a0d5-d60a5e2cd360",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb660a9-9bb3-408d-b666-77f47883a44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a81852-caff-44a1-9595-42676be0195b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e64d1f-e283-4370-a51c-4826bda94ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e46866e-366e-429e-acae-cef9b0ffd966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1843f346-62a6-46da-b022-8841fa0b557c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2200b4d8-c116-4978-9ea0-15adc4aff555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d503de-6c2a-4165-8622-4ec4b7036740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec4f946-69e6-468e-a3dc-d3851179bc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dba37d-6d27-4683-ba75-8c69ab985287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838a3650-88cd-4a42-87fc-3dd29b7cd1f4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b2afcb-77c3-402d-914e-7bfe051ffdec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48af1dca-ddd3-466e-b261-dc4e2b1d1df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c8f506-aafa-4459-bd99-f5c76b37b127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c09d7aa-9422-4fe7-bc3e-93491674f6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6569d37c-25e8-42ab-adec-dbabf81f0d6e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b40b67-c418-45e1-84c5-7721acbcf79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483bd20c-558b-4859-85ef-ebc27d83ee90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae8eb84-310f-4152-9f2f-2b9deb55a079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a369d9-f4b9-4fbf-9223-3d198de6ee5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4b1c2e-c37c-48db-b939-ac10da82d99c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505e848d-af78-4ee1-a818-9cbb5a148924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e7c7aa-6d38-4d56-8ffe-17140d61d752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcddd77e-ee05-47da-89e7-8a0eef955d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbad259-0da1-4e45-9317-608cf0e4b040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1392e186-2181-44d8-b43f-6caaef65e0a5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179b5466-be07-4679-b81a-f06d6d4dda07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d5a06a-dc68-47b2-96a9-6bb4538921ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80798db-1bd0-4fac-a060-5aa1782b43bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03912dc-c294-44ec-a55e-7dd5cc4ae001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ed4009-c524-4f75-a1f4-d6aac6921e26",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd02177-d4fb-47ba-94eb-030822837e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30adfc9c-a690-40c7-aafd-aa3a5c0a6db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1750e406-602f-4d99-803a-c8ee8d61a7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf294351-12d1-42c4-8b52-6fe7b2921c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c84a97-76dd-4d9f-9ff6-7e168f1a49f9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6abc4e-5703-4cff-8558-6513868e5841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64351213-1b2b-4941-a58b-6bfa2012157f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1854600-9e6a-47fb-a04b-8a07ab942566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf2e29e-1b34-48b4-8041-c66d4ce251e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2b99d9-8e08-4f2d-86cd-932b8a62b7e3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a538046c-16f4-4c7e-a558-2689380359de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0229886-1fe0-4218-8028-b0f8b228abeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbcd689-8de4-4dab-8002-dceab6d7b6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0d001a-cfa9-49ab-bf50-6d61f9635dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c19059-7401-449d-8735-b07fd670c9d2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12619a4a-0b6f-4ee8-81dc-4c1f82059ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a519400f-439b-436f-ad57-f6d1adc9a85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87e1378-7027-46ea-9745-4deb3583ff0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf741cf-8c3a-4e5f-9f0e-1edfd9ced6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b324dcab-8527-4562-842f-65d18d557595",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1cb2ee-1b4b-490d-bc5c-2e2f3a200a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb08e3c-0113-4d94-a8b4-5fd1f9c90b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5168156-2be0-41b0-8e6a-7ec45099a6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcb5f1e-3e4c-4b3a-a684-16e53ba25921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8173f98b-b496-463d-9bc3-7678dd4933d1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d99ae5-26ac-4530-9233-94aed6832003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71cf9e59-bbd1-41a3-bb0e-2fc20a4ec1fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afaae3b-5f29-4eb2-a0b5-43c9a3d3f499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccadaff6-3e6a-4716-a5f8-12fc3800f26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5f41c2-5d4c-40da-841f-3a26e4c4fc52",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a2ee3-e676-4f69-b22d-e1244d0e2d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60086589-3dcd-494c-b381-b6c03109b7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064cbfba-3246-4e24-aeb2-4cca3e9565cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2ef1db-828f-4c9d-971b-4566ac7a8ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61da100d-40fc-4089-a967-889a96b556e2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe18f5b-68b0-4dbf-8eb0-e1ec5269b9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebfba9c-be13-4cc2-853d-6a944f15f948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5face2c-498b-4e0e-a18d-c4ccb8540ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119764cb-7faf-45ca-a60f-ae3a63fe3758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646ff819-32b9-4fea-a401-9f112473643f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26db9533-948f-412e-acf7-aac45da76b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3a72d3-d4b3-419f-8d64-b5af701d6852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adc961a-d9f2-4890-87b2-224c33a29dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde7a1f7-6f00-4ec8-9c44-e77e47782c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df46888b-49b7-4b03-9bcb-e0d97540723a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc160777-f270-4c4a-951a-2d3612db9369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0485c07-ba74-426d-84cb-642cbf5b33f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698dd71d-04dc-4b33-974e-3b71b9ee9a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be221f2-ac46-479f-9885-06fa7608e8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601e865a-5236-4a01-bbcd-e6465d91f8de",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57f1cfd-792d-4cf2-a9ef-1ebe9d510b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed435cde-3849-4edc-ab8b-1dbde52b7d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3310d9-52a9-4b79-b4e4-5268be742a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1897a4c5-beac-4655-bfdb-43ac7dbf1a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe6c513-602f-4915-b828-77e1f9876f87",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b092cbe-3c0d-41e9-b7f4-5c77a65e43b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994ca70b-d91e-4970-995a-38b11fb08112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02faa2c0-51e2-45c9-b446-4dce76175ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac308d14-68c1-4ea1-bb2f-6dcc822e62fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c661bef6-849c-4878-9081-2c94a6417e23",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fbbf4f-20a6-4eb0-949f-d51290e8e843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a0b3944-7dab-4f8f-8812-aed5b0ccbae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dc2192-4181-47c4-b69d-e50212a71c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8f38b1-7552-4999-b6cd-ddebcd928b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6036c4-e3fe-45ec-b281-8759f2ed93a9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e43139-9c61-4369-ac61-e4038e54a350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c50be194-a76e-40da-82cb-d9ea1373a851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "226cc0b0-391a-41ac-90ca-a2bb86d28abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c93d103-9b9e-4ae9-93cd-a9ccee7f7adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ac8fcc-dde2-4843-b15b-b0e33f67a871",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eac1d98-f3eb-4223-8a79-12ff57a27138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05024d27-d631-42ba-a481-e6ebe4b3e2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74eb0424-86d3-4ef8-8ea3-0e22244c7c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac6f79e-0e5e-41d6-8721-132ec637961d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0a8090-cdb8-42d7-97e8-5e8e8e81abca",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb10c7a-b52e-486b-a426-0d4bdf0b3b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad44f27e-56ac-43e9-bedd-9a0852c4f1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4434667-7927-432a-866c-f53ae8f4bd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efd24e9-1975-4854-a717-ddb9fdf026f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0b5fbd-f194-40aa-9783-6731d85300c9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1b1570-860d-4420-b2df-2ba9092edc65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a76a6f-e39f-4f4d-bccb-87c7de04426a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8198de9f-97b4-4c6c-9c22-eb8d55c31fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3298ba-2519-4acb-a09f-7d192fb27162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b34dd4c-6b50-48b3-8e3a-0c2b82323f10",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa7ef9e-36c2-40d4-996b-bf483a511a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a383aa-70c6-4645-9bab-e507ef2eceb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb0efd5-dedc-44b5-998e-fd013ef32bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6016c8-c21d-4811-926f-f0287c31a463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd09aff-46a2-42c5-bc92-b80a82c3bb77",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acd322c-4946-4a75-a7e2-01744bd6c548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d61983da-6a49-46d0-b0ab-b079af888253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce744426-28bd-4965-a4cc-315524949623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f81ef73-5964-4200-bae9-f3d908e53798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c53e91-f59f-422a-b25c-814febf8ac14",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8b2e88-2828-455f-a5ce-c3cd57116b02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c389fb15-a19c-49b2-ac41-d5b51eccefff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df76ed16-9ccd-4ff6-a96f-617259415048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e985d464-b7fc-40b6-b659-3fa1a05917b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89b38fe-8e50-4bab-aedf-fb29dbd1dc4a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80450f59-4a80-4987-b3b9-0162a5d0fb31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87ee12ca-bf0b-4aff-a438-29c5ac9e929e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6e8d60-52f8-4721-b8c0-2ee011718b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9436b87-cca3-4ea7-8f90-d7610fb5d40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37db3bbc-c554-49a5-a32f-0f95c03fbeca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54c793b-69c1-487e-9ea4-d4bf55b8e9a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba981d62-282d-4305-b5a4-8de5f2b18d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023c79e7-a50f-445d-8b98-86f467f7870e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007dbb43-d1f7-4e25-a6fe-c84657fbde8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895f8c92-feac-4298-b17a-e65254998e9d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c89bf8-95ac-4881-a5ef-9623bc8a3ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbbbe330-54ef-47cf-ac51-77c7ab207407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64afac10-6519-4221-b98c-4bd600653835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd38516-abad-4784-938e-36c041be459c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93ac043-3bd5-4ec6-8aab-eb8d9ced5e45",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4923ff4c-2e8c-4a9e-ad1a-d9c656db7027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bd1d058-9d90-4fc4-a904-06c776d769fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519d808f-431f-4138-8129-acc36f9c1bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4817aebc-cb5d-4fce-accb-36b497603386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ece287-bc49-4ff9-bfe6-c1897a0b2215",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e750ee58-d4d1-4832-860d-b3e971751f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1a14bd7-8c59-4cde-b1d0-c36daecbee04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9953f4b-4ad9-4ac1-95a5-24ea7d6579b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2214e0ef-546e-4561-8639-ff066468e4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a154d62-b9fc-4428-8db2-5a1313d5bfc2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6866714e-13c5-4dbc-83a2-8cb45dd91731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12cf981a-2b9b-41e6-9cd0-1586284857a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23366be1-50d4-48de-8d12-3a64da70b391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba2ae36-c99a-43cf-8a79-ae9a91e7f2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e69fae-fa55-40d5-91f1-e20fd74d5323",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11fcafc-3227-4874-bab2-b76d5a664ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef44c710-28a9-40e9-b67f-55aa25f0da76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284852d2-f25c-4be4-91bf-6ab7c1a787e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054abd83-7c86-47b4-9655-df421a64b6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd6e814-022b-43a8-8aad-c890469f7639",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2363be-7b5a-4bbe-ab77-4228797505fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f8e9f26-952a-44fb-a830-dcc7a3baf55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fa7732-74a5-4a81-ba08-528f6a538c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd88afa-8f18-46ce-9e16-80658d0116a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a1492a-1958-4681-becd-1c9fd370bca7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c21b2a-6093-4785-a11a-9c5a058368a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c323692-3434-489b-88d6-d9e458b7c6bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7160d7be-417f-48d9-bc56-5a473a3db390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce839a7f-9b3a-4801-b4b0-a7932b85727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b964d219-33d2-49d0-97ff-ce6bc86687a3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc516c53-15eb-4bbe-b1dd-40d978ade4e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67aa9888-9ef3-4d1a-a969-ae8560fc52e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd8d36d-8384-404c-8235-8bc65502e033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d041560-edce-4d38-931c-032fd0c13f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9581cc36-a83d-4dd2-a1be-931708d7738b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1eb018-cc89-4d6d-af4a-285bfca82288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89866af7-2fa2-46ab-bac0-406c66d6dfdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a9cbe0-3832-4e14-b213-388c4724b1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579bb272-6fcc-4fac-ae67-7aab141c8b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d58191-20c9-4c12-a00b-bc418ccae432",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d904605-a372-43b6-80d9-73ccc3e6c86a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd8efda2-4b28-4068-ab40-fbe2ee89c4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e898551b-38be-4363-ab18-a7acae48466d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fff7c7-3466-4886-872f-80e1e2e0e0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c2363d-a233-44b7-b881-caad04f74389",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13856fc4-814a-4a3e-b2a7-3ca9de967648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe651f4-03e4-4bd6-ae2f-060aca718c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6556f9-2db1-4ff7-b945-003c04bba1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eeffd91-0f69-4814-b563-8d029d788ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ff7bd8-b577-4026-ac79-76fb788a0b55",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c2ba7b-1fc4-4555-bf79-f15fb8587922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "398aebf1-8b39-4c6f-8be6-d941696c32e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0351c2bf-6f17-4511-9eea-ff6dca3f2584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e206d5a-c845-420e-a494-ef67fdf7e23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61068e97-f6d4-42e2-9a8e-367ecf899645",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86ce4b7-c582-4014-8702-23a8d99a5910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3deaae33-663f-4a62-8097-5a6d277c1252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f87bf31-bd7e-4908-9bbb-b843f9ea23de",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8984f58-1231-416a-855d-6b031290cb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45253be-a485-41d2-94ca-7c455a2ef6ce",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c51814-aef0-4401-90d2-c5d9754f84ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "678cc98d-6bce-44c0-9056-8f3f15632f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4927d45b-fc94-4270-a827-c96a151aa920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2345ff14-0c24-405f-8068-ad5b84510a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64bdec4-186a-4e75-89fd-227289b43668",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3716db-a198-4d18-ab00-d85afc0f597d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b272379-e867-4934-bad0-b838586d805c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19327651-b8af-4e20-b79d-154d6efa0fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8849c258-b650-4e5a-b1cc-6e44eba72e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3190953-80c8-4c36-8e55-8d4cc748aab0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55f6a26-7713-4989-bca0-f8f2b50f58c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d262a96f-cc3b-4e6f-9e51-6752a17fb81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e648c1-9a1b-4447-bbac-8bdf198f067e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9640a2ea-a0b2-4134-a0b4-8a27fc493a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc20b12-e04f-42cd-8616-e56acfe187d1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a284eeea-1a35-4817-b99a-5f439289a71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70279d7c-8442-4321-8433-f3bd42bb5c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9534fa8-8603-454c-9b11-01a2f103bc60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd7f9ea-30e7-4c9d-8a56-2b734a02f53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2582acac-cd33-46c3-8a3c-791599f4e970",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb0859b-9399-47e0-86f2-80613b441b61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e207610-3f88-42f2-a312-c4aeb46cfe9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb099c6-b167-4ff8-af8c-ee4657262f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c94f39e-9aec-44b9-86fe-858280ee71ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed76455f-646d-428f-9a66-9d493eadf63c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc989872-7c99-40c5-b8b7-33f9dbd421bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5fbb8a-cc2c-47b9-bead-74fb400c0986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b56e32a-55b6-4b56-8e80-64609d1b6b80",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83467c75-17a1-4029-969e-58345ca83d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b002a1-23b5-4f58-962e-489182dad7dc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073c689f-06f4-4b74-abc3-282f048ab9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a71cc7e-7cb6-4daf-8b62-5646771c3071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1624d4e-9827-480c-b82d-9732a0b271eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8311fd58-7e04-40e3-9d39-83855267b02f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecf2d778-2fc7-4ae2-8814-42fc773585a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "263fc6a9-eb79-4f94-bcf1-2f19637bcaf8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ea59809-cf25-4eb9-a327-8bd9ac3da213",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41e4b6b6-1d54-446b-ad83-0c61b2fc5b7b"
                    }
                  }
                ]
              },
              {
                "id": "0f4c85eb-47ed-4a4f-ab5e-8a55cf4a4514",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8fdd510-7f16-4518-9a5a-35ed1a66b27b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e515ced-734a-40f5-b945-db8bcad30fb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aca49b0e-8827-4870-bfdf-b511a5479f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4083ed33-2937-4737-b3bc-913559eaa25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "178dbc09-2ace-48ba-8541-35a1b6a735b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f682835d-d866-420a-a72b-b2a5564cfe09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78454283-1486-4690-85ba-f02708e29cae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6debeba8-2e52-4e0e-9c1d-0ff8a3d603ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11a058fb-9618-44bb-9984-9e5e16d43a72"
                    }
                  }
                ]
              },
              {
                "id": "5d29ba32-f026-4a09-8989-abbb6197ee7c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "975965f0-f713-4632-8f42-afde57efea22",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1700f673-409c-4dc9-bdfc-51197eb956f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "91bdf0c7-7d21-4bf2-b021-1eeba9b8bd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccf9ef9-fa8c-4917-bdcb-ea1304a389f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bf2450-cccc-4ef0-acb1-95a65a779968"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3eddc978-d11d-402e-ba70-b0af12ac3b17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "194cee11-7e4a-451c-aa2e-ee11173f303d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0c3af0c-e2ef-4e4d-ade3-fdee155fcf1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dc2340c2-9e60-4b64-9b21-e7152d251ce2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ca1f16b-0117-490b-8905-21ba5259c8a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "905ad7b0-24a7-43bb-ad11-7d19d0d85643"
                    }
                  }
                ]
              },
              {
                "id": "17b96515-3fd4-44e3-8166-9e8c9507fa58",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fd2e5cc-30eb-48cc-9583-ca67565675da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8051d145-c4b8-4eb9-bea0-87da9aeba1a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e330818c-54b5-4276-aebc-5390999b9ca6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1c58454-dcec-44d3-bfbc-327a9392d5f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2b9fd70-c2d4-4c84-b06c-e4655fa5d05f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d83a9744-c993-4b1e-9f3f-781f2e5b6d13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e1b4aae-41f5-41b0-87d6-02c5222afb57",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a03b9f6f-d104-41d0-bc52-b5ca0d32ec77"
            }
          }
        ]
      },
      {
        "id": "a24975a4-a58d-4bfa-a782-6a14b8fd913c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1816f9bc-aa24-48b5-ab55-a9975b734a69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "430669a9-4111-4225-82dc-2361555eee93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51343f32-06d0-492a-860b-9b8f595bc06b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbda8890-3afc-4ff8-ba75-b82816138998",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e33730f6-4c6a-4b4a-8894-a9eeeda2f486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beac44b3-f438-4e10-9769-fe4e7840839b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5218a4ba-ec76-490e-a513-c5d8fd085dcf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7058c1f0-b47e-4f7a-aa8d-8379234340b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06ab34ef-9c74-4f68-a22e-0bec96d6ccd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e3b680c-5f90-445b-9acd-407fc49fc82e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e4afac6-150c-4924-bfc8-5082d65fbfb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee5e0266-f8d0-4c13-90d9-ce0522744184",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3ed9cd87-1506-4213-8bd3-50f1ca55ef41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51b6cdc8-568b-4584-bf1e-e0ff02f8c9fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44e41cae-6ac0-44fc-bd72-33557d58e868"
            }
          }
        ]
      },
      {
        "id": "792d5653-db60-4018-9375-1b8c81e0c468",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3d64da16-de9e-46a5-a537-9b1e1b4f3c06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9c24c48-40ee-4482-9312-c19cbd57f567",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f87c9a1-98ab-4273-bf35-3ccaf60be291",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0f1032-b404-414f-91f7-312591f1ac1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02f87b9a-28bd-436b-b1cc-c6be14d7c884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1befb0-fbe7-4ec9-804e-8e56f3c442e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48344ebf-5ec9-4623-b110-680a33fca2f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28afbc05-6c8f-4725-9b9a-96d67179ad88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9cae33c-9686-45db-9d28-4c3cafd8f1c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a9a870f-e124-474e-9a12-fa16a5017a38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ff5bf71-34b9-4bdf-a945-46fc84044345"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75135ca2-755c-4f29-b231-d791febf6d00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f64cb37-0721-4abb-9948-5ad2f1733aa7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3e2069f-f994-4307-9127-fb708e180543",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebdd3883-88c2-4a00-a9f8-0b90954f83f6"
            }
          }
        ]
      },
      {
        "id": "b5a9263f-0724-4788-924d-26a8e5b82d4a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d474a754-4bd6-484d-9577-a76f2419fe17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e218fbb-e8e3-4625-b621-294a668ff855",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "132e75d0-db9f-41da-b5ce-b64d7d8d4878",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720a04a1-299d-4e4e-a25a-752db75b5537",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b42cd0d-4d5f-4e37-82f6-27bcaed6823b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1377b7-4497-4e1d-b21a-bd7b92770cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6a1b877-41f2-4c1a-b8f7-74cefcd0bec8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6050f0fc-4f5a-4625-b607-95fc0a67939a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "837d5f94-5f8c-43c9-8da1-90d082261016"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ce87efb-ed3d-4cf4-8ef3-281be3d4dbbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "471b5fd0-0a45-441e-a3cb-7a1cdd7234ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61309e10-ac68-4051-9c14-00b69eb71949",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "807e427a-7d72-4c5f-ab37-5bd358b5a334"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70946ea0-30d2-49a8-b075-3cb64c0defd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e38bd2e-83b5-46e4-bf61-d6ca73273ac7"
            }
          }
        ]
      },
      {
        "id": "f2610fd0-33fe-4b6c-8af9-65194df487f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d8a5f9d-0053-454a-a567-7fc9e626f8e9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c82a7f9e-fbf3-4b32-a7df-6e8e56ace4cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "230af068-c1c4-41be-a787-f172e4ff810c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca56caea-e924-4b9f-9fa7-925a7a00a05b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cac7c83-531d-4204-a843-d4e139a5598b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.73684210526321,
      "responseMin": 9,
      "responseMax": 662,
      "responseSd": 71.45542747995776,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700786070729,
      "completed": 1700786097685
    },
    "executions": [
      {
        "id": "5db9be75-242c-4339-a50c-ead3da270c30",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dd404b39-f450-43d4-bd99-df58d0978e29",
          "httpRequestId": "1f2d1e53-6068-451c-a59d-bbf16c53e4d8"
        },
        "item": {
          "id": "5db9be75-242c-4339-a50c-ead3da270c30",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6a08ca54-6dd5-46a5-a578-48ddeac6e6ec",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "e1af6f2a-3bbe-4918-9006-6f14de39be30",
        "cursor": {
          "ref": "a31b5c8b-05d4-48ca-a14c-986505cfd657",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aa685beb-df4a-4845-9661-c0ac1748bd30"
        },
        "item": {
          "id": "e1af6f2a-3bbe-4918-9006-6f14de39be30",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ff5bd401-98a3-49b8-8f55-710165e35ae6",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "08cb36d1-72df-4b0e-9c03-9529010874a0",
        "cursor": {
          "ref": "67b6d678-3bad-4043-adcb-32fe1a018bb9",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9c61afc3-5fc1-4f16-81e0-ee149a62c8c0"
        },
        "item": {
          "id": "08cb36d1-72df-4b0e-9c03-9529010874a0",
          "name": "did_json"
        },
        "response": {
          "id": "3f85bd6f-24b9-4d86-9b6f-92fc581621fc",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2227d578-a7cd-4838-9bd3-f967a815a895",
        "cursor": {
          "ref": "6515985f-d7b0-456a-86e8-68bbf066f5b5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae33c878-6394-4e0a-8462-177730ffd2f8"
        },
        "item": {
          "id": "2227d578-a7cd-4838-9bd3-f967a815a895",
          "name": "did:invalid"
        },
        "response": {
          "id": "94c8e38a-3c2d-4be5-8a9b-e075c6a2b7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2227d578-a7cd-4838-9bd3-f967a815a895",
        "cursor": {
          "ref": "6515985f-d7b0-456a-86e8-68bbf066f5b5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae33c878-6394-4e0a-8462-177730ffd2f8"
        },
        "item": {
          "id": "2227d578-a7cd-4838-9bd3-f967a815a895",
          "name": "did:invalid"
        },
        "response": {
          "id": "94c8e38a-3c2d-4be5-8a9b-e075c6a2b7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d6b460-1695-432c-adb6-648a6317eb13",
        "cursor": {
          "ref": "025b380f-7c50-4ddf-9783-d2cf044b09d0",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6d236c21-d4f9-408b-92f0-138a56d3f98f"
        },
        "item": {
          "id": "59d6b460-1695-432c-adb6-648a6317eb13",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0726f1af-f777-4cfe-a830-5809cae01db9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2564a4b-452d-406d-933c-ab38780567d6",
        "cursor": {
          "ref": "2b4cc99c-3491-40ca-a467-6d73df0ee65e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2cd95d55-a1b3-4aa2-88d8-77d86c105947"
        },
        "item": {
          "id": "a2564a4b-452d-406d-933c-ab38780567d6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "54ba686c-adf6-48b1-bc50-36173beb5207",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61abb0fe-3fe9-418a-995d-d7bb4ee98419",
        "cursor": {
          "ref": "618ce76a-1674-4516-a4e1-c37862cb70a4",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9ee9081a-c9c6-4e8b-8220-04617f5409f4"
        },
        "item": {
          "id": "61abb0fe-3fe9-418a-995d-d7bb4ee98419",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d3da5d03-2402-44f8-8432-bddc90b73a83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1425b5-72e7-4e68-82c5-dbcec9143aa9",
        "cursor": {
          "ref": "226a1621-6844-4a91-a592-30bb9a00998e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "27a1b9f7-54c7-4741-a433-29d6fa9eea02"
        },
        "item": {
          "id": "9f1425b5-72e7-4e68-82c5-dbcec9143aa9",
          "name": "identifiers"
        },
        "response": {
          "id": "6dba311d-e8ec-44f3-b164-4b0d7680eb66",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5a791c-63c8-4eba-884a-90875fe82ee1",
        "cursor": {
          "ref": "bb32aa18-4824-43d2-a676-1f4e1408ad6e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f88dd56d-a3fd-4984-95e0-639500559052"
        },
        "item": {
          "id": "4a5a791c-63c8-4eba-884a-90875fe82ee1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "702d3633-3e85-49dc-bfb0-4add298a3599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302a4bc2-d008-4cf6-b0f7-ae4892efa369",
        "cursor": {
          "ref": "1826d692-251f-4fb2-8dc4-b6493521181f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "17a8c3c5-f4c0-43c4-ad00-e5c142ebc67c"
        },
        "item": {
          "id": "302a4bc2-d008-4cf6-b0f7-ae4892efa369",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2c33e0b8-1657-466f-a365-9bab3f3bd0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a9d3a3-e946-44bb-bd20-7d45c0c1d8c1",
        "cursor": {
          "ref": "51d323d5-0cbe-463e-b72f-478a7d83b63f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "214292c0-647c-4ea8-8640-3b7d7658e02f"
        },
        "item": {
          "id": "d8a9d3a3-e946-44bb-bd20-7d45c0c1d8c1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f3860cc1-a8a8-4f4a-a506-0ae9df97476b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20327e0a-5ce6-4eed-934d-db1355611d94",
        "cursor": {
          "ref": "deeb11fb-99ff-45e4-9b49-5d41765c084c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e0ab423a-e998-41c3-a1b6-211685b672ff"
        },
        "item": {
          "id": "20327e0a-5ce6-4eed-934d-db1355611d94",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ffc54f24-9575-455d-b275-5ffe3488411f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3eb387-9fa1-4011-b1cf-bb2613a4b2bd",
        "cursor": {
          "ref": "c8c5f5c6-388f-4ba6-ae1c-60afd0fe72eb",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "367335bc-797a-480a-aa0a-798478186435"
        },
        "item": {
          "id": "aa3eb387-9fa1-4011-b1cf-bb2613a4b2bd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "817d2f48-5c72-4c3a-81c3-636edf04a869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9aa6c4-d50f-4ee8-a4b3-70e1c2936373",
        "cursor": {
          "ref": "24622d3b-d690-44b1-a7fe-cf1c6c9e0a55",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3f932965-962e-4372-89c9-1cb94d7e5db5"
        },
        "item": {
          "id": "cd9aa6c4-d50f-4ee8-a4b3-70e1c2936373",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f21982c4-b8b8-4ba8-8901-a36131eaf324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eea15f9-00cc-4164-96e9-6e1c9070fbb3",
        "cursor": {
          "ref": "ab1091d7-85b4-454b-9bc0-f1c908fbb115",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4b689c5b-2883-446c-8b89-5c3341092d41"
        },
        "item": {
          "id": "6eea15f9-00cc-4164-96e9-6e1c9070fbb3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fb37d3db-d180-4811-8caa-b103c962db3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e858315-3897-457d-af5d-9fe271a140c8",
        "cursor": {
          "ref": "1e43a022-2f5b-4a26-bf18-b001091b43bb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0c92e012-e6b2-41d5-8c9d-22d3b103952c"
        },
        "item": {
          "id": "7e858315-3897-457d-af5d-9fe271a140c8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "537cc538-13b8-4739-aa8f-250655d527cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c5c944-0053-4852-a021-9e8296e54aac",
        "cursor": {
          "ref": "2aedf763-108d-40ff-9521-80194467e81f",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "14780534-a5c9-4065-a357-43fe54d88121"
        },
        "item": {
          "id": "a8c5c944-0053-4852-a021-9e8296e54aac",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b97c9a17-8a38-473c-82da-bf3dc074c313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77623fa4-4af9-4b48-ba5a-118b9da08d74",
        "cursor": {
          "ref": "18d4797f-5c80-4791-99c0-441c9254e544",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "70a547e2-55b1-4d2a-87d1-45473206458c"
        },
        "item": {
          "id": "77623fa4-4af9-4b48-ba5a-118b9da08d74",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "469761cb-b037-4219-b0b1-a9b4416655a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c422bfd-01ec-4084-89ed-f2a32c56ef8e",
        "cursor": {
          "ref": "b39837b6-3c48-4b3c-872b-555e1e6e54c0",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a4e4b3bd-e43c-4135-b7e4-c44682823248"
        },
        "item": {
          "id": "7c422bfd-01ec-4084-89ed-f2a32c56ef8e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "be0c535c-a820-4295-8f7f-2d90ec8f0850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5783ba6-dffb-4148-a45e-1eccd7453eb0",
        "cursor": {
          "ref": "59c8343e-f22c-4d22-8448-01bfff6d28e0",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a3cf461a-fd82-442d-8a03-8a44575b1b9b"
        },
        "item": {
          "id": "e5783ba6-dffb-4148-a45e-1eccd7453eb0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2884a854-0a4e-4d7e-8271-25a8e2e73957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f595863-1f57-42b9-a3ef-578b967663dd",
        "cursor": {
          "ref": "64f28b5b-097d-4506-82fd-df890d065f77",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cd27950b-f259-4f45-87b7-a27c2a980633"
        },
        "item": {
          "id": "4f595863-1f57-42b9-a3ef-578b967663dd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5cf52053-1e76-4974-be3f-828287cd0ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4dd077-99fb-4613-8a06-4201ea2a9b95",
        "cursor": {
          "ref": "355a372e-b8f5-43a5-bf3c-b66301022cd5",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "606f118a-9e12-4ead-979c-25a282f1e20a"
        },
        "item": {
          "id": "ad4dd077-99fb-4613-8a06-4201ea2a9b95",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "938b6e1e-aba5-4379-bd91-28c922b3e87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9aa7b1-a624-4111-afe8-c9f74dde3e14",
        "cursor": {
          "ref": "e2bb0b63-cfc2-435b-ad94-cfc7fb10cd64",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1460fe75-0a64-4576-bafb-8a79de5849bc"
        },
        "item": {
          "id": "cb9aa7b1-a624-4111-afe8-c9f74dde3e14",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9a14c82c-01ac-4495-a51f-5cfd656610e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b1b0ca-a148-44dd-84d2-e7d5bf5136f3",
        "cursor": {
          "ref": "b56f836a-83a1-4a31-8560-e84b0524d04a",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e2f3d523-588e-4240-a308-fb5fd888cdec"
        },
        "item": {
          "id": "08b1b0ca-a148-44dd-84d2-e7d5bf5136f3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bbe67154-ddf8-42c7-8f92-5417b20579da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc187c3-2708-4c75-885c-364e226ed7ed",
        "cursor": {
          "ref": "613843be-bc9c-475b-bbab-00fe84a420a4",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d85f6166-f527-4eb0-ba20-2201b39bd215"
        },
        "item": {
          "id": "8bc187c3-2708-4c75-885c-364e226ed7ed",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f02b8319-61d6-4cdc-af21-bddf93aa3831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2314748-2a29-43e5-a51c-51c4dac6c4e1",
        "cursor": {
          "ref": "2ec325fa-12e4-464e-8236-f1bca1bb2932",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ae36714b-2529-44c7-a067-cdfed7755880"
        },
        "item": {
          "id": "e2314748-2a29-43e5-a51c-51c4dac6c4e1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "271421a8-abef-41f2-96b6-c659d1bfaae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22017adc-e1b6-4099-bcf3-65ecdbdb0a54",
        "cursor": {
          "ref": "b50d1394-ad5d-471d-8715-dea8aa11cf75",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b23124ac-a30e-4987-9001-a0e60e479f77"
        },
        "item": {
          "id": "22017adc-e1b6-4099-bcf3-65ecdbdb0a54",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "672e432c-703d-4039-a26e-1add4a9e8d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55db64e-d9c7-4755-a8cb-58a9799581b3",
        "cursor": {
          "ref": "e20d6aa5-3ff8-4141-bc84-c20da0210d08",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "86f0420f-8cd6-4400-8bae-10ba6d5d84f7"
        },
        "item": {
          "id": "f55db64e-d9c7-4755-a8cb-58a9799581b3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "78569da9-dead-40d6-ac7e-c355b32e8145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00d1489-839d-48bf-a3ec-b30fcc0bd987",
        "cursor": {
          "ref": "cefb2b45-8b66-4b72-b475-23bb8d11764f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "82d49383-8c5f-45ce-86db-aaf6195fbd7a"
        },
        "item": {
          "id": "b00d1489-839d-48bf-a3ec-b30fcc0bd987",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0ba94a57-51fb-4b73-9e90-42ca4388fc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc7cf20-8aa5-4375-a3f0-a121d3cacb89",
        "cursor": {
          "ref": "5796a720-3cc8-4a2b-8db0-f27dfd8464a0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "62b51ece-449d-4fc9-bb63-7a0f0304f93e"
        },
        "item": {
          "id": "acc7cf20-8aa5-4375-a3f0-a121d3cacb89",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "90b59102-28e8-4da5-ae35-fa720f670471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdd41c9-1ebe-4e44-b8d6-bd1340a17f79",
        "cursor": {
          "ref": "3eec9d94-54b6-4fc1-9c79-766728948414",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b0a85453-751e-4b13-a026-ee24a09f9118"
        },
        "item": {
          "id": "dcdd41c9-1ebe-4e44-b8d6-bd1340a17f79",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b461c693-66c1-4c84-820c-70bcb6df957d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e85b8d3-4770-4b95-b25b-f179a85a16a6",
        "cursor": {
          "ref": "b69d41e3-3990-48e5-8e16-a10ce44757b0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d4b86d92-69bc-4799-adaa-1316daf9d3db"
        },
        "item": {
          "id": "4e85b8d3-4770-4b95-b25b-f179a85a16a6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "90d2e2c0-9cf5-470e-b467-f72a1bb57718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2132fa96-cf16-4f7f-a90f-d004fca18926",
        "cursor": {
          "ref": "ad844f05-5e89-4b62-8500-214918d51bb9",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "52ca193f-5304-4284-9001-68e74e300031"
        },
        "item": {
          "id": "2132fa96-cf16-4f7f-a90f-d004fca18926",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b5190996-7816-4248-b151-6284c83d16f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dd222d-c88f-4763-8fcf-fcd98c699620",
        "cursor": {
          "ref": "f1da346a-7395-4e85-8ccc-e02b8c0796b7",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e7a60adc-3fd2-4cd4-9bef-71dbd8db863a"
        },
        "item": {
          "id": "a3dd222d-c88f-4763-8fcf-fcd98c699620",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8061d03a-c4ff-48ce-8246-8188058b38fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606bc377-fa3b-4a3a-8af9-b2f6030437cd",
        "cursor": {
          "ref": "12e83a27-b116-41e5-a2e4-e3ea3b6df5ae",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b2fe6304-c56f-4f82-9eaf-2b16f3730f38"
        },
        "item": {
          "id": "606bc377-fa3b-4a3a-8af9-b2f6030437cd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "561486af-8145-48ba-ab4e-948ff822f44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228dd03e-b200-48cc-a0e6-353c57bf65d4",
        "cursor": {
          "ref": "37831e0e-4ef2-40ea-a2e8-2e3352bb8c4d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "282d0edf-3724-4e01-9098-d32c5e922cbe"
        },
        "item": {
          "id": "228dd03e-b200-48cc-a0e6-353c57bf65d4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "94c19231-7a06-4eef-87e3-4d17c317dc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd27b72-45f6-479e-947c-dfc104960cab",
        "cursor": {
          "ref": "b7d83d49-7429-4ce1-9715-9fa23ed5432e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ea8315f9-c182-44a9-8c57-440d2c8619c1"
        },
        "item": {
          "id": "abd27b72-45f6-479e-947c-dfc104960cab",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f9e1338c-d81f-4653-9e51-dcd5ed1f176b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d80b2c9-09ff-47eb-b90d-931347eb54ee",
        "cursor": {
          "ref": "66f3b826-73fc-4858-bf27-3cdff63ce47e",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "663f52dc-91f2-47d3-ba56-cc84e18ffda5"
        },
        "item": {
          "id": "2d80b2c9-09ff-47eb-b90d-931347eb54ee",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4d96c716-c8d1-42d6-8f80-33dfe737b6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aecd2bd-b79c-4a71-aeee-e26b740551e5",
        "cursor": {
          "ref": "2f4eb89b-edd5-481a-be7e-f9f475bb1f1b",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e553dbf7-ff55-4e11-9e13-ed3da5eefd0d"
        },
        "item": {
          "id": "7aecd2bd-b79c-4a71-aeee-e26b740551e5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "71a2ad9a-3ce3-49fa-9f50-a87e7fcb243e",
          "status": "Created",
          "code": 201,
          "responseTime": 662,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "23242549-6dc8-492b-8da5-068078db9d9c",
        "cursor": {
          "ref": "2b9c748e-f378-4a08-8cff-364fe0d744d6",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ac811b63-5f2a-42ff-8800-c500c0588bd0"
        },
        "item": {
          "id": "23242549-6dc8-492b-8da5-068078db9d9c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f659456b-8436-4968-bb41-d4a3341da4a4",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "25503fab-889d-4eb0-9ecc-b51f8005dffd",
        "cursor": {
          "ref": "df2adeee-c376-4d0c-b352-01146ad1211a",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c0c8aa01-2cf2-4765-879f-c1bd99e1a33d"
        },
        "item": {
          "id": "25503fab-889d-4eb0-9ecc-b51f8005dffd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "09d645c5-a7e1-44d3-a9fe-569e0f25b98f",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "400d856d-a787-4519-a2c6-226ed8e0d724",
        "cursor": {
          "ref": "225c43fe-8f11-483c-880b-4774803fd85e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e31ccacd-57ec-4341-a40e-2a009d2a8677"
        },
        "item": {
          "id": "400d856d-a787-4519-a2c6-226ed8e0d724",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9000260e-1c0e-404e-a856-49cee9ef01bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa471ed3-8115-4f70-a33e-a7a8fefa2728",
        "cursor": {
          "ref": "4cb644a5-5f2a-4160-83b9-70aba652b955",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e4ec73a2-a37b-4e35-bc54-e60d5f587cbe"
        },
        "item": {
          "id": "aa471ed3-8115-4f70-a33e-a7a8fefa2728",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6185cde0-c86d-4ffe-aef9-32c86fe397f2",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a9564deb-ebea-4986-8821-c737c46fa03a",
        "cursor": {
          "ref": "391394e7-b1f3-4460-93a5-e23ef7f99cde",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ca3fe488-b223-4739-88ab-f77e54d1ef82"
        },
        "item": {
          "id": "a9564deb-ebea-4986-8821-c737c46fa03a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "67ae380d-0735-4e97-9db0-966297f6931b",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3ffa2509-b1a0-4b05-a91b-8ebaa034fffe",
        "cursor": {
          "ref": "ca8d2335-6c19-4686-8bc4-b071bf2ed094",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dbf98fdd-b444-4f59-a743-99c197a9c0ec"
        },
        "item": {
          "id": "3ffa2509-b1a0-4b05-a91b-8ebaa034fffe",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "715c5013-50fe-4c76-8838-c601bb6e4cc5",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e83f30b2-70bb-4efc-9965-4500dbfe1a54",
        "cursor": {
          "ref": "cbd62b37-8439-404a-bc52-e27a827ccd7f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4e83345d-f8a4-4e36-9423-8eb305c4429c"
        },
        "item": {
          "id": "e83f30b2-70bb-4efc-9965-4500dbfe1a54",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f3b2d80f-ff34-4c96-8ca5-371aa58cb92c",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "24715fcb-7dde-48cb-a4a1-1de8ff231a5d",
        "cursor": {
          "ref": "f842fcd9-519c-45ac-a0bf-037f4302a9c6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "27688019-7cdf-4ba4-8c83-79e882e2a2d3"
        },
        "item": {
          "id": "24715fcb-7dde-48cb-a4a1-1de8ff231a5d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b208f1ed-c038-437f-bc4b-6dcbce081db0",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a9b09b21-e0b6-4fbe-bceb-cb05e147f66f",
        "cursor": {
          "ref": "58f57063-147a-4683-923c-541d26ddf097",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b0416898-f225-4fb4-ab4d-c72e41e25380"
        },
        "item": {
          "id": "a9b09b21-e0b6-4fbe-bceb-cb05e147f66f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "70f98e89-7eab-4e6e-81c7-91ef6e4138d0",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cad72731-fcce-43cb-ad21-37e5e3cb48b6",
        "cursor": {
          "ref": "b44a2db9-2d83-462a-b52f-30da705598a6",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6d1aa93e-5bd7-4d87-959e-f3ac3f479a51"
        },
        "item": {
          "id": "cad72731-fcce-43cb-ad21-37e5e3cb48b6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "30d2b1c7-b66d-459c-b0f1-6ff03acf6fd1",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b662b8fb-ed21-4a64-9144-ce3bbccf53bf",
        "cursor": {
          "ref": "a042f826-914f-4326-b960-5a39dabfc1c0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ba92e97e-01af-4cb8-bef4-37e86f84042b"
        },
        "item": {
          "id": "b662b8fb-ed21-4a64-9144-ce3bbccf53bf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1f14b800-dee4-4609-8f5e-25cb7dc1324a",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2ac8e0d4-c480-4ed8-a3ed-ffaa64ff81f1",
        "cursor": {
          "ref": "3ed8861b-fc92-4383-b545-a58fafeead6b",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f46ff967-82b0-4843-97e5-4f5c202eff4f"
        },
        "item": {
          "id": "2ac8e0d4-c480-4ed8-a3ed-ffaa64ff81f1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0074bffa-2780-4b83-a49d-5c4812b1b2bb",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "100466ae-34fd-49a9-a520-33f6d87e0a87",
        "cursor": {
          "ref": "171a1914-9ef7-427c-a5ff-ca79837592cd",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d95a3180-591e-416c-923e-c4b3fe740e3b"
        },
        "item": {
          "id": "100466ae-34fd-49a9-a520-33f6d87e0a87",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fa82460b-0525-474b-b21c-93ebf2a81224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d0a9a1-cfcb-4f55-ace9-5495e37c5dfe",
        "cursor": {
          "ref": "cf8eb903-ceed-497f-89b2-881e45a8c595",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e67b1373-3fd2-4f4b-80fd-4908d570c7f1"
        },
        "item": {
          "id": "a2d0a9a1-cfcb-4f55-ace9-5495e37c5dfe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "642b3cc8-2041-4375-b2ed-454ff194f492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2305effc-7f03-47a2-a43a-a71851c8b8ec",
        "cursor": {
          "ref": "bd0f8726-e353-43ad-88f2-a0afd585e991",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5a8ab9e9-13fd-4817-b924-b886c81832e8"
        },
        "item": {
          "id": "2305effc-7f03-47a2-a43a-a71851c8b8ec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4057c0a7-62ae-4bb5-8a73-e43e1b219ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500e0ef1-21cb-4145-8dda-bda9fb5b56fb",
        "cursor": {
          "ref": "6f55f657-ed70-47af-af1f-756e4c653ee9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d5d0c363-001b-4cc4-aee5-f82cdf663bcc"
        },
        "item": {
          "id": "500e0ef1-21cb-4145-8dda-bda9fb5b56fb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e820b104-7a00-4e26-8006-0aa49a2b30db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26099b39-acd2-4516-9e80-80be68ea4333",
        "cursor": {
          "ref": "1bfcee45-2f84-4b5f-9907-ba6d0fded9f2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b144adcc-858c-455c-a3a9-abac9a8fa924"
        },
        "item": {
          "id": "26099b39-acd2-4516-9e80-80be68ea4333",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "78ceebbc-43fd-4b79-acc0-e6b4f5ab8bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d8a67a-c8b9-4916-a401-18de9d79c529",
        "cursor": {
          "ref": "732bf924-703f-496c-ac19-783a2d633e26",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "50490ac0-8f75-4b4b-98e1-8516294bcbdb"
        },
        "item": {
          "id": "28d8a67a-c8b9-4916-a401-18de9d79c529",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e417a353-b7e1-4011-bb00-ad91630ce249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827aa58e-0cdf-4327-906e-f0fb3b1314b2",
        "cursor": {
          "ref": "780dcd6c-8b09-4e60-936d-23cf4cb8d7de",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "85b0fbd5-7cd0-4165-afb4-9dfe79007163"
        },
        "item": {
          "id": "827aa58e-0cdf-4327-906e-f0fb3b1314b2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e2be226f-65c7-4cf7-a3cf-c147bd3560e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66b1f11-1ca7-4c64-ab8f-d3c4b2362e6f",
        "cursor": {
          "ref": "028e2f2d-5b9d-4c74-a7f5-fd8813d301f3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ef09310e-4e93-46b0-bcc1-90045cfed5ee"
        },
        "item": {
          "id": "e66b1f11-1ca7-4c64-ab8f-d3c4b2362e6f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "35d29ddb-97ba-416a-b5fd-e31996b0dd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734e59be-d466-46c2-8fd4-f6f844dd1e4c",
        "cursor": {
          "ref": "bda85597-a26c-4289-8abd-203aa8bc15d4",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b87a6aa2-5a00-4fac-ac8c-ff36b3cff788"
        },
        "item": {
          "id": "734e59be-d466-46c2-8fd4-f6f844dd1e4c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ba3a5677-dc70-46e2-9741-e995374ec071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccc73dc-ad8c-41d9-830b-b8f79b996303",
        "cursor": {
          "ref": "7971c593-ec1e-451a-bdc2-5065b2d1c77d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b5454c0a-693d-40b6-873d-f6d7f2eddee6"
        },
        "item": {
          "id": "2ccc73dc-ad8c-41d9-830b-b8f79b996303",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "75ebe59c-3e7b-42c3-9ab9-ff673a1d2312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2a48e4-a6c9-40fa-93bc-0ea12b9f3ac4",
        "cursor": {
          "ref": "515bb057-8e63-4d14-985a-f77f55b4f83a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b1d0a872-c1ca-4db3-91e2-98b4e2e43a54"
        },
        "item": {
          "id": "4d2a48e4-a6c9-40fa-93bc-0ea12b9f3ac4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8fa8dd1c-a9dc-45fe-9817-f8cf3ae01447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0a9e81-4ca2-49fd-b2fe-111d71db85dd",
        "cursor": {
          "ref": "a429352b-ee80-469c-99bc-384430bdae68",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c386e957-a999-4594-8e28-7cbf85156d69"
        },
        "item": {
          "id": "8a0a9e81-4ca2-49fd-b2fe-111d71db85dd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a3d33f18-26e8-4c15-ac41-2f89cf8b3855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3baeda-dd53-4968-a38e-66fcd58ea26d",
        "cursor": {
          "ref": "928a9b91-098e-4952-af0b-fbce017e2ba4",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ee5f730f-5680-4d73-8de1-1a1bf3633bc4"
        },
        "item": {
          "id": "9f3baeda-dd53-4968-a38e-66fcd58ea26d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5fdbc5f0-3496-4c41-805d-86cbfe3a4b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990ea9f5-605b-45b2-9323-45b0cb7fcfbe",
        "cursor": {
          "ref": "1c30ee7f-87a9-440b-aa0f-8f693bb84fb9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d548c866-6341-48a6-bc31-4327a9c234aa"
        },
        "item": {
          "id": "990ea9f5-605b-45b2-9323-45b0cb7fcfbe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a29aae82-d043-4509-812a-569312db5b47",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b21472b2-3da3-49ce-bffd-c645bfdab93d",
        "cursor": {
          "ref": "7065b780-5de6-4af7-a338-bab8392d3c09",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f4640cad-f66c-4cb1-8d03-7432781f79d4"
        },
        "item": {
          "id": "b21472b2-3da3-49ce-bffd-c645bfdab93d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "51d30bd6-9b2c-4c74-84da-eda86480f98a",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fd52f52e-8563-48f3-90fb-dcff49a9357b",
        "cursor": {
          "ref": "30971b6e-1c22-4e7f-8846-658599cf203e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "574662b4-958b-4cda-9f17-b4c701d7c2f3"
        },
        "item": {
          "id": "fd52f52e-8563-48f3-90fb-dcff49a9357b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f7790a15-f50e-435b-8cd3-3fafd2edc719",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7ed61718-5ade-437e-91a4-319263ced86a",
        "cursor": {
          "ref": "cec19dd1-c38d-4804-a784-f707ce0a4f4d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f6101308-ce4e-41db-86c6-ebec01acad29"
        },
        "item": {
          "id": "7ed61718-5ade-437e-91a4-319263ced86a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6c243d56-0c22-4227-ad42-94d7b23f5d9b",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b53e74cc-9f2d-4ddd-84e2-b1dfa1442a5f",
        "cursor": {
          "ref": "fb0d52d7-c55c-4aa3-8a07-d21008d4ed86",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "96bc4960-2f99-4693-9482-c94ce309cb93"
        },
        "item": {
          "id": "b53e74cc-9f2d-4ddd-84e2-b1dfa1442a5f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bc943adc-80ea-4892-a3c6-f3dd49981803",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "adec0e48-97c4-4270-83be-b703648f21d3",
        "cursor": {
          "ref": "3659febc-f4cb-4330-9743-41b8cf894cf6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fa317a27-4252-43aa-a338-503c4dadf6cd"
        },
        "item": {
          "id": "adec0e48-97c4-4270-83be-b703648f21d3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "78b283c4-7822-41b7-b317-6093414695c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f4b7f0-bba2-45f9-8189-dc02bf197e41",
        "cursor": {
          "ref": "3b65646b-93c3-465e-a6ff-8207ddf7c61c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c4402dc-15ac-490f-8899-78155c96879b"
        },
        "item": {
          "id": "30f4b7f0-bba2-45f9-8189-dc02bf197e41",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "402c0322-ec74-4e18-8f44-69355d388e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db035ab6-03b6-41b7-b5c7-bb5e0cf5dd7c",
        "cursor": {
          "ref": "f057a166-8d98-431a-b912-d46dbe9a0370",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "563a0a7b-0cc9-40a5-905c-8461dc0165ac"
        },
        "item": {
          "id": "db035ab6-03b6-41b7-b5c7-bb5e0cf5dd7c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "39d43ed9-3c6d-4727-a771-cac5112c3aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6822d92e-cee7-443f-ba49-c43ce98b60d8",
        "cursor": {
          "ref": "a5942914-33fd-4bc5-8bcb-739ffd6a3e91",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7100f693-447b-4a17-bc59-68ad9e526d04"
        },
        "item": {
          "id": "6822d92e-cee7-443f-ba49-c43ce98b60d8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "03d944fa-2150-4a8e-a4ad-bbf007fde29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cecd57-f8df-48fd-a7e3-a1f79e54f3a3",
        "cursor": {
          "ref": "77141ce8-3e9b-410e-8329-6a56a1d3ff4e",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b3cbde26-3f2e-45ba-8b9c-3cfee1a6864f"
        },
        "item": {
          "id": "53cecd57-f8df-48fd-a7e3-a1f79e54f3a3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "945895d9-33a8-4d70-b267-10f1ddc2d968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a0d923-8c19-43fe-ac57-de8ff5c8bddc",
        "cursor": {
          "ref": "ce75f561-470f-40a3-98c4-ae181421960f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9db3eed9-a789-4308-bc8a-becbcadf4420"
        },
        "item": {
          "id": "d3a0d923-8c19-43fe-ac57-de8ff5c8bddc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "733eb885-bf70-41a3-a14e-6577742b79b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8dfe5f-e3ca-4200-bf46-bd33bc5ec195",
        "cursor": {
          "ref": "28fca289-211c-45e0-b498-c62565e892de",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "52d7041e-f976-4174-8fed-8bf900ed717d"
        },
        "item": {
          "id": "af8dfe5f-e3ca-4200-bf46-bd33bc5ec195",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "236170f2-eddc-42b8-a76d-755d5bc687f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fded68e-9bf7-459c-9fae-d138b3bcb5d8",
        "cursor": {
          "ref": "5226378c-1de6-4b77-ab10-44cdf3103e78",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4a3f6280-c691-4fe8-81d3-39ff83b94234"
        },
        "item": {
          "id": "9fded68e-9bf7-459c-9fae-d138b3bcb5d8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5048a0c2-977a-47a6-9452-c79960377143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2cf306-29b8-465b-9d40-7d56dae4ccb6",
        "cursor": {
          "ref": "bc25be10-5417-48ed-97a8-feee2b4fe02a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "eed2e171-884e-4457-81fe-61fddd13afe8"
        },
        "item": {
          "id": "5c2cf306-29b8-465b-9d40-7d56dae4ccb6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "43d2072a-767c-4648-8a43-df2f45a96c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74942e4-c0ff-4ad9-9976-c5b6b986cc19",
        "cursor": {
          "ref": "be4611ad-dfd0-42f1-9c0e-ba70291e916a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b0a7309f-c326-4fd0-9da8-7aef1f5f2ccf"
        },
        "item": {
          "id": "d74942e4-c0ff-4ad9-9976-c5b6b986cc19",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "58f615c1-36f6-40e7-9118-327e16f85245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb697a16-4488-4178-bb80-054d74173bf2",
        "cursor": {
          "ref": "8f93b699-79e4-4994-bdfa-2e49a8287fd1",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1ddf5878-bc2a-49b3-aa1c-3df10871cb81"
        },
        "item": {
          "id": "bb697a16-4488-4178-bb80-054d74173bf2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0736cce1-f72b-4969-96e8-36384179401b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c972b0c8-35dc-4c21-a7b0-9d6973fdde8a",
        "cursor": {
          "ref": "76f68a65-cd4c-45eb-90e3-17f971e08a84",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f22aa1c6-df42-4adc-a850-dddca7c2a175"
        },
        "item": {
          "id": "c972b0c8-35dc-4c21-a7b0-9d6973fdde8a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ac8aef0c-98ac-4b85-8883-13bdf18cc4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1a5a29-04da-49d4-99dc-a2bd5a78e4c0",
        "cursor": {
          "ref": "0c2467d0-60db-4528-9e6c-27825633c3dd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c42d2021-28a7-4ebd-b876-382422e5cfe1"
        },
        "item": {
          "id": "4b1a5a29-04da-49d4-99dc-a2bd5a78e4c0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9864397d-44ff-4996-970c-c5fc74c40895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379d2b2b-9618-45a3-a487-fc8467899b28",
        "cursor": {
          "ref": "feeee734-6c12-4eb0-81c2-1dce30604dd0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "54c3746b-09d8-4113-8c1b-cafcc775147f"
        },
        "item": {
          "id": "379d2b2b-9618-45a3-a487-fc8467899b28",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d42c42be-f6aa-4451-bb66-5af8adfe18c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00ad22d-5275-44fd-ba5b-6e3c3cd374bd",
        "cursor": {
          "ref": "ce87328a-fd97-404e-838b-3a143e2b4763",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "85a0d709-426b-41db-96d7-e9746368f21a"
        },
        "item": {
          "id": "c00ad22d-5275-44fd-ba5b-6e3c3cd374bd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "27a2b907-b823-4ed3-be20-3c19a7fb3e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62988810-7f77-4065-a45f-5b2f9c97f814",
        "cursor": {
          "ref": "afbed14d-fed6-4861-9114-50f825516e7e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9083a65b-d630-4893-a8cc-9b53568fd37f"
        },
        "item": {
          "id": "62988810-7f77-4065-a45f-5b2f9c97f814",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "60781984-6526-4ef5-89b2-3d426e92f8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40093cf-7c70-44c1-a37f-c0a1c0c844af",
        "cursor": {
          "ref": "971cb724-94bf-41fb-b1fb-5c949cfff3cc",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "db065e46-f11b-46b4-b169-da80409044ae"
        },
        "item": {
          "id": "c40093cf-7c70-44c1-a37f-c0a1c0c844af",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8800a7b1-ad1f-4d34-86da-fb6499d3de43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e6dbe6-33ed-46f8-b9ea-55f26d6b0cc2",
        "cursor": {
          "ref": "7103c99d-0f2a-4ede-a134-71f30c5c8b88",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "53dbd84c-862f-4c21-8b19-ea54a69c34f5"
        },
        "item": {
          "id": "65e6dbe6-33ed-46f8-b9ea-55f26d6b0cc2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c5c9d6e4-2074-4f07-8d6e-56c6ce0e6b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0391e35d-d0be-4835-91a2-f8753778a5d0",
        "cursor": {
          "ref": "1cc2575a-0396-4c28-8381-0a9d31a6a956",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d6f44904-b30e-4c25-8c92-802914b857cf"
        },
        "item": {
          "id": "0391e35d-d0be-4835-91a2-f8753778a5d0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5beb0bfd-3c0f-45cf-811b-78ce65972429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cce452e-58d3-4126-b1ec-1e1e739fd9c0",
        "cursor": {
          "ref": "2d39730c-ad63-405a-b9e3-7796c40eb19c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a36240ba-565b-44bc-805b-d54c01d4cbdd"
        },
        "item": {
          "id": "7cce452e-58d3-4126-b1ec-1e1e739fd9c0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "959e04bb-294e-408f-8d55-e6a610a1fbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99e4728-6533-4ad1-9ad6-76949377a1bf",
        "cursor": {
          "ref": "fde916d7-fe14-445b-8468-9d3df2aa0e29",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9cebbe73-538f-4e89-9307-0810c31da217"
        },
        "item": {
          "id": "a99e4728-6533-4ad1-9ad6-76949377a1bf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "12ff6b7d-51be-47b3-88e6-aad858c6f5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d42e982-7296-4a53-b87e-b5ed529e4465",
        "cursor": {
          "ref": "aa1d80a4-f6ea-4fa7-9d89-ccee09408bc7",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2c64ea48-f618-417a-8f9e-ad174c555743"
        },
        "item": {
          "id": "6d42e982-7296-4a53-b87e-b5ed529e4465",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0cf9fbfe-663b-4fbe-83e4-23a7dc580124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec39902e-78a8-4ea7-8990-636e6ca4520b",
        "cursor": {
          "ref": "ed725428-fdad-4360-b937-6f6bb1139ef5",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5ec8b86c-f21b-4551-8f4a-99ce5309ba56"
        },
        "item": {
          "id": "ec39902e-78a8-4ea7-8990-636e6ca4520b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e5d155f2-b638-4201-a2ca-2df21d19c858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6561af-a872-4438-b710-707ab99de762",
        "cursor": {
          "ref": "d63dd014-e05c-4bb6-906e-ca16ee840f3f",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3b58a573-eb68-4f49-9033-c95a3f119748"
        },
        "item": {
          "id": "9e6561af-a872-4438-b710-707ab99de762",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b9436472-b4f4-4f6b-ba9c-669afe835ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78379124-b1f9-469e-815b-45dbbc94bf5b",
        "cursor": {
          "ref": "789995ea-f415-4c2f-a9ac-3b15d6367baf",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5dd92a1b-d7ce-4e1b-b83d-8d3272ad37f7"
        },
        "item": {
          "id": "78379124-b1f9-469e-815b-45dbbc94bf5b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "147b694c-393b-429a-8d32-093ea98e7555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc1e713-0272-4af4-b8f1-c3e20eb6e88e",
        "cursor": {
          "ref": "2aa470c6-6143-4853-a7c0-8ea344a75df0",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "91bddb6a-e41f-4d42-8be4-345463a132ba"
        },
        "item": {
          "id": "6fc1e713-0272-4af4-b8f1-c3e20eb6e88e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ab21bdf5-7d87-4fb8-90a7-67ab73fa5de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb9f734-234d-4263-86cf-e546f70098c8",
        "cursor": {
          "ref": "28bd2ffc-0a35-4c6a-bcdb-c15f035f4f41",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e768ecf7-fa87-4810-bb7b-bca85a2dd91e"
        },
        "item": {
          "id": "fbb9f734-234d-4263-86cf-e546f70098c8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ff5a50c8-dadf-4465-8653-4ca2df482e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe316b5f-e34e-4039-b431-67d04f1fdd6b",
        "cursor": {
          "ref": "03aa7294-be2c-4a3c-a54f-a117c67766c1",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "944001a5-fb02-4dc3-a4b1-5306a7421977"
        },
        "item": {
          "id": "fe316b5f-e34e-4039-b431-67d04f1fdd6b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f95cbda1-c0c3-4f7f-9bd8-0adefba74eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c99574-d814-4979-a937-7d1832b2c45a",
        "cursor": {
          "ref": "0bd93117-da4e-4ccf-8fd1-813bf1c77534",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a6a80cf6-298d-4660-bb34-bb618df1cfac"
        },
        "item": {
          "id": "e1c99574-d814-4979-a937-7d1832b2c45a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4a8d15d0-e158-4ce3-94a9-303e0a4a47f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd970aa-8f65-407f-9b65-708306665b13",
        "cursor": {
          "ref": "4e44d132-e0fd-4769-9308-40596ba1a07b",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9142c557-cbf7-47d0-a268-df51e3dab3de"
        },
        "item": {
          "id": "fbd970aa-8f65-407f-9b65-708306665b13",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "32378efb-e9d6-4621-9691-966b861572f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce55a691-8c6c-4902-b21f-bbf1570085dd",
        "cursor": {
          "ref": "163417e6-7a03-4445-b818-f93e9407968c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d24b901b-e1a6-4de2-aeeb-8b18c0877c31"
        },
        "item": {
          "id": "ce55a691-8c6c-4902-b21f-bbf1570085dd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9519b303-32cd-48a9-84fb-125eeeec9ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde3937e-69c7-43c2-82ea-8adf9b659946",
        "cursor": {
          "ref": "f052e625-2469-49ac-ab63-e50e2746d1bb",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "380159e1-86a4-441c-9bba-ae0a087b92be"
        },
        "item": {
          "id": "cde3937e-69c7-43c2-82ea-8adf9b659946",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4edd3b3f-298a-498f-9c32-115566b4d36a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da35de7-5fce-4709-8a9e-c4fe9d219bbe",
        "cursor": {
          "ref": "32062291-0bd5-4262-b195-555d9b36d1d7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fc87e68e-f772-4863-85ba-eae923e664b3"
        },
        "item": {
          "id": "3da35de7-5fce-4709-8a9e-c4fe9d219bbe",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7ccdf9a3-76f3-49d9-b54f-ab13406e2584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4c83328c-acfc-457c-8098-7c4ba27e573d",
        "cursor": {
          "ref": "6108da5a-db9f-4ba3-8942-1917f874379a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "068d0392-7fc7-48e4-a8f5-77193a6a998b"
        },
        "item": {
          "id": "4c83328c-acfc-457c-8098-7c4ba27e573d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "db4a690e-d22f-41ee-85b9-bd232bf0106a",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba35e94-f80b-4e7c-8489-fe65c9cb5b21",
        "cursor": {
          "ref": "b098fd30-18f3-4c8f-a4c2-e2f60e4e8b7d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "218cef2b-aeec-41f4-b068-50c32f5fd065"
        },
        "item": {
          "id": "eba35e94-f80b-4e7c-8489-fe65c9cb5b21",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "aefb041b-2eec-4a5f-9a16-9b7c05780d84",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1aac806-53b0-4034-b8d6-0798fc881677",
        "cursor": {
          "ref": "d6bd3cb9-f15b-4d76-8550-8774b1563782",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "74f38a31-17c5-415a-b512-44f5d94a14a4"
        },
        "item": {
          "id": "c1aac806-53b0-4034-b8d6-0798fc881677",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cf34b1d9-8e77-42de-a1e2-c28d63993058",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc30420-93c0-4715-973c-291a10f2af3e",
        "cursor": {
          "ref": "cf7a3dde-f5ce-4a0f-961e-45658f21c940",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "07e7b646-3e46-4ce4-97bc-ff0ba3697f8d"
        },
        "item": {
          "id": "dbc30420-93c0-4715-973c-291a10f2af3e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cd0735fb-3871-454f-9c1d-e8fee736ba57",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4430eebf-5de7-4ea0-af49-234fb2a70e45",
        "cursor": {
          "ref": "7f28efe9-ff2a-41de-9dfe-00a814a59df1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2fb47225-cea8-47a9-8019-a3e94f73823d"
        },
        "item": {
          "id": "4430eebf-5de7-4ea0-af49-234fb2a70e45",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5141c1b0-a773-44be-93d9-990bd6f4afb1",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-24T00:34:44.313Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-24T00:34:44.313Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "086120b4-8ff0-45f0-8f65-94ece0433a53",
        "cursor": {
          "ref": "0abc4978-a5b3-4e4f-8a71-21587261dd54",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5d9331ff-be55-4749-82e2-38536fa18925"
        },
        "item": {
          "id": "086120b4-8ff0-45f0-8f65-94ece0433a53",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "18f2de9e-e5ad-466c-9fb7-140c225ca934",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e282b50-f666-4838-bcfe-bec5a88b7069",
        "cursor": {
          "ref": "a73634fd-bcf4-476c-a687-5ff4eb48acc1",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e6713f4c-2a7a-40e9-8732-1ea727c968fe"
        },
        "item": {
          "id": "1e282b50-f666-4838-bcfe-bec5a88b7069",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e312d250-999c-4c07-bc49-15c96321dd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b5c377-4eb9-4a62-ab62-8e13e1445040",
        "cursor": {
          "ref": "a7b1e5b8-6ce3-4bee-87b6-5f405a4ee10e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "81a9cf96-0e41-45d0-b376-3e532a5b42f0"
        },
        "item": {
          "id": "38b5c377-4eb9-4a62-ab62-8e13e1445040",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cc8618eb-159d-4550-93af-53bd6aa54155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93c3512-09dd-4c2d-b6be-914146955c9a",
        "cursor": {
          "ref": "0f043d3e-a108-4123-b6a2-9197a842c6f4",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f4d08adb-e41e-4e4f-8e16-f66e6711a511"
        },
        "item": {
          "id": "c93c3512-09dd-4c2d-b6be-914146955c9a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e71c57a7-d18c-4bb0-9bbf-d6fd451a36d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb101bd-f18f-44b1-9bd9-27fc29302a18",
        "cursor": {
          "ref": "f4c6b452-6956-4f80-8562-c2bb33b7a13f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ab3232db-2639-491b-99a4-d967152a3800"
        },
        "item": {
          "id": "abb101bd-f18f-44b1-9bd9-27fc29302a18",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96f630c0-a73f-4d9d-af35-00212353c55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30879fcf-f35b-4e3e-a8ab-ca23bac80eb0",
        "cursor": {
          "ref": "ee47bf78-954e-496a-8813-8f1194f8d021",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6dbde28f-085c-4604-b53e-49a04e0721d3"
        },
        "item": {
          "id": "30879fcf-f35b-4e3e-a8ab-ca23bac80eb0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "27a96b2b-6dda-40c1-8321-5fbcc12c6dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df72ec69-7fbe-4c24-8d59-1f72518a5488",
        "cursor": {
          "ref": "f1b1135d-2035-427a-9653-cc0a79314870",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ca8fe7a4-2eca-452b-8742-423766a6d601"
        },
        "item": {
          "id": "df72ec69-7fbe-4c24-8d59-1f72518a5488",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "68d0b99e-ccda-4a03-90bb-d930651a61d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a236fec1-d352-4882-85eb-a7b4ac75912f",
        "cursor": {
          "ref": "e197f0dc-1382-4202-af8a-dbf3e621f9e0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "06b2f5da-711b-4384-9f00-7257277d68eb"
        },
        "item": {
          "id": "a236fec1-d352-4882-85eb-a7b4ac75912f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e486875b-cbc3-40b2-84bf-b120b96b6300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61b482a-d7a5-4c20-87e9-abc5e65d7316",
        "cursor": {
          "ref": "cecdec49-5a67-43b1-9d76-ca3873d2c832",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8655d104-c7e6-47a1-a572-bcfbfbecbc0a"
        },
        "item": {
          "id": "e61b482a-d7a5-4c20-87e9-abc5e65d7316",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "552b9990-c490-407f-bcc9-3918650b2288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cb79ad-049e-423f-adf6-42be54fa4dca",
        "cursor": {
          "ref": "db30019b-b1cd-4683-990f-2eac78078dbb",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fe210a8-ecca-4cbe-961b-86db6d367d58"
        },
        "item": {
          "id": "b9cb79ad-049e-423f-adf6-42be54fa4dca",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "236d2237-2094-4058-8508-5bf781f00872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a44a104-15ac-4df0-b5d2-92f7b938cc0b",
        "cursor": {
          "ref": "a0ba7bc1-564a-4a5f-b46c-52d7ad65c61c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b60de325-8eb0-498a-b3f6-52251e79ea32"
        },
        "item": {
          "id": "8a44a104-15ac-4df0-b5d2-92f7b938cc0b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cd2d2590-9acb-4910-998d-21f466e3a2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4fffde-e983-421c-b80a-cd223b2d5b27",
        "cursor": {
          "ref": "a20eabd1-3eec-461b-bd41-c39ed9e0f39b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c6348066-2d6f-44eb-81bf-85e033015188"
        },
        "item": {
          "id": "dd4fffde-e983-421c-b80a-cd223b2d5b27",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8b8b5d8f-18f8-40d0-8877-14119e11407d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d634636-79dc-48d0-9202-8890e466c4bd",
        "cursor": {
          "ref": "8bbeb94e-282b-4ebd-b983-5b813cee0459",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a2dd2758-38e5-4df0-8d23-9042e92ce1c0"
        },
        "item": {
          "id": "8d634636-79dc-48d0-9202-8890e466c4bd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f549111e-41e3-44ba-a75a-517a6de6dcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44841827-68b5-40c9-b6fd-9f7b4e3e79d1",
        "cursor": {
          "ref": "6a12841f-daf1-46a5-b3bc-f25adb306096",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "06a0be40-ece7-41a9-a15d-ef6a91374e2b"
        },
        "item": {
          "id": "44841827-68b5-40c9-b6fd-9f7b4e3e79d1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "49aa2058-d592-4b93-a949-365a749ec00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca3b40e-f741-4c8d-a526-56552a475026",
        "cursor": {
          "ref": "ab18a657-c25e-47e5-a9f1-5a8a47ae2cf5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c68a30bb-7c68-45de-b3c9-16347717c718"
        },
        "item": {
          "id": "cca3b40e-f741-4c8d-a526-56552a475026",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ad944568-501f-4b2e-85df-64ff4cfbfdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d09045-6e67-4ad5-830c-f9499a6305a5",
        "cursor": {
          "ref": "805b42a9-4fc1-4e32-98c0-5260868a5763",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d82a35a5-14e0-4886-abc4-a9e55c445046"
        },
        "item": {
          "id": "51d09045-6e67-4ad5-830c-f9499a6305a5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0198d834-ba47-46d7-a2ce-a5f3d748050c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd099e7e-415c-4632-b0dd-f960c7525af8",
        "cursor": {
          "ref": "3531c423-da46-4088-8e67-73e52265b356",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "415f4428-dad1-4f65-928c-17da641bcfbf"
        },
        "item": {
          "id": "cd099e7e-415c-4632-b0dd-f960c7525af8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f75f71b1-2e2a-4846-8f4d-a0a1cdfcb12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4f9119-8595-4a2d-9589-b70733bea4d4",
        "cursor": {
          "ref": "d7b001a9-e59f-4774-8ebb-0146c7d29ab0",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "94e128da-0301-4ed5-ab3a-f7a1c2431bd1"
        },
        "item": {
          "id": "3d4f9119-8595-4a2d-9589-b70733bea4d4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1ad820b8-e450-4533-b156-05be13b00305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a730b9-daf0-4b9f-a3ae-ccf78313876b",
        "cursor": {
          "ref": "f8e1b526-e173-4c70-bcc5-01164d611b49",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5741be39-13f6-41fc-bced-ab9ade014ed6"
        },
        "item": {
          "id": "d3a730b9-daf0-4b9f-a3ae-ccf78313876b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5cd0842f-99ab-4c79-8fbf-de50f4dbef52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f304d15b-c385-45af-9ba8-72084453b6b8",
        "cursor": {
          "ref": "34a78dd2-8ebe-4b5f-9eca-ec263fc7b9f6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e6c8a585-a340-436a-bf95-3820ede07ce8"
        },
        "item": {
          "id": "f304d15b-c385-45af-9ba8-72084453b6b8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "53bc9bab-1e8e-48ad-b434-6f698b7ccc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10df6367-65ea-4584-819f-c6de7a9b319b",
        "cursor": {
          "ref": "e3b50052-4ea3-46ec-9d16-5f636bb32e31",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b61f4ab0-3ecb-41e4-bfae-6a7ada2842e5"
        },
        "item": {
          "id": "10df6367-65ea-4584-819f-c6de7a9b319b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3e41e7eb-96a6-49ae-8e4d-c94003d7e386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0236923e-cb8f-46c1-ace8-22954964330c",
        "cursor": {
          "ref": "b9c33e73-4fa7-468f-87a3-343a62e85eaa",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7887e4a8-9407-4335-88ac-9a520b55a94d"
        },
        "item": {
          "id": "0236923e-cb8f-46c1-ace8-22954964330c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8c969db1-ebcd-4248-96c7-e8cd11c6a7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4306f1a-68ce-413c-b77d-7041675929f3",
        "cursor": {
          "ref": "7855f42d-7f77-4213-9450-ff02e23b63b6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dee52184-1e50-4525-b013-f5d5466e7df7"
        },
        "item": {
          "id": "a4306f1a-68ce-413c-b77d-7041675929f3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b30ba70e-626d-4dc9-9fc9-a7968cf086b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee7d3f8-5e9f-44aa-8e2e-e0a614b856d4",
        "cursor": {
          "ref": "a35df050-df4a-4c96-bbd3-3ef0b053858c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c5d41262-3f83-4002-ac1b-1453807b8e22"
        },
        "item": {
          "id": "eee7d3f8-5e9f-44aa-8e2e-e0a614b856d4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db54e08c-4613-4afa-9ac3-ecc2c94ad178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b34852e-f9ef-4156-a380-b8a37ab8520f",
        "cursor": {
          "ref": "bfd64330-6b1b-4800-b36c-a2bfdbf01a19",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "75cc2a59-0f3f-489b-abd4-c5e522c2f7cf"
        },
        "item": {
          "id": "2b34852e-f9ef-4156-a380-b8a37ab8520f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cdadf882-820a-435a-bf33-8cd84a92f5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d83e967-d73b-4325-948d-1c62878a3279",
        "cursor": {
          "ref": "4237b1b4-7e84-4945-a08a-4bc4b876a93d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8aa6545c-565b-428b-bf54-2eb8b02ca857"
        },
        "item": {
          "id": "5d83e967-d73b-4325-948d-1c62878a3279",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "931361c2-6e5d-45e7-a9f7-50d037fa7235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5fa054-5d1b-4e42-911e-041dfb62a4b5",
        "cursor": {
          "ref": "d2e17434-3ed4-467b-9067-b40ad54e11d0",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bfc84e64-3b3a-43ed-a6a9-e98c26cd4697"
        },
        "item": {
          "id": "2d5fa054-5d1b-4e42-911e-041dfb62a4b5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7b16260a-6735-4728-a068-8682aeaf7a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ddb5f8-a598-4df6-a14f-cfea675e472a",
        "cursor": {
          "ref": "a7f1bed7-fe5e-43f5-8056-8af6f46333ad",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4cf25b0e-0e72-4154-9a00-fee94949f8ae"
        },
        "item": {
          "id": "b2ddb5f8-a598-4df6-a14f-cfea675e472a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8daeb671-e83b-497f-ac53-4f83513769fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab665af-13d4-441a-8e84-ef726a9f0f5f",
        "cursor": {
          "ref": "6ef06bf5-03ff-413a-bccd-c2171d674c8b",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e7ade775-9aca-42d5-b9c8-568606bee860"
        },
        "item": {
          "id": "fab665af-13d4-441a-8e84-ef726a9f0f5f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e645890c-4e8c-45c5-88a5-b53e3ab4f8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dae5fa-ad73-4fda-9ad6-c0bd27bc01f9",
        "cursor": {
          "ref": "6488bc0f-a241-4cc2-861d-b984f6543ac4",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8171d3fe-78e7-4485-b856-48198d9453ea"
        },
        "item": {
          "id": "d1dae5fa-ad73-4fda-9ad6-c0bd27bc01f9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6eb25bec-584c-4a67-a2fc-4c4d39cce421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0f9a1a-68d8-4703-9d7f-97523386ef0b",
        "cursor": {
          "ref": "c3f4479a-ca1f-43b4-8366-3b2596051bdc",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "53c31dc8-89dc-41c3-9b4c-b2de7bc728c0"
        },
        "item": {
          "id": "ef0f9a1a-68d8-4703-9d7f-97523386ef0b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5be6e17c-8cfb-4ba1-a67d-bdd7fa0b8000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92aa23cc-c372-4ea0-9477-230d43a287a8",
        "cursor": {
          "ref": "e58734c8-eda7-427e-8d84-f230f38b36cc",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "79e69916-9dd9-476b-8d95-b557cbabbda0"
        },
        "item": {
          "id": "92aa23cc-c372-4ea0-9477-230d43a287a8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1582a58b-f1d9-48a8-979d-67aa7d75fe19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb2718c-c8e9-453b-aa14-563817681946",
        "cursor": {
          "ref": "8130bcfc-26e8-41b2-bdc6-7fba88ab8b0d",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5d97888e-9b6b-4aa6-86c2-87875d29cf72"
        },
        "item": {
          "id": "5eb2718c-c8e9-453b-aa14-563817681946",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "89a032fb-1c83-4630-90c3-fdb4d19c7a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab64c184-ca38-49e3-9e92-4fc81adc127b",
        "cursor": {
          "ref": "8bf47180-5588-48f5-a6a0-165b12b97ac7",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dd05839a-68ee-405d-af6b-2961e9a8f0de"
        },
        "item": {
          "id": "ab64c184-ca38-49e3-9e92-4fc81adc127b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "666be292-8bca-48a8-bfd3-d572f6ef4ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d4a0e1-3e2d-4068-98b1-2a81c616f339",
        "cursor": {
          "ref": "b0460c23-5922-4253-8558-a1a636d51e5c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b4fcefa3-bfad-492c-96e2-56e0b42c5158"
        },
        "item": {
          "id": "74d4a0e1-3e2d-4068-98b1-2a81c616f339",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3189b05d-59af-4a65-a35e-e585edbb3ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec10979-cfc7-416d-9d81-12a2c671ecd6",
        "cursor": {
          "ref": "27512d88-768d-4312-abbb-02289e1079ec",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0428c0d7-1df6-433a-98e3-6748e976a3e8"
        },
        "item": {
          "id": "1ec10979-cfc7-416d-9d81-12a2c671ecd6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0375c724-0dcc-4dd5-9ff3-2365c0bde1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce2e766-ba93-4d97-a52f-2df1a14c9a0d",
        "cursor": {
          "ref": "cc6bd1a1-748c-4c52-a0d6-28dcead6bdfc",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "769d888c-1b81-4dd5-92a6-a397bc7a4db4"
        },
        "item": {
          "id": "1ce2e766-ba93-4d97-a52f-2df1a14c9a0d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1be6f42b-150c-4aca-b0a3-c301c67e1807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d03d03-8328-4846-b8d6-3508edf6837f",
        "cursor": {
          "ref": "9fd09f88-9ad4-4b73-8b4e-6a187c2e6180",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "874ac283-2a29-4465-b035-5929e92c4b36"
        },
        "item": {
          "id": "e0d03d03-8328-4846-b8d6-3508edf6837f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "887a361f-ba56-47eb-974b-21bcd10490d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b22bb6-02a6-4e82-87e4-62238313452f",
        "cursor": {
          "ref": "0cdddcd6-1ff1-44c2-9dd7-b8186810444c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e53ca5a1-bd8b-4496-a25d-62d5f625f0b1"
        },
        "item": {
          "id": "72b22bb6-02a6-4e82-87e4-62238313452f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "70ddaffa-906f-4e0a-9395-4c821f65d874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de344cee-e05d-4403-a948-cdbe29e59f7c",
        "cursor": {
          "ref": "5e81489e-d1a1-4634-ae3d-4e71dd1a18a2",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "608b1ad4-9665-45fa-91d5-52e947a9ddd1"
        },
        "item": {
          "id": "de344cee-e05d-4403-a948-cdbe29e59f7c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "70edf62b-a68d-437c-8258-6682ae9c98ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a49263-06b5-4805-aa90-420f0c944d38",
        "cursor": {
          "ref": "2e777f8d-5539-4d18-9c85-996c5a42a9dd",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d130cc7-d25a-43a5-89a5-0f81886bb190"
        },
        "item": {
          "id": "a7a49263-06b5-4805-aa90-420f0c944d38",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "91b9db67-d535-45e4-90df-350f38cd977a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8bd566-6c1d-45f8-a481-eda57bc73697",
        "cursor": {
          "ref": "4d637ced-c6b3-499c-99ad-fb07c8e6f74a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "97b2a0a9-6b45-4ec1-b61e-021f4f425413"
        },
        "item": {
          "id": "5c8bd566-6c1d-45f8-a481-eda57bc73697",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "09e1b645-bc45-40e6-b07d-3843bbd3f6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8adda83-4cc0-4e8d-9446-3489e28435e2",
        "cursor": {
          "ref": "9784bf6a-e2f9-4fd7-926d-f4230452b47e",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b13093dc-48ff-45c4-9ae3-f48711388de5"
        },
        "item": {
          "id": "d8adda83-4cc0-4e8d-9446-3489e28435e2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9a16539f-caae-4246-b4bc-cbf419fc4fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9223f6db-0229-4278-8214-72d2b6a749da",
        "cursor": {
          "ref": "df034ac6-8976-41d6-a238-72704c514385",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e30f8834-00f6-4662-bef0-dca88ebc1270"
        },
        "item": {
          "id": "9223f6db-0229-4278-8214-72d2b6a749da",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5085a162-92ee-4df5-b5b2-8c04bb51b59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654d062a-24cc-4f54-9135-a72ca236aa82",
        "cursor": {
          "ref": "abcf5bb7-dbd3-44cc-85f0-649569789b40",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8c612072-1bdb-4f57-85c4-f0f8c991cb6e"
        },
        "item": {
          "id": "654d062a-24cc-4f54-9135-a72ca236aa82",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1159051d-fe26-429b-a379-ba3c488741b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed627c8e-36ae-4939-ad40-0a08acbdfad6",
        "cursor": {
          "ref": "a603e98c-d552-445f-9c3f-a664e5c83647",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "35a1ae73-3c62-4150-999f-f939e5220297"
        },
        "item": {
          "id": "ed627c8e-36ae-4939-ad40-0a08acbdfad6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bd970e7a-9700-47d8-95b7-e4f7ce34fde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2e686b-9b0c-4e29-b145-53e1ef8e383b",
        "cursor": {
          "ref": "5fc3ea95-c49c-45af-899d-3bb17e72925a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b4e91ff5-990d-4498-b7b4-1818486b760f"
        },
        "item": {
          "id": "4a2e686b-9b0c-4e29-b145-53e1ef8e383b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "70807e60-1c8d-45fb-aa7f-78ba2d19de47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9c2c90-b5fb-4437-88c7-8de49d9af768",
        "cursor": {
          "ref": "add8226e-7f56-4335-8b4b-b510ed1c59e6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f93744e9-8ac5-421e-bf4a-68fc9408bd2c"
        },
        "item": {
          "id": "bf9c2c90-b5fb-4437-88c7-8de49d9af768",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "408c569b-8717-428c-a564-e7596ebdba86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aff7fa9-3144-4d4e-93cd-c370a1270719",
        "cursor": {
          "ref": "a575e433-9a78-49f4-8d43-15500b852549",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cd399a8f-56a0-4c76-b1e8-3d46b7986823"
        },
        "item": {
          "id": "0aff7fa9-3144-4d4e-93cd-c370a1270719",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "117df32a-fd10-431a-908e-866125b96298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960cd5e4-c6a2-48f7-9663-5a6d9bbf68cd",
        "cursor": {
          "ref": "2cc35db5-8be7-4a0d-b27f-0a427cd2c07c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7b1456fb-02aa-4c45-9221-6a264a208d14"
        },
        "item": {
          "id": "960cd5e4-c6a2-48f7-9663-5a6d9bbf68cd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5ca54d20-1a51-416a-9081-3a02f93e59ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4def9951-b912-4749-a747-7c3204a7e875",
        "cursor": {
          "ref": "4d535b3d-3b01-46e1-8c1c-6f5689898beb",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d334d567-736e-48b1-b27e-71719c402d25"
        },
        "item": {
          "id": "4def9951-b912-4749-a747-7c3204a7e875",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f6731726-1847-447d-9ca3-e987bfff5031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e42e10b-2edf-47c2-865c-3209214bd68a",
        "cursor": {
          "ref": "0a5d1eff-48bf-4f10-bb20-ca85854269f4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5a4cb44d-3aab-4bfd-8a7d-695a95073721"
        },
        "item": {
          "id": "2e42e10b-2edf-47c2-865c-3209214bd68a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "00234469-7608-416b-b82c-42ff916d2aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a226a9b-8ad7-44ed-815d-024b332ce6d3",
        "cursor": {
          "ref": "4d4ff0fc-479f-4adc-ad0a-42c623dcca8d",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f0c475d0-d305-4466-afa0-1a74f4ea579e"
        },
        "item": {
          "id": "3a226a9b-8ad7-44ed-815d-024b332ce6d3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e993040e-7c48-4cf1-a355-1454b6a0ff00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee67963c-897f-455f-b5b4-492ff275927c",
        "cursor": {
          "ref": "fbb6c426-550c-49a9-810b-9e25d36c128a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ba401ec0-da01-4912-9481-2e2773465fa3"
        },
        "item": {
          "id": "ee67963c-897f-455f-b5b4-492ff275927c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "69130aa1-adbf-4c45-b8ca-938faa38477a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2d06bb-8def-4076-a1ed-253a5397bea7",
        "cursor": {
          "ref": "eefd12b3-8c3a-47c0-9493-61bbcf0396a3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "268e9147-2385-4859-a7d0-f69bb8039ba3"
        },
        "item": {
          "id": "fc2d06bb-8def-4076-a1ed-253a5397bea7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "87402cc8-76fb-49b0-9004-838457b44023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dc3eec-b52b-4a91-9f78-f20020300b6c",
        "cursor": {
          "ref": "3446e5f9-addb-45d5-b4e1-3377ec769ce3",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "35ac0f47-174c-4bea-9f92-1871836890dc"
        },
        "item": {
          "id": "c6dc3eec-b52b-4a91-9f78-f20020300b6c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6b821cc6-2477-44d5-87bd-03e96cc194c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e659fe-2229-4386-b0b6-8bb832fd9773",
        "cursor": {
          "ref": "bb3e2bb7-c336-4461-9ca6-0adc17e03978",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b4a2980d-170f-4eba-a8cc-9236d96f8de0"
        },
        "item": {
          "id": "99e659fe-2229-4386-b0b6-8bb832fd9773",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c187c1b6-0d99-4851-a555-b61197b1df7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7c4514-bb00-4e6e-b6e4-f0c7d500bf17",
        "cursor": {
          "ref": "cf5ff2f0-93ee-486e-8ff7-5b659b1e2365",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ffa05ed9-c782-4ba6-9271-f2cc855f7887"
        },
        "item": {
          "id": "3d7c4514-bb00-4e6e-b6e4-f0c7d500bf17",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "40975c10-968f-4962-b586-8ef633d650a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5180711b-bc07-42a2-8b27-63b708fbe775",
        "cursor": {
          "ref": "6002224d-87ad-4cbb-aceb-b33a068f5c94",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "97f2b37b-12df-49e2-817d-7066afc964e7"
        },
        "item": {
          "id": "5180711b-bc07-42a2-8b27-63b708fbe775",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3ebeb1ad-9431-4598-9dab-29d941eb8043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae7d913-4b54-456c-ba32-3f3874b8248f",
        "cursor": {
          "ref": "2ffbb983-3d25-467f-93e3-73d4f963b489",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e0d68df0-d2eb-48a1-bb82-019b2d8040ee"
        },
        "item": {
          "id": "aae7d913-4b54-456c-ba32-3f3874b8248f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "116366bd-b064-421a-9300-cebdecde260b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e4445b-d012-4ab7-8c8e-b7baf7cde9ea",
        "cursor": {
          "ref": "399ff11b-06a4-482c-b76d-98195379a571",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "48fddec5-43b9-451f-a0b6-2cf1be6100f7"
        },
        "item": {
          "id": "83e4445b-d012-4ab7-8c8e-b7baf7cde9ea",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f8b0ef73-0671-499f-8811-9249d16beac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755d069c-9fe6-44d3-a7f7-046f7d485307",
        "cursor": {
          "ref": "fda7edd7-0414-4ca4-8a0f-d425f8a905ce",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5b772b6f-7fdb-4323-b958-76b0bd8c1fc2"
        },
        "item": {
          "id": "755d069c-9fe6-44d3-a7f7-046f7d485307",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "56515bdd-133b-4cc6-a748-1a8a292c694f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d669a137-b14b-4773-bc5f-e36fa9b1487f",
        "cursor": {
          "ref": "13b1bfc2-4d90-48cd-b77c-17ca8374b9c2",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e7d6db21-5590-4e6f-a741-ddfa6cb987a1"
        },
        "item": {
          "id": "d669a137-b14b-4773-bc5f-e36fa9b1487f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eca59688-f1e1-4102-9cf5-6e3391430105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489b8165-e7d9-454f-9f14-81ff63320477",
        "cursor": {
          "ref": "768dcd79-1af6-4126-b9f7-b466e8c78245",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b8cb38aa-e8ed-446c-8bbc-1536a20f8a58"
        },
        "item": {
          "id": "489b8165-e7d9-454f-9f14-81ff63320477",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "655ae33a-1586-461d-9051-e82d616e03bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a826d32-c20e-45b2-aa16-90e8513099b0",
        "cursor": {
          "ref": "d9e6f4f8-2c58-478d-8b98-3b6c39718cc2",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c76b8f98-b6a8-4947-a4fb-65324b7f7110"
        },
        "item": {
          "id": "8a826d32-c20e-45b2-aa16-90e8513099b0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "de8521c5-f958-41f0-8f5c-6d48851474f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c80e442-b99a-4a87-8a09-f1a866cd41de",
        "cursor": {
          "ref": "b64989bf-ff1e-4fce-9f40-b5adc0d477a9",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2e693733-f3cf-4aeb-8bd8-03db0562983b"
        },
        "item": {
          "id": "8c80e442-b99a-4a87-8a09-f1a866cd41de",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b8e4eb57-1173-4cda-85e8-436580dda471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3769b231-f2ad-4ce9-9a8d-4e1c87fd2741",
        "cursor": {
          "ref": "2004dd53-6667-4df4-9dd9-0548437a3f7b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "61e22a98-9bad-4b1c-994b-04ab66165734"
        },
        "item": {
          "id": "3769b231-f2ad-4ce9-9a8d-4e1c87fd2741",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9134cd1d-9083-4c99-89d4-c6971ce9677f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f689dbc-882f-4b1d-838a-e7d7588a48af",
        "cursor": {
          "ref": "c5ff5032-24c6-4e80-a036-4bcf2aeae484",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cb049f37-36d2-4c16-81ec-c7663fbc67ee"
        },
        "item": {
          "id": "0f689dbc-882f-4b1d-838a-e7d7588a48af",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4afe3120-4ea8-4a91-9e5a-adbb476d4df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78967e9-642f-4d3c-a12b-7454ed6578ab",
        "cursor": {
          "ref": "22f4ffbc-f2d5-4fb3-bfe5-bdd72808a7b7",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6db0a990-6c62-4a93-8376-6bab1fb63ec0"
        },
        "item": {
          "id": "b78967e9-642f-4d3c-a12b-7454ed6578ab",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "fcb383ce-dd59-4ece-9045-8e8c763647fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6584dbce-916e-4144-9874-5801ffb40176",
        "cursor": {
          "ref": "e9ce97f0-597b-4f2d-b2da-68097010ccec",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "06094e91-af5e-443f-a592-5a3a91a40ef1"
        },
        "item": {
          "id": "6584dbce-916e-4144-9874-5801ffb40176",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7f05e994-4539-4139-850b-1182ce16e949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701cc782-7a97-4b8f-badc-c86848683f6d",
        "cursor": {
          "ref": "34218d04-5478-4723-9c87-2b2d60c17426",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7bbd6a1e-8d68-4a3d-93c9-2204140e2ec7"
        },
        "item": {
          "id": "701cc782-7a97-4b8f-badc-c86848683f6d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e4989577-cd33-4695-bc94-5077389e9afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f40444-b9e1-48a7-a27b-6a7f7330d179",
        "cursor": {
          "ref": "426d16b2-4ad0-4bb5-abf4-c5f389638590",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "de771106-2a62-42ca-a633-c38a6eb16c52"
        },
        "item": {
          "id": "87f40444-b9e1-48a7-a27b-6a7f7330d179",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d4c73919-8f05-4687-aa7d-93cf014e962f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076ede23-dbe2-4aa2-9511-f032d0d60eee",
        "cursor": {
          "ref": "0ee9a5ed-95c4-4729-b8da-b38726d5c284",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "75e08fc6-a424-4473-b4f2-23024bca8c21"
        },
        "item": {
          "id": "076ede23-dbe2-4aa2-9511-f032d0d60eee",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3a5bcd1e-45dc-4c9e-a1ef-900d6b7b945a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3452b70c-816e-44df-8964-8a069c89ce2d",
        "cursor": {
          "ref": "3c1f9869-1cad-4555-9ed2-f821c318cf40",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e2f71d3b-9bae-46ac-8cb0-3721f9cb3be1"
        },
        "item": {
          "id": "3452b70c-816e-44df-8964-8a069c89ce2d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5593a895-abce-47af-af07-66b3ce307521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93adc7a6-c1d2-4bac-8397-6e15a92d63d4",
        "cursor": {
          "ref": "39edbbfa-08d9-45c2-861c-a819605708d7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "59bf027f-b02d-4cf4-aef4-c74a908ce80e"
        },
        "item": {
          "id": "93adc7a6-c1d2-4bac-8397-6e15a92d63d4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1bc2759f-617b-49fe-94c9-272ee3df7841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f94e8e5-0e34-4381-8be8-788e8510e321",
        "cursor": {
          "ref": "10bd0a89-92c2-485a-864a-c6cb4d0ea3f8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "04396779-8674-449b-b0b7-12568649e4cf"
        },
        "item": {
          "id": "1f94e8e5-0e34-4381-8be8-788e8510e321",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "473963da-e198-45cb-b0f7-8754d7663fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae783e9-4aac-4aa6-9e88-30fe03f64ec0",
        "cursor": {
          "ref": "20048fbf-2fb5-45f8-9049-15bc18baa91f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a97dc8fe-a4f0-4e4a-9054-b819144a2920"
        },
        "item": {
          "id": "aae783e9-4aac-4aa6-9e88-30fe03f64ec0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5e86f9f3-1e9f-48b7-a033-9b32f213d3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5882f061-5495-4f93-8b87-10652025817b",
        "cursor": {
          "ref": "6a551401-c77d-4380-a643-2c52264f9262",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ce663dab-e992-4715-b5d5-7f494a61d164"
        },
        "item": {
          "id": "5882f061-5495-4f93-8b87-10652025817b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8bfc2df1-d7d4-4c01-af05-886e69919733",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "755b1c56-d856-4882-aef5-56995541323f",
        "cursor": {
          "ref": "b9654cb8-dfff-41ca-baca-bf77c9601b57",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "10d9345b-426f-44e5-acd6-9e4fcc37adcd"
        },
        "item": {
          "id": "755b1c56-d856-4882-aef5-56995541323f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "26efa872-a1b5-435e-9b9b-8415d1686f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a272dc2-934c-4bdd-b763-244c5736ebeb",
        "cursor": {
          "ref": "3ee03d51-d4fc-4e7e-b8ca-d31d099d4a43",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8b35fc88-b07f-4b81-bade-9f88c65bc0ff"
        },
        "item": {
          "id": "5a272dc2-934c-4bdd-b763-244c5736ebeb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "95c9a4f5-94fa-4de0-ada9-c69cd4180440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9fef52-9383-4141-ad87-d96365bb4a5b",
        "cursor": {
          "ref": "fdc23d18-f6fa-4d21-bd58-ab63374eea1d",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ce945a56-01e7-48a2-890b-ac9cde3cf5e5"
        },
        "item": {
          "id": "9f9fef52-9383-4141-ad87-d96365bb4a5b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c14ac5b4-da36-4337-9d96-b2aef260e678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db925f3a-5da5-459d-871f-674b2a351bb2",
        "cursor": {
          "ref": "78e9f61c-14b0-4f74-8ea5-1aa000c3f139",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "31fd05c8-3709-4c86-86d1-380fc736df48"
        },
        "item": {
          "id": "db925f3a-5da5-459d-871f-674b2a351bb2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "46e90e3e-90f4-493c-9560-c4a20675d3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cb86a3-5161-4235-8dd3-785373d3ff7a",
        "cursor": {
          "ref": "dc392ed7-d6ab-40a3-92fc-599107326925",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "84f580ec-1ad4-4411-91ad-8d24e0f2025b"
        },
        "item": {
          "id": "e1cb86a3-5161-4235-8dd3-785373d3ff7a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "441700f5-d88d-44f6-8ab2-d5135bd064e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d512d37-3270-4ca1-87f0-dfb231f313e5",
        "cursor": {
          "ref": "0adda129-8632-4094-b744-a2c941933d39",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7484e7b4-0e37-48e4-adb2-5c7d41283dc9"
        },
        "item": {
          "id": "5d512d37-3270-4ca1-87f0-dfb231f313e5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2d4b864f-3615-4551-b882-1367d2d81026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc03633-0bc2-41a3-905f-855eb6172140",
        "cursor": {
          "ref": "507a8484-2f02-4eed-bd40-d86477f189d4",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2dc4bfd1-d111-4382-91cb-1bfbeed74b57"
        },
        "item": {
          "id": "bfc03633-0bc2-41a3-905f-855eb6172140",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1a7b95a9-6930-40b5-9efe-ae66d8c31b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6227fe1-6c49-4340-a5c9-b0444084ba34",
        "cursor": {
          "ref": "726213e9-cf3a-4e8e-a1cb-34a75c29625a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f2022fef-f412-4f2a-9878-48f4bc7b9bc4"
        },
        "item": {
          "id": "d6227fe1-6c49-4340-a5c9-b0444084ba34",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bfd49d61-bc0e-4ff1-ade7-ee4102169883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0861eb61-87fd-48ff-9456-d23eaee2b5e1",
        "cursor": {
          "ref": "4d9a8688-adce-4c72-bfdd-ed53e8763f3a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "334b2ba4-6c81-4742-9358-7862b18732d3"
        },
        "item": {
          "id": "0861eb61-87fd-48ff-9456-d23eaee2b5e1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "89636f82-3d49-4c9e-9474-c37f52b6ca8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cffedd-476c-4cb4-ab0a-f96e88843687",
        "cursor": {
          "ref": "a644d8c1-6ef1-4d73-a8d5-bb59f9696ae3",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cac02b7e-1f49-419f-ae63-8f495ffed40e"
        },
        "item": {
          "id": "81cffedd-476c-4cb4-ab0a-f96e88843687",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2659cd3f-e1f9-4ecc-828a-70f275cb9728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3406ae-a94e-44a7-8180-e0ae9b55a0fb",
        "cursor": {
          "ref": "2850e426-a485-4c3e-923a-9c7fbed5fdab",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d1abea0d-fecd-42be-b742-40b9f3788004"
        },
        "item": {
          "id": "8a3406ae-a94e-44a7-8180-e0ae9b55a0fb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6bfb61e2-d24a-421f-a8e2-8c0bf1a110d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83104fd-4e2d-45a4-b32b-9fcfe5e32cd5",
        "cursor": {
          "ref": "684818cf-9f37-42af-a823-90e807e9c995",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d9a55b8e-6bae-429a-b513-90e4ac1f19f6"
        },
        "item": {
          "id": "a83104fd-4e2d-45a4-b32b-9fcfe5e32cd5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38016c3e-8010-46e9-85a8-5a2ab250987f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f7da10-eb34-424c-b7d6-12329c05c24e",
        "cursor": {
          "ref": "9a7a41c7-5722-4506-a432-441dd1521bc4",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e8a921e5-c53f-47fa-9c0d-248ec325e8c7"
        },
        "item": {
          "id": "54f7da10-eb34-424c-b7d6-12329c05c24e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e597f783-888c-427c-8909-8c5a56f3c2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c4c95d-44e7-4cce-9ab8-01bbdc9fb59c",
        "cursor": {
          "ref": "b4690a51-6d96-4af8-88ec-d323fb608ad0",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5dcb57ba-8178-451b-b425-b500c16745ac"
        },
        "item": {
          "id": "34c4c95d-44e7-4cce-9ab8-01bbdc9fb59c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d03aa0ce-032e-4928-ac4b-2ca9c5d6b2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b1e6c9-44ae-4370-8bbc-da76d40aa397",
        "cursor": {
          "ref": "20d464c5-09c6-4b51-8fd1-e00d9a5bcf9e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6e9a9ed2-1ac0-48c9-9caa-fad95106e21f"
        },
        "item": {
          "id": "21b1e6c9-44ae-4370-8bbc-da76d40aa397",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "99f4153a-5e9c-4580-a38e-a5206828ab32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26258224-d147-45c7-80f5-ed67e0acd0e8",
        "cursor": {
          "ref": "a4bed6ed-82f1-42b1-9b80-33b016f56ab8",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a4f9c1b8-cfc4-4946-85ff-fd4b9a4388e5"
        },
        "item": {
          "id": "26258224-d147-45c7-80f5-ed67e0acd0e8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "96e62ccc-3a96-475d-b6e1-3012e3fdb73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6199a70f-bdd4-4262-a7e7-7043c21dbb72",
        "cursor": {
          "ref": "6eda39cb-22d7-4708-9748-c6738b7739fd",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ca72496a-1bad-4652-9fab-e72b86d801b0"
        },
        "item": {
          "id": "6199a70f-bdd4-4262-a7e7-7043c21dbb72",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9e12b772-f276-4baf-b483-bfebe6bacf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6524a71f-dc6d-4ff5-9251-9dcd36cf73fc",
        "cursor": {
          "ref": "3b93d47f-faa7-403c-9dfc-f46ab0481fec",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "144859f1-31cb-462b-bf5a-2cdc9b9a745a"
        },
        "item": {
          "id": "6524a71f-dc6d-4ff5-9251-9dcd36cf73fc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c2073f14-e240-4eac-80bf-9892ba80abbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a250e3fe-d175-4fab-bf50-29fdb0f663f5",
        "cursor": {
          "ref": "404200ea-28d7-4074-9ec5-d93212b60d59",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "909ac087-b8f3-48e0-b620-afb6d8d0c3fb"
        },
        "item": {
          "id": "a250e3fe-d175-4fab-bf50-29fdb0f663f5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3690a633-b8cb-4423-b54a-2ce313ca2d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9442fbca-0986-479d-acfd-f3e922acd5dd",
        "cursor": {
          "ref": "3e21c029-08ba-48a2-a40f-ca93ed210fd0",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fcb78fa6-3479-4d02-b6ae-f32355115d37"
        },
        "item": {
          "id": "9442fbca-0986-479d-acfd-f3e922acd5dd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "52e40487-9cf6-4cbb-adbc-d624b4e56ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb68908-4bf2-45a7-9e4c-87fd0adff330",
        "cursor": {
          "ref": "61304f12-5054-411c-8232-c9b334bd18ee",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "39921dbc-ec30-41b6-898a-8356e74d010f"
        },
        "item": {
          "id": "acb68908-4bf2-45a7-9e4c-87fd0adff330",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "279dcf90-63c6-4182-b19b-7fbee680fb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e456658-cc06-49ca-bc19-e0690e2ea6c1",
        "cursor": {
          "ref": "db1c3ff8-60d8-4dca-b920-6fa492caab4b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "da0f9243-a667-4ef5-90c6-f010353a8557"
        },
        "item": {
          "id": "3e456658-cc06-49ca-bc19-e0690e2ea6c1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5fe26288-aa91-4a82-afa8-2462689a5e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6271df6f-e053-4446-98a8-39403942c6e7",
        "cursor": {
          "ref": "c9251169-8987-4b4b-8566-131acb8122ce",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ac74191d-13ea-45ae-8e2f-cd031e6ad3cb"
        },
        "item": {
          "id": "6271df6f-e053-4446-98a8-39403942c6e7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c993eeda-b3a1-40ae-838e-06a3bf68e886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0737073e-cf4d-4793-8bb0-160cf0779744",
        "cursor": {
          "ref": "78b6f395-4484-4ba1-9fd5-274f730d574f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4cf87fa7-be1b-4bfb-9197-df0d25ccbde0"
        },
        "item": {
          "id": "0737073e-cf4d-4793-8bb0-160cf0779744",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "690fa9d1-a203-4ea7-9a3d-82711aa2696c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40be0ea8-80d3-46f7-81d1-a3e0e3d271b9",
        "cursor": {
          "ref": "0ceb2b50-bbb2-4d3f-80db-1e436bc92ddd",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "480f8c8a-4334-4225-af49-c221f4dbceed"
        },
        "item": {
          "id": "40be0ea8-80d3-46f7-81d1-a3e0e3d271b9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6575816e-b4f6-401f-a7fe-92eb08f8c981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8002e6-9fa8-44dc-9f14-718bda5c024e",
        "cursor": {
          "ref": "67ebeb2c-1b5b-438f-8498-28c9fbf82683",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "de2b6100-a23b-41bb-83c2-2d1c6e64ca95"
        },
        "item": {
          "id": "5f8002e6-9fa8-44dc-9f14-718bda5c024e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e1e3244b-7a20-4f1d-b83a-419b6a3fae09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57eee495-caea-4636-82c8-d32b35611df4",
        "cursor": {
          "ref": "6de3d3aa-2b3f-4260-82e1-6d6cad702be8",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8686db25-803a-4dda-8e5e-caa0a5d31930"
        },
        "item": {
          "id": "57eee495-caea-4636-82c8-d32b35611df4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f42b9a59-2f99-42bd-9dde-663e2f954651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc473a8a-e184-4386-af04-581b9d659b6c",
        "cursor": {
          "ref": "19508c0c-e20c-4de7-abf3-36b1cd4571bc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "06faf13b-d746-44fc-a19d-7dbe3ac4faeb"
        },
        "item": {
          "id": "fc473a8a-e184-4386-af04-581b9d659b6c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3990f8d5-1e85-4507-903f-57352abf7647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e132b3d-363b-4244-a392-e35f2eb2f367",
        "cursor": {
          "ref": "482b9a6e-77b2-445e-a138-1280c6cc2117",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "aae4e4a1-7266-40be-b785-3c84610be3cc"
        },
        "item": {
          "id": "3e132b3d-363b-4244-a392-e35f2eb2f367",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1c8f9a9b-8884-4ce4-b66b-d33575ffd929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220177b2-e464-4dce-b38a-4f1a6b8d68cc",
        "cursor": {
          "ref": "adf5fe29-ed25-4e72-a03d-52cc255655f9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "894d48d6-c347-46dd-81bf-52aa18930e4c"
        },
        "item": {
          "id": "220177b2-e464-4dce-b38a-4f1a6b8d68cc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0c0cc3a9-f645-4c59-864d-3716575c2652",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d43172ff-d2b7-4454-a09b-8582dabdc7f9",
        "cursor": {
          "ref": "41733fb8-3a53-45b7-8b25-6303d08cb811",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d8cfa748-0092-4924-a5d4-c42b22b045f1"
        },
        "item": {
          "id": "d43172ff-d2b7-4454-a09b-8582dabdc7f9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c63a2a89-5797-4591-befc-83e8d59e4ba9",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fb9eadc6-790b-45b0-99d3-dbc2e6be5a8e",
        "cursor": {
          "ref": "c5cd84e5-3892-4ccc-a776-3ee938926175",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4889075e-cf57-417d-a6f7-8654eba81036"
        },
        "item": {
          "id": "fb9eadc6-790b-45b0-99d3-dbc2e6be5a8e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "32ab2fc2-16fd-4fcc-8c97-2778bdee7a71",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b2b8d1bf-d185-4d8a-9893-ac72041a74b7",
        "cursor": {
          "ref": "9ac3536b-424e-41a3-85a6-1369682bd863",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "15c0e390-883a-4b42-9f8e-2ba3a98c39dd"
        },
        "item": {
          "id": "b2b8d1bf-d185-4d8a-9893-ac72041a74b7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "39c9acd4-1d60-4010-9415-90e94031525d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4a1240-a9bd-4c01-93fb-1c344b48d6b8",
        "cursor": {
          "ref": "c3b0526b-ba5d-4cb4-af0d-af6c9d81c2a8",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bc7e849a-0c28-4ca7-b7a6-f45339385197"
        },
        "item": {
          "id": "de4a1240-a9bd-4c01-93fb-1c344b48d6b8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a1adfcb9-9f43-4685-b91b-34a47700b49c",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f9a4d72c-be07-4b12-824d-6ee47314d05f",
        "cursor": {
          "ref": "87ec595c-9197-408a-8dbd-19dde1cc5dc1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "082f701d-cd5b-483e-808b-8172441a09cb"
        },
        "item": {
          "id": "f9a4d72c-be07-4b12-824d-6ee47314d05f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c382027d-353d-41eb-be2a-19b4db9a4520",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "767e7f0a-1413-4a06-8914-819f7471017a",
        "cursor": {
          "ref": "3c396eec-cd5b-4ce0-98ea-4f74ec3f6bc6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0591b0f4-1623-42eb-9070-57eac1784e22"
        },
        "item": {
          "id": "767e7f0a-1413-4a06-8914-819f7471017a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "eaff5abc-ed6e-45d1-8238-0b1695a00a42",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a8ebf396-1cd1-49db-8012-bc419f5a1ecd",
        "cursor": {
          "ref": "efd401a1-3685-4a5b-a280-46a0fb40bfb5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c25417f0-ba76-4ffa-b363-9f08e29d7f84"
        },
        "item": {
          "id": "a8ebf396-1cd1-49db-8012-bc419f5a1ecd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "49af6f36-8c6a-47d7-b00b-a5d5ee49983e",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6fab5433-f13f-4124-920e-236be68ffab7",
        "cursor": {
          "ref": "40cb9667-8cae-4d4e-b30f-c54be8e98643",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1c4636b2-c746-4656-822e-6d4b3c205911"
        },
        "item": {
          "id": "6fab5433-f13f-4124-920e-236be68ffab7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "df8e317f-5760-4068-a87e-4da3825cf851",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c11085db-fca8-4a7e-8094-a587440301c1",
        "cursor": {
          "ref": "e6ba85a3-804b-4799-bc37-331caeacb64c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1691d200-d28e-4c12-b506-c6ba0e25b802"
        },
        "item": {
          "id": "c11085db-fca8-4a7e-8094-a587440301c1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4aa0ca4b-6968-4fb7-9a34-246cd2f895aa",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f9deebbb-5547-40ce-af02-4542b508e614",
        "cursor": {
          "ref": "874a720b-1d21-4486-82a0-592b1273bd71",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b076b476-2e22-40da-a3fb-ba88857ee560"
        },
        "item": {
          "id": "f9deebbb-5547-40ce-af02-4542b508e614",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2c700784-1afd-4b18-8b59-47f08ba131c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a4bc06-d0ea-47fc-8e09-8716ce4471d3",
        "cursor": {
          "ref": "7bf69278-7d98-454f-87d0-11a5b3ba985b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6c173ad9-7579-4b73-9a03-1ef985fb966d"
        },
        "item": {
          "id": "c4a4bc06-d0ea-47fc-8e09-8716ce4471d3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "be6302d9-7f15-4b9e-a0f5-6316d01f117c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904c1445-d4bb-4a3a-be8b-5d424eb4a951",
        "cursor": {
          "ref": "3c1752b0-de9c-4e71-b836-33ae2792af22",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "179e1aaf-86f8-4bbe-9902-bfe8e6b716c2"
        },
        "item": {
          "id": "904c1445-d4bb-4a3a-be8b-5d424eb4a951",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b125836c-5ab8-42b8-b2a7-00718859ec3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab5af8f-100e-4f1e-8536-873e95d07682",
        "cursor": {
          "ref": "c0b7bbc2-f2be-4557-a7c5-b0aad55f1183",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f91ceb42-4679-4c43-9425-1d179d048d3e"
        },
        "item": {
          "id": "bab5af8f-100e-4f1e-8536-873e95d07682",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "404a809f-dbcc-4f5c-9d23-27bbe216c55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a69f8ee-124d-430e-a0d5-d60a5e2cd360",
        "cursor": {
          "ref": "afb70902-a8f3-4fbe-92d2-d0608e54e5d3",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "781764dc-1147-4900-b72a-16d53891d92d"
        },
        "item": {
          "id": "0a69f8ee-124d-430e-a0d5-d60a5e2cd360",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "040095f5-af0f-4c57-a2d0-c30f9e774bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1843f346-62a6-46da-b022-8841fa0b557c",
        "cursor": {
          "ref": "5874dc50-97dc-401c-aa15-8bd1af2b21eb",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d0fc0386-e807-4bd2-9759-9c6caf3f0b2d"
        },
        "item": {
          "id": "1843f346-62a6-46da-b022-8841fa0b557c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d01eae9a-db56-4964-a75b-c3208ec1afc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838a3650-88cd-4a42-87fc-3dd29b7cd1f4",
        "cursor": {
          "ref": "437705a9-727d-4cb6-a854-4b79b401c7dd",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "99bc1be7-7f68-43c3-9b78-00395e6fafbe"
        },
        "item": {
          "id": "838a3650-88cd-4a42-87fc-3dd29b7cd1f4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "984628e3-4e37-4c1b-95cf-effee9e8874b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6569d37c-25e8-42ab-adec-dbabf81f0d6e",
        "cursor": {
          "ref": "45e8d458-2293-4b75-885c-bd636f621728",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "18dd20f8-057e-4312-a68c-6e73707e1194"
        },
        "item": {
          "id": "6569d37c-25e8-42ab-adec-dbabf81f0d6e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "79abd31d-5215-4ebc-9b62-3c414b78fc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4b1c2e-c37c-48db-b939-ac10da82d99c",
        "cursor": {
          "ref": "8f1fc1d2-6f67-437e-8497-0098a936de88",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7fab5c64-a7ad-4f58-bb30-bf88814c8ac6"
        },
        "item": {
          "id": "2e4b1c2e-c37c-48db-b939-ac10da82d99c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cd40771c-6b02-45e6-8a88-0a2509615cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1392e186-2181-44d8-b43f-6caaef65e0a5",
        "cursor": {
          "ref": "ba2ca6cb-ba2d-4b40-8154-8b65b4a5f2a4",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c619c88f-5b71-46de-95da-4d5fc189c526"
        },
        "item": {
          "id": "1392e186-2181-44d8-b43f-6caaef65e0a5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "359751ae-8259-4042-ba30-c2de25dc93d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ed4009-c524-4f75-a1f4-d6aac6921e26",
        "cursor": {
          "ref": "571a439c-905c-4a85-8748-b9363c65aea5",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5e2d2064-7d3a-427b-83f6-57ebc4bbe66c"
        },
        "item": {
          "id": "91ed4009-c524-4f75-a1f4-d6aac6921e26",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "07aace2a-1f50-4c7a-b546-86a6d7e55cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c84a97-76dd-4d9f-9ff6-7e168f1a49f9",
        "cursor": {
          "ref": "98e6927a-7beb-4a9b-8ad6-e9ddedd4be37",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0d969dc5-239a-4135-a0f4-cf234538e634"
        },
        "item": {
          "id": "85c84a97-76dd-4d9f-9ff6-7e168f1a49f9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bcc9dbe8-368f-4d12-8d2a-8d49b8afed8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2b99d9-8e08-4f2d-86cd-932b8a62b7e3",
        "cursor": {
          "ref": "3759f554-e486-4bc1-8ad6-bf6a8d7ac785",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e8f0692f-403a-4ecd-b37a-73719e281ca0"
        },
        "item": {
          "id": "5c2b99d9-8e08-4f2d-86cd-932b8a62b7e3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "666f420d-d421-46b7-99f2-17641d083d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c19059-7401-449d-8735-b07fd670c9d2",
        "cursor": {
          "ref": "7c59afae-a372-4b46-9f6d-820d604b11fb",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c7be2079-4a97-4ff9-8432-76477a018399"
        },
        "item": {
          "id": "64c19059-7401-449d-8735-b07fd670c9d2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "56cea5b4-c9c3-4722-92a9-ac3b6c187094",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b324dcab-8527-4562-842f-65d18d557595",
        "cursor": {
          "ref": "54ba4961-590d-41c7-8c50-eeacbf242d14",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2346d417-558e-40a4-a91b-ae29606e2202"
        },
        "item": {
          "id": "b324dcab-8527-4562-842f-65d18d557595",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a8c5bdcf-d94a-4973-bcad-ac275f3be79b",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8173f98b-b496-463d-9bc3-7678dd4933d1",
        "cursor": {
          "ref": "0aeafd51-c634-49df-9104-8d6bf516e431",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4904d396-fbb7-4e35-89a9-8c64c89fdbfb"
        },
        "item": {
          "id": "8173f98b-b496-463d-9bc3-7678dd4933d1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f1e39795-4703-48f8-9fdb-19f556ae2229",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7a5f41c2-5d4c-40da-841f-3a26e4c4fc52",
        "cursor": {
          "ref": "efdece2c-7b0b-4dc3-97da-fb62220a5d44",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "83298ce6-084d-4538-8598-53d9780f7a38"
        },
        "item": {
          "id": "7a5f41c2-5d4c-40da-841f-3a26e4c4fc52",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4a5c57b7-a00a-4668-85e4-6e801825c8d9",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "61da100d-40fc-4089-a967-889a96b556e2",
        "cursor": {
          "ref": "54a95fa2-d6aa-4511-a1c4-3487fb39ab8a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "34f47c12-d9b7-4108-bb8f-17ac07426bd1"
        },
        "item": {
          "id": "61da100d-40fc-4089-a967-889a96b556e2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ac1c361d-e816-4792-b1ed-6fe63319b078",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "646ff819-32b9-4fea-a401-9f112473643f",
        "cursor": {
          "ref": "0f55f822-f027-48af-b45b-07447b6d9fbc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1974fc73-8c1a-4803-8772-38a1d8b281d1"
        },
        "item": {
          "id": "646ff819-32b9-4fea-a401-9f112473643f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bb2edf7c-7a18-47a1-b7fd-a3b398438cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df46888b-49b7-4b03-9bcb-e0d97540723a",
        "cursor": {
          "ref": "30482663-7f8f-48f5-b702-d09d4a31733b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "064e3e7f-16e0-491c-b1a2-bb21b14f3892"
        },
        "item": {
          "id": "df46888b-49b7-4b03-9bcb-e0d97540723a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8730cb90-f5ca-4e26-92f9-5ca4d60d1b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601e865a-5236-4a01-bbcd-e6465d91f8de",
        "cursor": {
          "ref": "177c876f-7b58-444e-b42b-5c39e58c35c1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a95412c6-4038-4c36-83a7-bb7978ac7d85"
        },
        "item": {
          "id": "601e865a-5236-4a01-bbcd-e6465d91f8de",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0b18e010-70b6-4b00-8e3b-d92e26a12e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe6c513-602f-4915-b828-77e1f9876f87",
        "cursor": {
          "ref": "b81d6056-f8a3-4bef-b8e0-d5c287dd2ebd",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6fbef15e-058e-439e-8fa7-be0fcab575b8"
        },
        "item": {
          "id": "cbe6c513-602f-4915-b828-77e1f9876f87",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "daa725d1-d0db-4d2f-8f0c-09c2251b69ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c661bef6-849c-4878-9081-2c94a6417e23",
        "cursor": {
          "ref": "f975be32-47bf-4ff7-a715-d865fdddc19a",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5dc3fa7a-075b-48ea-85db-45b44a02263f"
        },
        "item": {
          "id": "c661bef6-849c-4878-9081-2c94a6417e23",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3cb53106-f956-41e1-a70b-0d9aa381e990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6036c4-e3fe-45ec-b281-8759f2ed93a9",
        "cursor": {
          "ref": "6458792e-0e21-4af2-9ad0-d5dbc1d6b5eb",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "795d9a7a-a743-423e-aad7-1c717ddb043d"
        },
        "item": {
          "id": "cc6036c4-e3fe-45ec-b281-8759f2ed93a9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e3ec046f-712d-40dd-9689-b8e474307b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ac8fcc-dde2-4843-b15b-b0e33f67a871",
        "cursor": {
          "ref": "01067348-736d-4ed5-9b90-09fc954b7d54",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1c6192a4-f686-4d39-9925-884f3069b739"
        },
        "item": {
          "id": "b7ac8fcc-dde2-4843-b15b-b0e33f67a871",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7705840f-d159-4c80-abb4-118d31ebe5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0a8090-cdb8-42d7-97e8-5e8e8e81abca",
        "cursor": {
          "ref": "0788baac-d23c-47a1-a1ee-0caad4ff5974",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f47f745c-04d6-499d-9ae0-9bbe92b3cd68"
        },
        "item": {
          "id": "3e0a8090-cdb8-42d7-97e8-5e8e8e81abca",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1ff4de3b-9792-46f6-8596-5521d38baf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0b5fbd-f194-40aa-9783-6731d85300c9",
        "cursor": {
          "ref": "a97656f7-b404-44ae-86d1-b9dabe131aca",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "61e83863-fc52-4ef0-a9b1-384cb54eb772"
        },
        "item": {
          "id": "4a0b5fbd-f194-40aa-9783-6731d85300c9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2fdfbb1a-b332-4f11-a408-cb208a3667ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b34dd4c-6b50-48b3-8e3a-0c2b82323f10",
        "cursor": {
          "ref": "0debc7ac-86a2-46f6-bfe0-5d90936477b0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "08982b97-197d-41ee-87fc-5ddcf539efec"
        },
        "item": {
          "id": "5b34dd4c-6b50-48b3-8e3a-0c2b82323f10",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a8078ae9-8ef9-4d16-b4b9-6683039db3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd09aff-46a2-42c5-bc92-b80a82c3bb77",
        "cursor": {
          "ref": "b43cb036-e395-48bf-817a-fc62166eda82",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e2e7acd5-aeb1-4391-8d9d-78787a129790"
        },
        "item": {
          "id": "3bd09aff-46a2-42c5-bc92-b80a82c3bb77",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9cd4bc31-3d88-41bc-aae6-95b01b616917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c53e91-f59f-422a-b25c-814febf8ac14",
        "cursor": {
          "ref": "a35931f7-6473-46a1-9b56-8faf26885bac",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "99e2deab-7674-4a83-b0a4-4faeb90be58e"
        },
        "item": {
          "id": "13c53e91-f59f-422a-b25c-814febf8ac14",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "142dd0aa-50b7-42e4-9ea4-15130c765b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89b38fe-8e50-4bab-aedf-fb29dbd1dc4a",
        "cursor": {
          "ref": "5fb5619c-980e-498b-aeb1-34db952efe5e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "18e15cb5-7265-4173-b8e4-f2956c28943d"
        },
        "item": {
          "id": "e89b38fe-8e50-4bab-aedf-fb29dbd1dc4a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "17bee405-7b31-47a4-9d4f-4763e6e0c3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37db3bbc-c554-49a5-a32f-0f95c03fbeca",
        "cursor": {
          "ref": "d2e8d0ea-af8b-4cd2-8557-37aeeadf8197",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f4093cac-4cfe-4689-a3a7-80c436cdf21b"
        },
        "item": {
          "id": "37db3bbc-c554-49a5-a32f-0f95c03fbeca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "88972954-2752-487b-9bfc-f400afabde03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895f8c92-feac-4298-b17a-e65254998e9d",
        "cursor": {
          "ref": "0e78b46f-2ea1-4129-84fb-ccb6a351d4f3",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "06e562a8-caa7-4816-a2a8-98c4c3ace825"
        },
        "item": {
          "id": "895f8c92-feac-4298-b17a-e65254998e9d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "64ac41ad-6d83-46ec-8807-587d6d84baab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93ac043-3bd5-4ec6-8aab-eb8d9ced5e45",
        "cursor": {
          "ref": "b2f9462a-a82f-49d4-b797-46b1e5a5385a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8038240f-9c00-49b6-a989-edf32031548e"
        },
        "item": {
          "id": "c93ac043-3bd5-4ec6-8aab-eb8d9ced5e45",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "574756e4-38da-4794-8b92-c252ec2f00c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ece287-bc49-4ff9-bfe6-c1897a0b2215",
        "cursor": {
          "ref": "6dea5133-a645-4bf2-b5cc-26590380f5f3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "19c7020b-1a3b-4865-a34a-81fb138dd5aa"
        },
        "item": {
          "id": "67ece287-bc49-4ff9-bfe6-c1897a0b2215",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6116bcfa-8541-4822-87f4-3861a1dd33b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a154d62-b9fc-4428-8db2-5a1313d5bfc2",
        "cursor": {
          "ref": "5c896573-7b6e-4f00-8305-5bc9ba7daf54",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2a7571a4-2364-40eb-85f9-d1210ecaffa7"
        },
        "item": {
          "id": "3a154d62-b9fc-4428-8db2-5a1313d5bfc2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2f1ecfe8-7f1b-4cc9-b3b2-aaccf49486e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e69fae-fa55-40d5-91f1-e20fd74d5323",
        "cursor": {
          "ref": "8d9dfc92-7a03-4441-a01f-174991fe07ff",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "413f7527-c254-4495-951e-34c9fda17c6c"
        },
        "item": {
          "id": "d2e69fae-fa55-40d5-91f1-e20fd74d5323",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b03d4355-1e7f-4289-8d1f-3e486f8be0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd6e814-022b-43a8-8aad-c890469f7639",
        "cursor": {
          "ref": "14f6a353-025a-428e-b6c0-ed9c17441a3f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0e565ded-ba87-4fb4-b200-89a4045bd8a3"
        },
        "item": {
          "id": "fcd6e814-022b-43a8-8aad-c890469f7639",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c198b78e-c2d6-451d-b044-a1e9f3c96b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a1492a-1958-4681-becd-1c9fd370bca7",
        "cursor": {
          "ref": "790b23f2-c470-4ec1-82ee-2a08b014fbaa",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b1df4009-8e8b-461a-8316-4beec3863fa9"
        },
        "item": {
          "id": "d6a1492a-1958-4681-becd-1c9fd370bca7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e9549038-42bc-46da-a2f3-3c4b7f4c35df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b964d219-33d2-49d0-97ff-ce6bc86687a3",
        "cursor": {
          "ref": "4dd09b54-54b8-47f6-a0c6-333525eaffca",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dbc511dc-54cf-4da3-bbb7-e5cfa6b04ea0"
        },
        "item": {
          "id": "b964d219-33d2-49d0-97ff-ce6bc86687a3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "10d3c852-f845-43ac-924c-fa0976578e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9581cc36-a83d-4dd2-a1be-931708d7738b",
        "cursor": {
          "ref": "647f5053-9f4e-408f-8b8f-5ae465c386ae",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c0d15f1f-9a05-420e-bb7f-d40ba5d4f90c"
        },
        "item": {
          "id": "9581cc36-a83d-4dd2-a1be-931708d7738b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8b4eebdc-f77b-4851-96b0-23001e856f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d58191-20c9-4c12-a00b-bc418ccae432",
        "cursor": {
          "ref": "42658faa-3cd9-4f6b-a00f-a091bb4b2c0d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4a2135ce-e50e-48b2-a250-072cd69d03f9"
        },
        "item": {
          "id": "41d58191-20c9-4c12-a00b-bc418ccae432",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b193fa9e-8735-41ee-a6d1-8a361673562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c2363d-a233-44b7-b881-caad04f74389",
        "cursor": {
          "ref": "6df1d09c-0649-49a2-b062-dbd13b81053a",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d0d9f3a0-fe33-4dfe-a919-30190abcd9a4"
        },
        "item": {
          "id": "65c2363d-a233-44b7-b881-caad04f74389",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "079299f5-666d-4813-a67d-edf50c560bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ff7bd8-b577-4026-ac79-76fb788a0b55",
        "cursor": {
          "ref": "16064513-b251-4c68-bd79-1b2f72584cfd",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "00ff060e-ea14-48b7-8a18-bf6291c72e9b"
        },
        "item": {
          "id": "68ff7bd8-b577-4026-ac79-76fb788a0b55",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ff62f392-d833-4dde-a407-b16415151b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61068e97-f6d4-42e2-9a8e-367ecf899645",
        "cursor": {
          "ref": "5d573afa-c3bd-4cc7-bf0a-946db124c66e",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d95f570e-9b73-487f-9be3-6edbb5aea2fd"
        },
        "item": {
          "id": "61068e97-f6d4-42e2-9a8e-367ecf899645",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "50946c11-cc5e-47c5-bad9-6e309abbc30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45253be-a485-41d2-94ca-7c455a2ef6ce",
        "cursor": {
          "ref": "5b7c853a-18cf-4ab9-a902-5e63c0bb344c",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a09163d9-bdc8-41b0-ac62-6d1643a295bf"
        },
        "item": {
          "id": "e45253be-a485-41d2-94ca-7c455a2ef6ce",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9b86bb5d-adb4-4563-9b92-b57573ed0aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64bdec4-186a-4e75-89fd-227289b43668",
        "cursor": {
          "ref": "baebbd63-2889-482d-8e28-d870dc18ee27",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "49570613-7534-496b-96fb-ed03162b5d93"
        },
        "item": {
          "id": "d64bdec4-186a-4e75-89fd-227289b43668",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "20ff7795-358f-4943-b438-6e1af522399f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3190953-80c8-4c36-8e55-8d4cc748aab0",
        "cursor": {
          "ref": "df59cebb-caa5-42e1-847b-4c39db0f5cd5",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c22a4dcf-9853-4cd6-8b48-c25b1dd63d93"
        },
        "item": {
          "id": "a3190953-80c8-4c36-8e55-8d4cc748aab0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cbdf514f-8dd1-4d7e-8801-0847dd6c1c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc20b12-e04f-42cd-8616-e56acfe187d1",
        "cursor": {
          "ref": "b67dd6b4-9e2e-4928-9ce6-e9d51b9fd88c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c7fd3a4d-ccca-4e48-b30c-1515317acce1"
        },
        "item": {
          "id": "cfc20b12-e04f-42cd-8616-e56acfe187d1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "86bbc814-94d2-4154-b225-8bdac08c76dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2582acac-cd33-46c3-8a3c-791599f4e970",
        "cursor": {
          "ref": "d9d014f4-fd04-4f75-867c-13618af65fb6",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9ebaa6ce-91f9-41b9-8616-72c37a869a29"
        },
        "item": {
          "id": "2582acac-cd33-46c3-8a3c-791599f4e970",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e75c1e1f-7223-417a-8313-7f8a4d63e5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed76455f-646d-428f-9a66-9d493eadf63c",
        "cursor": {
          "ref": "6205a3ca-acff-4fff-8148-f285f2f92cb9",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ef2996b5-f768-41dc-8b81-e434b5859f7d"
        },
        "item": {
          "id": "ed76455f-646d-428f-9a66-9d493eadf63c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e915d7f1-5ed4-4b9e-a097-1d82a0b1e5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b002a1-23b5-4f58-962e-489182dad7dc",
        "cursor": {
          "ref": "49fc71a5-4e65-4da2-91f4-3486148e34c3",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "675ae525-eb7a-46e1-932c-4e9a38f486f8"
        },
        "item": {
          "id": "21b002a1-23b5-4f58-962e-489182dad7dc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5a73de4a-45ee-423c-9e01-22e4659cd2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fdd510-7f16-4518-9a5a-35ed1a66b27b",
        "cursor": {
          "ref": "ff5ac23b-8874-4140-8300-74f3257d165f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "57c49450-3fe7-4c0b-8263-f34347b85515"
        },
        "item": {
          "id": "f8fdd510-7f16-4518-9a5a-35ed1a66b27b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "42ea1483-0ab2-42e3-b5f1-3d73b41da755",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975965f0-f713-4632-8f42-afde57efea22",
        "cursor": {
          "ref": "74806420-b8c3-41d3-9eba-70a414641a5b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f8de6b87-e592-4a5b-8468-3f5c1771c202"
        },
        "item": {
          "id": "975965f0-f713-4632-8f42-afde57efea22",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9b9970c5-53b4-48e8-8277-a7e3f880c3f5",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "194cee11-7e4a-451c-aa2e-ee11173f303d",
        "cursor": {
          "ref": "8fcb2bbc-f6bd-42e2-8158-757e0b75d42e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4c6e05f6-4bca-4ee6-ae3f-d401f214fabf"
        },
        "item": {
          "id": "194cee11-7e4a-451c-aa2e-ee11173f303d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6ed85fa8-84ec-4de2-927a-6d32230b5a53",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b96515-3fd4-44e3-8166-9e8c9507fa58",
        "cursor": {
          "ref": "81bb336d-a65c-4d0f-b400-70fae54e44d1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e379e9e6-701b-4de2-a0df-e73e9cfe9549"
        },
        "item": {
          "id": "17b96515-3fd4-44e3-8166-9e8c9507fa58",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ad0eec86-ff8c-47c9-9d1c-6ae52caeb6c3",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "51343f32-06d0-492a-860b-9b8f595bc06b",
        "cursor": {
          "ref": "9853ad7d-3fc6-4419-8c65-11960a6bb604",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "67f77fbe-a093-4582-8575-6b526d352782"
        },
        "item": {
          "id": "51343f32-06d0-492a-860b-9b8f595bc06b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "40af2b58-fdc3-415a-8bf3-a5fdbde2d1aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51343f32-06d0-492a-860b-9b8f595bc06b",
        "cursor": {
          "ref": "9853ad7d-3fc6-4419-8c65-11960a6bb604",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "67f77fbe-a093-4582-8575-6b526d352782"
        },
        "item": {
          "id": "51343f32-06d0-492a-860b-9b8f595bc06b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "40af2b58-fdc3-415a-8bf3-a5fdbde2d1aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f87c9a1-98ab-4273-bf35-3ccaf60be291",
        "cursor": {
          "ref": "53eab285-a639-479d-b486-34c3b0aabf30",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "911e5d7c-2592-4d49-9f16-991ca174d8b0"
        },
        "item": {
          "id": "5f87c9a1-98ab-4273-bf35-3ccaf60be291",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a8273605-3b66-4fa2-b24a-e000d89de14d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132e75d0-db9f-41da-b5ce-b64d7d8d4878",
        "cursor": {
          "ref": "95be6f4b-ec07-4c4c-ad65-c6b2834e1a7b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d6db86fa-f04e-4107-bde1-cbedba7e79bd"
        },
        "item": {
          "id": "132e75d0-db9f-41da-b5ce-b64d7d8d4878",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b17fdc4e-6e91-4822-9483-312aee7a10d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}