{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e9bc36be-dfdc-4daf-a534-5ea2b63556e8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f68c3f14-d580-46b9-ba7d-266a75323eda",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "77b62b99-6dd0-4365-ac72-26963a186a3d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "be41b8bb-0277-4b4f-8d9c-902360224838"
                }
              }
            ]
          },
          {
            "id": "b42820f1-231f-4648-ba3f-cf09e05bf6e0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79abf42d-36bf-4c44-81bd-6a4cc02ced23",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9edf5423-d11f-4fb6-a498-86f91bea996e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a6d6c389-fb95-42e3-b5ca-ef755b0cc3b1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "36fd1eb9-fcbc-4637-a63e-ad1bbf7dd756",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0c62813b-502f-45f2-9ab0-1935822371cb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02700eaa-13a2-4ef6-adc0-4ffa52c2f050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a52cd75-a5e0-4a77-ae21-1fdcb64c01fc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04f2616d-3e46-412e-9caa-27dd687a0fa8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80f6343e-6d87-495f-8ed9-b2cb0c649d82"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e4ac224d-70e6-4a51-9163-2a751851853f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74447c02-bf7b-445e-bd86-148c2fb9c4e1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0aaa7c7-f268-4c69-95e5-a514189c1862",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9a26fe19-9661-430e-a93a-d24c49b18025"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39321f02-d64d-4ec6-be86-060afb1855e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a99c54f-2186-4868-a963-23b63c52f32b"
            }
          }
        ]
      },
      {
        "id": "0827143d-bd9b-4e75-a513-d8d7a24bc726",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "afdf61c1-8468-4885-98eb-b189a66a177b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4514f324-e2bb-4db5-a66b-c17108452755",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c115c86-34f0-4f03-bd89-0fef5417a0b3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0168a1b6-97ee-4d62-9bc7-006be1ae250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bd230dc-5a53-4fef-a876-1dffb872cb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a6b8b3-5b4f-47f5-8727-079b86ac34be",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf23fba-37c3-4bff-baa5-9dee87efcf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0198c8d-cf64-4f6f-99bd-8d4f0fc4704b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ce4396-0624-4599-aa81-c66d835232d4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6700154-b9d5-45f0-b312-307f9149fd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab35eb8d-2cb7-428d-84a1-bc1e38160548"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb0a360d-4b2a-4966-a32c-b10714605e2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e687fb70-151e-4d6d-a255-99e1748ef86f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4d6c88-8f34-4952-8e03-036a0958c910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb9e5653-7129-4815-92c5-4a888cab589a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a30f14-b849-4f73-8fbe-6b5e692ac384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585e3179-c68c-43ff-9eb0-1f2d17499e97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "18b5ae4f-8b36-4e36-a540-a4d0d06fb59d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cf1886a9-2b0e-497c-b992-a37e5cedb9b4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed678619-8b1c-4271-b6d0-905087ab3acb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f7c7f7a8-e739-4ed7-b026-908f3dcf67ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87078115-4edc-45f0-ac50-08c42833d31a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4ded6ac1-85d6-47f3-9380-1cc61742f53e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b83f109-3165-4700-9812-963ce7662d86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd2c3104-5f49-4d35-ab02-047888192f72"
            }
          }
        ]
      },
      {
        "id": "cc8ac0e1-0b08-422c-97bd-b7e23e628ba1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "89bfcc7d-6bba-4737-a479-4d0c074407b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "110e42ea-1648-4371-af82-f691c9cadc6f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "14aa61d3-435e-4298-afe1-c849e8fba0ce",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf40e0d-444a-4358-b9e4-fac8dfb20e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f816914-0217-4f8a-9b8c-2eb938a800f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fa53ec-bb5d-4f36-a981-f979a5a03d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cff124c-0e77-4282-9351-3e47625f272b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dda647-2f00-42f9-8025-35f675f88bbd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1461ca5-45b3-475a-9b8a-5a70c5d1c3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a5078c-db23-4ec9-8d1e-52bcdf54f5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40c9231-c4e8-4744-b2b4-f73c6d23d870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2037c196-1024-4abb-bc7b-09bb42cc2484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeac656-08b8-4c4f-950d-abcfb7913490",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9aa3d37-7b48-4023-b0a1-f583ef8701f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf718d7e-8468-4adf-b44f-bc5d23eebe5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499a18af-591b-40d1-b288-ea4c1703f143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b439d086-2e56-489b-9fda-ff46fd76f0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae54b30b-522f-4556-87ee-34b5ec5a936a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c122bddc-59a3-44d1-9471-36b7a7e6be3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7a19fc-cec1-4547-bff9-5d59941f491a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ff073-8ac9-4619-bc19-86e5f4de736f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61ba34ce-e882-4908-a2e0-f4e9bb716e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d788d7d2-6a79-4a09-a783-7411311f7357",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9322f9c-c717-44ce-90f7-029a8c52bb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a79270b-92e8-4b1c-b8d6-ad51d3eef3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f387dbca-3543-46e9-9374-be82eab2710b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e3a101d-10a8-4cfd-bc7a-0649c4a9ad08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65bdd02-d762-48b2-9db6-23836e5123f4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729dadff-fc69-4726-a847-d4c3ba23dfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fb1e25-4086-4243-b24c-fb7d1ab5715d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f1705f-25cb-463e-8ba8-7c10ea7038a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09995212-2ed1-4b1a-a1b7-b6779231d087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691116b1-2c74-4bc7-aa1d-2c63e826c4e7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd0088b-8466-4e38-a779-9c602e1f8e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812d14bc-2c89-4872-9da9-9e22a701a521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e916ae27-8f70-49b0-bc76-f9f18096c642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5b2ddb8-3fed-4dbb-b8bf-465a64082ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7a2284-b064-48b3-84c4-10102cc0787b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e05d5f8-b971-4cb0-acab-9b8149fd38ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4796a7f-88e1-4622-94f0-99a1a3e8a0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddf0641-31b1-42e3-88b3-3a6e1018d261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf84a51e-74a6-4daf-b882-b073f724ba84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b374b890-2efd-4304-93cf-5567e180cbb7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89219e07-2802-4676-bd78-1f27c22d08cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcebf0d-6a2d-4a8e-a002-dee5eacf413c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25b0897-9356-4f91-b510-809af1fcbab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4bd26cf-b424-43c8-8094-0ae86ab2ee6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3fa385-edab-4d39-9bf5-6d9f8b34d04a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098c0828-0142-4548-9b75-61f3b8bf8116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015f9837-6691-465b-8e86-2c4a9b1c19ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4883ba6-36c7-4e64-ad79-7a78bcd91df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e99332d5-6ea3-4f39-9e38-478dde5e3ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be61acb-a7ee-4631-851b-bbc47b7cd622",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66deae57-d7d1-41cf-971c-46cf615bb376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34155b70-23a5-420f-89e5-9b07896a5fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcea6f7b-8a39-49ff-8fc6-c4fb84dc9aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63f205e8-2573-47ed-9e20-40574ff39eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565f6c0f-20db-45df-a7ee-c691a3b453f2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf79ec0-e2d9-42ab-bbb5-266b383b7e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9c46cc-114f-41e5-a8ac-5ba6c7d609bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed590a45-6880-4d81-8a66-ffc58fd02997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf7a03f6-1f1f-4f92-a44a-d8bf89259560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc6cc79-fdc7-490c-9d49-351396d90b6c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1956b66-721b-4051-93c8-d78095aee688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a4a80b-de92-472a-a911-8e7134434ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232c83bc-d5ad-4997-943d-a068cd9bee1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5e06f51-67f8-4f2b-a390-fbce0f9d1190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2637d8-4ac2-42cc-af29-19f7272cd638",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d59438-b7ef-407d-b48b-f44231b5ca83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f711e643-e4b3-4649-ae94-87016c276552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572e6b1e-cff9-4e82-a3d9-e3b21d030624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "675a8fb8-a279-4530-b693-f942093c8fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37164ce-bfa5-46b3-8202-2d579361f23c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdaf37d-562e-4823-bba6-267af2a4803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6f0301-c3a2-47f1-9296-1a94c8610c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59847dab-3095-4baf-b9cd-ff19542946f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa1466c0-d1a6-4044-94ee-f1374e74b9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34589b35-7f12-409b-a7fc-9fd044757c51",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a4b63d-c706-4b86-a72e-cd602d2408cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfab4afb-0cc2-4676-8674-b5bdaed65840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e0404c-da17-40a2-ac85-296abe30b325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "826d7e37-7514-4889-b1fd-3bba5db94ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46948c4a-f57c-4cf4-a553-808fbb1da2d8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5239033-bbff-48ab-82a6-f1514aed77a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46892438-e74d-4a40-8db4-854ca4d6bb8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7065151-8c1d-4877-9cc0-5bde0b4a2089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce7bc3b1-650f-4c95-9b35-c3ad031363da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b1d7d-4161-41e0-8638-6ba3f6581e07",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5610c4ef-6b95-49b3-a246-05e7c6f09267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d774b15-ae6c-4d0e-9af9-700fe272a924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9c6332-bfe0-411d-a167-29b9d7ec9737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dbf37f8-185b-45fc-a55a-ec6224c776d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d235a4e-4f1d-4e11-a8c7-7c201184d52c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0288420-72df-4e12-b94e-278f5b1ed5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a89a42-7dc2-45d1-988a-197beeccd060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc37a9b1-9506-489f-9d8d-36adcc966304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e02b79b4-9fef-4b3c-8fcc-754326dadc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a759a295-094f-477c-ac35-14fd3d411968",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d691cc-31bf-404d-888c-38a155e9814b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f27c57-b8e1-4ce9-be96-4201214eaab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5c62a1-eb21-4ae2-a23d-17595d217852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc1fc39-1bd6-4352-b173-774247c96f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebce9d1-75f8-45d6-a73a-f3c4ed2da3e7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b13d87-4183-497c-aac6-a49b29e52723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1beb9e1b-c5c3-470e-ac95-277bf7c8a408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03272dc-0e1d-4301-a231-590ce49f09b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15707afe-eef2-4f1e-aeab-112f9a0c2ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529140a5-963d-409e-abb9-7bd915b505b7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905a3900-a150-4dd4-a02e-5d1f38c6fb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d2d231-1d2f-4354-b3d3-0e5ba848d0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2780d22b-977e-4f0c-87a9-156bd78d773c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7706497-724d-4e27-a1fe-a944ea48a65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8460304f-77e7-48de-92d3-d118f623284c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d982a78a-93fd-45d3-b757-32860bfe7988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649d99a6-3449-48bf-91cf-827c59336d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ad6abd-2856-4118-8abc-4f6aecb67386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01dc72e5-5b2c-47f0-8bc4-174e226f677c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335a7a0e-8c4e-4c1e-bb09-bca96e282932",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9b05bb-ed5e-4e59-97d8-24f8731da299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607b0a27-7115-4139-ae24-11fad525300c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61def084-79c7-4aa2-a0b3-7bbf3cccfc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfa1293-047a-488f-a4af-b2b49e6a7267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e02a08-6f6f-4292-8326-70c4e4bb569b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e43e94d-3a57-4dd3-a992-b3f464a230ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86f79b8-4831-4df4-9c0b-6d9470580a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01167905-90cd-4269-ae2d-59fb93215f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc2539f-53fa-4428-a59c-2fd811e92a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d69098-6a08-4578-ac88-79f822cea899",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d63e0aa-82b2-4625-bf6e-8c943d535e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7232fd-ab6e-4c02-b0e5-44ee894590d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6619396f-68bf-4d4e-90b9-410b140e5fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "177fe16e-379c-45ed-8509-6a2b4547642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272876bf-4079-4095-b830-d7833207a244",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e244a0d9-0e96-4ee4-bc3b-82bb94def390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090a6431-b955-4030-b9fa-bac08b9fd310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03272e9e-90b0-4657-b191-1f92bb2e7b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3378336-f65c-4a89-97b4-b9782ac48109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e9ea91-3d72-497e-8f8f-6267cbea9ca8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5051a55d-eb15-4abb-9756-e0852ada49e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db095dfb-e448-467e-8f22-79cf0fdc0880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d57001e-bc50-451c-ae8a-5d2349c2db7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "128b7550-5d93-4c06-8173-d70ac2ad3f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fc362d-cb0c-454f-a523-f59c167069dd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bec655-eef8-4176-a8a3-900d970e8e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc233c7f-ab51-4065-b084-b8121bfa8234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec0dba6-867a-4846-9abb-d4764d252421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfedb75-ba36-4b27-8542-12a032fa04f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0788caf-a4a0-4097-b4eb-565d17877aeb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b777d4d-727b-4a4c-9962-02f16e1f48dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257faa02-b4af-4dda-8c4b-f5fa86d2625a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b4b669-8bf0-44c8-83d9-52c1949dcc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e2ef9a-ee78-4f71-9e64-5f57f5b6c5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5576a910-8efb-4700-bf99-6ba0138c20d7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bf6e03-c0b6-4c68-9a2d-e59a3e9a7ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1c4a88-08ed-4e00-ba2f-bb0ce14d367c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a978c3ff-db70-4c0f-bad9-d664838114af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9510db31-1b02-4f3b-a82d-2498a35f5dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935e6344-806e-4bb9-a4a5-c042bdfc3ff0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f276bae3-435c-415c-9a88-ff954cfe40bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afd11a0-13b9-479f-a618-394617b66741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e96a56-90a6-433f-ba0a-fcc964918ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3ca890-6420-450d-8bb9-5f5523f6c015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2eba0d-c6b5-4788-8799-5cf1b92f1c94",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ccfb30-45f5-4af4-8f96-8462670f7b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0cfce8-0fd6-4e9e-b6c3-446d20ebea50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dc2ab6-3c3f-46db-acb1-ab62c7623e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f065351-9dd5-4762-85d3-7f9995f30efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2192cf68-1df5-4854-a3a8-531bd46de616",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49000d4f-be49-43ce-b0ef-d2b9bbd176bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dfe376-4a4a-4d0d-96a5-a010f887479b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24026737-6aaa-4256-bf87-15f547eecd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "daceda5c-af0a-4208-8659-52fb546f246b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac91e0b-cd97-4334-b96d-82086667aaa2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d74e2e6-4229-4a66-a7b2-6cc485ed20b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563e6ce8-8b74-409a-abfb-f53ecef5323d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781b8cd5-1276-4d03-be83-8cc6ea258297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b98daa4b-35c2-4dd1-b810-b423eb615624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd30f2a-e92f-40a7-ab90-06f779ee48db",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26b8818-85a4-44b1-946c-52e1ced93eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "020f96e6-0dd1-40a2-b841-1f058a6e6f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62103256-a991-4446-b166-4920981c4098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3999421-2792-4266-86df-0272c39b8f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75900754-b451-4020-96c5-b0a9bc20406c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25c6ef3-aa42-4b02-8a53-35195f36d8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0b1d3a-72be-4d1d-97e8-cd63c6454e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de58f0df-e893-46d1-bcd1-47e067152781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66913223-776d-4057-92cc-9f0b081537db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7743e758-07cc-4cb5-a264-6e321a8c7b47",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaa56ac-8d96-42b1-b916-4f6ca006cbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f10f621-facc-4834-a17d-a030412f7184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da83a6b-5975-4c86-a840-453be081dc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d218fbc-1691-4f50-bb95-648dd1e0cb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782a31d7-dbd9-47ef-bab8-b18264b344ea",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c41ed8-19c4-4262-b37e-228a3daf1625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff244f96-4beb-4b87-b87e-3b26bb53c1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51789827-beea-4d6e-abf3-16ba4bf3ba7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "128dc932-6066-48a5-83c0-17f56fa91329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9f2088-e112-4d40-8671-6e3097d384fa",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3640d599-dc39-488e-9cd2-7e5696d5fc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9808e804-9e63-457a-b1c1-f4cc39aabee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431f7e26-00ca-429c-a0a9-afe51f827877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3785da05-c29e-485a-a989-1c7137296579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaf1db4-edb0-40fd-b251-79c2b4a3c53f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7210a76f-ec79-41e1-bd73-8b61f914cb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1403c7-29e0-48fe-b398-a07924a009fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fe21ab-850b-4817-9695-aafd95549c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab276fd-55d3-448e-9168-a2492d2cd359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d012ee6-b75d-457e-8538-c54ac109ca84",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1b4c6d-4996-4d89-8610-efa4993fbfea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade07dfc-4242-4f74-becf-99aa839b32c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d22d3a-78d8-461b-8c27-40e30de40e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d093f03e-8db3-4b80-80eb-99dad6700f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd96a9e-8f6e-4807-b98f-153c0eab56a6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733507b7-3956-462b-b555-a40fe7f0c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1a7bf7-2cdb-4889-8086-455ceece0d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c5e0a8-001d-4d92-bb03-4fbfa3173743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdb380a-a82f-45ae-8e2f-6a8013a2518c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc44f01-65d1-45e7-ab4d-602d81eb78c3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b1301a-c662-4abf-a624-718b97f3902f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bc0f33-1768-4964-905a-0bc179991ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a247942-1a4b-410e-9901-4d17f0f39e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "75cfceb2-cf59-47b2-9e6f-f81c9e53bea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db30abe8-a4fb-4b7c-ac5c-a91e4c75de3e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a9c4c1-fd26-4e8b-9f09-9b293a7dbf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2d253e-dfe6-4dfd-9302-39b44d33ca80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00586dcf-e191-474a-9313-b1740d3c1b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2edd79-276e-4f86-a0e6-b5a46087a011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c62e340-66ed-4b98-b68f-0d12e569e952",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaa1f16-5e4f-475c-a6dd-4e7698c23b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fa0524-b945-42a6-b533-029129945a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56ea0e9-22c8-4ed5-a3b3-83d137fa8227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dabbe94-d020-48f8-9d2d-c35e612ac8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86497676-7b4b-48b4-9e6e-18803b494652",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976a2854-d413-4338-9129-c024cc1862d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f230607f-f0fd-4460-9c91-f4755ee9842e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33ca455-63ac-4840-a243-36a674e7ff79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "faf1b380-f72e-46a6-9b94-ac0ed5a89fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523d122b-c32b-4888-84d4-e9f1f77e2095",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ed55e2-785a-4843-9ec6-dced61a5edd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a281e74-954f-41c9-ac06-fd672bed5c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f37ff6-6e99-4856-abaa-f2f33b65a080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3340b0ed-8172-4f27-a0bc-afd190a6a506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2778d50-30e6-4b59-b9df-c05c1cb40d3c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8575aa-d83d-415b-b0eb-ae870a4ee39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8ce899-c51a-4512-8075-2de68a771bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfdb64e-d042-4176-a5ba-f4cd8eae7050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb91c9f-be80-475f-8969-179d1b4ebe8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533f8157-aa51-4c10-b90e-c6299231d0e5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c8a9d1-620a-46b2-8111-8463f26c9da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc0783b-8983-4368-a813-ffb04aa06f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11f1c2b-e42d-4c88-bc22-b7d5e6d9914c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd64781c-903b-40f3-aad5-a72acd552e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab673e42-95b9-4679-a207-b57a2752ac49",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c197e1b4-a4e1-4d40-bb8c-6bed271ee07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b9ad89-c97c-4c5d-adc2-abe7fa85cc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733ea29c-4ee2-4616-9340-839e6614be6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f6d8bdb-8396-46f7-97be-ba49edf8378e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb578135-fe71-4042-b602-af6db43af565",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae67f36-0643-4f79-93dc-a17a3ca18f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e996214d-79d2-4abd-b6ac-76c3edecba71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d281e4-9529-42c9-93e9-a20295c20c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "50c7bd06-527c-4b86-b4b0-2231390e65ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8cac22-efbc-41c4-a997-38bec5c0e311",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455a580e-9988-466b-b698-ee148351de72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8991c14b-753b-47bc-ba68-811f701ac23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f3ff09-878d-46f5-9798-3143f09ed72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4287c26-2cf8-44e6-ab26-714ebf103dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850c910c-f845-4bb9-a50a-010d863d68d2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70b1d6b-da31-4d4f-ad3b-256c818e5875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7cea85-1bc6-447a-a005-bc1eaf9dd7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f80704-bdc1-407d-be56-321be546cf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7593a7d4-170e-47d1-a3ca-6fef4c45c507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd0b555-840f-4218-9826-10d0b5cd0754",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434aeb6d-f39d-4c50-a7df-95e4ec4479d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239fe15a-d72f-4eb4-aec6-1c7ef4d2aca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f254eb94-7fa7-4dd3-96b0-2b376ca12cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23d8ac42-96f6-472c-bd6c-f3f867dccbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1ce990-1987-4ff5-937f-431238cdb974",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf5ac70-f0d6-4af2-a6a8-ceb1f549d699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabb3995-a897-467e-a08a-a1184a3b4ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cd7830-2348-42a5-b6cd-493cb3ee37f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "742307ca-ae37-49dd-bc64-add21e147f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c2ef71-83bb-4cd6-ba5d-ce055bfcaa19",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d239e8-4bf3-4f9e-b8cf-ad3e862e06b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c7f6d0-c5ea-45f9-ad76-1e4522a561f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20117b87-3d1c-42e6-995d-85ae0140afd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8ff555-b8fa-41ab-8049-f76f3895559b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257012ad-9e1b-485a-8e32-93369a82ffe6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e23bb2e-2c23-41ca-808b-d16fb856d448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6aa005-97c9-4a5b-84c1-037a94e5f624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab20176e-f676-41ab-a93b-ba004396ce92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "28770cd6-305b-4b44-9b4a-d4586e86b9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9f59c0-0fa5-46ab-b6b4-f59c0d5b3bc6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3acdb2f-a423-43ab-b86b-887a88886583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2025135-76fe-481f-bac7-4f727127287b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7fa1a0-a06e-4d28-972b-2125ce609eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "154d833c-2e36-41b1-848b-dae267e3fc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9bdc34-8d9d-4d1e-858e-7719f8c9c94d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d84c4a-4c12-47ac-8efb-bd624206743a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056f0d3e-a80a-4e69-8095-afd8832f3834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd524f1-0421-4214-b8a0-e840388d5415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90e45d7a-9bd0-4f39-aaf6-f51de5f6089e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ddb864-37be-456e-b23d-f0cdfab5a838",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7fdb79-bd5b-4f32-9d0f-7da6acaec90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79a66a7-226f-4a66-9ea0-d84754029245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ae4e00-28a0-4191-9454-13fa9968219c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9374cb-16d4-448d-911e-271794aedb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32954266-2bb9-465a-92a1-9a1c4dc4dc02",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1dff2b-68d6-4feb-ab7e-ee2cd626bc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ba41cf-2039-4ccf-9d59-2c1d0ec5481c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6286077a-bf82-42ae-8106-81a22aa79058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d828cf0-3b94-4b82-95aa-1354a17c397c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e63b23-6030-41d9-b515-e1f585e72cba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab26a8fd-e935-47b5-9b29-c096db376a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a99c62-e227-480f-b6be-06c8720a8763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5260a532-525b-4d2a-a09a-09151379bdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3477eed-b16a-42de-8646-4fc0164f6e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff323e46-84ec-49c8-8f45-2d74807e4bf2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e751e3f6-fd78-4f0a-a2a8-fb03298ac8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d49816e-4e2b-4717-bfa2-bb60b4df6574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36838357-f014-4dbf-9e45-4817c20e7ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "612ec89a-1e6a-4038-bd1b-53911d8175c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922675d8-de4b-453a-b19e-11d8f6d96777",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d4c2e6-d26d-4db5-9600-2f27777d86a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aac7ba5-dfb9-4c40-89d8-dbd3baeac980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75db1d7-fbe3-4b4a-b100-3e0137abe5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf288689-275a-4df7-afc5-8b514f23b7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd03c8e-31e9-489d-b95d-0ad97759e392",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af791e00-66c7-4fae-8bae-ca2e74896bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0f2d17-e14c-4b18-88c1-84879ebb63eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55debdf3-e060-4da1-b656-43bc13898021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d460c34-f14b-49ef-b4f5-6a4be300babf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7a106e-ad5e-49d0-9af0-fd91d2f367aa",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae82e0a9-8289-46c8-bc3d-f9a91ca42cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6c8b4f-7de1-4b91-9cea-6ce9ca41753a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057cf103-25d7-41e1-9c7f-fbed078f5479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3f3d32-38c8-44d0-b746-239a3976f549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268a8e41-be4b-4c84-a459-5270eba50bca",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bbe251-2307-45bf-b620-2243f0e58f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22df6900-9693-4470-8043-0e28ee97525a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cde91b-e3f1-44d8-ba5f-a65679afc7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a0b2f3-7ee3-431d-b428-3d61d40e1b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9115343e-11e1-40be-aa55-ed390fe27507",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce73cb1-c802-4139-b908-e496b74e7d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76161b74-07ea-4543-ae8b-f8d2a45b9dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40152a3f-f986-40dc-9788-68516eef7cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "95fc62ed-a590-4ef7-9660-99cfa7709baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec4440a-b68a-4b56-a041-31e2816b2acb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf260e7-0a23-4933-8002-234ab2c30e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4feb91-40d1-45a8-aa98-f4d823dc52d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2484161f-741a-43ed-b3a2-5e8a541eb70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0486421a-1134-4503-af6e-8bb9eeb21635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bfbf9e-34d2-47d9-ae69-1a7c3b90bc81",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09500a60-3c00-4653-b703-e77b2039243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cf6dab-f2bd-406a-b254-dee2ab25fc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f0eab4-bee2-4a39-8991-98502cecd9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e115039-c524-4ccc-afa0-53b0afc259cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfbb673-cd4c-4876-a1e6-ab74a64f54cf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dd254a-e419-451b-afb9-dca5b9c937f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfd5e5b-980a-46ef-afed-6b0dd3bb704f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1de850-28c1-4705-b980-0a9ac53d5470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d10e1e-3da2-4d30-ac43-da5fa6b7d996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3178af4f-4d06-440d-9416-218faf986dfb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea99f82-7ed7-46ae-8179-31f7a31efc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206ec651-5f86-4eef-adcc-543143b13fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e982338-6dfb-476f-9899-db7d5d6b5ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb3f07c-23ea-4450-8665-1f4b7d68016c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940ec433-bd08-43ba-a0cf-28c4ef5e0678",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2805698a-a728-4d6d-8247-c930c1243e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1562e358-4af9-4b43-be32-35f738b45ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0769a6ce-1582-43d6-9326-e62cdc9189b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c740a9b-fb26-4539-b368-e4771f037b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57128dd3-690f-4b3b-990e-350df12ab8fc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9e223e-9e8a-47f0-926c-8c0d9ad322db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511be2a8-e89c-49a2-86a6-3d713fabda24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1717c0ec-dc33-4009-8aa1-7bf56fbce2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "925a786e-09e0-439a-a84d-fc764fad5e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dea1d19-6367-4d83-9452-74439c7bb1b1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187ae684-3411-4bc7-bc32-b616d3e4215a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7848ce79-d4f3-45f2-aa2a-a50478874aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563de4bb-f8b0-45e5-bc88-b7ee8edb7dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39ed1782-9439-40bb-9d12-38d0dce0bf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7176e2ea-00e2-42b6-9a9b-e2503175c733",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c0bae1-a150-4b62-8094-20d113492ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d34e1f-cb08-421b-af73-5bb163d8f75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7883c6-225c-4c41-8810-6b5e3b4c03fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6e4480-f78c-43cc-a2bb-ee2c70d5e83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecb80bd-a2f7-4c3b-8831-7122bfc6187e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad39656-20db-440d-ade8-cde9f24be754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372b3876-b88d-4e0e-9635-690c569cd8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e48422-f2c7-433a-8cb2-89e81205c0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa3b6b5-46b4-4a27-8fbb-e88ef465ea14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f6a390-e7eb-49a9-93ad-da7dc64cbf6e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f88b7f-cf8a-4ee0-80c0-19fe59d7a632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d680a4-68f3-40da-836e-790e63ab87eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d13fda-0339-423f-b19f-4756a973873f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efb0290a-ffb1-411e-9993-d88ceb7d90e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909747c3-3cf8-475a-ab24-871448d9ac6e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef8edec-c090-46bd-b75c-8a2762b0a975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30389cd3-c0da-48a7-9469-7f16fb5e0351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a15702-9736-4389-81d5-ebb03a77a5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89a5e30d-2165-4f5c-b2ee-16473de532c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356e9a0c-4b0c-4db1-9767-c4829f10dd74",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac4bef3-1481-483a-8a03-13ff467854c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a98250-2890-4508-b53d-62b2c8621eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a207b0e-eb9c-4f89-abf5-53effec5d04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "958c6b4d-44c5-4b04-bc9b-f9065789836f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70392662-4130-4bba-949a-47918a1867cb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775ba949-e1b1-48bd-a5ea-981eb8cc12b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4051b4-8b2a-4420-a467-f2d3851bc058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f53a4a-a5f1-4e71-adcf-77d129754453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfea31e-fed5-482a-8afd-b5e8056ef1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef7f9db-7d07-4da9-b8f7-bcbc88145b5c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebc6aad-1a7b-4309-9bb5-0e25f30914d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891f899d-fe34-4427-8281-3f4a23ace446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15dc259-91ae-464a-84d0-275c434553bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "855dd348-70e4-4c22-a24a-676dd9eaf17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc46870-6059-46e9-ae6b-52fba399bb17",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5827d87-134f-49b1-921d-56cc401ccbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f18a23-34db-4f3d-a497-4e7577c35c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e368228-2499-4a97-9d1e-7a86d65241ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "697f155c-0779-43c7-83f3-91659ef81e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61deb692-c45b-485e-9fdd-2b876da799e5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cf5f3b-0ce0-41f9-802c-146d8bb7d296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53364ee2-6588-4583-a2b9-44c02968e4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7b7902-8727-4a4d-aa83-6e6898ab3ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21d0f88a-2c97-45a5-9de1-ef3efdcfe11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3b8037-72bd-4f91-9ed1-175a35b52e29",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12f459b-8e43-45f6-ab8a-f9e9d37f21fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d568da-2d7d-4d52-91ca-60fef41ab888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6d157c-12f8-461f-b420-074d953c883e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a490d410-231c-44e9-a759-8d40adb46bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd546fd2-01c9-4ec9-8832-45f6ac8bcab7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3351285-ca31-4a30-a95c-f0bed06ea30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e1075f-a33d-4a0e-9c62-17a6f0104304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a003188-815c-4a76-aad8-facfed0dfb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbabfe06-3f63-47d6-9192-2dcca68577e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8b80a8-c2d8-4371-bc5f-f7fb441ed3d2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f192bad0-b19e-4e59-ba8d-28bb32338ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26dc0a28-37f2-4774-a000-efe6f14736e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bc9486-c85a-46cc-b9cd-8f6da08048a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be2ddbfd-2386-4f88-8297-b00a97df0cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920ff6c7-61aa-4e1f-89e9-77cbb1586cda",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1357295e-04ae-4e31-8016-b37d126fadd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bed680-5815-433b-a63d-b944b766e5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff12b53b-2675-49b5-a54e-e69b9347bb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "94e9c973-53ae-4baa-aabe-bf2f34997e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62020c26-5c00-4f7e-a074-97330f35b7c9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5565070-c3e1-42fc-9a80-1f641af7a494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5434092d-1a61-4aeb-8985-6e53dd24de1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b291ba-2428-4024-9a73-eba6dcb8dc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc30af5-8ed9-4720-9ee6-6ec0c6d291ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590245ac-7307-4cf2-ab6a-249d5c2cd08d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764d9d6b-66ac-4ad4-abee-4ed82eb0bb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4034e7f-5879-4668-8ada-dda3ece08c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c086298-8b8b-4e99-be60-f4b0180bddcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c8a2c2-d519-45a7-8d74-f7331e11c0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663cadff-e9aa-452b-a151-4a57c64e84d7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b12433c-a06a-4325-8b3e-b2c9b8e84238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4ae58359-5a66-40ac-839b-a7d21a97fd30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d149fd04-70fe-4799-9f8d-31120ca991ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "86c047bf-46d0-4523-9d4e-c708d10389fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5c17ea8-3a63-4740-bb4d-5bfcd2443710",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26fe246a-08ce-4946-961b-459600c13e3f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "216fb4a6-74dc-45bb-b2c6-c624a799b816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08d0055d-de8b-4403-a86c-43f81433da3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef1efd7-22f8-455d-8ed1-ce2fcd671696",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1da8027-2bcf-4df0-9521-822d009d62fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96cea21f-9cb5-4a48-b958-d600e07e0a59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e143499-4303-41b9-885a-9a4c73d86621"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "029fad63-0616-40c1-818a-ca4a6547855e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca8410c2-8d86-4059-b2c1-00c308bfcb32"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ac4a946-8a2c-453e-b1af-e1d35c05f474",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb47e97e-67db-4abe-938e-ffb985e4f2aa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ee33233c-9553-486e-85de-59ce1076ad84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b02e33e-722c-4c59-9814-1eb5c791cff7"
                }
              }
            ]
          },
          {
            "id": "3919630f-f996-4d9c-a8a5-de6bf8085e9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9c62a6f-e12c-463f-87a0-91f29cbcff16",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a8e1e04c-b00e-458d-9869-b9238b3074ca",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b23123a-b738-4b66-bd65-c63c7d0dc640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "62530fdf-5754-4fc5-9125-f3a24711ad9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4ea923-c89c-40ca-ae26-4bab769d8f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a57f7ce-dfa0-46eb-b20a-c6ccf433c0e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5db4ec2f-2e1a-4eff-98f8-5f1738b828b3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f48f3381-d039-412c-a04b-996edfca2907",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3e52872-efa2-4075-8f50-37b9187e415c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3540231-35fe-4216-811d-ae93111ed25c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f16f0616-36d0-4453-8baa-00b32deabe33"
                    }
                  }
                ]
              },
              {
                "id": "f88d7472-bc7c-4514-a8b6-46294059d1fa",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d64bb619-7c93-4a7f-af20-f79fbf8473b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aab2b452-2a7c-4327-85f1-a066b93b8aa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c50c752-27a8-427d-90c5-44a630f2c187",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b9727a9-80ea-4714-b88d-ce1e8cfe94f4"
                    }
                  }
                ]
              },
              {
                "id": "856c50b1-746c-47eb-bde3-14c299015f21",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc2f4c24-c2b8-4e10-a782-ce09b70f9781",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8f7cdc9-49e4-419e-9961-dacf11024136"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56516a15-d4bd-4db3-b187-652783bd1734",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4f45708-b103-469c-baa6-96a5dcd60228"
                    }
                  }
                ]
              },
              {
                "id": "75a728f0-9419-4b6d-8d07-2d159743e20b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bf0163f-ff2d-48a3-be0b-86075faea9a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31e9d3da-ed24-420a-926c-50c65a2794b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8fbb9c6-cb43-43d8-80d8-d47945530eda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "259e945c-21cd-40c9-aac5-b97820344790"
                    }
                  }
                ]
              },
              {
                "id": "380ce393-3644-43c0-a5af-f8f3876763d8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1382b37-e3dd-478f-9e46-c612f175f4cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2d1d965-4c51-46f1-a78f-16110be73c06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc8c18a5-5d38-46ba-b66c-ee0efcc1da56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "86aadcf3-8d0d-43a8-a740-0666b954d6ad"
                    }
                  }
                ]
              },
              {
                "id": "ddeb8cb7-10c5-4491-ba0a-988e9c977417",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f0b218b-30a6-489d-a9c5-917808b335ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "afa673e9-de39-4fed-9eef-efab3b2401f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed2fa706-7f56-41c3-b061-0c4ab38a69bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "937ff6cb-f92f-49f1-9dc9-e027da3fbbe1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b77751b-c165-4a39-ade1-9011f03595e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12749bb7-fae4-4ff7-b158-03da98636329"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98eca476-d110-4da6-bf54-310eee1a1ebe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f29dba0-1dd2-4884-b3ff-fa59bbd47b46"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83a1ea07-80a6-42b1-aa00-11d65ccaf300",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "10b03433-e30e-4757-a9f8-027132e90040"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f1e17a7-f2e4-4a8d-b261-f92a5757105b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d3359c6-4716-4d2d-9fbb-01b9e752f877"
            }
          }
        ]
      },
      {
        "id": "13681009-16d7-4f72-b2c1-cd858543f280",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ce20e3ca-0420-4c7c-9207-eb4b7d172676",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e9031f1-61d3-43d2-ae50-98c0e7a0623a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "617e62ed-0973-4198-a33c-9a06db4f4612",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf884c2-250a-40e1-b546-141dac5af0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa502611-eec2-484b-b1af-5938930c9dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab96176-7e6f-483c-9247-f9fe605c80ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c60190-1bb8-4b18-a525-077c620b9ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35582ce-5848-4d25-bc26-518d3464d625",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7910dbab-4a7d-434d-8ae9-a124f82ba1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61bc727-2377-41c2-b953-a808e39faed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f8fa85-ca2d-4291-8ddd-559337b309ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5624ca47-9fbd-4420-a637-463b5cacf639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1be09f-c77b-4268-925b-8eecae4c4414",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a17b69a-8943-4acf-a93c-165da9a30cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2c42c6-c6b7-4761-ad1f-3c5d0605f1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf664b25-aa9a-4bf9-be33-e9499e255770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c64756-484e-4f88-86f2-13725d403233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9deacd-bb13-4419-b6fa-b3faa8444038",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b7dad7-69e1-4bd2-944b-60f180471a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40ab743-5fb1-44cc-85b8-b8b1e1683b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d625b1-9838-4ed1-b314-6e7a99a44409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a287e1cc-195a-498f-a560-815ee3cb2f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4f8f6e-6b55-42b8-9c6f-66c1eb0240b8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f8a54e-c8de-432a-ad47-957999cd1583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e59d6c-18d9-40dc-9147-1611a8362af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d59d54-67fe-49cf-aea4-ac7d6fbfa257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a3d381-470f-42e3-bea0-fa7c656bd7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adafea4e-4966-4450-8690-e243edf51386",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b895b8-f0a8-4241-a7ab-c28e31d75056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113e08f7-225e-4b62-b794-f874589ebf5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bfe4b7-2f74-474f-9e5b-3555a34c5268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e07c7707-3049-4046-9057-89acf2648976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9870cab3-8842-4c05-a9a4-28be5518ea35",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a6cb1b-c2fc-49fe-b06b-c647ee5bf056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a918d517-5ea9-4508-80ed-99cb523d84b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a47f8e-aa42-4d0d-b8bb-e86ae0779b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "68695552-f469-4c3f-9aa7-cdabda85393f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf9c2ab-abff-4d46-8dd2-af0a7f8dda97",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24602657-87af-4048-a19e-bf4e1caa7c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78006d9-27ca-4ed2-b63b-17a643d1b487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1b3b5e-2d07-49d0-847c-e8b4dc19bdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5173640-435c-4329-985d-b59b75aa68b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0114a06b-16db-4639-a947-2b57a532ab0d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb751758-7b23-4158-a0cf-b0282e4af141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca8e6a0-1941-4993-b8b8-fcde8dc91982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e60afc6-9f9c-4d8d-a710-bb2289850288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46667384-5e92-41cd-ae5d-d115397ac84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3855b82-28fc-4ac5-8bf8-0a77e05f31bc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adf15cb-e3f3-49fb-8b44-c01998b2a2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10f8d83-00cf-447e-88c9-deccf123cfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4d3d44-f854-4342-87b5-028cc4d7fdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9729929c-ca93-424c-88c6-d478360a0692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de255d09-9355-4abc-abcf-310c67e04d3c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b899f1c8-b3a2-4044-bb00-12dbeb1e04b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b46468-9197-4f9d-8302-603af38c9d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0101ceb9-16db-4062-bd49-d5cd7171ec0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f02bb530-4ebb-4dc5-94ff-0a168a41b2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b24b176-8226-4322-93fd-67cb8822deb8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e591b292-7aa6-40e8-9f89-d7bb219e3c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46182671-7e47-4ee7-a7e6-b6d788241e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a647412f-d2e1-4456-afa1-0c91c998687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c32e85-14d5-4b04-bbcd-ea59b02fbc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a781f9-ff7f-417d-8d9e-248eb505cf0f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6006b89-37e8-4cc9-b295-d051bc9dc402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf66b04-57d8-483c-96e1-bf4668b52612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e94f123-7bbf-435c-8d1c-08d0764cae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cdcf5f2-a5e3-49ee-bfaf-d30db65feee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58dba20-2f33-4786-bf5e-1a9a9472b766",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22c46f1-877d-4bf7-b9ec-1aab5122268d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12561a1e-c1c4-4ba0-b23b-6cca99b1f9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e883a571-664f-4f04-bb18-af5eb8d39c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b06437-5311-4c70-8003-9c1cce57a27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf9e12d-d4cd-47e7-93c3-e968c14a3455",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8fbd10-9a52-4ba2-b106-d7182ec9c041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5ba4ea-23a6-4fca-8a8b-c32d6e9a1b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209945ee-d99c-43e4-83ed-fad3601552ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbf6e79-d1af-4cd4-80f1-eac1f4bc0b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b468645-a039-4719-a78d-80cf4fd2e3dc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad75203-ac4d-4f23-a10c-80e711d81dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2bcbe1-7df5-478d-8132-d8d2285c0fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962ed892-dbe4-431e-996e-7d3fa926e273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db9d7cd-665c-486c-b8f2-742ffbbad006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ff2ef6-f021-44ad-b75f-423dd4b01ad3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f20da46-aae7-4580-8dc2-93963320cf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5385c496-d96c-430c-b2c5-a4cc3d061c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5629b878-d0be-4317-a7c4-ac5bb1f438ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "34786ccb-2848-447b-995f-9ab3c996909e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064026d0-2fe9-410a-aaa9-35005165a03d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61bf573-5f41-45b8-a7a4-644c3a207e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7732f50d-7572-4268-968f-6ee749f20950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22cea3d-0fb0-418f-9493-4b6a7b6feea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb85869b-b04e-4ee8-a7a3-53edf0ee7f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea85c11-40b6-447b-b481-57d5c6abc723",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439489ca-9840-41e9-8725-1f3b7f31c975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaad7e32-f6d3-4d6f-bb32-50ecccb330a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f31a36-4608-4c69-8afe-5a3ee86a8a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ff3c1d-6fe4-432f-b95e-6db1138d6a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01795c36-aac4-4bd0-bf42-f8ebdd5ada66",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbb17e8-1e2a-45bb-bf66-0c8adfd6b77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d64484b-0996-447f-8093-8063ff1d7acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1212f901-d767-435b-be04-325ea5b50acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53cd97a0-d5ea-49e8-8b3d-9242645a46bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52670366-8160-4548-aee4-c405bfa9b26d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edcd1d2-2e21-47d1-a262-fd3da2564952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff78574-0fc3-4655-aa44-27f75901a4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445acd01-b690-4e08-8970-977e61f7a565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d314044c-daab-4e9f-982e-c5801b1fde57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e0894b-c877-4707-883f-15564cdc25ce",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7bb7ab-a916-4005-98aa-9c35995a44a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f985a45-4c8b-4870-9f9f-de26cec6220f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207b6410-2dc2-4530-be1f-ffc78f90978e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "295edeb4-68e2-43e5-8cd5-f1afedb55baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65590043-6d90-4b78-a015-6567e26a0c0d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e960b2f-6ad5-4205-8b94-e9fcaab336b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c7bd50-7adb-4572-bb4f-6b87070eaf55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55de5fbd-4444-4c26-96f0-1942e2804936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17e2861-94f9-41fa-8aa4-eb8d49f21d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118fba2a-20cc-4752-8c9b-a82eeba1ba19",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4541fe98-3359-4076-a86c-a4eead501d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc0f9d4-a7f0-4b31-9ce0-5ee65f81bcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506f33bf-f84b-4427-88e1-5104d22732b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e816a32-0084-45f4-b512-3ef7d2401101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6740e0ee-089e-4c18-bd8b-7e5d92123c6c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c4af74-75fd-494a-bf05-834f1653d492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5aa6872-5645-4779-a389-0f4561660438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804da1ce-4ec1-4f6d-9050-ce8cecee0cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab01da7b-612d-4554-bfbc-3f656afe6693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeaa6e7-9511-43ba-b973-0d47e5853945",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254636ff-02d8-4e63-8fc6-f45e4c7ec645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd46faa-88e4-4adf-a981-adb152d3c6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad60a669-2a36-4c61-869a-17b3ca312abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80c28030-d4c8-4890-95e3-e1f568062a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6373d4ed-82e3-4f1f-ba90-40e2d692b1a8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9eb340-d2cb-4786-bb0b-be7ca2b462f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb2398a5-8691-4714-9c1a-e55eb00a9cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df0e4d0-4baf-4c50-8e29-5b9a71b2b15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "848aa412-4710-450e-9816-d56d1d188b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc453d56-44e3-4119-8e09-351e306f3cf8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2ccd82-5e73-4431-800d-34593621bc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f635e29d-ccec-4bb4-b9ab-347975f52f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3baec99-e9d4-4698-99f7-ae06f0585428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82040d46-b3d9-40c8-b345-fcf2ce714b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d590f2-7f5d-4d64-bf96-f557a482be94",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54437396-7e83-44b7-abe1-c1b36c04f763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2b00bc-c0f0-4e70-9188-2fcb6a8689e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3e4d4b-a3c4-42a8-b4b8-6ac64b8583dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9606e130-46dc-4c22-928e-4a20f7f38748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4647e6e7-e4bf-410b-b6b6-3e566831653a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a02f2b1-a4fe-4354-8bb5-49d914e83130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a959e3-0b8a-419f-a81b-80f7045fd38d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbd6315-02b6-42f7-a5d5-5b76f6f6100b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f415ccd7-a985-47f6-bfe0-ace65647bead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4f5c83-e2e0-483e-bf59-0319b9b80291",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fd8ef1-b85a-4138-a0c4-6302e48045a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e68edb1-5fd4-4380-981a-c6edb70db87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7db432-d131-4c8e-a5e4-3468e13516bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c15707c-8dd8-4743-a109-726332368dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f7c859-b058-440d-bec5-75bd043d4126",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872bece1-8e81-4137-8678-697863565a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab312b4-2a54-4006-a8f9-5d42091230da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b2c7f2-989e-40ad-928c-2a2a15c85183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bef7fdd-72aa-4a26-ad4d-5e371d44d691"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db4f70b2-b9c4-4050-a77b-0895fc8713be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc5547cf-3285-425b-a36b-7f1ac5bfbc36",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f953763-f5f8-4176-b765-02300aff4d65",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "85254fdb-191c-4a57-8fc9-3c6a39e37218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f428be9-aa03-4169-8aa0-d5c805c707bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db619288-0da3-489a-b28c-5cec2626da64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c6f0c1e-1faf-4293-ac1b-8ff4edfb9bb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7630cc54-f482-40ce-90ab-bff17c2584d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b2e8880-80bb-4ca6-8dee-81a7039f341d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebb64328-4526-40fe-9313-40d885cefee5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa263544-9576-4f0e-bc55-f51c24ba588e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a9598619-00dc-4128-a531-6a285585d77b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32e56ab2-bbeb-4ccb-9bca-53f334b23900",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42b1846c-223d-48cc-88ad-0b51530cee70"
            }
          }
        ]
      },
      {
        "id": "5e8b4133-4e64-49a1-b82a-e89d1edcc359",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e392835b-02c5-4091-a136-f2781313de2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57767390-e70d-46bf-93a8-33dc9863f9ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e8ddee34-4c3d-4f2d-a200-1443fdfec390",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23fdc0c-3e95-4cee-9164-29680d710446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d8c17d-d6a7-4d31-b72b-a1f8dde49392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4743b4-1b09-4694-aebb-c38bf6071069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba313e8-0357-4ad8-8183-642e279536d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f47086c-81cd-4416-b2c9-5b78e7e80060",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b81bb2-c126-4b7f-8ace-b662ecc75fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97c2c67-3901-4a77-a176-44b83a0eae53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaae434-ba23-4907-bc87-965d34e5ef34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1addbcab-e2a3-49fb-af80-0c698aa68a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0a4562-8a2f-4203-a4a2-a7014c013064",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab60f80-6e28-407a-8033-096b373960fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ac4066-667f-4023-b9c1-abefb13cd087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31875ee3-8ba6-487a-b96b-63eb84a79371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e573d8a-c77d-4566-adb7-946804296f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a19769e-34b4-4e5b-a903-34bec58cb5af",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abef5cb2-3ce3-47eb-843e-90e22245cca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebfd1a0-143f-40f3-b682-50538b05a242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed56a949-eabe-4433-99dd-62cfe4d863c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1c4850-582e-47fa-a82e-1d9e156346b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c47a8a1-f8fd-471f-af0e-f1d3d8e61606",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c66f89-17b6-4560-93b1-7e43335fc85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f5efa2-2f84-42cf-95de-d92ba695c74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ec7cb9-6da0-4875-9827-4f45ff0565d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb2d700-d477-4083-9921-6461948e7c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71146fa3-5500-46f0-98d0-9ddb31c57935",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528b03e6-ead7-4bb2-b3ce-5fb6eae9512f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b155e8-ce89-4944-a430-42e42d0de42d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fd9068-d0db-4635-b572-d40ac7f89bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b49a9acf-662e-4c11-96d7-7c05a487b497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd585b8c-daf7-4f12-af50-8913f907951b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b888af-b8dc-4706-af9f-45be7cf6afbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c35226-d0f0-4d5b-b340-027f331061ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4397c553-645a-4811-ae9c-7b3d751da1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc698841-942c-4571-8121-204bf38f6f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa182ef6-4c7e-4768-9334-ff494f0d8515",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e653765-48ac-48df-9a13-3844729c6c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91f5349-0ab9-4f8c-bc1f-77b971e4bb40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a7ec48-43e7-4f52-9066-5e89521c673e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40311306-7739-40e9-a08e-f83669239f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f095b3-4d55-4d97-a015-3855fca2d8a3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5dd323d-394a-43bc-8a67-cd74cf1bfbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac00d218-7d23-4896-a07a-cb296d970633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82163281-a5a9-4cf8-b067-9618207e193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e933a8eb-b160-4cc4-b326-125c68aee213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb061a5e-fbb9-49cb-8a2e-cc79b3393383",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45130f9b-78e6-4cf4-97d1-6eae5da9944f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2b45b3-c9a8-4b13-9eac-98f4d9c1d697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe17c38d-74f6-4c7a-8e34-88109d195cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99d9f01c-1fab-496c-8b9c-5473e7a65e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460c4cfa-5cd5-456e-ae80-7735597706bd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90efedf3-49bf-428f-be31-f85f969c4224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9c1c68-2711-42b6-8c7e-ee669726977c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3b3298-19bb-4b87-900c-93d8d79e13a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee561f3-52a4-4002-82f7-9c62dcc0511d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36773998-ec95-4bbf-9142-405ae0381daa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd60330e-1beb-4df1-b50f-e8cec1c7800a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd45eed-17e1-461b-8730-06b23edaaf1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81df5ce-c211-4f4d-8896-ea97d876e148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "259de861-b6ba-42bc-b41c-aef122b69696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b77f6f0-b426-422f-b97b-c17168f471ab",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58e71e3-613b-4884-b587-b71c2e4fd6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6df688d-ce96-4ffd-9d53-b610f72113aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e939316-3ac1-4aee-9dba-c55ca1999112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e537a2a2-e45b-43dc-b957-7b6d0e17fb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224a82b6-d38c-4194-bde0-ac913d7b4657",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88877362-f8f5-4e77-aaa5-6c5094269cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a911367-52ae-44b3-8a4f-8585fb34cc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1d62e5-0a8a-4d09-95c2-a9c69dab11c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd31fd6-e20e-4ee0-9852-0cddbdcffd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f158fa15-5ace-43bf-8baf-acbba128db78",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186a572c-cb37-4a8a-bea0-2dba76abd5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b87556c-f3ae-48b0-8273-5ceb3ade346a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150d4038-0d66-4a6b-8e67-7690bdcde9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "67529394-a1e8-4db6-b50e-6a8469ac337c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b7b4e2-c42d-4f01-a4d6-dd37b0e0cfad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d46e30-f465-413b-822a-159e783ef61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6764f0a9-46d3-4bb7-a7fc-95a0c6cb8570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64010d18-e09b-48d0-ab98-e3ea0df4b818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "653f773f-565b-44a3-a28d-f49ec5b4ef44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26025250-54ee-448d-a3b3-cf3239a9d37d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02ad285-2f3a-45d7-895f-18caf8b74264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38ca13e-cb3e-4633-85e0-384a514534d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1858e7-aacf-4f7b-bf86-ed149072a260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec34dfb-94f9-48d8-ab01-01b10ae85bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d4c45-891e-44ff-9fdb-320a70991620",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1364c9-db31-48ab-ae47-0f3fdb6c0ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84539742-a9be-48f3-8de6-0a4cb7816ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3e2f09-5e6b-486f-8da2-bae25941e531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a18a99-ef37-4223-ac9f-0a8e2fd7bdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61324681-e5dd-449d-9961-d57f032aecc3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cdce76-f835-40b0-b125-3da99f9a10bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7002f21-7c89-43f1-a76d-452647638c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d0590f-4f05-4119-bef0-ac6efef1606f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2d8d58-0286-46ab-a703-ea44afe211bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb36727b-4422-430e-b787-6cf49224959d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897e15bf-9769-4f85-89f8-a363f20fa1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213f9ef7-c357-4c6a-ad88-ddccabf6de3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaadac6-e0fc-478e-9d41-b1d2e16e1036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfbef5a-bc96-4789-8d73-6512c5cdd0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede5241b-1da1-4423-ba2a-23adc7e698de",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5659d540-8672-4149-95bf-d94698b24e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f55949f-bf07-49c9-99ca-56537902ffb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41218cab-66f9-4b07-953c-8e6512a750b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4d5ed3-770e-4ed3-90fa-2517dc8bb5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdeb944-77eb-456e-be81-c4e3e97f76bd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531ff39d-c683-40be-9d5d-4636dbf2c1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1a9d09-ab0e-45bc-8a78-555a745d9057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3992f6-0115-4d34-bb60-ea40c6763a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fabb3972-7098-4135-ad3a-bc1e89e1cf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada35f93-24b5-4b86-8e0f-9d7d16bd7aab",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eefb632-7efa-4e1b-8e8c-5bc184ae5721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba45610d-e432-48fc-8fa4-f86d6a9e67df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce2fb1d-e1bf-48ce-b95e-b866ba3cb461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1ef80b-4479-4a32-85ae-a71cfa129ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7ba02c-04c9-4e34-b40c-2c40bdbc99bd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea886cf9-d2a8-41c3-a153-3f74fc1bcd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048177fd-87b5-4be9-aba5-4f66a8827b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c26c794-f342-44a7-895d-84c66b4e54e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b99b2ab8-a584-4503-b7fc-4216a146ea10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889c4a85-ec73-4a95-9359-b5db45017179",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c02e63c-92e9-422c-bf73-d96d15607387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d73f3b5-1f53-4190-b86d-d9111d8fb896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34701e01-9b0e-4bb3-8fec-bad179a6b963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d4fb71-a07e-4d6d-9f1b-c26be9cfe53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a349a97a-3d92-47f3-ad43-34787ff091a1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0cd69c-7a93-4fa9-98cb-c48262d5be74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db5bb88-794b-467f-a638-c4a387e9e1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08659333-49c8-48fd-91b3-2c2e6d9cf5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e42a0df2-a1e8-447b-b0a0-2d3903fb6393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960e545d-6cd7-4ea9-94bf-2ffc47960814",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afef578-d7a4-42d3-83b0-59ec4d20333d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da43592-9d3a-42f3-a8b3-d8cea3aed5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a794e4-42ed-45bb-b169-1dffddc2224c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d15cd5-ff5f-49d3-b8a6-c4f7c19c124b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c728d5d1-6a44-4d9f-9f05-e40dd01e9cc0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8e7181-53e9-4fa6-b8c5-786a784b6812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d072da-7a93-46cc-9a4d-5588ba83983c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a51cb5-2328-4b4a-b563-aeede17225a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8530738-fc29-4967-a5c2-b222c57013e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a0b119-2b9f-4048-8300-ca746d8c71ed",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529c958e-b021-458e-b9c7-803ebff6b19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940f2594-1cfd-4994-adf0-ae5f4333b32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7022259b-e308-4b71-a74d-b0a6986c60f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49d59532-fcda-4b49-a7eb-3d9832eddec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1f4f4a-f9a0-463f-85e0-9d69529a13e2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829f2a97-13fb-442b-b36b-5755520f9737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4802e7-98a3-408f-8aca-a960e96fa66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3c8426-86ab-4ad9-b465-30b0aaddfd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "057ce9cb-8349-4a33-84b8-91cc9852ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0c8d77-acf1-49aa-ac7b-0268be66244d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885ad11d-6953-4f8d-958d-d52408422983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949169ea-6926-46dc-98d1-f0ad5fb3be21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e52900e-4166-4e41-a540-114d4cbc3fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb7bac0-f8dd-4c24-a55a-0819083ed280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23221d06-aeba-4c3f-9db9-d743b6759220",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f602e9-68ec-4d1c-bb24-204b31399ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de531e8-658b-473d-9e76-9c432d40f501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a195605-5fa1-430c-9d72-ef6aa4f89221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af3ef61a-a3ae-4441-8952-9f7ea3f83614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04d44cd-d116-470f-a532-eedaed21713f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b11436-1f24-4f96-befa-3eef8a1f6902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6789d5-8b94-4c2c-947c-e84e72b031af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216b5de3-ccde-4432-8f12-885d85ffbc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab4ef66-fa07-42da-bf38-8cad401ef082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dc2664-3a28-4ed1-badc-cd424faf622a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd88e9b1-78cd-4576-9c41-f711c3089fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026e3e38-4ce1-4f70-a5c7-b9cb6258bb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96edaab9-5bdd-41e8-994e-eea9e70b6e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f45745d-54ac-45ad-96d7-f782d6756f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60d7060-c3e9-45cc-b602-9a3541b5719c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c67e11-d0dc-4f99-9fe0-ac5174b76af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b989b6ab-1833-4a7f-afa6-f880324c03f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5277ed76-b96e-4089-9d7f-94cd9c3c19c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e384435c-812d-4ba1-a7dd-617081807baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94d31d2-3c4b-478c-81d4-608e7786a8c9",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559a12e2-4c05-44b2-98c2-62c20df57e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8765c33-8ac0-498f-8159-cc59979dd483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73133d0-c433-478e-a363-3d6715499907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "627fabbd-3060-4400-82db-e81490a1c343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b930abff-09d1-4eb1-8a6c-96aa3bb02b2b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8db27f5-bffa-4c70-b833-f4868b56d2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919451db-7ce1-4233-812e-e1b515951100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3294e77-3150-4891-8d6d-76cd77ecdc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f36d0a4-7d49-4da9-bf27-f055ba18af21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7e618e1c-9114-4ac7-a59e-1cb180197b9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "052fe8c7-7e5e-4e57-be70-70ccce3c1f27",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2df100-de38-4822-ba61-6df993530389",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "af10dea3-95e7-4500-8e7a-82bc6a61a243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaabc69-bb0f-4cbc-ab0a-76d64db02c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a02c9a21-4849-4703-bb64-7fc6563d3921"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b045b7be-c525-46f9-a07b-d90b36dd8c10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bdd80ce-733c-4232-871f-2636d557ee68"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eda7ee45-a35b-4b87-ae2d-0abc2fe8fccd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0fed8bb-dea5-41e7-afa9-57d732184855"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2a99ac0-10e2-47b8-baef-15242e1a5939",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "68c8443b-f54a-4a69-b7f6-b2643ac07419"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90b4b1f3-3280-47ce-b439-93952b08c61d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb81df75-2807-4e41-9189-975740d336cc"
            }
          }
        ]
      },
      {
        "id": "6bd1b5d1-e9bf-48f4-951b-8440e023c5a1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a70841a2-3e80-4785-b8af-1ca7b8d8d5e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a8c153b-beeb-487d-8015-005265629c15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d829d4f4-5a9c-4e26-8645-663424a2c6b1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cddb30c-5bbc-4afb-9e8f-86273dc40245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87453376-8433-40de-9401-0ca5595549d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89846832-e9a0-4d3a-bb73-ff84d4d483b1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe649f61-b139-42d5-a333-4dda2ad8cabb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341c7e08-410b-4e17-8f2d-dc6d27a5f9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a2f24f-5a75-4521-af46-92e4f7b1d677",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfeea7dc-a36c-4da6-b0e9-51d2a8981460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0b56b7-81e3-437b-b81b-52497de6f741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bc6e38-ae8b-4639-839e-da2cce9303bd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a92951-3fe0-4f33-ba5c-f9cc15ab9856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36e7ea1-6056-42cf-9626-8979d9a9a05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c79e79-d523-461d-8a48-59a37046952d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9844117-06cb-49cf-bec2-997551504b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be80eb64-1cd5-4f6a-8e7c-1aeac96967a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1acb8e-3a00-4f79-8840-4cffbc1bd9fb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc9711b-d775-4e40-a9ae-d0c4525622da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a615ed42-b79f-4949-b547-d7b67620189e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe085b25-9e0c-4d69-a5d2-85f24f1102b8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6913dfdd-82ab-4c86-a10c-0f7221279c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cc83d2-90ba-479b-9adb-5cf861c17caf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc64cc2c-ab75-4022-a569-6d42ad0356cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf72e49-2910-435b-b2ae-df4118202252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc37e583-9dff-4e91-a0e6-ea11d8420dec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbee06e-eed9-45bd-a843-8ef43280d641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f233e3d-7310-41b4-835c-5169369ada7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c425f28-ea63-4658-a8e3-b9025d872b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b457971-47de-4860-be77-eb705d82c6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e9a77a-2af3-4ff7-b065-7c3d4883bf31",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f07d81f-e0fa-4992-9ca4-18b9b8ce9339",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7982e675-bacd-4475-8586-a52580337840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbca2766-92df-4e03-b95e-021e54a9a8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc225238-bd63-4270-9449-c8932ab990db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243a7b67-e98a-4feb-a162-5253cae4f72c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1b85e9-cf95-4578-ad16-729057d73906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3081c642-2b9f-4069-9eef-d8df047457cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d5c8a7-00eb-45c3-8881-99704767366b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a116ad-688e-4472-a595-1fee761f0b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de354ded-abf0-43aa-9039-2caa64e9e0ad",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530f6c78-2a3c-4e1c-91a6-21eb475232f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2892d328-22a3-486c-8f33-456d35f78c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22db10f0-9af9-4da8-b0b9-4b763963f420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6404aa-383d-409c-b09e-e712926ca09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4790c51-a76b-4fed-ab85-b8dc717deafd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98fc579-87ab-4c59-8c02-7063d104342e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778a7883-32a0-4e96-999f-b090029b0a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415a2e64-9669-4b9d-9413-6324dac0fb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb31a2a-d918-4764-b6a4-6e518c78536f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f27451-77ab-40cf-9bc7-f680261e9e80",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110b1a31-41c6-422f-bb58-d0401e077cfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae889c8-5904-4bf7-be78-565012df4658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ff3bdc-d5df-481b-bd23-73fd577d0788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace8f912-6a27-4711-8a9b-cad0de39604f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf0d313-5b63-48b3-87cf-8933d511c302",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b1102e-11ce-40bd-bb92-95f00de6b081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea14aa6f-f8cb-4f64-ace9-3b6c2f9e7ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55479f51-0170-46d7-ab08-95e28eb466c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a19e20-0e71-4c10-8776-1a723ec03a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0558c51-4d9b-4466-9f4c-cd791da0a6b1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d05f8d5-1d03-4db8-a9af-7d31eef090a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a92e6b4-63a2-434d-ab91-eac61133faf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbf9b9c-860f-4c8e-a148-82504d87f2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7915c6cc-7943-4cb9-be3a-5b1c494e375a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011f0ebe-1c63-4f4a-89a3-013675f861c9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a789bfe-ee5f-44e6-a68a-3e294b04f4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3068f573-df9c-4b2e-85d5-6e279cb901eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b08a82-b5b5-4a47-bbd9-99c4f77d63e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3115ae1f-2d96-423e-a1d2-f3ff392ea4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad738f37-98b6-4108-922b-934c2f3235a2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc1d936-e439-44e2-b1af-d9d7191a134a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e70d8be-b922-4f34-9de2-fd3fcab8cb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d983be-cf1f-4415-90eb-b2e182cd7b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae1e622-9ff6-44fa-998e-9da4b769ebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc3eacd-d084-4755-a022-68ec7b382a46",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b21e37d-2ab7-4793-8409-1f05c6c52725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517a05c8-f619-4445-afe9-a2ffb2009783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb461f61-afcf-4bed-aa84-2bfe301188f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72686645-3ff8-4053-a12b-8e3cf9261ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642ba9f7-608a-4c3a-829c-3b4cc6240884",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e5dc91-2c15-49c9-8d77-909efad2da07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe9921e-40fa-47cf-aab7-8d5cd805e6c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8209e3-a303-4142-a308-e9c24f8d937b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0fceba-a497-4995-be7d-512e73023f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d38251-275d-4f75-aa1b-d93fafc44e3d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8103ab8c-9578-4fbc-800c-d9c1dcee7126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06942da2-0a52-4ef7-a545-3c51cee06701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931db8bb-1c95-4d10-b2ef-d730d38df170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c862e89-aed5-4ba6-8959-5a41acf680d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5bb58d-bdbc-40fc-ad53-61167c45ad2a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11918a1c-ae07-4ec4-a318-3dba5d5252a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c81a5d2-044a-4baf-94b9-9baed048b01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d68e55-8bf2-46c0-8e1a-9cc851a27a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bdcd406-3f24-4667-89c6-5a5ea3e83b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466c7d43-4092-47ed-b4ed-ab276e7a2a6f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3018b9c1-79d5-46cf-8b1f-cc6f1fa85042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad572cda-6419-4962-b6ea-1df35cd9c9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1eafbc-fdcb-4cb5-9999-a1dfe0732c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104dffbe-55b9-4b90-a4ea-63862b6b56a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba1dcba-140d-41ee-8143-b279dbd0d4aa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223b9454-6757-4844-8e06-5c88bd196614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e7176f-9bb6-4482-a83f-00acf286f50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc35c09-1ed8-4917-a5e0-206ee3c9fa11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6767e08d-8cc2-478f-bbd3-940b86893570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad71ecf-1bac-4d94-8d47-9c2f0219fe5e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae99684-18a1-42dd-940e-d1945d1493cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4256f90c-4bf4-488a-879f-efdc42e224ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6353f85b-b861-4665-91fe-f58477edc398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f1fb1b-c18a-40e9-8b1d-1b8853244122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681a3a63-6b2e-460d-81b9-c25824032e20",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f39c467-976f-4c28-93c7-fd6a45d9e3ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d4df8f-8221-425c-8c91-1f81467a5988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6537f8b1-7ed3-4be6-946a-e8592972bae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b00280d-6a94-4292-b33e-a445658d8b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1162eaae-52b2-4f3f-b15b-eff4d1d501b6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1177b48-a717-4980-9cca-8e6e9a4b664e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7e661e-fd85-4b17-accd-76ce7dec04ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ab337e-11e5-4901-9bb2-9c604ccdb242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b66490-2d85-4e18-9111-4e0fb3226367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde8ebf0-d420-44b7-a405-ecc05dd07d9d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a09d49-3ad4-4215-aacb-e700c73b05e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c365e2-4c7a-4b8a-9bbb-4fc36dff9032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f496db37-c56f-4c12-8c6e-58f5fb7ae28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc41657c-eb30-4cb4-94dc-9dc361e43183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9622225-7e0d-43a7-866a-0f163138b5d0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa53cb0-6234-4c8c-85f0-82239a2c7746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb811e9-5be5-41dc-b821-3dcba451e7a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02825433-dfe0-4f5a-a3ed-0f8b6cd979d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584a7216-ff31-499f-a165-daaa329f2ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7152175a-0a16-4017-969f-04cf5169e0b1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc5ec3d-b6a2-4a43-bcb6-fd7f1e2ce88e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf16abee-22a4-4c7c-bbf3-97864b08ad04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d555af9-19a1-41fa-bc8a-e331cf75cd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9cb020-8353-452f-b7c9-faec9dc5a9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50565bb3-4082-4f02-b7ff-056e7ade8613",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e948137f-ab39-4850-88c5-e7322e9ebc68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "298fd09f-9392-401e-941d-7404c109d322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12de62a6-a60b-4d61-9914-29978664c583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a508d4a2-a233-4763-ac41-43773dc26432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1180e0d8-8569-4095-8a61-34dcf8d8f649",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115f10b8-3e42-40e1-bc49-0542450b005f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b0cbb2-e7b6-4502-a5ea-fbc7a28e9669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad7d517-1714-4db6-9e27-999597fab3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664f79af-459c-4174-b510-83cccd3709d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8a27a1-9638-411e-8171-7b0835197eb2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fb0a99-04ed-4984-97ed-79a86a5e226d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d46dc9-fe9f-450f-af3e-6530dc9eec22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6ee232-d937-4b16-a4b6-69ed074af764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d7681f-6c8a-4d74-9ce7-331183577355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b446d965-184c-4e79-8ab3-77399ffdab4f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4289cdc-6aa9-414e-b302-da7870254e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6087cd2a-d87c-4e0a-b850-ff1fe79253d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d90994f-9add-42d3-bc9b-7614051d591e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a58973-204a-4c9d-babf-4dac0a9ae352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f34c99e-7b94-41e7-a74c-db9bff69f8b0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0bc376-96a8-4a43-8382-d18bc5327114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cce34ff-35ab-4e37-914d-367a14be979a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0b5a36-edf5-42f9-9703-e6d9efc2860b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f062b11-2b80-4303-912b-769cfd383161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272bcf2a-0486-4421-9437-a8e8c5b2e012",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494af8d7-6a4a-4357-a6e9-8750f5486387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238df645-5f06-4c8d-b2fa-7ddd386c82f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b86c0c-110e-4d93-8257-3d95648c6fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10751c3a-a7b7-4b3a-ade0-932733f40ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a038a1-6520-41fd-86bd-9e4884a6fd3e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95aeb88c-fba1-4161-8515-57f9c18a3aa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4269c463-36fb-4f9e-8700-56b6c518eba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c83ae8-09c2-4acf-bcab-77b28fedaa0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdaacf02-bba4-410a-a01d-9afc894697bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04bec4e-792b-4693-a7ba-9d72a9bc2154",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57ea048-2901-452b-bb6a-9481c3d9b84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da254c6-f4eb-4538-bed6-2bc90fbadb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a540792-c6c7-4449-b16a-f8392943ca96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72ae35c-68e7-4ac8-b8c2-e97f7e097038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21d3d96-7964-427e-a2b6-22be2d5a1020",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad7b13d-f7d6-4096-bd20-7ff79f88557a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf9a0ee-5c8c-4e53-825f-1c0d64584b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24f84d4-5a88-44ea-8106-f1c268bfd434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20bc7c7-eeee-4101-b06f-bcee3c13317e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1e76fa-5a7b-4875-88f2-dd4dba732883",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427c7559-a3d5-40ba-a29b-3e0bec56bf2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a134e2-44a9-4be8-a890-825dcc30f8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a7883a-17e6-4ea8-8859-972ee183ef2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b070c2-ebe1-463b-83bf-7721466c06a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84efe282-3ed1-456d-854f-fd7c677673b7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0046fe-b448-49bf-b22e-74b019effc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c3d823-6d94-4d6a-a975-506d77f1208a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456d1d2f-5e02-4344-8468-15fe3bdfe302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff27ef35-a140-4292-82df-3378860aeeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bed6f0-0e4e-4a0d-a7ea-28faaf233559",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5d6300-170c-4e5b-bfdf-9527c6961a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e010b22-be05-497e-bacf-6ee66ef4b788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb3c281-32ba-41c9-aa87-55b7a6c9aa14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0734d3-7d38-4156-9aa4-0d799b25b311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414f5d6e-fe4f-4eea-a0d3-136b054926c5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e23a81d-38b3-4aab-b386-79119a7c74cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e703fc7-6914-400d-aa1e-02445ab83adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a689e7-6cd0-438d-a0bb-74be04a9bece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13cf6a63-f52e-4a83-bbae-40db265477d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f39f6b1-d4a5-488a-9560-0c151d72a678",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8001de2c-eb5d-440f-8bd9-4232d87baf98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92eb9f2d-23c2-4727-9b2c-4c275678e0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2f7610-42f2-4961-a536-6a45fd1a86b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d96121-756d-47ac-96bc-e2180508fc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc36c65-9c84-45b7-84e6-7b45011b4a72",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa961d3-b687-4c82-a696-619c5b78aa70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de4a0dc-89d5-429e-a036-e18f6854c405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d96c678-00d2-4723-9990-e7efb0689a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9c4639-8240-41b0-93e2-84cd0ffc9b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644452a2-842c-4680-97e4-8663d4978829",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae24fbc4-ff4e-454f-b207-d398faa5b5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487c9346-b31a-49c3-93b1-e762c027af89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b62f62-da9b-4f52-b995-1aeaa4d5c7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b82a8b-f5de-4ba3-81bb-4ec9ed1d1a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659e23a1-f70d-433c-99d3-8077f283efc2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d51fbc9-4893-49a2-ba50-8cffea96d2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2ac5af-2db6-4540-9bc8-a145e9198478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40da35d-6701-4bc6-bc0b-2d5d6f1100a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e182002-0734-4e4b-aa88-897db46fd8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7294be-9b00-4f81-9b6c-52e27e985e21",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd014566-1fef-4a17-99dc-7f40e7aed7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fa331d-9781-4c77-b140-d02b3c5fb9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270f1472-0669-482a-bce8-eec297ef29fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89988905-e76a-4b04-9e98-4d972f674f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adbcf0f-8f7d-4268-b23e-033875bf5be8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e826423-042b-4405-9dd0-99af7338cdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc3884c-5d7b-43fe-ba74-10ca9a4b27cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968c240b-80ed-4cda-8c7d-a1f1ab8f430a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a390cf-1bd8-42f8-bb89-6bcb93481dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f911d3d6-f91c-48ff-9f15-05ccc8f204d5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fa664f-3479-427a-a6e1-3c42a388b735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aae09a4-92ab-4bbf-b785-c2821d5b0276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdecfadb-74d9-4509-a646-fc5403f096c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b7d738-c95f-4de6-a5db-dae40f2eb46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d65794-c42b-4187-9c66-fbb706c4d7a4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e739d0e8-db57-4eaa-9ff6-62259e027984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b7e1fe-2f36-4119-a31e-913d91d965f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9681407-863a-4e34-b594-89325365272d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e648b239-37fa-4ba5-9854-41e2b6e48d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc45887-4564-4942-931d-c8b50039155e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e281fd8-16ff-49ba-a48e-31334fa1b6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd8f601-6c91-4197-b023-7cf4d5fcf055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d0026e-2709-4368-aefc-28e7fac38067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00fcf5c7-d11b-494b-8e7c-b00be0a1b780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef9c7ae-3fac-44e2-b6ed-da2e2efa7fb6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970d11f3-e749-4f85-9ef1-4ce1ea9aa53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1fb12e-13ac-470d-9d72-bdac00cbc079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d352e26-21ba-40e8-8f3b-f7ea64f4b22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8374cbb4-e363-450a-9a8c-7191fe993723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d904f1-d00f-4563-83f8-c492fecbce30",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ed8298-a655-42c9-b9c0-e7cb5c36da5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0dd9ba-dc47-46cd-b6e7-03710fe9e1da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94018fe1-dc31-41e2-914a-2b0a4fdbd827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18d5d7e-ea55-4683-af3c-ae4fd45041b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e31c47-2a8f-4364-9451-f984cf143eac",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b09b839-b3c5-4524-8497-f5cb59600919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f1071e-6fea-4a40-84e6-aad7a1626597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631a6b82-8827-4d86-a928-0d21d23353b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689df275-1cac-47f6-8706-fed852b6ea6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79b5449-2931-43ad-b950-c1894d2279a0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b19aa9-5da7-403a-a2e2-944d96f90eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0cc173-9353-432e-b9cc-caaaf3d9190e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3bfbce-e9f9-437a-a1f0-d38484278b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7736705a-cd35-4c35-8220-6fc343f29b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a629c067-68c0-4400-afe4-e44ae0b0db8c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03754af9-1493-4e85-b652-92b0722f5994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b786d887-dc3e-49e2-9cfd-fcb0f11a8620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8747c2c8-0ad7-413e-91f3-31650444b984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dabab43-8743-4526-b6ee-18921edfe39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2075e6a8-d9ce-4df1-b18b-0db3f23480a9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db47b907-07e7-4718-8c56-47c0f8a23d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ef1576-7727-4b93-aceb-ef340ade22e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61c6ec5-e864-4d44-b2ff-10f1cfc3d7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ced4ab3-9a6b-49fa-ad43-2dbacdfa59ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95062184-b539-4102-bbd2-9d10735b778a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e65a57-a212-4034-89ea-01e305db62e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59018b15-05de-4670-9aa0-0f6ae544cb0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328f4ffd-0473-4c61-b15e-24bd06d608e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99ecb4f-6bd1-4ba2-8b91-d412d6d7a03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15adcda6-a291-4e9f-80cd-45fad869d0cb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2685182-4542-4bd4-ad10-618d0ad274af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ffcd8fa-9b64-4a80-9336-dfabb5db0bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1732d8f-61af-4182-b9f2-461308a3de1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6329bb-1a1e-460e-bddf-c3b38f11f7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba68965b-de76-4181-8c27-7054faeb2d63",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4850bd8-c085-44bc-bc45-61e2c7fd3382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ad049f-780d-4cbd-b19a-a80c7b5a3f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4899f5-85ab-480e-9511-e6fae7947500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07e658c-0542-4c44-8c37-1ef66874adcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c170c8e5-5ae6-4963-b9b9-759b7f5aef20",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3e5689-9315-47d4-8ae9-2faa394bfb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7a917e-837b-4558-bc54-20b25bd04964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54010c59-83e6-48f2-8783-509b64826aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ae2756-479c-4648-9d19-048a5d64338f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fedbf99-0570-4357-82c0-ac9cc43b39dd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e24f264-e257-41ad-b48b-815dcfaca763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ed3d9a-2167-4247-a991-4ce0f0cb5430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c49c915-a2c4-4a46-9342-30231d267cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31761d00-8195-4002-a6c3-2a7b120e8cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b5bd6d-209d-43c5-906a-d753769c57d0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c39b78-4f67-4c28-b208-11af33bcc575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead37c76-5ee2-468f-b40c-177093e5074b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f200d022-7d4d-4c48-9d16-0dd2019c067d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f15ea99-fa79-42cc-a6ea-52c661b046aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62c2997-ee44-4da4-ba1a-2e04f9af53c8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee3effe-588b-4b89-8865-a50e5f4a0c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5248ca7c-afc3-48b3-9c5c-6444a5644a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c09086-2ec8-44a7-8cf7-1ea3f354a9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dbb7d6-35d3-4405-9e6d-3954908a7957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d3d702-1bbe-4a7f-96a0-09fca36e4e12",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976a02e7-8b73-4853-a6a9-f1f793cb0858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26dec65-bb72-4f9a-9514-206e032be5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c8e629-51bf-4cf6-ac40-f5ed0cd8e87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c331691-edaf-4154-9556-e37fdc468f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cba7bf-17d4-4b81-89dc-f9424c98e107",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0240c332-fdb0-4942-89b5-aa18db47657b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733de916-ea3a-4970-83cd-3a800b8e8142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a5424a-55d5-4f22-a40d-10c02627afe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e99b25-f6d2-4750-9cd1-3d45eb40e644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce44e736-a2d7-4001-a796-9c6e14ea9aea",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5348824f-e3fc-4a88-a04e-ea947d746503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8af10ea-6ba1-47ce-b5ff-500668cf42d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "680fbd0d-1ef2-408d-a169-b14da3fd8a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7df194c-0f76-4846-a1b4-d54533f6d4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46dcfdb-1fe6-4e37-b596-556cafa3ec2c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a3e926-7114-49a5-934d-6b2e0760a590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "960fb971-d245-4e3f-b942-b413a5684803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa468587-1126-427b-9be8-1424ff81b644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0938f5-c39d-4fcf-ab21-0d625bfc0e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54897608-3b51-4ba0-b31f-059bcf525e2e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d29a5f8-a5a6-4dd9-818a-7aee03856b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad6bce7-7c40-4052-aa47-33eee6242138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcc2a9d-5de1-44d4-b117-1f5502731073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbe81d0-dbd5-4ae4-85e4-1b9f603ba331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bfff0b-50d4-4d8c-8f79-79ad938f11d6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cca8a23-f330-4191-8991-0cc27814cdea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f04d429-d015-4d93-b26c-ee4716cc81a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3874292-62b0-40b2-8bd3-803867a6eed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cde18bf-8e68-4032-9fa1-fc9cc168c51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4803b1d-ed2f-4279-8a7a-954e63f22f4d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc93bb6d-a6e7-4d43-85f0-0f36c3f42d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2203646-0724-4ce7-8aa6-00719422a865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea991f83-c070-41b1-9e3b-09b7b661b7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4d0aa8-bc6c-4e95-bc18-826ae271b292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bf66ae-cb76-4f70-bec8-ce1d227bcab6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4f707b-635f-47dc-9f2d-9a5adafbc444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a5471a-888c-4e75-9b8c-d477b0b1c4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7aa7304-c9cb-4f39-a32d-08b182d7772f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f86125-bd0c-41b8-a829-1b85057056ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7766db14-9a8c-429b-afdf-45ccd8741fe8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cddd131-0688-49d4-8fd9-bbb38af42540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3e8d23-b05e-4944-be3f-601ccbafeb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f8cb24-7bae-4b64-9849-b41ee0290d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36efaeeb-7c7a-4329-9bbc-a7efdc7db5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5294ef59-0623-4b79-b73b-e16956317508",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8338a00-a36f-4a8d-b036-ab1e6825d497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e29dcae-9728-482f-952c-87bdc23ee8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331a9994-9395-49fb-9de5-bff98780dc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0057d0f-cb4e-4a9b-8a45-8d9ded18d720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7abc40-fa4b-45cf-bbeb-5c8e12bd0699",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa9b349-a822-483f-98e7-17c32e14f893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6343a937-f2a8-4dd3-aecf-25b75b19b5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cdfe5f-9aa3-490a-9083-78c5450f3561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66962964-3fb5-4caa-aa87-5dc15d3997e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023cf08f-17bd-44c1-b159-277dcca80ea9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cad499-f0e5-4f65-bfd5-c2850800a228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec42990c-a569-445e-aa03-c3661276242f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43356b89-9c4c-4ed3-88ad-bed728de70dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db06f390-e537-4360-9cfc-db8df0dc3d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e127af-9795-4759-a9c7-ccafa19e8bd1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38646a6-8689-4353-af03-a3b4be9f8054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7d8dd0-9d34-4db0-8553-22d430e6f010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed8b312-7998-40ff-a758-c00939b7296b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7c5049-1f80-4ad3-9dc5-c681fcdfe906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fde316-af30-4d59-b129-f915f8c9fe1d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ca36cc-62f3-41bb-ab09-7498d521c0c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe4e933e-e3bb-4153-9651-c62b237f4992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce737a2-2e03-49b4-be0a-ef93824dde28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301d197c-9fef-4611-a09d-682a1a8f989a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a021796-dbd6-4f25-8d03-213c8f7daeb9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c028ac-cd7b-4cfd-ba37-1c2906d8f49b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f2d56c-7207-4a6f-9cbc-4847a2eb7c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddd4a3e-1cea-4d6a-8fd8-57625295845f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3209fb38-8556-4b65-925d-f5d982290981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5efb41d-c263-4d20-862b-e23564fc2c5f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b00442e-5116-499c-aea2-26b32c30669a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9025e2e4-2387-4e58-ad06-a6fdc549eaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2ca305-1eae-493f-98ff-4b4853445b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223d0264-ad57-4a85-bd1d-d18f689214af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0465249a-d953-4441-9046-87063fd92b0c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6004e2-70fc-4d97-9d12-d9ff6ec61991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7671a6fe-3b55-4a45-ad7e-88b3edac4d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78be2af6-2786-4f57-9630-5da41af6e540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca954974-143d-4232-a305-975f02b3871b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e342e63b-3701-44c5-b3ef-782f54af1ab6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9835cb41-18f0-4f71-899b-daf9e81ee47e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75f38634-97f1-4108-8ae9-f5ac49047c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaad06aa-eaff-4a0c-ad6c-304cedb860b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10317393-d3a0-48b9-ba56-33c890193e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68d5d27-6909-41c7-bb33-694c3913bd25",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929cdc85-6959-4349-892b-f62a994e4bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22683f1b-b17d-4fc0-93f0-01a2961fd9ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33b642c-aa48-4ae8-b918-6cc90ef80fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8bc763-5ba9-4523-8faf-351f7b5f4d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a39f69-f9a7-4080-bcaf-e0c7b9794bb8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3c68e3-d1ae-480f-8e38-ad633ec7c138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f792c8f-5768-476a-b5c6-7e5c4ca8dee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0e3fa9-2749-4b2c-a475-3ee488ed84b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b6eabc-e454-4857-b4fa-ac1a0aee70aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc7351d-7893-4415-9d59-a4b3198e58d3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99576cd5-b063-4174-988e-91273eea129f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "758c8de0-9506-442a-92dd-febd9bca601b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9a58a1-3bb9-4b30-a1ff-1e2e2cc516d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca3a8e4-5d98-45db-aacd-1a5e1a031a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c4cac6-15bb-4164-b274-87b45407c7f7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655b8add-a86f-46c2-aa3f-f00b7a0a1f5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af7bd44-b67a-4bcd-af67-6df5ca95a3b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b4d16d-2ec0-4488-9937-9fcceb19edeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333c35bb-300b-45ac-9152-327a7bdcf869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c80625-03f6-46df-8411-451bd27514a7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b697588-8d30-4ef6-90fa-8f6dfa57efce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f68b56b-d8d0-4614-9665-1fac428076a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508d5fa0-bfdd-4811-8be9-8f1054a537cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e061bcac-2bbd-4f1b-bfba-43a078ee3762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c71c88-44ec-4238-a0df-a5df303a083a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d892e9b-25b5-4529-9b96-30733f77b5a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20347781-c95c-42bd-8717-9629a417eb22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba4cc43-7e62-4c3a-8da9-e87cbf912152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6face4-f8fd-498a-ad9f-de91951a9f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77632e0-cd97-449c-9a6c-8e780ad85a73",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3ba298-170e-4dd6-9a2c-b462e680afb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3829e5ba-c636-44a5-8931-c893213f4301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee0b778-b2f2-4853-a186-1ef95c0022d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bf17b9-3369-4adb-ba24-aca70e5c1ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d4dfd1-b685-435e-b105-664a6c3967f6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2c4509-6203-49dc-b0bd-39f83358b97b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1129ff4b-c284-4a84-a9ab-7101bb0634aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43185d24-41dc-4547-86e2-7bb6b14881d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1dbd318-19b0-4a62-bc2c-7d33191010f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e78c014-668b-436f-8ce2-cd425e5c5050",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c358cd32-7fd7-445e-8e40-25667a0101aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70914584-27b1-4cf6-8549-8ba495ca2d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7083a7c-3b0c-4019-9d8d-7d2f936b5b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808d2b2d-33b6-4cfa-8f7d-1f48dfd6ae3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04efdea4-e135-46a2-aed8-b18de36687a6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4e85f4-d120-49ab-bb7a-8b586e61a63e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e1f61a7-a819-4fd4-9f98-afbca43b1a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1dac63-8923-4c67-9a5b-83df8cf2ae40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7d3ffd-a71d-4471-9804-cb0ef245d841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c6ebd6-473d-4b16-84d0-9cf8b077a5b4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c5e988-e27b-47fb-ab2e-db723170fd73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf446d9-7b17-490c-b087-6507af74ae1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96ce74a-605e-4d9b-b7da-e7b950781440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d61eb96-36c7-4ee6-8ed5-ac133c4ea5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1e4924-1b93-4339-88a9-edebba1b54ad",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f6144b-d7a2-4b05-b6f3-ffa17d024a09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b40473b5-3044-4385-a868-595127431516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4c0565-add4-45ba-845e-6aba8b5b4ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0a2d2f-abb2-4ad9-b61c-8f195c1f1055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eae4221-8ec5-4580-9f95-9d3a8324c984",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12c93ba-742d-47e2-ae1e-e8342310b863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ed975c-d9b4-4ca3-be77-631bd241ca72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829e48dc-71bb-4726-bf54-bde50db2b5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2107505e-dc8a-4506-9506-6bba03fec931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376927d7-851a-494f-ac39-62b977ca5e9c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9b0b42-daf9-4836-8f0a-c8b0b8db324c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5270b75-70f8-4256-b4f8-32e974ee8ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48c0ad9-5513-4652-9720-876c6cb11025",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8a3095-2f58-4c05-b43a-fdde022229dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1ff522-f6e9-4d7c-a5ec-aa6c0efc9815",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e121dc57-36cf-4544-aa9b-39a6018ddf41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60870f1b-b3c6-4e80-a4a4-c1286567e910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab52aee-f81b-4d46-b497-4a103d3af118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17993512-5ada-4b53-8c81-450b1794bf81"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bb4b23a-d46b-4429-a81d-ec0e01b1915b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1472394d-b7e9-4498-881d-aee37ed57d29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ef96f36-ccb5-4e80-895f-35fb28ac21f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5f6cc86-0898-497c-80d4-d48cd3f5563a"
                    }
                  }
                ]
              },
              {
                "id": "59fd940b-a871-47b5-9aa1-28696ec7e4e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d209a533-cc8d-4618-9bdc-20a63a9d4c2f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f177d4-0394-42c4-b9a7-3fd05337b987",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ed022a39-e3b5-4748-882b-a2a62adc0701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81d835c-d2b2-4181-a263-efce1a32cfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db683ef5-445f-42d9-820b-78bf0d80595e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d2b59cc-4afc-4c51-ae38-494c68c57257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc2819b6-7340-4693-bf0f-51f62649b0b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8871d4b0-e1ff-42b0-a9ed-82a388795db0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ecf3651-5e0e-4890-865e-f2fbe6d42319"
                    }
                  }
                ]
              },
              {
                "id": "d12482e7-50ac-43f1-9624-09bd86a19535",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a581e8bc-92b7-418b-963a-40228ef00532",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e86971-c077-4835-b856-816c681e9b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cb4e9ef7-ad7f-4f2a-bc0b-0eb7da7c3f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32799481-090e-4931-ae39-94af7fea490c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc30cf53-57b7-4c9d-b865-053fd798ce43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a140431d-83a7-4442-a59f-7570d87076f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "17cc26b0-4a85-4652-b36c-5eb2d463d785",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e78943bc-8a3e-4475-a180-c8951dd5ef58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3dd0e61f-a4f3-447a-bf10-56078076c34a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "367607c1-e64f-4489-b98f-f89cf57b32cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "704ae9ef-bd48-4c95-93ce-3c1ab65de639"
                    }
                  }
                ]
              },
              {
                "id": "c35f5dfd-3bfd-49aa-9b39-7134966496cf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d308326e-bd11-40d8-8b3b-069691293e83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a8484886-5829-4e47-ac91-0359815a55a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd9d08a9-3ac8-4ade-ba3b-3b1f30df2bd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e2f2794-e958-4d4c-8cb3-19c68bbd63e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afc5c6fd-df67-4a22-97ff-5b9a43d54aeb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3af7803c-cdef-470f-bb30-d86d802fbc4f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98d73625-cada-4d07-b63e-09915fb5d377",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5789983-b234-451d-8fe3-7ef26a89fb55"
            }
          }
        ]
      },
      {
        "id": "6190810e-f30d-4015-af28-5562b023386c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "26f14e64-9c07-476d-832b-53af803b7b22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab5f12ac-d12d-420e-af00-5bdb6235ac41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03551914-80e1-445f-bd87-de2f7de47c20",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22636d3-1166-42f6-b604-92a03375cc7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d64b6f93-d429-45ea-9e18-a3514d3e5cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17cde69-7061-4916-885f-0fddf5156bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b794b3d-1d41-4ff6-91bc-cbd0a14b8453"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93bb0abe-3a7e-4e55-aa0f-d689b278424b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54dd393e-6a93-4060-a6e8-207e51eb57c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a8d71f3-62ec-4636-9b53-cd1b01bf0367",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f5e612a-1fbf-43d6-a998-9f09942a7089"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0197d6d4-dd5f-403b-89ca-fc634131c17c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "71a2aae4-f66b-485c-b8df-a88b99f853c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8248b2ef-ac19-4bc6-9f79-fb3b6cc616ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e221f3c-cc6c-48ca-898c-bbb2eab67cf4"
            }
          }
        ]
      },
      {
        "id": "10b0cff9-33da-4ba1-92e1-6f7fe7e073bd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3051f984-411f-4619-bd6a-ab1da1256712",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21aff197-99f7-48b7-9500-33777b5371ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94024fbf-d4b2-4963-87e6-9602d8664f68",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0d5e07-449f-464e-831f-7d15f3c52d6f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34fea46f-f7c0-41b1-9f56-3fdc75bb3da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c88a2a-d86d-434a-a50f-29fa7e1014e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f0b95f1-ac34-4437-9701-1033bd9a9c2f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b33f267-ec95-4e72-9311-da99b4262bd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9818b060-1179-4bc5-8ecd-1c90fa5f28ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1490ad6c-2f37-4b9b-b5f2-6b85bcfee8bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef5c4098-6f67-408c-acf3-69e5b42e02f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdfebdda-12ec-411a-a5aa-5eda9168fcb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5a25d81a-fdbf-4392-b456-d35799e0dec3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43522921-2b85-4a43-8d0d-40fe7d81546b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37a6c9ca-418e-4bd9-b026-00c6234ce63c"
            }
          }
        ]
      },
      {
        "id": "90e1922b-0ea8-4d31-aa6a-6f04b706eaae",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2fec3ba6-9494-4294-b360-bae14d6d5190",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb64f876-b84c-46f7-830a-59fd5c6bb026",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a4ec414-6578-41ea-9bc6-bb877e885ced",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35691e8f-45d6-4ed6-acf8-6a58bea127ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b024fdaf-af44-4b83-a1e2-6610f855506e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e7d5fc-bc0b-4419-850b-5b8640343478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e743402-d9fe-4b05-996c-1c0f853fb160"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f42a74d9-174d-4750-b6c0-edfc26a20f0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccf29f73-25a0-4ca3-9bd1-0aaf2467510b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dab1a4f-e25c-4b12-ad4f-8a153b192ccd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60f5dacb-36ac-42c7-b0d6-b77e1cf67d0a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2395599e-d655-4e3c-98b1-a15c6e58a173",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "379e2875-595f-44c0-8241-83cc58d793d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06fdb6b1-b0c1-49ce-9730-500fb6e8a75c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36360dd3-8308-4a72-ba70-21910ac83941"
            }
          }
        ]
      },
      {
        "id": "f1c6c46a-6ab5-4b26-b576-ee08b372dbec",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d326efde-9d85-49f3-ab38-c4bb96874926",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c9f4929-2523-4e9d-8164-151f942bd540",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "416307f2-3913-48d6-9a3a-eaaf61e2474e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97a8910b-3780-42d4-aeb1-97f4dff39d0d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7adc4a98-e0c0-446e-a326-a3e63d8eb7ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.00701754385965,
      "responseMin": 6,
      "responseMax": 961,
      "responseSd": 79.93466599634395,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711413261541,
      "completed": 1711413291266
    },
    "executions": [
      {
        "id": "f68c3f14-d580-46b9-ba7d-266a75323eda",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8c2ae3ea-3767-4432-a107-ce3ae7fe4e31",
          "httpRequestId": "16338821-8fd2-44db-9ddd-4e641db0a92f"
        },
        "item": {
          "id": "f68c3f14-d580-46b9-ba7d-266a75323eda",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "536c3507-3d3e-4134-87c3-042994349542",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "b42820f1-231f-4648-ba3f-cf09e05bf6e0",
        "cursor": {
          "ref": "810bab4f-0ddf-4a1e-9586-ed98eb50d42b",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ebaab90e-7a92-4568-9b34-7a22dee7b0c9"
        },
        "item": {
          "id": "b42820f1-231f-4648-ba3f-cf09e05bf6e0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "de41a735-8a83-40e4-be32-b477a7db9298",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "0c62813b-502f-45f2-9ab0-1935822371cb",
        "cursor": {
          "ref": "a6057ecf-2de8-4fe9-b5b7-965133e37c2e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4c80745b-ca19-47ae-ac50-7eeedd432644"
        },
        "item": {
          "id": "0c62813b-502f-45f2-9ab0-1935822371cb",
          "name": "did_json"
        },
        "response": {
          "id": "299d4358-c37e-4c8a-b97a-97060a78d310",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c115c86-34f0-4f03-bd89-0fef5417a0b3",
        "cursor": {
          "ref": "7dd7ddc8-e367-4571-9d9a-471ce81ebbcd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "880ee2b9-68c9-4aaf-b80c-979fda636100"
        },
        "item": {
          "id": "1c115c86-34f0-4f03-bd89-0fef5417a0b3",
          "name": "did:invalid"
        },
        "response": {
          "id": "05135e80-1b6c-4c1b-aa10-e5edc21b1302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c115c86-34f0-4f03-bd89-0fef5417a0b3",
        "cursor": {
          "ref": "7dd7ddc8-e367-4571-9d9a-471ce81ebbcd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "880ee2b9-68c9-4aaf-b80c-979fda636100"
        },
        "item": {
          "id": "1c115c86-34f0-4f03-bd89-0fef5417a0b3",
          "name": "did:invalid"
        },
        "response": {
          "id": "05135e80-1b6c-4c1b-aa10-e5edc21b1302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a6b8b3-5b4f-47f5-8727-079b86ac34be",
        "cursor": {
          "ref": "1646af46-fd94-4eee-8e90-89e1c0a984fe",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8675acff-4005-4eff-82be-0a9b9fa43c1a"
        },
        "item": {
          "id": "e8a6b8b3-5b4f-47f5-8727-079b86ac34be",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7c1ffda8-ee1d-4235-ac23-8ffe7107e0f8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ce4396-0624-4599-aa81-c66d835232d4",
        "cursor": {
          "ref": "274903a2-b182-4921-8182-66d50103ac30",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ec297cae-4ffd-4836-b72b-4d55db3179cf"
        },
        "item": {
          "id": "f0ce4396-0624-4599-aa81-c66d835232d4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b69fc9f8-426c-4085-828b-283a75fa5166",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e687fb70-151e-4d6d-a255-99e1748ef86f",
        "cursor": {
          "ref": "97eadd72-4125-4deb-aee7-b1ba2545008f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d3ea4027-9be2-47a1-9cf8-61276668ecb3"
        },
        "item": {
          "id": "e687fb70-151e-4d6d-a255-99e1748ef86f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b60864c6-c88a-4cc6-bf73-1216b2caaadc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1886a9-2b0e-497c-b992-a37e5cedb9b4",
        "cursor": {
          "ref": "b6a91244-918a-4179-b361-6a070d7ca4ce",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7caceba6-f16a-4c7c-8b97-95a8d48a1824"
        },
        "item": {
          "id": "cf1886a9-2b0e-497c-b992-a37e5cedb9b4",
          "name": "identifiers"
        },
        "response": {
          "id": "9d078a60-d71a-45cf-8e63-35358352bbf7",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14aa61d3-435e-4298-afe1-c849e8fba0ce",
        "cursor": {
          "ref": "5c45e3bc-5c87-48e8-a8ab-ff557a578db9",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "afbff647-c5da-40b4-b55d-ff793faba73e"
        },
        "item": {
          "id": "14aa61d3-435e-4298-afe1-c849e8fba0ce",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "adcccdd6-c19e-4f48-bd77-faef008e5799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dda647-2f00-42f9-8025-35f675f88bbd",
        "cursor": {
          "ref": "1762efdf-a43c-4691-bc8b-b56fd1d60284",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5845858a-b00b-41e6-80e7-f2edcdc74c20"
        },
        "item": {
          "id": "78dda647-2f00-42f9-8025-35f675f88bbd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9727c7eb-f899-4405-bdfc-2933863c5890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeac656-08b8-4c4f-950d-abcfb7913490",
        "cursor": {
          "ref": "40b606d8-9caf-4438-a9c5-83491e11bd03",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d0732a36-4adb-4da1-a06c-1b93090b5981"
        },
        "item": {
          "id": "8aeac656-08b8-4c4f-950d-abcfb7913490",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "92f7706a-e4ab-4047-bb05-51a8c9ea705d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae54b30b-522f-4556-87ee-34b5ec5a936a",
        "cursor": {
          "ref": "388d5933-11b1-4651-992d-0036f7252ce2",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e53eb591-8208-4547-8501-bdaa06900203"
        },
        "item": {
          "id": "ae54b30b-522f-4556-87ee-34b5ec5a936a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c8d41449-7cec-4f66-ba46-a17ebc0342e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d788d7d2-6a79-4a09-a783-7411311f7357",
        "cursor": {
          "ref": "fae248e1-d74c-4151-89b6-738b72eee721",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8fa9e2fa-9a8a-478a-9c05-421f2144355b"
        },
        "item": {
          "id": "d788d7d2-6a79-4a09-a783-7411311f7357",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f38a69aa-2f06-40d7-94ce-870d96fb8e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65bdd02-d762-48b2-9db6-23836e5123f4",
        "cursor": {
          "ref": "204656d0-b009-4e03-8043-37e53d036988",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "93e3dcaa-17cf-4fb8-a4e2-c92930f76a79"
        },
        "item": {
          "id": "a65bdd02-d762-48b2-9db6-23836e5123f4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "906094a4-1f67-43a4-be78-ce892eaa60d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691116b1-2c74-4bc7-aa1d-2c63e826c4e7",
        "cursor": {
          "ref": "c67cf469-ae33-4ccf-82d4-2f65c4c2e579",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1f4eded5-6594-418c-af02-84024c30f448"
        },
        "item": {
          "id": "691116b1-2c74-4bc7-aa1d-2c63e826c4e7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bf366d63-6273-40ff-a146-3b2ba1862d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7a2284-b064-48b3-84c4-10102cc0787b",
        "cursor": {
          "ref": "35b53ea5-6d64-4a00-8c86-f0b757d0404e",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ee9cb4e2-923c-4a1c-9967-47460a9a4a64"
        },
        "item": {
          "id": "3c7a2284-b064-48b3-84c4-10102cc0787b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5b609925-8595-4858-a07f-5fc6685c0bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b374b890-2efd-4304-93cf-5567e180cbb7",
        "cursor": {
          "ref": "c98df418-beb5-417f-9332-0dcfa270c082",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1e2938c0-7bde-4be3-9b56-65f761bc9337"
        },
        "item": {
          "id": "b374b890-2efd-4304-93cf-5567e180cbb7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "774c640c-e136-4be2-a4da-5eb839af4138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3fa385-edab-4d39-9bf5-6d9f8b34d04a",
        "cursor": {
          "ref": "ba798e3a-85b5-4080-b2ea-759b3c7270dd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "842ea063-ad07-4f61-b805-29c9081252b4"
        },
        "item": {
          "id": "cf3fa385-edab-4d39-9bf5-6d9f8b34d04a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e7f48d7b-bbe1-4ad3-8421-5e22e0c70c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be61acb-a7ee-4631-851b-bbc47b7cd622",
        "cursor": {
          "ref": "c61e9489-e920-4cb1-952a-76447a334c5a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bf6e6a5a-4722-4ab7-ae25-6ae9b652b0b2"
        },
        "item": {
          "id": "1be61acb-a7ee-4631-851b-bbc47b7cd622",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "37421cd7-2e3c-4dda-b10d-22bc6db510d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565f6c0f-20db-45df-a7ee-c691a3b453f2",
        "cursor": {
          "ref": "31dfe72b-9282-4196-bd25-521b1ec90340",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5cc7dc80-abb7-4159-a7b8-b6777d2e3384"
        },
        "item": {
          "id": "565f6c0f-20db-45df-a7ee-c691a3b453f2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3ad9f40-d69a-47ee-8e5d-efa12797d4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc6cc79-fdc7-490c-9d49-351396d90b6c",
        "cursor": {
          "ref": "94bc798e-1f65-4ddb-a433-12d6af2d7aa2",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3093932f-c312-4d63-95ac-22812ccc95e9"
        },
        "item": {
          "id": "5bc6cc79-fdc7-490c-9d49-351396d90b6c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bed67f29-d685-44b2-9599-d3bea3115712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2637d8-4ac2-42cc-af29-19f7272cd638",
        "cursor": {
          "ref": "726145e9-032d-4e98-b02a-71e1106c4128",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a975951d-0151-4c2e-9f96-be06ee51c3c3"
        },
        "item": {
          "id": "9a2637d8-4ac2-42cc-af29-19f7272cd638",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c20a546e-369b-43ee-8b98-00c63c588d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37164ce-bfa5-46b3-8202-2d579361f23c",
        "cursor": {
          "ref": "a0bc057b-98e3-4dac-a9cc-6fe262c01896",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "399cb13f-b3a1-4253-8aeb-17db233ce961"
        },
        "item": {
          "id": "f37164ce-bfa5-46b3-8202-2d579361f23c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8350965f-1b02-4cae-959b-c28fd97a1d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34589b35-7f12-409b-a7fc-9fd044757c51",
        "cursor": {
          "ref": "8d15f541-10db-447e-b869-e81d2bff9551",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14e36330-b7b8-4f62-bde7-21e821e1f356"
        },
        "item": {
          "id": "34589b35-7f12-409b-a7fc-9fd044757c51",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "45a90a8e-0670-4b81-a19b-064102e35baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46948c4a-f57c-4cf4-a553-808fbb1da2d8",
        "cursor": {
          "ref": "5d5e5679-1895-4b46-9d81-0044bbdd30cf",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "23493724-3ce9-472f-a761-503b683a38bc"
        },
        "item": {
          "id": "46948c4a-f57c-4cf4-a553-808fbb1da2d8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f0aaa78a-1936-4b65-b15f-c6a838f8fd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b1d7d-4161-41e0-8638-6ba3f6581e07",
        "cursor": {
          "ref": "2c3d9684-eb72-44f5-9d78-b635faf2bc7b",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "185feb87-0395-42f0-851d-5ef153c8c0df"
        },
        "item": {
          "id": "c69b1d7d-4161-41e0-8638-6ba3f6581e07",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "53e9e9e5-f8dd-4032-afdc-243955e16041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d235a4e-4f1d-4e11-a8c7-7c201184d52c",
        "cursor": {
          "ref": "23da9656-4e18-4bd7-bed6-e567bb682d66",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cb509b29-4933-4dd2-9a7a-14792111d571"
        },
        "item": {
          "id": "3d235a4e-4f1d-4e11-a8c7-7c201184d52c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d9c9eee3-3864-48ea-a62b-0c0bac998e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a759a295-094f-477c-ac35-14fd3d411968",
        "cursor": {
          "ref": "3f674595-2430-4db9-be02-08262e696e10",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ce7b39ff-f084-4c8c-a9bc-b564158dad0e"
        },
        "item": {
          "id": "a759a295-094f-477c-ac35-14fd3d411968",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5c6e37cb-d51a-492d-b92b-ed6396b66c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebce9d1-75f8-45d6-a73a-f3c4ed2da3e7",
        "cursor": {
          "ref": "dc076e67-97ec-4de0-8037-fc984d5bb059",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "263b1ace-b2b8-4728-a66b-03b15ea4d45d"
        },
        "item": {
          "id": "6ebce9d1-75f8-45d6-a73a-f3c4ed2da3e7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3aa21d9e-c38e-4663-a904-422cb0d1ffd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529140a5-963d-409e-abb9-7bd915b505b7",
        "cursor": {
          "ref": "d7dcf04f-0792-4ea0-bd13-2b87960b7fd1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8adf713f-b9c2-4cd4-b30f-c88b910d7b59"
        },
        "item": {
          "id": "529140a5-963d-409e-abb9-7bd915b505b7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "200469cb-11aa-47f6-a26a-b3f78cd7fa19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8460304f-77e7-48de-92d3-d118f623284c",
        "cursor": {
          "ref": "758430ac-8bb9-4167-8b3c-fa07b841d5e2",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "56814771-c2e0-48fc-bde2-5c5c6cf833ef"
        },
        "item": {
          "id": "8460304f-77e7-48de-92d3-d118f623284c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "adfb1b49-bc76-4930-8330-48a70ca7e923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335a7a0e-8c4e-4c1e-bb09-bca96e282932",
        "cursor": {
          "ref": "e105312d-7a49-4023-9939-2256515dbcb7",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b694c124-7fc1-4a01-b851-fe501bec365f"
        },
        "item": {
          "id": "335a7a0e-8c4e-4c1e-bb09-bca96e282932",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b39ad283-6d4b-44e9-b171-5214c728eb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e02a08-6f6f-4292-8326-70c4e4bb569b",
        "cursor": {
          "ref": "06940132-7b78-4822-af7d-fd9a6e13949f",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b7492434-2588-4d54-bd2b-fb8bb5a1630e"
        },
        "item": {
          "id": "22e02a08-6f6f-4292-8326-70c4e4bb569b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c833b143-c4df-4d69-a714-806e4eaa5ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d69098-6a08-4578-ac88-79f822cea899",
        "cursor": {
          "ref": "3b276f32-8a36-4703-a7e1-1214e752123d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5e6f8977-b044-4af6-8180-34679cdd7c6a"
        },
        "item": {
          "id": "61d69098-6a08-4578-ac88-79f822cea899",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ed9e0ba9-6701-4c31-a9cc-bffa8a38b257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272876bf-4079-4095-b830-d7833207a244",
        "cursor": {
          "ref": "0e8d9b8b-4cb2-4d61-ab02-0aa0a733c171",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0ba1f17e-8f7b-4d7e-addd-131f637ad2bd"
        },
        "item": {
          "id": "272876bf-4079-4095-b830-d7833207a244",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "77a892c2-98cf-40bd-92c0-fd99b1d9177a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e9ea91-3d72-497e-8f8f-6267cbea9ca8",
        "cursor": {
          "ref": "3208bfd2-3c22-4367-866e-a50e6bdda605",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "51d3331c-1065-46b2-8c74-7260927ffc53"
        },
        "item": {
          "id": "f5e9ea91-3d72-497e-8f8f-6267cbea9ca8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e05574b6-143c-48d3-9312-b4b91c6ddeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fc362d-cb0c-454f-a523-f59c167069dd",
        "cursor": {
          "ref": "d0da50ed-a3e0-4c16-b50b-e6709c021e7a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3a510f55-3884-416b-ade2-a262828fd939"
        },
        "item": {
          "id": "c4fc362d-cb0c-454f-a523-f59c167069dd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "10e01367-f918-442a-8535-1ef51daed1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0788caf-a4a0-4097-b4eb-565d17877aeb",
        "cursor": {
          "ref": "212b6714-8e03-46b9-95bb-7672ce6740c1",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9fbf1c89-3fde-4807-8d17-e75aab1c75ca"
        },
        "item": {
          "id": "c0788caf-a4a0-4097-b4eb-565d17877aeb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b7a1c1d9-1b9e-4771-a20e-d0aee2fc0cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5576a910-8efb-4700-bf99-6ba0138c20d7",
        "cursor": {
          "ref": "a242616d-612a-4906-a76f-fed0b6511661",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fbe1efb6-a911-44d1-b54d-2789f67d88c3"
        },
        "item": {
          "id": "5576a910-8efb-4700-bf99-6ba0138c20d7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "006a58ef-678d-4a94-82ac-31d55c24458d",
          "status": "Created",
          "code": 201,
          "responseTime": 961,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "935e6344-806e-4bb9-a4a5-c042bdfc3ff0",
        "cursor": {
          "ref": "ecd94114-99b2-4bd5-88a6-8f711373b5c5",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fe67e728-dc03-48ee-b3b2-8dc58fa2901f"
        },
        "item": {
          "id": "935e6344-806e-4bb9-a4a5-c042bdfc3ff0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "36281e6b-4e16-47e9-a804-9a86097d5809",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fe2eba0d-c6b5-4788-8799-5cf1b92f1c94",
        "cursor": {
          "ref": "6c967d0e-faae-4610-b7c8-5bffec9c9955",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47aac624-590d-48b9-ab50-085f22f8f686"
        },
        "item": {
          "id": "fe2eba0d-c6b5-4788-8799-5cf1b92f1c94",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6034e8e1-8f12-4805-8cbf-29ffa106191e",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2192cf68-1df5-4854-a3a8-531bd46de616",
        "cursor": {
          "ref": "df8b8e3c-b6bf-4395-a0be-0e1bf440937c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e4d94aea-27b1-4195-a140-574673b1ce52"
        },
        "item": {
          "id": "2192cf68-1df5-4854-a3a8-531bd46de616",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f199b808-558e-43f8-b509-82bf0bc94f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac91e0b-cd97-4334-b96d-82086667aaa2",
        "cursor": {
          "ref": "61cc01d8-3179-4123-aa3d-d4f39af9175d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "505b9b0b-243d-4cf9-bd05-dcf8bcba4c91"
        },
        "item": {
          "id": "3ac91e0b-cd97-4334-b96d-82086667aaa2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b968d677-7cc7-450d-b34c-9e77fa932afe",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6bd30f2a-e92f-40a7-ab90-06f779ee48db",
        "cursor": {
          "ref": "6f0f7989-5540-4fc3-81bb-96af1b79723c",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "97f626ea-c7d8-4d75-b1fa-548935b5df7c"
        },
        "item": {
          "id": "6bd30f2a-e92f-40a7-ab90-06f779ee48db",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "720d8d7d-2f72-44a2-8a72-08a2c227241b",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "75900754-b451-4020-96c5-b0a9bc20406c",
        "cursor": {
          "ref": "53496b0e-64a8-413f-be2f-905d4e0b07fe",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "afac4eb2-c81e-42cd-b3a8-e996f4a006e0"
        },
        "item": {
          "id": "75900754-b451-4020-96c5-b0a9bc20406c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "03c693a4-ed28-411e-a211-e5a797bcd720",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7743e758-07cc-4cb5-a264-6e321a8c7b47",
        "cursor": {
          "ref": "dbdb8dfe-a9f3-4bd5-b9de-5741d62a01dd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "03984505-cb4e-43f5-b39f-b64217a6b92a"
        },
        "item": {
          "id": "7743e758-07cc-4cb5-a264-6e321a8c7b47",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "73bcd8e5-fdeb-4414-870f-a9b5da260a3b",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "782a31d7-dbd9-47ef-bab8-b18264b344ea",
        "cursor": {
          "ref": "9390cf1b-8a71-45b6-a2c4-2b0fec879852",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "28e8a4b4-a799-4e82-99eb-57ff03f89c21"
        },
        "item": {
          "id": "782a31d7-dbd9-47ef-bab8-b18264b344ea",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "40802037-a47a-48af-90ef-2d6df52717b7",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7b9f2088-e112-4d40-8671-6e3097d384fa",
        "cursor": {
          "ref": "f39a965a-347b-4ea1-8cb1-f8d791ec596d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1a351971-fb0d-437c-bc86-3c43e73c5b46"
        },
        "item": {
          "id": "7b9f2088-e112-4d40-8671-6e3097d384fa",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3c3ed3a2-daea-4137-b60b-b615e839b889",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "edaf1db4-edb0-40fd-b251-79c2b4a3c53f",
        "cursor": {
          "ref": "5560dda0-372d-40c8-a42e-f7db2d55ba29",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "603e227e-0e27-4b13-b8f9-8886fccb60e8"
        },
        "item": {
          "id": "edaf1db4-edb0-40fd-b251-79c2b4a3c53f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bce0fddf-8bfb-40e0-a429-bbb263f7e058",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0d012ee6-b75d-457e-8538-c54ac109ca84",
        "cursor": {
          "ref": "24731c2d-e6ab-44ee-8e3e-ffd67cc3ca23",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0900900b-57c2-4751-897a-7eafd2e64d79"
        },
        "item": {
          "id": "0d012ee6-b75d-457e-8538-c54ac109ca84",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6b277693-edbe-4aca-948f-5d9fff716478",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ffd96a9e-8f6e-4807-b98f-153c0eab56a6",
        "cursor": {
          "ref": "5a31decf-6382-4b54-bd02-0333220551d9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ebc1b0a5-6fb3-4596-bd7a-c58905fe5dd5"
        },
        "item": {
          "id": "ffd96a9e-8f6e-4807-b98f-153c0eab56a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "79921771-5288-4ce0-9652-6bfdef01d2ad",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bcc44f01-65d1-45e7-ab4d-602d81eb78c3",
        "cursor": {
          "ref": "e6fb34aa-ed08-46db-91f7-b89ee5976d09",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "da4a924b-a547-4aa6-9897-633327af4547"
        },
        "item": {
          "id": "bcc44f01-65d1-45e7-ab4d-602d81eb78c3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b698cd08-f96f-4062-acca-7b3aaad7ba70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db30abe8-a4fb-4b7c-ac5c-a91e4c75de3e",
        "cursor": {
          "ref": "f945c742-d6ae-4a96-8baf-fd6469f2bba5",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ca4f0bab-16b1-40a8-a55e-d83522a013a1"
        },
        "item": {
          "id": "db30abe8-a4fb-4b7c-ac5c-a91e4c75de3e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "15977241-325c-4090-83ef-cc8eae075452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c62e340-66ed-4b98-b68f-0d12e569e952",
        "cursor": {
          "ref": "342fcdc2-79f6-4dc7-8c60-88a1ebaf2a3e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b4fa7238-4931-40a4-b420-9ca2338feb16"
        },
        "item": {
          "id": "0c62e340-66ed-4b98-b68f-0d12e569e952",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9d28aa45-746e-48d8-bf3e-75eabe5a6f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86497676-7b4b-48b4-9e6e-18803b494652",
        "cursor": {
          "ref": "54d6bb94-2a4e-4b12-80cd-69a14ee087d8",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "46a726f7-082a-4c50-8bd3-248292fb596c"
        },
        "item": {
          "id": "86497676-7b4b-48b4-9e6e-18803b494652",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bb3a1ab0-8c42-4fb3-bb1f-ce66f31c1535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523d122b-c32b-4888-84d4-e9f1f77e2095",
        "cursor": {
          "ref": "ceb30aec-e06e-4c3c-b76e-8fb3905a0226",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "750aa541-2f08-41e4-a376-cab8b2b6c83d"
        },
        "item": {
          "id": "523d122b-c32b-4888-84d4-e9f1f77e2095",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bce10fb3-cb55-4ca7-9a4e-ff957c793493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2778d50-30e6-4b59-b9df-c05c1cb40d3c",
        "cursor": {
          "ref": "35dd6e5c-394e-4d9c-a0ae-aa4416a8b83a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "60a5df8e-0280-4179-a660-dafc2d1ddb10"
        },
        "item": {
          "id": "a2778d50-30e6-4b59-b9df-c05c1cb40d3c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "93b2127a-8b61-4341-81e4-b6784d272f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533f8157-aa51-4c10-b90e-c6299231d0e5",
        "cursor": {
          "ref": "1c0ef4cc-c78d-4942-b0f3-5acbac9fbf59",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "89d50a00-6837-4438-a263-d6298a45196a"
        },
        "item": {
          "id": "533f8157-aa51-4c10-b90e-c6299231d0e5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ef88ccef-ac3c-42bd-920b-251e9cc6eb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab673e42-95b9-4679-a207-b57a2752ac49",
        "cursor": {
          "ref": "16395972-200a-4bb4-8c69-ed67c86d0e52",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9dbdd784-b937-41a0-8e84-4aba1b09bd0f"
        },
        "item": {
          "id": "ab673e42-95b9-4679-a207-b57a2752ac49",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4cbae4c1-8ba8-485a-80b0-0e8ed7299d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb578135-fe71-4042-b602-af6db43af565",
        "cursor": {
          "ref": "4bfd5f9d-8097-451f-a522-673d67bd9250",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6fa61fc7-bce4-459b-8f27-712f2401eaa1"
        },
        "item": {
          "id": "fb578135-fe71-4042-b602-af6db43af565",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "653b490d-2b61-4a64-bf5a-7498accb00f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8cac22-efbc-41c4-a997-38bec5c0e311",
        "cursor": {
          "ref": "ffac9434-77c9-4537-99ba-63c1930ffc95",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5d9992e6-d646-4f7e-a5f4-86537abc9039"
        },
        "item": {
          "id": "aa8cac22-efbc-41c4-a997-38bec5c0e311",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1ef28bbb-be21-4277-bc55-903ab3b51f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850c910c-f845-4bb9-a50a-010d863d68d2",
        "cursor": {
          "ref": "7a40aa1f-da55-4b38-b65d-c7fcdddf341a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "651cac32-6ad1-4e6b-a2d4-8d6db0f99a0a"
        },
        "item": {
          "id": "850c910c-f845-4bb9-a50a-010d863d68d2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "500307ca-9599-48e9-98dd-4c7ef067c379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd0b555-840f-4218-9826-10d0b5cd0754",
        "cursor": {
          "ref": "f18f6371-b5b3-4b42-9f2a-0caa124ed299",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c65ee79e-c085-4de8-a08b-7ae05bd709da"
        },
        "item": {
          "id": "5dd0b555-840f-4218-9826-10d0b5cd0754",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "64b839e3-880a-440d-a995-75245dda2474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1ce990-1987-4ff5-937f-431238cdb974",
        "cursor": {
          "ref": "98788c48-89e3-45ff-b446-4bd674f76368",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3cf6383c-3091-409e-9d95-b5cb3c8def3b"
        },
        "item": {
          "id": "8a1ce990-1987-4ff5-937f-431238cdb974",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "350340e3-d777-4c6a-86dc-9b0713e05242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c2ef71-83bb-4cd6-ba5d-ce055bfcaa19",
        "cursor": {
          "ref": "f40bd4f7-5535-4180-a22e-a5a80585a745",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1056a704-2065-4be0-91d4-963a9feba8d4"
        },
        "item": {
          "id": "05c2ef71-83bb-4cd6-ba5d-ce055bfcaa19",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f67d989e-cc61-4415-a2c0-ed629fa010e3",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "257012ad-9e1b-485a-8e32-93369a82ffe6",
        "cursor": {
          "ref": "71f4ed88-f80d-45b2-9b36-6d0dc210762c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "85c454a3-c26c-49d2-a52f-fafbb828e859"
        },
        "item": {
          "id": "257012ad-9e1b-485a-8e32-93369a82ffe6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c7e28e97-3c04-4d38-97f5-8c19722c7200",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8f9f59c0-0fa5-46ab-b6b4-f59c0d5b3bc6",
        "cursor": {
          "ref": "f2daaac8-4214-4b5d-9b1c-45eca186309c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e7788c1-85b0-46f8-9273-f3b8393f6a88"
        },
        "item": {
          "id": "8f9f59c0-0fa5-46ab-b6b4-f59c0d5b3bc6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9fa80b9e-8179-41da-88ea-2e561b8da579",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5d9bdc34-8d9d-4d1e-858e-7719f8c9c94d",
        "cursor": {
          "ref": "9ea11a33-1991-4fac-914d-e46323ee37a6",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7fb778f3-0566-4826-a02d-a5c84a2e1d2d"
        },
        "item": {
          "id": "5d9bdc34-8d9d-4d1e-858e-7719f8c9c94d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0b41174b-3e2a-4887-ad7d-722a18888e25",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "93ddb864-37be-456e-b23d-f0cdfab5a838",
        "cursor": {
          "ref": "44310e85-0355-401f-9f18-6837fde3a961",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "46f012f1-96dc-48a5-8fd2-0fc1bbb4933b"
        },
        "item": {
          "id": "93ddb864-37be-456e-b23d-f0cdfab5a838",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "024527e0-db33-463b-8110-22833d53c81c",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "32954266-2bb9-465a-92a1-9a1c4dc4dc02",
        "cursor": {
          "ref": "36358b6d-95d9-488f-a4d6-587be2e5516d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2f8fcedc-5762-47e3-aa91-e07c8259cbc1"
        },
        "item": {
          "id": "32954266-2bb9-465a-92a1-9a1c4dc4dc02",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "31b4b597-a814-4ff4-9c23-c83281eda4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e63b23-6030-41d9-b515-e1f585e72cba",
        "cursor": {
          "ref": "4462a6e7-6133-4ad4-9472-a16d3de407e9",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "20e9c145-2d6e-423c-bd92-7b22691f8f24"
        },
        "item": {
          "id": "75e63b23-6030-41d9-b515-e1f585e72cba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "85a0646a-615b-4d38-b5e4-11ebdc862a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff323e46-84ec-49c8-8f45-2d74807e4bf2",
        "cursor": {
          "ref": "73b85a7c-60e7-4cdc-89e6-69342e3352a1",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "22917a20-4c5b-45fa-beda-b16a61953f32"
        },
        "item": {
          "id": "ff323e46-84ec-49c8-8f45-2d74807e4bf2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3531b4f6-a931-489e-afd2-5ad0f091cdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922675d8-de4b-453a-b19e-11d8f6d96777",
        "cursor": {
          "ref": "a01502fe-f127-4e7e-b40d-31795dfb9d86",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "489bef5e-42aa-4ed2-a95f-d8a19345952b"
        },
        "item": {
          "id": "922675d8-de4b-453a-b19e-11d8f6d96777",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9731d3eb-9287-4455-909a-6e9dd9b70c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd03c8e-31e9-489d-b95d-0ad97759e392",
        "cursor": {
          "ref": "ee10acf5-cb07-4d97-9d44-5f107de2ced1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5a209508-d3a5-4249-8dde-0dbb1000163f"
        },
        "item": {
          "id": "6dd03c8e-31e9-489d-b95d-0ad97759e392",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a5678734-fd42-45c0-b444-8c3c3bd90a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7a106e-ad5e-49d0-9af0-fd91d2f367aa",
        "cursor": {
          "ref": "1e94938b-7069-4f04-ac29-dae9dd9d8a44",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9d39dbf3-e6cd-49ca-b002-53e9e365ef84"
        },
        "item": {
          "id": "4f7a106e-ad5e-49d0-9af0-fd91d2f367aa",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "be6d5fcc-195d-431f-8900-6194e48064c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268a8e41-be4b-4c84-a459-5270eba50bca",
        "cursor": {
          "ref": "0b5ebb8f-90d9-44bd-a028-4c177648d700",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ee1c6a39-bedb-41f5-94b3-964a1a250344"
        },
        "item": {
          "id": "268a8e41-be4b-4c84-a459-5270eba50bca",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e9930ff9-c47d-4d2c-824a-faeb858d0443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9115343e-11e1-40be-aa55-ed390fe27507",
        "cursor": {
          "ref": "ffb409e5-50e4-4f43-85ee-950383c5fb62",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d5f0d01a-3fb3-42f1-8a0c-2f1c561ae67f"
        },
        "item": {
          "id": "9115343e-11e1-40be-aa55-ed390fe27507",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f86fc004-b062-4eaf-9985-213eb6d3f837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec4440a-b68a-4b56-a041-31e2816b2acb",
        "cursor": {
          "ref": "2717a676-1c62-446a-9e3c-68bc5046e23d",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0f8d071c-4301-448c-a128-e2eb1a64b8f8"
        },
        "item": {
          "id": "0ec4440a-b68a-4b56-a041-31e2816b2acb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ffaae4d3-26d3-4a32-ab86-8e4e34232233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bfbf9e-34d2-47d9-ae69-1a7c3b90bc81",
        "cursor": {
          "ref": "0801aaba-526a-4189-8cda-e680597713ee",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a268054-47b5-453a-9cc2-894bea42f0c9"
        },
        "item": {
          "id": "f0bfbf9e-34d2-47d9-ae69-1a7c3b90bc81",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9fc71125-059d-40ee-b6bd-40a1d7f4a876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfbb673-cd4c-4876-a1e6-ab74a64f54cf",
        "cursor": {
          "ref": "ad82b8e1-4680-4aca-bf25-080244ea6f46",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "748fb86c-883c-4491-bf92-3d9b2db33e71"
        },
        "item": {
          "id": "8cfbb673-cd4c-4876-a1e6-ab74a64f54cf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7a80ae70-4278-48fd-9d0d-6c678f70f0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3178af4f-4d06-440d-9416-218faf986dfb",
        "cursor": {
          "ref": "2594906a-59e5-44e1-ad10-94bfd8c37b50",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c4cdc6cc-8ce6-4083-9032-2f73ea01c15f"
        },
        "item": {
          "id": "3178af4f-4d06-440d-9416-218faf986dfb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d31556e6-662a-48fe-a84b-ec8c893c74a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940ec433-bd08-43ba-a0cf-28c4ef5e0678",
        "cursor": {
          "ref": "d8e10fd2-2939-469f-afd9-4618d7c53ccb",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "01da196a-ae66-4a10-85d1-034e86b1a33a"
        },
        "item": {
          "id": "940ec433-bd08-43ba-a0cf-28c4ef5e0678",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2f361d7c-5322-4d4a-a632-a2a11eaf01ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57128dd3-690f-4b3b-990e-350df12ab8fc",
        "cursor": {
          "ref": "eb25d196-2fb5-4d09-af00-687787b9d01b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9951f482-690e-4fe9-87a7-ba611ae09173"
        },
        "item": {
          "id": "57128dd3-690f-4b3b-990e-350df12ab8fc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "73a4c654-763d-4b6a-a574-a587a48f9458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dea1d19-6367-4d83-9452-74439c7bb1b1",
        "cursor": {
          "ref": "bf01c430-e10b-445b-bcaf-eccde411ef61",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb5d4e3d-c299-4298-a3ed-95ba17bbb195"
        },
        "item": {
          "id": "0dea1d19-6367-4d83-9452-74439c7bb1b1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "62a6913b-9000-4de1-aeea-202723c2403e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7176e2ea-00e2-42b6-9a9b-e2503175c733",
        "cursor": {
          "ref": "89aee0a7-d76c-48b5-9b12-a3a85a5b324c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cbfcf6c6-18dc-49d5-bb48-93b23fac38ee"
        },
        "item": {
          "id": "7176e2ea-00e2-42b6-9a9b-e2503175c733",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bab8d4ea-7c04-4dcb-9bca-1698fe71a051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecb80bd-a2f7-4c3b-8831-7122bfc6187e",
        "cursor": {
          "ref": "26e11de4-ec6a-4217-afad-2b3238d936a8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "37616627-1fd4-4aad-9424-8473b13e1e9e"
        },
        "item": {
          "id": "fecb80bd-a2f7-4c3b-8831-7122bfc6187e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7049a413-dedf-4431-88d7-980ceb8e265d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f6a390-e7eb-49a9-93ad-da7dc64cbf6e",
        "cursor": {
          "ref": "8d98ba38-598a-4d9c-ad84-615654cd2ee4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d333d7b5-1196-4532-b810-28a97bd6e638"
        },
        "item": {
          "id": "a4f6a390-e7eb-49a9-93ad-da7dc64cbf6e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "47ad2880-c344-468f-aad7-e1f9f8222341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909747c3-3cf8-475a-ab24-871448d9ac6e",
        "cursor": {
          "ref": "d9b0f464-8992-4c5f-bf11-c3f854c4f556",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "61d00a3f-0e0d-44c8-b701-5a959713da75"
        },
        "item": {
          "id": "909747c3-3cf8-475a-ab24-871448d9ac6e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "02b069ba-cd98-4c7a-a7ff-05b7463d95cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356e9a0c-4b0c-4db1-9767-c4829f10dd74",
        "cursor": {
          "ref": "ad747be5-13f2-4f9e-bbbf-4d48eb6241df",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c95ded49-63bc-42f7-b1d3-68a40eb07e18"
        },
        "item": {
          "id": "356e9a0c-4b0c-4db1-9767-c4829f10dd74",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "83407862-a77d-4ffc-86fd-14f3f43aaeff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70392662-4130-4bba-949a-47918a1867cb",
        "cursor": {
          "ref": "52153e95-2729-47f9-bb95-e2692945ae0a",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7dbbe6c5-c39c-430b-b996-afb26a94e8c0"
        },
        "item": {
          "id": "70392662-4130-4bba-949a-47918a1867cb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6d3ae54f-c3c2-4ebc-b230-78443e54d05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef7f9db-7d07-4da9-b8f7-bcbc88145b5c",
        "cursor": {
          "ref": "6b0ba053-6e3b-4bd4-a900-d10ab8286f07",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aa651ec1-baf6-408c-9397-5a2a91daa531"
        },
        "item": {
          "id": "bef7f9db-7d07-4da9-b8f7-bcbc88145b5c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c113c074-1592-4b16-bfa1-460078576251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc46870-6059-46e9-ae6b-52fba399bb17",
        "cursor": {
          "ref": "bf338a3d-d130-4bb4-afce-b61c33064b6c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "50e57f29-349c-40e8-b002-759f9c59d248"
        },
        "item": {
          "id": "5cc46870-6059-46e9-ae6b-52fba399bb17",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3c91d3f2-9514-4cf2-9498-7e2811f09690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61deb692-c45b-485e-9fdd-2b876da799e5",
        "cursor": {
          "ref": "19ad4687-6594-4e97-9cce-8652071c6034",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "76bf3dde-0848-4955-aa99-8aeb2b74dac3"
        },
        "item": {
          "id": "61deb692-c45b-485e-9fdd-2b876da799e5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8438e78f-05f9-464b-850f-25c9c5a4300c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3b8037-72bd-4f91-9ed1-175a35b52e29",
        "cursor": {
          "ref": "b7733246-5079-480a-a64f-41ab39cd6aa3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "632ed807-c2a3-44b7-a3e2-a38ea123ddd4"
        },
        "item": {
          "id": "5c3b8037-72bd-4f91-9ed1-175a35b52e29",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "18f735ec-8712-4680-a489-03be64117fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd546fd2-01c9-4ec9-8832-45f6ac8bcab7",
        "cursor": {
          "ref": "e41620fc-c4b2-4927-9d27-475e460aef26",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8c96af4c-215a-499e-94ba-095c3e85dcf1"
        },
        "item": {
          "id": "cd546fd2-01c9-4ec9-8832-45f6ac8bcab7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "86d4ae95-0d7a-4a39-944d-33793d43d787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8b80a8-c2d8-4371-bc5f-f7fb441ed3d2",
        "cursor": {
          "ref": "4d02c539-92a7-4094-ba00-ff432451dfe2",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b434e3cd-9d87-4a21-bfed-80754602c998"
        },
        "item": {
          "id": "cc8b80a8-c2d8-4371-bc5f-f7fb441ed3d2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c84da550-d84c-4028-8c8c-5cfa357a3b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920ff6c7-61aa-4e1f-89e9-77cbb1586cda",
        "cursor": {
          "ref": "6b4d7243-ea7a-4ee6-bbff-2091c55710e6",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "af3473cf-da5e-4ad0-ba54-4ad30d397c23"
        },
        "item": {
          "id": "920ff6c7-61aa-4e1f-89e9-77cbb1586cda",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a17f7c14-627a-4085-a1a4-791169676b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62020c26-5c00-4f7e-a074-97330f35b7c9",
        "cursor": {
          "ref": "290648e5-9562-4ee6-a8cc-6c106b6a9f62",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e076e22c-170f-4338-a5aa-f5439c25a801"
        },
        "item": {
          "id": "62020c26-5c00-4f7e-a074-97330f35b7c9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "979f52bb-2533-46fa-b7c2-c02c001fd825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590245ac-7307-4cf2-ab6a-249d5c2cd08d",
        "cursor": {
          "ref": "cf0a99a1-faa4-4545-933f-1b82327364c5",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d3141ff1-73ed-48e7-8040-d208b4e205fe"
        },
        "item": {
          "id": "590245ac-7307-4cf2-ab6a-249d5c2cd08d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "66ebed41-a228-4e78-84a3-f4affd10c954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663cadff-e9aa-452b-a151-4a57c64e84d7",
        "cursor": {
          "ref": "70bf08ec-8628-4369-9d72-02ec8b49cdbe",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2f01c324-56e1-4ad5-b404-fe234ae84177"
        },
        "item": {
          "id": "663cadff-e9aa-452b-a151-4a57c64e84d7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "83e0f516-5fe6-4d4d-a041-2aae9c446e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fe246a-08ce-4946-961b-459600c13e3f",
        "cursor": {
          "ref": "5743ce0a-4f63-43c6-91b2-35fb4f490a82",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "58a050bc-a8d0-4926-947b-3d3a4de87380"
        },
        "item": {
          "id": "26fe246a-08ce-4946-961b-459600c13e3f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d98e5fce-9c9f-479e-aae9-2362ed514f28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e1e04c-b00e-458d-9869-b9238b3074ca",
        "cursor": {
          "ref": "f006955f-afe8-47ac-94b0-1780031268f5",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3df9c248-1886-4661-84ad-93340200803c"
        },
        "item": {
          "id": "a8e1e04c-b00e-458d-9869-b9238b3074ca",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0f09f0d4-63dc-4523-876e-d5227dc10798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5db4ec2f-2e1a-4eff-98f8-5f1738b828b3",
        "cursor": {
          "ref": "e157f54d-ffc4-46b5-b081-8af46d97ba17",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1a46b513-5048-4956-8b0a-cacb17e18a83"
        },
        "item": {
          "id": "5db4ec2f-2e1a-4eff-98f8-5f1738b828b3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c389e3f0-78d3-4065-ae4a-10959cdf85ca",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88d7472-bc7c-4514-a8b6-46294059d1fa",
        "cursor": {
          "ref": "bcab1cdb-9502-4750-9c2c-d78781bf3263",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e77e0024-d4c2-44a8-b554-7753a7937246"
        },
        "item": {
          "id": "f88d7472-bc7c-4514-a8b6-46294059d1fa",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "814bef68-7162-4e41-889d-0baeb471b6a6",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "856c50b1-746c-47eb-bde3-14c299015f21",
        "cursor": {
          "ref": "ea10eb97-dbde-41a9-943c-4d96639a5bc0",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e311b703-54f6-4e7b-b958-b1e2a801b80c"
        },
        "item": {
          "id": "856c50b1-746c-47eb-bde3-14c299015f21",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "311eacfa-121b-4710-b2df-32f9e019fa0c",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a728f0-9419-4b6d-8d07-2d159743e20b",
        "cursor": {
          "ref": "74b1d26c-bd84-46bc-99d1-0895e1cfb9a7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "baf8d570-a554-445f-9588-454db30e8de1"
        },
        "item": {
          "id": "75a728f0-9419-4b6d-8d07-2d159743e20b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "72c7d9d3-0576-476e-a682-f31ece687f63",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "380ce393-3644-43c0-a5af-f8f3876763d8",
        "cursor": {
          "ref": "d5df95d9-cc6a-42fc-a6e5-d9234d8129a1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e2ae1028-dda3-4e26-a07e-94dd6539da53"
        },
        "item": {
          "id": "380ce393-3644-43c0-a5af-f8f3876763d8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bc9da3d8-a17b-4761-9616-429372cf3242",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-26T00:34:36.374Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-26T00:34:36.374Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ddeb8cb7-10c5-4491-ba0a-988e9c977417",
        "cursor": {
          "ref": "7d7b7a2b-8188-4a48-9c7b-d94a6133aa90",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "71b4e75d-b1f7-476e-85c0-d9c55c33d4cd"
        },
        "item": {
          "id": "ddeb8cb7-10c5-4491-ba0a-988e9c977417",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ff2343b7-a4db-48e3-ad30-0cd468495418",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617e62ed-0973-4198-a33c-9a06db4f4612",
        "cursor": {
          "ref": "f6b93f43-88eb-419e-bfb0-a2e26fb19de7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6faa464b-cd20-433b-bc19-4bbbb9bcc227"
        },
        "item": {
          "id": "617e62ed-0973-4198-a33c-9a06db4f4612",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "80f2153d-1ea1-4435-8b87-a6cdcef82a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35582ce-5848-4d25-bc26-518d3464d625",
        "cursor": {
          "ref": "cae7fe10-6226-4a60-bcb2-57752eb33696",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3101f822-cdab-45b3-b7f5-b5f1b8f6a643"
        },
        "item": {
          "id": "e35582ce-5848-4d25-bc26-518d3464d625",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dd92be78-9cac-4a8e-8158-c8fec354661a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1be09f-c77b-4268-925b-8eecae4c4414",
        "cursor": {
          "ref": "db822dc9-357e-4357-b549-7fd751f9c652",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4a04725d-4031-4a99-9dde-3140e0b89f05"
        },
        "item": {
          "id": "6c1be09f-c77b-4268-925b-8eecae4c4414",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6eb37fb5-58eb-4440-bae9-db955bc09073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9deacd-bb13-4419-b6fa-b3faa8444038",
        "cursor": {
          "ref": "ca2530e6-29eb-4a92-a401-358e9334fdba",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4680dbe7-c261-42f9-9e58-fe69a9a5d34d"
        },
        "item": {
          "id": "8a9deacd-bb13-4419-b6fa-b3faa8444038",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1f4d63ed-78ee-4dc2-b941-55d1be8094e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4f8f6e-6b55-42b8-9c6f-66c1eb0240b8",
        "cursor": {
          "ref": "2223fc3e-8f26-4229-8fe4-b2c1245e58d1",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fd6994c6-28be-4868-833f-9a7d9cb02ce8"
        },
        "item": {
          "id": "bb4f8f6e-6b55-42b8-9c6f-66c1eb0240b8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "20426fac-4244-4e65-8375-b791b2bae487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adafea4e-4966-4450-8690-e243edf51386",
        "cursor": {
          "ref": "48da7268-e0d2-42ce-bc66-25e8bfd6e603",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "44116a5c-1b5e-436c-89a5-a443b0342c05"
        },
        "item": {
          "id": "adafea4e-4966-4450-8690-e243edf51386",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5fa72752-0ecf-4602-bcda-23cb4e35149b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9870cab3-8842-4c05-a9a4-28be5518ea35",
        "cursor": {
          "ref": "41f270aa-b73f-40df-85d1-f76eb82d033f",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e189266c-fc27-4959-9681-863976a13475"
        },
        "item": {
          "id": "9870cab3-8842-4c05-a9a4-28be5518ea35",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "987d08a6-8bd3-40a7-a04a-d4ce5fff2b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf9c2ab-abff-4d46-8dd2-af0a7f8dda97",
        "cursor": {
          "ref": "0c039e0c-04f1-4508-b4d9-3f8fe975419f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a8638125-6bbf-4518-82e0-6f704d281fe8"
        },
        "item": {
          "id": "6bf9c2ab-abff-4d46-8dd2-af0a7f8dda97",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fd158985-47a1-46ac-ad1c-d26f36f15154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0114a06b-16db-4639-a947-2b57a532ab0d",
        "cursor": {
          "ref": "73fd0800-06df-4850-83a1-e993a9e60c81",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d28b66cb-b141-451f-9ac7-52cb02ce20c5"
        },
        "item": {
          "id": "0114a06b-16db-4639-a947-2b57a532ab0d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c986298-4856-49d0-9955-18edb4cf0f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3855b82-28fc-4ac5-8bf8-0a77e05f31bc",
        "cursor": {
          "ref": "e96a39c4-0cea-4163-834f-e1eae195887d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "33f4cc8e-b5cd-4507-b7b3-7bb568c7bb78"
        },
        "item": {
          "id": "e3855b82-28fc-4ac5-8bf8-0a77e05f31bc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d8e94eb2-a070-45ac-98d6-5f5e25606b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de255d09-9355-4abc-abcf-310c67e04d3c",
        "cursor": {
          "ref": "485e0527-5e4e-407a-991d-5d37dfac00e2",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "790be1dc-9937-426b-ae08-1477d37d65d7"
        },
        "item": {
          "id": "de255d09-9355-4abc-abcf-310c67e04d3c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ade647d8-9034-4a7e-8e9f-072a11685b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b24b176-8226-4322-93fd-67cb8822deb8",
        "cursor": {
          "ref": "d9862dc5-a96f-409f-ab97-4a99f4186603",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3784f59d-a4e0-4407-bc1e-29df6ea0a8fe"
        },
        "item": {
          "id": "1b24b176-8226-4322-93fd-67cb8822deb8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e6bab077-e3c1-4ef5-ac23-01824f5d2df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a781f9-ff7f-417d-8d9e-248eb505cf0f",
        "cursor": {
          "ref": "01857832-c477-40b3-a181-2de751beebd0",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9fe001c8-1404-4354-8005-5bd9fa737a72"
        },
        "item": {
          "id": "77a781f9-ff7f-417d-8d9e-248eb505cf0f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "45a23198-5492-41d0-9ace-f71d262e3ea7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d58dba20-2f33-4786-bf5e-1a9a9472b766",
        "cursor": {
          "ref": "59322b1f-ab53-408a-8d15-0f1d5def67be",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "46e69074-a00d-4e4f-ae5c-430814504aa5"
        },
        "item": {
          "id": "d58dba20-2f33-4786-bf5e-1a9a9472b766",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a29276a5-fd77-44b6-be19-d48b2f02562e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bbf9e12d-d4cd-47e7-93c3-e968c14a3455",
        "cursor": {
          "ref": "7287dd02-e69a-4dd6-b811-8d9dc2dd8ac3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2bcf9565-cf97-4b71-8133-6a655c7f2425"
        },
        "item": {
          "id": "bbf9e12d-d4cd-47e7-93c3-e968c14a3455",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e08736e7-7d46-426f-8c44-b70e7f8dc356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b468645-a039-4719-a78d-80cf4fd2e3dc",
        "cursor": {
          "ref": "6b4ca250-9425-413a-8766-c04e9283d0e5",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5f8c51b9-4f16-458e-95aa-1a3e3cc06a08"
        },
        "item": {
          "id": "4b468645-a039-4719-a78d-80cf4fd2e3dc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1088476d-608a-40f4-87c6-f9e75aa8a1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ff2ef6-f021-44ad-b75f-423dd4b01ad3",
        "cursor": {
          "ref": "2fda1eb8-b518-4039-94ac-6cfbf91f7f5a",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a5599ede-30aa-4473-b4ca-11c85dbbfb49"
        },
        "item": {
          "id": "60ff2ef6-f021-44ad-b75f-423dd4b01ad3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "16f90525-308e-4e86-9740-67a16bbc3139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064026d0-2fe9-410a-aaa9-35005165a03d",
        "cursor": {
          "ref": "728fe51f-433d-4173-b1df-84ec85b9d03f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8fa51e31-aee7-40b9-8364-a36d4c4e3d42"
        },
        "item": {
          "id": "064026d0-2fe9-410a-aaa9-35005165a03d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "092cfd7b-3a49-495c-bc69-b7e399fe8a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea85c11-40b6-447b-b481-57d5c6abc723",
        "cursor": {
          "ref": "0abe1f18-a60c-406b-9d41-1ecf78c16dbd",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bd28655f-a7bf-43ea-8262-d9982ab0bba3"
        },
        "item": {
          "id": "1ea85c11-40b6-447b-b481-57d5c6abc723",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "632dd1cc-c8e8-4df5-a028-dc70afb5eb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01795c36-aac4-4bd0-bf42-f8ebdd5ada66",
        "cursor": {
          "ref": "12628ed2-59c8-4b3d-8dd9-12d42ca37940",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "09f60f1b-077d-45fe-b8bf-fc4b831034d2"
        },
        "item": {
          "id": "01795c36-aac4-4bd0-bf42-f8ebdd5ada66",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6a1d3289-5f68-4ca5-876b-37a7b0cf66de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52670366-8160-4548-aee4-c405bfa9b26d",
        "cursor": {
          "ref": "2828cf8c-c021-468a-9f63-b8024025ac9a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e716d43b-40ca-48bd-b980-d3fdd7319855"
        },
        "item": {
          "id": "52670366-8160-4548-aee4-c405bfa9b26d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f18c3823-9e32-4022-97d0-56120b1f8764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e0894b-c877-4707-883f-15564cdc25ce",
        "cursor": {
          "ref": "241513f8-84b6-4465-bee6-f19ca4ae3eee",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e430f9c5-10b5-4968-96f1-eb938bce2a07"
        },
        "item": {
          "id": "b9e0894b-c877-4707-883f-15564cdc25ce",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2f1542a3-de01-43fe-a252-25a32e3034d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65590043-6d90-4b78-a015-6567e26a0c0d",
        "cursor": {
          "ref": "b0319631-5f92-4f90-b2b2-bd13f1bd4f1a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e81ed3c7-dceb-4c04-8236-0d8f568babb0"
        },
        "item": {
          "id": "65590043-6d90-4b78-a015-6567e26a0c0d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "58fa7f1d-b3ee-44bb-9ad3-8cd26f7d9402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118fba2a-20cc-4752-8c9b-a82eeba1ba19",
        "cursor": {
          "ref": "bbb7d63d-25fd-4423-a4ad-a0406e2bd054",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b48ea07d-c9e5-4bac-882d-556a2ef4e374"
        },
        "item": {
          "id": "118fba2a-20cc-4752-8c9b-a82eeba1ba19",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "45f09587-00de-4a53-a29c-d470ab5ce6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6740e0ee-089e-4c18-bd8b-7e5d92123c6c",
        "cursor": {
          "ref": "689abf4d-161e-47f0-b679-1f3b605d0a6e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5d348a38-0f91-453d-b66c-14487f99a0b7"
        },
        "item": {
          "id": "6740e0ee-089e-4c18-bd8b-7e5d92123c6c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "07165b37-d10e-4612-9d1b-efe8f1bbd0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeaa6e7-9511-43ba-b973-0d47e5853945",
        "cursor": {
          "ref": "05e69c3b-3c64-4793-8df4-65b22988af8c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "65dda706-e3e5-4fcb-a786-035fdc04bf81"
        },
        "item": {
          "id": "edeaa6e7-9511-43ba-b973-0d47e5853945",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "94ae2bcf-b9bd-4870-8c9a-9eced70c57bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6373d4ed-82e3-4f1f-ba90-40e2d692b1a8",
        "cursor": {
          "ref": "fa5211d0-2edf-4820-9970-15238fae7e1a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cbbba908-6628-4848-ba72-9a68e5b32bbf"
        },
        "item": {
          "id": "6373d4ed-82e3-4f1f-ba90-40e2d692b1a8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f5f01f78-88ed-4aa8-8a6d-d6cab18ece0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc453d56-44e3-4119-8e09-351e306f3cf8",
        "cursor": {
          "ref": "02d3450d-1c7b-4f82-aa1b-23729ebd1f44",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4fa152d4-a028-4d42-9934-d8984943f194"
        },
        "item": {
          "id": "fc453d56-44e3-4119-8e09-351e306f3cf8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2fd7e03e-9480-450c-be1f-2582c9f3bce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d590f2-7f5d-4d64-bf96-f557a482be94",
        "cursor": {
          "ref": "8b978362-ffaf-4494-b7da-5133c7141409",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6ee3aa2d-4f5b-42e9-b7f2-3fd869f1b389"
        },
        "item": {
          "id": "d9d590f2-7f5d-4d64-bf96-f557a482be94",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eacddb9f-3de4-46ba-b152-cafa7befcf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4647e6e7-e4bf-410b-b6b6-3e566831653a",
        "cursor": {
          "ref": "dda06430-5a18-4a06-adeb-f83a5fdac49d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aeaa06a9-3864-4a12-9296-7ce5622a9aea"
        },
        "item": {
          "id": "4647e6e7-e4bf-410b-b6b6-3e566831653a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c998d19a-0047-47a8-b406-d09140b52fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4f5c83-e2e0-483e-bf59-0319b9b80291",
        "cursor": {
          "ref": "551217c1-5529-4798-86bf-7a70a24892cb",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "af979bba-ed8e-4ddf-976d-a2b8a0ffdb86"
        },
        "item": {
          "id": "ed4f5c83-e2e0-483e-bf59-0319b9b80291",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "250e5b05-ecad-4117-bad6-071cfd700e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f7c859-b058-440d-bec5-75bd043d4126",
        "cursor": {
          "ref": "31fcbd78-8ab0-4fd4-b165-22878c51bccc",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e55eb28e-8598-4dff-9b8f-2d420ee40dec"
        },
        "item": {
          "id": "b1f7c859-b058-440d-bec5-75bd043d4126",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4e5400f2-d5a4-4120-9690-c1697982e916",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cc5547cf-3285-425b-a36b-7f1ac5bfbc36",
        "cursor": {
          "ref": "a86a3eb8-3342-4711-9c02-99f27171c9ab",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cfbe9981-00c4-451a-b3c7-cd16df6910f4"
        },
        "item": {
          "id": "cc5547cf-3285-425b-a36b-7f1ac5bfbc36",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "20e8160b-807e-42ae-9815-b2163031d2cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ddee34-4c3d-4f2d-a200-1443fdfec390",
        "cursor": {
          "ref": "21daaf42-70f8-4920-bd14-fcc869c78f64",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "808915fa-b26d-4d6d-8ec7-a25427a5c9a9"
        },
        "item": {
          "id": "e8ddee34-4c3d-4f2d-a200-1443fdfec390",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4a5a14ba-41f7-426c-9670-3a5a927c27f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f47086c-81cd-4416-b2c9-5b78e7e80060",
        "cursor": {
          "ref": "b6ef3438-2cda-4609-a47c-29504764502a",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "62ad052c-e7ba-4753-8efe-7aef17e21174"
        },
        "item": {
          "id": "1f47086c-81cd-4416-b2c9-5b78e7e80060",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34da3ce6-ece9-4e86-9007-3f3616a6029c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0a4562-8a2f-4203-a4a2-a7014c013064",
        "cursor": {
          "ref": "3160c444-b2bc-4fa9-8424-27cba7a769b8",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7a880fcc-57b1-4f26-8fe9-6750993af8a3"
        },
        "item": {
          "id": "7d0a4562-8a2f-4203-a4a2-a7014c013064",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b4658d37-8f10-4ca3-8bb9-cb8b81eac87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a19769e-34b4-4e5b-a903-34bec58cb5af",
        "cursor": {
          "ref": "46638bd1-ce91-424b-9056-93fcaf8f182f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3342941a-7675-4c39-a2c8-14794e8c0ff2"
        },
        "item": {
          "id": "5a19769e-34b4-4e5b-a903-34bec58cb5af",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "63252c13-7533-451b-a49e-1a6714594c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c47a8a1-f8fd-471f-af0e-f1d3d8e61606",
        "cursor": {
          "ref": "78034306-9230-4d24-916e-b245319788b4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c95e5aec-2dbf-42ad-b986-e6a95214bcfa"
        },
        "item": {
          "id": "5c47a8a1-f8fd-471f-af0e-f1d3d8e61606",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34d0dcc5-c20a-4d3a-8eca-a8b919a23dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71146fa3-5500-46f0-98d0-9ddb31c57935",
        "cursor": {
          "ref": "62d76437-3dfd-497a-b05a-ca3d4ddcdc61",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b61a192f-a20a-4048-aae6-189b037dc2d5"
        },
        "item": {
          "id": "71146fa3-5500-46f0-98d0-9ddb31c57935",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "da791307-4418-492d-beb5-60c256bcd184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd585b8c-daf7-4f12-af50-8913f907951b",
        "cursor": {
          "ref": "0c2b2f1c-e11a-4408-b6db-7554f6317380",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dd150561-42e4-4ded-bbc6-06ad5dc12ecf"
        },
        "item": {
          "id": "dd585b8c-daf7-4f12-af50-8913f907951b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "55be164c-7b6e-4eb0-a96a-f9e50774a0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa182ef6-4c7e-4768-9334-ff494f0d8515",
        "cursor": {
          "ref": "6492b9ec-e9a0-4f02-85e0-a9818b12e4ff",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "461e452d-611f-4e49-bdf2-83294600f874"
        },
        "item": {
          "id": "aa182ef6-4c7e-4768-9334-ff494f0d8515",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "faddfafa-ba70-41c3-b4f4-bebdd925ffea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f095b3-4d55-4d97-a015-3855fca2d8a3",
        "cursor": {
          "ref": "dacdfe28-40a3-4091-8053-04c6fab3c630",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "40b389fb-eb37-4e23-aaa8-1ba37b3ab59d"
        },
        "item": {
          "id": "d8f095b3-4d55-4d97-a015-3855fca2d8a3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ed851290-6133-44bd-b9d9-cbe8462b45bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb061a5e-fbb9-49cb-8a2e-cc79b3393383",
        "cursor": {
          "ref": "598a732b-be70-452a-aef0-6cfa297bb64c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "db3553a2-3bf6-429f-b183-61ee723ae54e"
        },
        "item": {
          "id": "bb061a5e-fbb9-49cb-8a2e-cc79b3393383",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ff416d95-6177-47bf-8537-3b8907b2f4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460c4cfa-5cd5-456e-ae80-7735597706bd",
        "cursor": {
          "ref": "fa0a8c86-bba2-459b-bd44-fc057f6767af",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2f8445e6-0621-4752-b508-f4b15cb4ae3a"
        },
        "item": {
          "id": "460c4cfa-5cd5-456e-ae80-7735597706bd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0ab60c38-d23d-4f8a-a1aa-72ec7249acc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36773998-ec95-4bbf-9142-405ae0381daa",
        "cursor": {
          "ref": "10bca53e-3e02-4f0c-a966-dd95e4a3f2a2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b638c737-293d-4295-bae0-985970bbbfcc"
        },
        "item": {
          "id": "36773998-ec95-4bbf-9142-405ae0381daa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "210a29e4-5130-4e4b-a4f4-6b4cbb5b6fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b77f6f0-b426-422f-b97b-c17168f471ab",
        "cursor": {
          "ref": "292374c9-8d1f-4d5f-8c62-a07f4e9e34e1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "93cee76d-5d71-49c9-86c8-e1996981c369"
        },
        "item": {
          "id": "7b77f6f0-b426-422f-b97b-c17168f471ab",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "69522be5-2c2c-496b-a3d1-c000e44a2bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224a82b6-d38c-4194-bde0-ac913d7b4657",
        "cursor": {
          "ref": "89ab837a-c5dd-44d1-8840-162b72fea133",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b646a270-71eb-47ae-9e95-0998225242a0"
        },
        "item": {
          "id": "224a82b6-d38c-4194-bde0-ac913d7b4657",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7ae109f3-c52c-424e-86b8-edf1f8f8a4a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f158fa15-5ace-43bf-8baf-acbba128db78",
        "cursor": {
          "ref": "206c8538-5449-4c8d-bad1-f90498e0a39e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3d5d2234-237d-4b28-bd0b-aa0172b25ea7"
        },
        "item": {
          "id": "f158fa15-5ace-43bf-8baf-acbba128db78",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "87e93396-f2d1-4769-917f-a407ee9f3355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b7b4e2-c42d-4f01-a4d6-dd37b0e0cfad",
        "cursor": {
          "ref": "1fe462bf-91f8-4e30-9c51-34f50ebfc1c4",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "805a66e8-e08e-423d-bfc3-896bb577a1ad"
        },
        "item": {
          "id": "79b7b4e2-c42d-4f01-a4d6-dd37b0e0cfad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "51ee1cc9-eaca-4411-8cd9-8445eaefa994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26025250-54ee-448d-a3b3-cf3239a9d37d",
        "cursor": {
          "ref": "9dbb1b1a-a33c-450f-bcd0-19d136a5d9ad",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "122ae21a-6ca2-447f-b4ac-f863a0be4713"
        },
        "item": {
          "id": "26025250-54ee-448d-a3b3-cf3239a9d37d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4e91a22e-f3eb-44d6-bec3-2995a20b048d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d4c45-891e-44ff-9fdb-320a70991620",
        "cursor": {
          "ref": "5dc74e79-f94d-4d5c-9c17-2ad51ddb2d6e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8928cb35-71e5-4e88-a79f-1fcadf9f1ef6"
        },
        "item": {
          "id": "780d4c45-891e-44ff-9fdb-320a70991620",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e2e694ef-11fc-460d-822a-9bbbb810325e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61324681-e5dd-449d-9961-d57f032aecc3",
        "cursor": {
          "ref": "3344d1b3-a85c-48b8-bad0-3a95d28dc4e9",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4413c28d-192b-4d2c-84b6-303a1f61d24c"
        },
        "item": {
          "id": "61324681-e5dd-449d-9961-d57f032aecc3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04eaa5a9-6e12-438f-915a-b0107c481607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb36727b-4422-430e-b787-6cf49224959d",
        "cursor": {
          "ref": "ec01d924-2de5-4aab-a865-fe873d755c6f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "43daafc9-3a87-4694-a11a-d5a6610ba6b0"
        },
        "item": {
          "id": "cb36727b-4422-430e-b787-6cf49224959d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7c3b7d09-9573-4c7b-a39c-b703f01b0b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede5241b-1da1-4423-ba2a-23adc7e698de",
        "cursor": {
          "ref": "361c53d2-bf9e-44d4-a8d6-cd2bd558cc86",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a1402f70-c332-45a4-944d-be233b29eb1c"
        },
        "item": {
          "id": "ede5241b-1da1-4423-ba2a-23adc7e698de",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "14321163-dc96-4aee-96f1-00b0550af607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdeb944-77eb-456e-be81-c4e3e97f76bd",
        "cursor": {
          "ref": "48207c76-6262-4cd8-967a-51a171e73d86",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "36dd24a2-e16b-496c-a29a-acf096a9d486"
        },
        "item": {
          "id": "8cdeb944-77eb-456e-be81-c4e3e97f76bd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f0378443-b5bf-4dc6-a5ae-f9bf4a0fef15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada35f93-24b5-4b86-8e0f-9d7d16bd7aab",
        "cursor": {
          "ref": "c4e70e6e-1087-4f95-af13-71e8e8dee56e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3a3541ae-4703-4929-8e47-95ad533f16ec"
        },
        "item": {
          "id": "ada35f93-24b5-4b86-8e0f-9d7d16bd7aab",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c25f98e6-5ef1-4fc9-9092-3ef983180103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7ba02c-04c9-4e34-b40c-2c40bdbc99bd",
        "cursor": {
          "ref": "b4dee66e-0b4c-4a4f-8b1a-e3840b64a5ac",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "34c25cd4-9375-4250-ae0b-3ae3bcac05f5"
        },
        "item": {
          "id": "3d7ba02c-04c9-4e34-b40c-2c40bdbc99bd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4873a383-c0f9-4a12-96c5-2f289c3d0936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889c4a85-ec73-4a95-9359-b5db45017179",
        "cursor": {
          "ref": "18fe1741-7f94-49cc-a7ab-b3140d297619",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f2c49507-151a-43a4-8d4f-4039c44aba27"
        },
        "item": {
          "id": "889c4a85-ec73-4a95-9359-b5db45017179",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "80961484-3950-4972-8784-3a2848460ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a349a97a-3d92-47f3-ad43-34787ff091a1",
        "cursor": {
          "ref": "99fa348e-b30f-4485-b370-0f73ad2c7708",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f9968e3b-8aa4-436b-bba7-f92a95039a6e"
        },
        "item": {
          "id": "a349a97a-3d92-47f3-ad43-34787ff091a1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1ca9fe9a-86f8-4740-880d-a92ff61f62ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960e545d-6cd7-4ea9-94bf-2ffc47960814",
        "cursor": {
          "ref": "e7dbecb3-a979-4ad1-a58b-47509a1d53ef",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e8d51fa-4313-497c-a33a-50721dc59c8f"
        },
        "item": {
          "id": "960e545d-6cd7-4ea9-94bf-2ffc47960814",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "67828395-548a-4d72-8790-677578700df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c728d5d1-6a44-4d9f-9f05-e40dd01e9cc0",
        "cursor": {
          "ref": "4e957204-bee4-450a-9d57-78399fe7be15",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8a064357-2c1e-479b-9d21-8eb8ce0c830d"
        },
        "item": {
          "id": "c728d5d1-6a44-4d9f-9f05-e40dd01e9cc0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "661190cd-d622-4af3-98bf-9d8f78197695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a0b119-2b9f-4048-8300-ca746d8c71ed",
        "cursor": {
          "ref": "f1b9676d-0926-4d1f-9508-eb31a8692fca",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0633c39b-c99d-436e-8143-1c851bab9fcf"
        },
        "item": {
          "id": "f4a0b119-2b9f-4048-8300-ca746d8c71ed",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "62ba0337-35ec-495f-b558-acb4fb5402b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1f4f4a-f9a0-463f-85e0-9d69529a13e2",
        "cursor": {
          "ref": "8f572843-e073-460d-b7bc-aaeceb72c6e3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c87ff912-c52f-4319-ae1f-dd6015dbfb4d"
        },
        "item": {
          "id": "4b1f4f4a-f9a0-463f-85e0-9d69529a13e2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e1fb251b-9199-4775-9d44-24f90da89e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0c8d77-acf1-49aa-ac7b-0268be66244d",
        "cursor": {
          "ref": "4c93f113-94c6-4043-958a-b90f00d688b8",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "053e61c1-bf9e-4714-9617-a8dbec824f59"
        },
        "item": {
          "id": "fa0c8d77-acf1-49aa-ac7b-0268be66244d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c50b307d-8172-4932-9767-7801fe8e1af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23221d06-aeba-4c3f-9db9-d743b6759220",
        "cursor": {
          "ref": "3a1b6908-7391-4fd0-9718-3a0af79cdf05",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ab104ccd-16ef-4f31-ac4c-c27898f50ed5"
        },
        "item": {
          "id": "23221d06-aeba-4c3f-9db9-d743b6759220",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b256a6c9-dd08-46c2-bfaa-ae3b7f8e2fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04d44cd-d116-470f-a532-eedaed21713f",
        "cursor": {
          "ref": "438ae411-9513-49ea-89ce-6fa6a2d20741",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "244859dc-786b-43dc-98ef-37c8ee40b69f"
        },
        "item": {
          "id": "e04d44cd-d116-470f-a532-eedaed21713f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "512ab259-3a6f-494a-8375-0833a7fc79df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dc2664-3a28-4ed1-badc-cd424faf622a",
        "cursor": {
          "ref": "329d19e5-57a9-4a36-aa7b-800d14a62d1f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f2e328fb-73ca-4bc1-9051-e3d945e520b5"
        },
        "item": {
          "id": "42dc2664-3a28-4ed1-badc-cd424faf622a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6b42178a-5692-435e-a658-414c2d16f3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60d7060-c3e9-45cc-b602-9a3541b5719c",
        "cursor": {
          "ref": "d240272e-ed9e-499e-8462-821e53aaa99f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cf1163de-d7cc-4c77-9c0e-29bcfc73d9f8"
        },
        "item": {
          "id": "f60d7060-c3e9-45cc-b602-9a3541b5719c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d2cb7895-b7dc-4086-8c88-0506e2a2da7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94d31d2-3c4b-478c-81d4-608e7786a8c9",
        "cursor": {
          "ref": "46b0aa62-8279-4d4c-b4d8-512a0cccbfd4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "be7beb1e-41e5-4e6c-a66f-acdc7c15c9b0"
        },
        "item": {
          "id": "f94d31d2-3c4b-478c-81d4-608e7786a8c9",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0cbe2ca6-9ba4-42b7-8ca6-729730c7b0d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b930abff-09d1-4eb1-8a6c-96aa3bb02b2b",
        "cursor": {
          "ref": "99d6a851-2eab-42ba-84da-06b491cf8d2e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "24c76c7f-5c67-4400-8e09-b8321fbd329d"
        },
        "item": {
          "id": "b930abff-09d1-4eb1-8a6c-96aa3bb02b2b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "23f8b333-df53-4b87-bf1d-b596cf85b75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052fe8c7-7e5e-4e57-be70-70ccce3c1f27",
        "cursor": {
          "ref": "56c5defe-9f82-4108-bf56-6843c14cb35d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9bd977d7-e8c6-490b-a3d6-262b29558ddb"
        },
        "item": {
          "id": "052fe8c7-7e5e-4e57-be70-70ccce3c1f27",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e0a81b22-e3ae-4900-9ef5-7fa3449cad6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d829d4f4-5a9c-4e26-8645-663424a2c6b1",
        "cursor": {
          "ref": "c2547087-22d5-403f-b7e3-413f5042f384",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d92fb48a-1f51-4283-a222-c87ec8e7bbe5"
        },
        "item": {
          "id": "d829d4f4-5a9c-4e26-8645-663424a2c6b1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "736f750f-f34b-41f5-b1b1-3294fad7f095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89846832-e9a0-4d3a-bb73-ff84d4d483b1",
        "cursor": {
          "ref": "61f367c5-f2dc-44a1-bab0-6ba8d4e78aa4",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "82b1d9b9-c0a6-47d1-9a66-91e63d636550"
        },
        "item": {
          "id": "89846832-e9a0-4d3a-bb73-ff84d4d483b1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7549d8e2-f8d5-4616-a5f4-cbfcdd519340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a2f24f-5a75-4521-af46-92e4f7b1d677",
        "cursor": {
          "ref": "4b94b95d-2870-4d57-bbb6-4db5b55a7571",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9a2e06ea-3577-4e90-9100-ddc6e07872ab"
        },
        "item": {
          "id": "e1a2f24f-5a75-4521-af46-92e4f7b1d677",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f4982aba-0b26-44dc-9f92-e4d8e81978f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bc6e38-ae8b-4639-839e-da2cce9303bd",
        "cursor": {
          "ref": "25302581-3167-4887-b418-3b22c6920d26",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "576a7926-7a43-4b22-88fa-d8981f613cdd"
        },
        "item": {
          "id": "a8bc6e38-ae8b-4639-839e-da2cce9303bd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0e2a6d14-4ce4-4d15-9c36-1914ae973ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c79e79-d523-461d-8a48-59a37046952d",
        "cursor": {
          "ref": "46284b1f-fa86-480c-b222-22fd15a29993",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f2926c91-d463-49ac-903f-111795e36f46"
        },
        "item": {
          "id": "86c79e79-d523-461d-8a48-59a37046952d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d46d446c-5c82-4467-9acd-e1e6bf76015b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1acb8e-3a00-4f79-8840-4cffbc1bd9fb",
        "cursor": {
          "ref": "8ee2ec12-d042-4867-b94c-1c5bce5f71f8",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "43e56a1a-4867-4792-9e2c-48fbe75a0235"
        },
        "item": {
          "id": "8f1acb8e-3a00-4f79-8840-4cffbc1bd9fb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a1730c3e-7269-426c-9b06-93e1def0f4b2",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "fe085b25-9e0c-4d69-a5d2-85f24f1102b8",
        "cursor": {
          "ref": "a6ea433c-2cc6-4f15-92c5-413445eeda91",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cb13da42-6467-4822-b10c-f79d6e28e8fb"
        },
        "item": {
          "id": "fe085b25-9e0c-4d69-a5d2-85f24f1102b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3a0094b3-078b-4fe5-a274-3753d08ad0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc37e583-9dff-4e91-a0e6-ea11d8420dec",
        "cursor": {
          "ref": "81b718cf-3022-4095-800c-954872b46604",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4d3f93ff-3ad3-400d-bc9f-e4ee806fe126"
        },
        "item": {
          "id": "dc37e583-9dff-4e91-a0e6-ea11d8420dec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ecaac36b-89e5-487c-be34-c341f421ef42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e9a77a-2af3-4ff7-b065-7c3d4883bf31",
        "cursor": {
          "ref": "fe139dc8-03cc-4f11-909c-43b89cfb6e8f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "096c9dec-e99c-4b6d-9ecc-66f44309e81c"
        },
        "item": {
          "id": "28e9a77a-2af3-4ff7-b065-7c3d4883bf31",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "78a407b6-1ecd-4868-ad5a-f923c97d47fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243a7b67-e98a-4feb-a162-5253cae4f72c",
        "cursor": {
          "ref": "3842640a-c4aa-458f-b0bc-a28ff5be4b08",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "97defc40-a9df-4d9d-a8cd-f97b1104dd40"
        },
        "item": {
          "id": "243a7b67-e98a-4feb-a162-5253cae4f72c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c17d765-7b22-4119-8155-02aac3480900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de354ded-abf0-43aa-9039-2caa64e9e0ad",
        "cursor": {
          "ref": "78f98b0e-689f-4a3f-8543-c627fac22353",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2eadd6cf-d3ac-4223-b72e-a51bd572a940"
        },
        "item": {
          "id": "de354ded-abf0-43aa-9039-2caa64e9e0ad",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8a374ebf-aa5d-49c2-8956-283407bb21bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4790c51-a76b-4fed-ab85-b8dc717deafd",
        "cursor": {
          "ref": "7cbb50c8-e27e-4b39-89ad-8770cbcfedba",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6c44a7fb-3e86-4586-9a8c-76f0a4a1d562"
        },
        "item": {
          "id": "a4790c51-a76b-4fed-ab85-b8dc717deafd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ccda86a2-ef6b-44cc-8290-cd4926c3dd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f27451-77ab-40cf-9bc7-f680261e9e80",
        "cursor": {
          "ref": "e7df9b59-75a4-48f4-9b79-89230f71c57a",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ef82f8a6-e9d6-4b10-b165-2534626455d5"
        },
        "item": {
          "id": "01f27451-77ab-40cf-9bc7-f680261e9e80",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6fded2ad-b143-4719-bbb5-cc39058425b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf0d313-5b63-48b3-87cf-8933d511c302",
        "cursor": {
          "ref": "b6e8cb7c-3913-42e1-89c5-323623a850cc",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "18bc707a-e43e-40cc-b920-7b6f24246e0e"
        },
        "item": {
          "id": "7cf0d313-5b63-48b3-87cf-8933d511c302",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c38e0b9e-9af7-4b6b-9963-395b639c56d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0558c51-4d9b-4466-9f4c-cd791da0a6b1",
        "cursor": {
          "ref": "c6be9d47-e648-4b67-ab2a-41b6fbe9171c",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ec47d154-48c6-45f2-ae69-cbaae81a58c4"
        },
        "item": {
          "id": "c0558c51-4d9b-4466-9f4c-cd791da0a6b1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "91f5ce39-8249-43ca-b7cd-e4be9f971ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011f0ebe-1c63-4f4a-89a3-013675f861c9",
        "cursor": {
          "ref": "abeccfbc-553d-4d45-acb7-da7222ba0058",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e221b0a1-88d6-4728-9028-be86ca007597"
        },
        "item": {
          "id": "011f0ebe-1c63-4f4a-89a3-013675f861c9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "53a28650-bbdf-43b6-bc43-668c021aedaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad738f37-98b6-4108-922b-934c2f3235a2",
        "cursor": {
          "ref": "5bf4b86d-2b65-480d-9ff0-b64e3b5dd306",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c54ad6df-c8fc-4e85-aacd-917d3b4f4176"
        },
        "item": {
          "id": "ad738f37-98b6-4108-922b-934c2f3235a2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "db692452-97a4-4181-b830-b6166a12ce21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc3eacd-d084-4755-a022-68ec7b382a46",
        "cursor": {
          "ref": "14ddb12e-39b2-4a71-a4f5-038094af485c",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "98cf099d-d717-4901-a8eb-cd3326c149e8"
        },
        "item": {
          "id": "2cc3eacd-d084-4755-a022-68ec7b382a46",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9fbc2bd9-58a4-4585-834f-c390c98776fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642ba9f7-608a-4c3a-829c-3b4cc6240884",
        "cursor": {
          "ref": "c6f8cf07-5112-47fe-9183-7f4e4ebeacdf",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bb486594-887a-439b-9a3a-1247007fcd5f"
        },
        "item": {
          "id": "642ba9f7-608a-4c3a-829c-3b4cc6240884",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "69415b87-4b9e-40d7-bb17-673257710683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d38251-275d-4f75-aa1b-d93fafc44e3d",
        "cursor": {
          "ref": "93de63f9-3522-4072-9f6a-053f969db6dd",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "591c64fa-8b4e-4f96-a1c9-cca4ef99d580"
        },
        "item": {
          "id": "36d38251-275d-4f75-aa1b-d93fafc44e3d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "482b2547-7e26-49cf-aa40-151e263e0328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5bb58d-bdbc-40fc-ad53-61167c45ad2a",
        "cursor": {
          "ref": "ac46d425-d945-4694-bb3a-3288b24169eb",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d392385e-c70e-4eb1-b299-d601daf05859"
        },
        "item": {
          "id": "fb5bb58d-bdbc-40fc-ad53-61167c45ad2a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5feb1737-a931-4cae-a356-2eebba80f77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466c7d43-4092-47ed-b4ed-ab276e7a2a6f",
        "cursor": {
          "ref": "585e2b76-9393-4765-b70b-4112ab63c620",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5de0e187-71d4-4869-a740-02248c1d3844"
        },
        "item": {
          "id": "466c7d43-4092-47ed-b4ed-ab276e7a2a6f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0022a988-0556-47eb-8dfc-df8f57925263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba1dcba-140d-41ee-8143-b279dbd0d4aa",
        "cursor": {
          "ref": "bb696532-7648-4f4f-a65c-7579d786f576",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b65e4c32-08c6-495f-a719-296a01f5451c"
        },
        "item": {
          "id": "4ba1dcba-140d-41ee-8143-b279dbd0d4aa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5b8a9ef6-cc5e-4d93-8093-e567bb56fcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad71ecf-1bac-4d94-8d47-9c2f0219fe5e",
        "cursor": {
          "ref": "1f041022-7bcd-48da-9624-1284f18aaace",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "90758286-9746-4cc4-8c6e-764944d0368c"
        },
        "item": {
          "id": "8ad71ecf-1bac-4d94-8d47-9c2f0219fe5e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9e1b025a-4f6e-4feb-b1c5-f2e77e6c9677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681a3a63-6b2e-460d-81b9-c25824032e20",
        "cursor": {
          "ref": "15761621-6090-4e6c-88ac-38e38b01d96f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cbd09976-6892-4154-8f08-c2c3a53e3ad0"
        },
        "item": {
          "id": "681a3a63-6b2e-460d-81b9-c25824032e20",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e973a84e-f3ef-493f-9927-45889f45c637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1162eaae-52b2-4f3f-b15b-eff4d1d501b6",
        "cursor": {
          "ref": "bbdb57be-1848-4f66-816e-60b2bfd9868c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6c430837-426e-47b2-a6e5-1325bf84594d"
        },
        "item": {
          "id": "1162eaae-52b2-4f3f-b15b-eff4d1d501b6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e86f85fd-f7de-4578-9a9f-41b0d65032c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde8ebf0-d420-44b7-a405-ecc05dd07d9d",
        "cursor": {
          "ref": "d1b3ffb6-b0b8-48ec-9bd8-5f229e1b039e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1d847b6c-2a5f-4519-b99b-4f324aecb3d7"
        },
        "item": {
          "id": "cde8ebf0-d420-44b7-a405-ecc05dd07d9d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "59665617-93c8-483a-9436-979a4ba41e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9622225-7e0d-43a7-866a-0f163138b5d0",
        "cursor": {
          "ref": "9585af6a-cc71-44d5-8721-d5fba56b013b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cb1d8d4a-9420-4a2b-818c-31cce1cd79f1"
        },
        "item": {
          "id": "e9622225-7e0d-43a7-866a-0f163138b5d0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "063e974f-f6b5-40c8-bc16-7adb0241e814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7152175a-0a16-4017-969f-04cf5169e0b1",
        "cursor": {
          "ref": "bb0db916-7495-4750-839d-c2694ac8c15e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a73db5bf-7434-4935-9ab1-d9cb745bf925"
        },
        "item": {
          "id": "7152175a-0a16-4017-969f-04cf5169e0b1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4bd7c4c9-4dd4-4fb2-a23b-a2110a148eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50565bb3-4082-4f02-b7ff-056e7ade8613",
        "cursor": {
          "ref": "432ad069-4731-4269-bae2-de86cfef2e30",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2f6250bc-d94b-4e50-ad7c-ccd77730237e"
        },
        "item": {
          "id": "50565bb3-4082-4f02-b7ff-056e7ade8613",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dbc61d61-308c-44dc-8b87-f28e8b3a5d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1180e0d8-8569-4095-8a61-34dcf8d8f649",
        "cursor": {
          "ref": "0a21451a-50bb-4620-b05e-b9edfcdc63c7",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "54dd54e1-3a2c-42bc-83fc-ee327fd8bb85"
        },
        "item": {
          "id": "1180e0d8-8569-4095-8a61-34dcf8d8f649",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "edbc4aae-0fab-4dce-a57e-f80333b4fa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8a27a1-9638-411e-8171-7b0835197eb2",
        "cursor": {
          "ref": "bd9b28f1-1b8e-4e0f-8443-6eca02209863",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "18016206-e064-4572-bf66-71fba6c60287"
        },
        "item": {
          "id": "bc8a27a1-9638-411e-8171-7b0835197eb2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4d1db126-ed66-4566-814c-ac9d4487efba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b446d965-184c-4e79-8ab3-77399ffdab4f",
        "cursor": {
          "ref": "ea74dd2c-133d-44b8-aebd-85b7f65c408e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b462c4bc-334d-4bfc-933b-75ec331c6d0a"
        },
        "item": {
          "id": "b446d965-184c-4e79-8ab3-77399ffdab4f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "442806ce-bc71-4723-9dbd-916b72c75c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f34c99e-7b94-41e7-a74c-db9bff69f8b0",
        "cursor": {
          "ref": "a0102a42-fd40-40ec-8f50-a6c5b9e692da",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b0b52425-4b6e-4ae3-956b-f843aa262f77"
        },
        "item": {
          "id": "6f34c99e-7b94-41e7-a74c-db9bff69f8b0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2a5e550b-f42e-4e3a-97a2-b4c7774c4fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272bcf2a-0486-4421-9437-a8e8c5b2e012",
        "cursor": {
          "ref": "d933ce28-d5bd-4c59-bbb3-40259bd7ac1e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e08283fd-597a-4cd0-9b1b-2caee3482939"
        },
        "item": {
          "id": "272bcf2a-0486-4421-9437-a8e8c5b2e012",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "194eef3d-9330-4de0-acc9-d05333406c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a038a1-6520-41fd-86bd-9e4884a6fd3e",
        "cursor": {
          "ref": "c8ba9949-3ba9-4a7b-84ee-167f6f936998",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "491ca481-dc83-421b-b142-bf81d3be70d6"
        },
        "item": {
          "id": "c5a038a1-6520-41fd-86bd-9e4884a6fd3e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a37c9f0b-8731-4052-bd97-3d5ff26bd9c2",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e04bec4e-792b-4693-a7ba-9d72a9bc2154",
        "cursor": {
          "ref": "7fba18d3-29b2-4d3e-968f-9ebedb7d5807",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "565f5d8e-782b-4798-bdd8-4bd88bb5a5fb"
        },
        "item": {
          "id": "e04bec4e-792b-4693-a7ba-9d72a9bc2154",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b6c13679-6ee4-4407-b280-91d977c09ba7",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b21d3d96-7964-427e-a2b6-22be2d5a1020",
        "cursor": {
          "ref": "a6fe6c68-7500-4328-aace-ade4137250c7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8a9bb83f-571d-441d-8c6f-c9fff883bbd0"
        },
        "item": {
          "id": "b21d3d96-7964-427e-a2b6-22be2d5a1020",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ed968908-2ccb-470f-b714-23106d38e86d",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8a1e76fa-5a7b-4875-88f2-dd4dba732883",
        "cursor": {
          "ref": "d6037180-9d95-4c47-8f9c-648ef4f30a52",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1b6f3550-4207-4106-b4ac-a59cd5a1e986"
        },
        "item": {
          "id": "8a1e76fa-5a7b-4875-88f2-dd4dba732883",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8deec354-7ce5-48a6-8767-9a887d03e944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84efe282-3ed1-456d-854f-fd7c677673b7",
        "cursor": {
          "ref": "5bf33cea-50d8-4a15-b768-7ae6e0a55031",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7eee2170-1e13-40da-8285-6016d6f611c3"
        },
        "item": {
          "id": "84efe282-3ed1-456d-854f-fd7c677673b7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4497703c-5c93-49d2-aa82-fa3c976d450b",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "86bed6f0-0e4e-4a0d-a7ea-28faaf233559",
        "cursor": {
          "ref": "da4d3cd9-674c-465e-89ef-052cd8494743",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "99027f3a-6048-4f29-a6f0-7e0f87f4a18a"
        },
        "item": {
          "id": "86bed6f0-0e4e-4a0d-a7ea-28faaf233559",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03fccfd8-91af-4ecd-aab5-89f8d9f4a9b0",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "414f5d6e-fe4f-4eea-a0d3-136b054926c5",
        "cursor": {
          "ref": "0c07d45c-8f25-4fb6-ba99-37753671daf8",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ea6e2e18-99b7-4086-8919-570b79e00700"
        },
        "item": {
          "id": "414f5d6e-fe4f-4eea-a0d3-136b054926c5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b0d58207-f8a7-4004-b0f0-e0ee087d6f3f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4f39f6b1-d4a5-488a-9560-0c151d72a678",
        "cursor": {
          "ref": "5999e2f3-aaad-4c5f-a437-c11ef9bbd2d8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d2b3016f-3e60-4ec1-a7a2-c8a180c52dc1"
        },
        "item": {
          "id": "4f39f6b1-d4a5-488a-9560-0c151d72a678",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "defa8037-8bea-4c55-b67b-d71dd65b53cd",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "acc36c65-9c84-45b7-84e6-7b45011b4a72",
        "cursor": {
          "ref": "014eb447-8169-4da0-8489-4dae6682d403",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0aecfcd6-3dee-46a4-9365-8069e23bbbbe"
        },
        "item": {
          "id": "acc36c65-9c84-45b7-84e6-7b45011b4a72",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6aee1a3a-7899-4ba2-9353-0998047a6aa8",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "644452a2-842c-4680-97e4-8663d4978829",
        "cursor": {
          "ref": "6c5d249f-365b-4d51-a552-53932ffd7d5e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f31840ac-cada-400f-8509-c366f78ec68a"
        },
        "item": {
          "id": "644452a2-842c-4680-97e4-8663d4978829",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8d36d7d1-e987-45a4-abc4-537148c3cca8",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "659e23a1-f70d-433c-99d3-8077f283efc2",
        "cursor": {
          "ref": "fcbdf248-c6c4-4b70-940c-b24f7dcbe46f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "05f11693-2833-4b4d-b7d4-3904a55fd750"
        },
        "item": {
          "id": "659e23a1-f70d-433c-99d3-8077f283efc2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "039c9c1a-4584-46fc-bbda-58438873bd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7294be-9b00-4f81-9b6c-52e27e985e21",
        "cursor": {
          "ref": "903e9c17-eca8-44b3-983d-2d2f8bafb55f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d5ff113e-c5b1-425f-a884-ce7b3a95ad0d"
        },
        "item": {
          "id": "3a7294be-9b00-4f81-9b6c-52e27e985e21",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4742e8ab-131b-4619-8274-0973d02a94f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adbcf0f-8f7d-4268-b23e-033875bf5be8",
        "cursor": {
          "ref": "10a0a165-ac03-4745-9916-e1c43ace28e8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5e3019a1-1924-4dff-bc2f-c1c6452ab9b6"
        },
        "item": {
          "id": "4adbcf0f-8f7d-4268-b23e-033875bf5be8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8f84c246-f19e-4b4d-aef2-2f41e7a95786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f911d3d6-f91c-48ff-9f15-05ccc8f204d5",
        "cursor": {
          "ref": "428916c9-00eb-495a-a675-533967e7e0bb",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7393f20c-7276-40a3-a3ae-9ebb15ce8b40"
        },
        "item": {
          "id": "f911d3d6-f91c-48ff-9f15-05ccc8f204d5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f02ff687-3827-4003-985b-0c864fc67cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d65794-c42b-4187-9c66-fbb706c4d7a4",
        "cursor": {
          "ref": "89fdea92-63d6-4ccb-b02b-a6509ee85c39",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cd7ed0e6-f5e5-4a1a-ab3e-c1505b66aadb"
        },
        "item": {
          "id": "79d65794-c42b-4187-9c66-fbb706c4d7a4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a54f30ed-54fa-4c16-8d8e-cfd93c6191ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc45887-4564-4942-931d-c8b50039155e",
        "cursor": {
          "ref": "aec8a27f-83fb-4234-9d93-7e35003431c1",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a7e461ef-8f6d-4e0a-bb55-4164b0f64aa1"
        },
        "item": {
          "id": "7fc45887-4564-4942-931d-c8b50039155e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b2a93e48-62c3-4593-b9d9-2e3f8525a118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef9c7ae-3fac-44e2-b6ed-da2e2efa7fb6",
        "cursor": {
          "ref": "d5ce6bd5-dd22-4aa0-8905-2f03b23e52e3",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "309c3c0b-1085-438b-9001-9a23131e23fd"
        },
        "item": {
          "id": "eef9c7ae-3fac-44e2-b6ed-da2e2efa7fb6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b5b89764-19ea-4d81-b64e-29919bfba7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d904f1-d00f-4563-83f8-c492fecbce30",
        "cursor": {
          "ref": "4362c41a-9a8f-4c89-b989-2df00606d2f2",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "00d3d512-86a4-4b75-9421-349ae6df006e"
        },
        "item": {
          "id": "62d904f1-d00f-4563-83f8-c492fecbce30",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2fb9ecec-6a2c-49c4-8e8d-c6aed93d979c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e31c47-2a8f-4364-9451-f984cf143eac",
        "cursor": {
          "ref": "49731759-af16-44bc-9c0e-1c9d3beb169d",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "025b7526-ee0b-4baf-9ccb-47df2d104e74"
        },
        "item": {
          "id": "92e31c47-2a8f-4364-9451-f984cf143eac",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0573eb0b-fa7f-43ce-ac82-c4364626f524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79b5449-2931-43ad-b950-c1894d2279a0",
        "cursor": {
          "ref": "21da1213-071d-411f-8e91-3e0d82cf92a4",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cd94f441-927a-487b-8430-f5dbd130fe7b"
        },
        "item": {
          "id": "b79b5449-2931-43ad-b950-c1894d2279a0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0f85fafd-0ba3-4b7c-9697-f0159b326519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a629c067-68c0-4400-afe4-e44ae0b0db8c",
        "cursor": {
          "ref": "0ca69d41-dcdd-49f6-b63d-cf143339078c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f5fad8ea-af10-4558-8553-6ea7430d5158"
        },
        "item": {
          "id": "a629c067-68c0-4400-afe4-e44ae0b0db8c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "842fa095-3904-4a2a-9b98-da3ca657d5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2075e6a8-d9ce-4df1-b18b-0db3f23480a9",
        "cursor": {
          "ref": "22166a4d-2613-411c-91f3-af33fb950372",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c968e515-7454-496b-8ec5-3c7390abde08"
        },
        "item": {
          "id": "2075e6a8-d9ce-4df1-b18b-0db3f23480a9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "12c71de4-ad12-4473-8990-930eac0b2adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95062184-b539-4102-bbd2-9d10735b778a",
        "cursor": {
          "ref": "e19dd3d2-756e-41f9-8bf5-9ff19f81bb4a",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "356a7b60-50ab-4c18-bf39-174f5a8699bd"
        },
        "item": {
          "id": "95062184-b539-4102-bbd2-9d10735b778a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8617f423-c59e-4784-bc2e-ab7801c931cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15adcda6-a291-4e9f-80cd-45fad869d0cb",
        "cursor": {
          "ref": "50ec255f-f449-463a-8696-1bf4ea97522f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b08cf33c-ee27-4196-925e-2b8c57bd753e"
        },
        "item": {
          "id": "15adcda6-a291-4e9f-80cd-45fad869d0cb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4219f572-f19a-4896-be34-fd13329de59e",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ba68965b-de76-4181-8c27-7054faeb2d63",
        "cursor": {
          "ref": "a7946e22-ada9-4e2b-ab24-b522cbc2c1f5",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "95b5d2a9-70bc-4fea-a373-d60a617d1d99"
        },
        "item": {
          "id": "ba68965b-de76-4181-8c27-7054faeb2d63",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a7b0b397-ee02-41da-aba3-2c166b346526",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c170c8e5-5ae6-4963-b9b9-759b7f5aef20",
        "cursor": {
          "ref": "86fa946f-e77c-4914-92a9-87f5d8c6e600",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aa79d588-5615-4381-acdf-07fa15000f83"
        },
        "item": {
          "id": "c170c8e5-5ae6-4963-b9b9-759b7f5aef20",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "79582a3a-67a4-4b0e-ab8d-4bd0046f5b3a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5fedbf99-0570-4357-82c0-ac9cc43b39dd",
        "cursor": {
          "ref": "8827239b-1807-495a-9245-8ad88035d787",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5a3cb194-ce04-4d1e-8603-74e9c44a9f3c"
        },
        "item": {
          "id": "5fedbf99-0570-4357-82c0-ac9cc43b39dd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9650703b-02ac-4dae-bfbc-9e65cd235697",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "82b5bd6d-209d-43c5-906a-d753769c57d0",
        "cursor": {
          "ref": "48670736-2fc3-4e7d-9342-78b0d9eeff6f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "340c2bcc-4cb8-41a8-b53c-4fdcd39f904c"
        },
        "item": {
          "id": "82b5bd6d-209d-43c5-906a-d753769c57d0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4db7d0cb-49b5-4e82-b9df-0b6f47bea515",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b62c2997-ee44-4da4-ba1a-2e04f9af53c8",
        "cursor": {
          "ref": "9ac8af54-abb7-4527-894c-b2c05887f426",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f8621565-3a12-4d22-9390-a6354352d432"
        },
        "item": {
          "id": "b62c2997-ee44-4da4-ba1a-2e04f9af53c8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "19aaf72c-d2ff-44a9-8d25-3ec2a77e0036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d3d702-1bbe-4a7f-96a0-09fca36e4e12",
        "cursor": {
          "ref": "8c749716-938b-4061-92c8-edc81fbe22e8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "62a4b8b6-95b4-4f76-a988-8c5cbbdbc4a5"
        },
        "item": {
          "id": "e5d3d702-1bbe-4a7f-96a0-09fca36e4e12",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d5e01407-396b-41b0-bbcf-9cdc91699cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cba7bf-17d4-4b81-89dc-f9424c98e107",
        "cursor": {
          "ref": "3f91890d-2d03-4474-953c-c09a116bab21",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5bfb5d55-e8b7-43f5-9f7d-1da14449678c"
        },
        "item": {
          "id": "55cba7bf-17d4-4b81-89dc-f9424c98e107",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "862c2764-f0cd-4cbc-b024-a2b611837b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce44e736-a2d7-4001-a796-9c6e14ea9aea",
        "cursor": {
          "ref": "a6ed7197-d4f5-491b-80b8-fa566d99e50c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0a961500-5476-4f2e-8d8c-178d0d1f29bf"
        },
        "item": {
          "id": "ce44e736-a2d7-4001-a796-9c6e14ea9aea",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ed57776a-3a1f-4ed1-962a-83ed53914c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46dcfdb-1fe6-4e37-b596-556cafa3ec2c",
        "cursor": {
          "ref": "401b8a35-5442-4f2e-941f-c95b00478a62",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f0fa1609-7e45-4ab6-b1ba-f79464323bbd"
        },
        "item": {
          "id": "a46dcfdb-1fe6-4e37-b596-556cafa3ec2c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4afe5359-a37e-4e46-9e97-b579ce630b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54897608-3b51-4ba0-b31f-059bcf525e2e",
        "cursor": {
          "ref": "ff996f2f-8647-49db-b25e-79c06d54d81d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5d8ff588-5060-4935-b951-01e968601fc8"
        },
        "item": {
          "id": "54897608-3b51-4ba0-b31f-059bcf525e2e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "639c7527-1f75-441e-b39e-caffccc8715c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bfff0b-50d4-4d8c-8f79-79ad938f11d6",
        "cursor": {
          "ref": "fab83efc-a693-4606-9017-d02891f3ac06",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8dcf3fe1-60f7-4490-ad7b-f87e9927224c"
        },
        "item": {
          "id": "82bfff0b-50d4-4d8c-8f79-79ad938f11d6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0f5753c7-6653-47a6-8570-0eba9861e697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4803b1d-ed2f-4279-8a7a-954e63f22f4d",
        "cursor": {
          "ref": "1bcf75e9-572d-4a90-a1ec-c4b26bf11bfd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "59c3099b-5d16-4b7c-93bc-d22cc4e79acb"
        },
        "item": {
          "id": "b4803b1d-ed2f-4279-8a7a-954e63f22f4d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9f8f4abe-5edc-4620-8de1-7352e983691e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bf66ae-cb76-4f70-bec8-ce1d227bcab6",
        "cursor": {
          "ref": "bd2b4f34-6ca9-478e-9bec-a951cca48709",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "eb64f3a1-e52f-416f-aeef-9b31840e7ac5"
        },
        "item": {
          "id": "d9bf66ae-cb76-4f70-bec8-ce1d227bcab6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "916cda49-3f8e-4d97-9066-06e874733235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7766db14-9a8c-429b-afdf-45ccd8741fe8",
        "cursor": {
          "ref": "592da59a-0fa9-4a61-885d-8942f6247c3a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "98acd789-8270-4191-952a-ba373bb2d8f4"
        },
        "item": {
          "id": "7766db14-9a8c-429b-afdf-45ccd8741fe8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9d00f508-1f72-47ce-b1ef-21abc4c67079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5294ef59-0623-4b79-b73b-e16956317508",
        "cursor": {
          "ref": "dc64bc82-8e0d-496d-afc2-8cead307b772",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "73697bbb-b9da-4e9e-959f-8b9c5be00c06"
        },
        "item": {
          "id": "5294ef59-0623-4b79-b73b-e16956317508",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "976f392e-4e3d-4b81-9600-c15cab656fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7abc40-fa4b-45cf-bbeb-5c8e12bd0699",
        "cursor": {
          "ref": "335aa048-d4fa-4efc-9641-684f8d027036",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9bda351c-f787-438b-b0b7-8757197e42ad"
        },
        "item": {
          "id": "ac7abc40-fa4b-45cf-bbeb-5c8e12bd0699",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "28764ccd-4402-4279-b87f-6b02ae3b0b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023cf08f-17bd-44c1-b159-277dcca80ea9",
        "cursor": {
          "ref": "e583b535-5427-41db-8acf-5e93c1e88fb3",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0cc6d3ee-efda-4f91-849d-11cdf1b4b7cb"
        },
        "item": {
          "id": "023cf08f-17bd-44c1-b159-277dcca80ea9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fc7dd3d5-bc06-44dc-b16c-2b079ba886d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e127af-9795-4759-a9c7-ccafa19e8bd1",
        "cursor": {
          "ref": "375af13f-de2a-43b2-b193-cdabd0dfde0a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ad8bd7e1-63cd-4985-898e-6048ec7e1af5"
        },
        "item": {
          "id": "27e127af-9795-4759-a9c7-ccafa19e8bd1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2fb2b01c-900e-474f-be99-e8559e12909d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fde316-af30-4d59-b129-f915f8c9fe1d",
        "cursor": {
          "ref": "dbd23cf9-4cb2-43b1-9350-f7d45a14755a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d7fdd368-2578-489e-b7cd-280c0d13b468"
        },
        "item": {
          "id": "83fde316-af30-4d59-b129-f915f8c9fe1d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "25354dc6-8b0c-45c4-ad12-6a8ebc80ce24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a021796-dbd6-4f25-8d03-213c8f7daeb9",
        "cursor": {
          "ref": "5e59647b-d839-447c-83c8-10d758e189c5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d8b957cd-2f73-4101-bab8-d35116663e97"
        },
        "item": {
          "id": "7a021796-dbd6-4f25-8d03-213c8f7daeb9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "05d16140-09d2-427b-80b9-857834f634e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5efb41d-c263-4d20-862b-e23564fc2c5f",
        "cursor": {
          "ref": "26b11cfc-71b0-4f73-a334-a7e3face1aa7",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "01de0a3d-b45c-4d4f-ad14-bb57e919d70e"
        },
        "item": {
          "id": "e5efb41d-c263-4d20-862b-e23564fc2c5f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4c9ff004-a739-4ee6-a24e-68e9d4f8becc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0465249a-d953-4441-9046-87063fd92b0c",
        "cursor": {
          "ref": "97d886a3-6cdf-4e59-a7e1-04b3ccab8516",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8e5ce090-ac75-4727-aa60-e407fb1e4f3f"
        },
        "item": {
          "id": "0465249a-d953-4441-9046-87063fd92b0c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0a61a572-b9ef-4b9b-860b-9ee3967f69c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e342e63b-3701-44c5-b3ef-782f54af1ab6",
        "cursor": {
          "ref": "2f536848-fcf6-4e0a-8857-680511beaa2b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ed380981-5a5b-4a71-9334-4337afdbb519"
        },
        "item": {
          "id": "e342e63b-3701-44c5-b3ef-782f54af1ab6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "84261d25-b272-40ac-8704-80e445b88871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68d5d27-6909-41c7-bb33-694c3913bd25",
        "cursor": {
          "ref": "faf1901d-3d3d-4623-894d-2e7ec59911d1",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "598480d9-1877-4d89-8e78-8afff5c03dc6"
        },
        "item": {
          "id": "b68d5d27-6909-41c7-bb33-694c3913bd25",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "866c3134-133b-40be-9074-7495fa32d19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a39f69-f9a7-4080-bcaf-e0c7b9794bb8",
        "cursor": {
          "ref": "b9c25240-0aa2-4c61-9ee5-c952969ec4a8",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d2866566-043d-40f0-be01-d48c620e1839"
        },
        "item": {
          "id": "47a39f69-f9a7-4080-bcaf-e0c7b9794bb8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f6ef2508-18d2-4f77-8532-9e98767ef450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc7351d-7893-4415-9d59-a4b3198e58d3",
        "cursor": {
          "ref": "843a74e9-c03b-4b36-bc1a-0a23df43af66",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "33d3d21c-8176-490a-bdd2-9c0947b86393"
        },
        "item": {
          "id": "7dc7351d-7893-4415-9d59-a4b3198e58d3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c41627f1-a5c0-4236-8ed8-15f92176ea77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c4cac6-15bb-4164-b274-87b45407c7f7",
        "cursor": {
          "ref": "4a84c991-229b-4ee1-a6d9-6015aec98c45",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ad1d3c81-bedb-48e5-b4e6-ddc39bb28297"
        },
        "item": {
          "id": "18c4cac6-15bb-4164-b274-87b45407c7f7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5eccf356-5ded-4162-a1c9-554a52f6f68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c80625-03f6-46df-8411-451bd27514a7",
        "cursor": {
          "ref": "1a971393-3702-474e-9a8f-5473cda88681",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b1e02afb-bbf1-4f42-b225-a3dba4fc481a"
        },
        "item": {
          "id": "c5c80625-03f6-46df-8411-451bd27514a7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8d320c3c-b0f6-4adf-b0d1-f76873a3a5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c71c88-44ec-4238-a0df-a5df303a083a",
        "cursor": {
          "ref": "e03f12ea-c751-428a-b92b-1ad5d8935a17",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "913f5944-32db-47c1-b117-0163784b342d"
        },
        "item": {
          "id": "70c71c88-44ec-4238-a0df-a5df303a083a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d4e41cb8-eeb9-4d0a-b442-a3db273374fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77632e0-cd97-449c-9a6c-8e780ad85a73",
        "cursor": {
          "ref": "d5921f86-2a6e-41e5-8b19-646b594c15bd",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f7617685-4e87-41ae-b1a6-8e8444e348f6"
        },
        "item": {
          "id": "a77632e0-cd97-449c-9a6c-8e780ad85a73",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "03039bbc-3f4e-4c7a-af85-adf23d633af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d4dfd1-b685-435e-b105-664a6c3967f6",
        "cursor": {
          "ref": "5678c9b5-c6fe-46f6-9563-72da01adb807",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a691dc46-cce6-4293-a831-09b0d9b42183"
        },
        "item": {
          "id": "34d4dfd1-b685-435e-b105-664a6c3967f6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c763ac57-a1ce-431a-a943-7ce86230e998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e78c014-668b-436f-8ce2-cd425e5c5050",
        "cursor": {
          "ref": "21646ff4-4db9-4aa3-a812-a2e1f042ddf9",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d48eeb5d-677a-48d7-bb2b-6f44a410ee97"
        },
        "item": {
          "id": "2e78c014-668b-436f-8ce2-cd425e5c5050",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "563d1b96-3dc8-4cf6-9d08-67492c605976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04efdea4-e135-46a2-aed8-b18de36687a6",
        "cursor": {
          "ref": "a6bbe8c1-4934-4142-8340-8f00ada8902e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6d334840-615b-4ca0-b253-7ee31ce6bcc2"
        },
        "item": {
          "id": "04efdea4-e135-46a2-aed8-b18de36687a6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f63100cb-ac24-4971-b9d2-ebe86ebdff0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c6ebd6-473d-4b16-84d0-9cf8b077a5b4",
        "cursor": {
          "ref": "7c2f5f52-5391-46b7-81e4-66e71a9c337a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e2702737-c7cd-4e85-95f5-8b1244b85bc7"
        },
        "item": {
          "id": "03c6ebd6-473d-4b16-84d0-9cf8b077a5b4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e1bf8ad4-a2ce-472c-8b14-0efc8ff764a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1e4924-1b93-4339-88a9-edebba1b54ad",
        "cursor": {
          "ref": "bc80c302-3bc3-4258-a860-24265d0da77e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "24488f39-7585-41ee-82a9-bd73d621d90c"
        },
        "item": {
          "id": "3b1e4924-1b93-4339-88a9-edebba1b54ad",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "62c801f2-d1f1-48f2-a32d-b5894e911ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eae4221-8ec5-4580-9f95-9d3a8324c984",
        "cursor": {
          "ref": "be7000d2-d558-4934-b18e-d632a3a2d6cb",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d629211c-af72-44f0-ab88-2d5c15dc0651"
        },
        "item": {
          "id": "4eae4221-8ec5-4580-9f95-9d3a8324c984",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "da22dfa0-34b2-455f-9f1b-7bc5ac03d954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376927d7-851a-494f-ac39-62b977ca5e9c",
        "cursor": {
          "ref": "d71087fa-7963-46e2-9943-f267114e7bee",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "53c0c2cd-09ba-4a3f-9866-068cb9f018ad"
        },
        "item": {
          "id": "376927d7-851a-494f-ac39-62b977ca5e9c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "89f28a96-dfba-4c1c-8efd-8b9d83374ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1ff522-f6e9-4d7c-a5ec-aa6c0efc9815",
        "cursor": {
          "ref": "e3226635-c16e-4f30-bd82-e7eb91bb53a0",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "acc66b34-0e5e-4986-a609-ff2611f7dc1c"
        },
        "item": {
          "id": "0b1ff522-f6e9-4d7c-a5ec-aa6c0efc9815",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c6c0da6a-f54a-440e-b39e-eeeabb842c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d209a533-cc8d-4618-9bdc-20a63a9d4c2f",
        "cursor": {
          "ref": "3735a3ab-c057-4789-8db1-07f72090c655",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "008d0770-5c68-4a9c-9c95-ffb119453c9a"
        },
        "item": {
          "id": "d209a533-cc8d-4618-9bdc-20a63a9d4c2f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8a2421fd-7f29-439a-999f-fab27d38ffb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a581e8bc-92b7-418b-963a-40228ef00532",
        "cursor": {
          "ref": "74ef207b-56e6-478d-bb7a-ea968d178f7f",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3e6ca0c7-39c4-4a76-a417-31a822c67ad1"
        },
        "item": {
          "id": "a581e8bc-92b7-418b-963a-40228ef00532",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "69bfd40b-8dcd-4c3f-8eaa-d2e39edc5df6",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "17cc26b0-4a85-4652-b36c-5eb2d463d785",
        "cursor": {
          "ref": "f4a4cc54-a3f8-472e-b403-8051e1c72b2e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d42ca7f8-d526-49b6-b9b1-3f9ebfac1ade"
        },
        "item": {
          "id": "17cc26b0-4a85-4652-b36c-5eb2d463d785",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0122db4d-5e39-4c80-8602-772a0c54b04f",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35f5dfd-3bfd-49aa-9b39-7134966496cf",
        "cursor": {
          "ref": "0f349e99-cf15-4bb7-976a-ca2535c412a7",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8a6fe2ab-741f-4203-ad6e-365486982876"
        },
        "item": {
          "id": "c35f5dfd-3bfd-49aa-9b39-7134966496cf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bdd1e60c-8de9-442c-bf0c-a199ab2f5bf0",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "03551914-80e1-445f-bd87-de2f7de47c20",
        "cursor": {
          "ref": "2b3803d7-a506-499a-a673-6684ed5ca51f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "db38c66d-d44e-45b1-a602-7f565851846d"
        },
        "item": {
          "id": "03551914-80e1-445f-bd87-de2f7de47c20",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8e0c652a-d28a-4090-ba5a-8f10a2a530a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03551914-80e1-445f-bd87-de2f7de47c20",
        "cursor": {
          "ref": "2b3803d7-a506-499a-a673-6684ed5ca51f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "db38c66d-d44e-45b1-a602-7f565851846d"
        },
        "item": {
          "id": "03551914-80e1-445f-bd87-de2f7de47c20",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8e0c652a-d28a-4090-ba5a-8f10a2a530a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94024fbf-d4b2-4963-87e6-9602d8664f68",
        "cursor": {
          "ref": "56d49500-d8fb-42c6-a432-cf8ac08f5c1e",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2017bc09-6383-46d8-aded-df83ac83ae90"
        },
        "item": {
          "id": "94024fbf-d4b2-4963-87e6-9602d8664f68",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "739d7079-0f08-4102-86f9-943730a2bfe8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4ec414-6578-41ea-9bc6-bb877e885ced",
        "cursor": {
          "ref": "429eed3a-dc6b-42ba-ae81-373f47b1cff3",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "421031b8-3f61-4419-8b40-a499e66a9adb"
        },
        "item": {
          "id": "0a4ec414-6578-41ea-9bc6-bb877e885ced",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fe2cc552-eead-4054-9d4e-920d7759d004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}