{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3a142fd5-f867-48bd-810c-196b86accd37",
        "name": "Clear Cache",
        "item": [
          {
            "id": "89b0d5f1-0a2c-4ad3-aedd-769e478e8688",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e04ad49-6bae-44a8-bffa-78fb48db451e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "22d402e6-bdd4-4b60-8d7e-823d1c813695"
                }
              }
            ]
          },
          {
            "id": "4fdc146a-f7d5-4469-9cbe-1af9380486f8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "16ba1a79-8bf4-4921-bd1d-43589d7e3dbb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "697f69a2-fd04-46ef-b54b-48ff4a01adf9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2b68b673-389b-41f4-8fb3-852f9ff0a064",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f0d9a218-8e69-4062-9ef2-d51906e2108c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5ba34d6-d564-4c8f-81d6-93d37d542c3d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df5e2dc1-f106-4770-bd42-566e885ab2f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f5e272e-c911-4e34-98a1-ce5f5c42f1c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99617c75-dcce-4bfc-b861-1a3c2ba9238a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cecd83db-0b14-426e-8b78-1fcd5095939a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "baaff5f8-cb5c-4920-91cc-ee4527576789",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4771cf36-172c-4e47-95fd-0df1a2e721bd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ed47e40-b384-439c-a8fe-963cddf69ec7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "282ebe10-b4f5-4b29-bd3e-55ea496fb239"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c5ea520-d336-4af9-ab2f-24d39021c481",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38a6283e-a70f-47d5-855d-422a0003c1e7"
            }
          }
        ]
      },
      {
        "id": "fc301e3f-1557-47c7-b569-f4d9f108c22a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7c4e886e-84b7-4849-8120-c833b61460ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa04c3d4-793e-4c4c-841e-bcc34caed8d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6730c89e-36d3-409f-88c5-b2f260f096c4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5197a534-51a8-4329-b291-8bc2f2345cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eca3a79-8e62-4832-b8de-68f70695dc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1ce1ce-5da9-4150-ac6c-d5e071cc2343",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0077519a-7b2d-4940-863a-8cd2dd115bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eee2337e-d3e5-4daf-9828-0b2dbc8b5389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d698f1-17ad-495d-9c56-73760df0ecfa",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e7a914-4efe-4289-bcbf-c4696fbb800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d7648c6-dd58-4153-b4cb-30914bdf042c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66da3fed-b38d-481c-9ba8-d3337e6c16f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e5bc185-95a1-4a15-a2c8-c724c22530ee",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d23c71-0a1c-4a19-a345-b38e7650624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5de31b09-6ee5-46ef-b670-89628832115a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a632d9-edd9-411b-b9c0-37a9f6446daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb12ae2-f2c1-4aa2-907c-b1afdc12c5f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f0c5a2a8-205f-466a-9b41-8fb911895b4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7773f787-98fe-4637-a628-34c8e2d03b1f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5717263b-6248-433c-8f4a-664e1430d3f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "02b5a7e7-5043-4dd9-90ae-84feb133b1b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "528ac717-22fd-4bdb-8516-45aae2a4e735",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5b2381a2-84a2-42ff-94f3-66282221eb71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "918a8716-c23e-4220-aa9b-06be04fe0fc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ea8a144-55f9-4bd9-985e-c8677c56895d"
            }
          }
        ]
      },
      {
        "id": "0e7d741b-9e32-462b-a26c-6477b035d896",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9e8d7b92-e859-4083-8770-2ed51c297f66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1473a680-7fda-44a7-9018-4e75daa3d37b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "edda8724-49e0-4f51-9500-07a1e5e48959",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d870497f-b092-413d-acf8-92c4ea33feda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de95c418-0052-4e95-beea-cc76fbfaa898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a259cd7f-59db-4ba3-bef0-110191cdfc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4197ec1f-3c54-4c80-bdb9-836e9b152f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa43cbc7-5495-40bd-8125-fad2cd3812ad",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ed2fc4-cf67-490b-add7-e7450fb8e055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74a5046-4883-41c8-a69f-d546b0a3414e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9da1b4-0c9e-44d9-947b-fe0d7a3c19ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d7ca908-c225-4791-84d2-345e289420b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca804f16-592b-4aab-bbee-9489d38e2564",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a491af9c-fbb0-4eb3-a3cd-e3834bf9a528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea06cb6-1b3f-4657-8ccc-1bd06376c05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6451908-c2f7-40ed-8856-dfcea3b8d76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "477e7255-b96a-4eb5-9e9e-b6228b7b1c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32fc1d2-3ab0-4c4a-964e-1595ef428121",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b56dfa5-712e-4c90-a338-5bb173df7acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bfd758-2724-4de8-8cc3-71e9d8fce617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070014c6-4530-4c23-99c1-db563e667ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d428b81-0da0-43f0-85eb-d8ff3b5470f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b5a722-724f-433a-bd74-1e408edf72b0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757e3071-df67-4e51-969a-8ce9f79e12fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e5e28a-61b6-4edb-aa04-045f7007d765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ac1cef-aa4a-4eac-b946-b522b2a04d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3e1469d-9d31-40eb-bc67-d0d125383e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5245c529-19e8-4cfa-b80f-136386e2ca0f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dac4c7-67ec-4bb8-b7ed-ce533a673b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09200495-a6d0-4b5a-b413-feb8e09e6de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c3304a-af13-474f-a648-b2277edf6349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eadcef24-e17c-4cf2-9cef-4f78cb26a5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59ee5ac-a4fa-4ce2-b0ed-703b6d69713b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695a0acc-de69-4de1-8a53-6af78c98eb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0cd8d3-ebb7-40b0-a6aa-ac767089f617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434ad49a-0f53-45e4-8bb7-151e3ad9a3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0e99a4a-ea51-4b58-af4f-5fd17791f629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d475d6-1f5a-4289-986a-d0aa23e8a25e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5866cec-f12e-485c-9534-990682933529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17236cee-da00-41f7-946e-a3e59a68da20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d506f1c-382d-42ee-b299-b85a2dde6f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1ea75b0-ab95-4be8-b76f-f47acee69169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3e422b-3e5e-452f-a40e-7e93ccdad7c2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaf25c2-85df-4d7a-bc18-aa14b6748485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a051cfe4-7392-482e-97bf-29c7e875d863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5254cfa3-a5f0-4a88-bc6e-bff7b263a91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "510ff734-1d91-45eb-ad84-c95085066af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad6c271-895e-4594-b35a-424774d416ac",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6970354d-53ef-4b66-91f3-72ca778b9d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8aac73-49dc-4c2a-b941-64324d2eae12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ba83c8-24fa-41fc-a81c-ab9864402392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff624e1e-2e93-48b3-befd-e56231b92b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349e6d5d-51ee-4fe9-998b-8b9d75284a4a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9349d39-28c8-466c-b838-4a7a32c01ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b772abb-5cbf-4782-a8b5-2fd0c0d5d72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30f7b8d-83a9-4ef1-b986-b6e7dc5a4eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb05e68a-d869-479f-9d53-79a01cb8800b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b5fc7-e0be-496b-b676-4b9614a5cd69",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cb4c98-346e-4fc3-8906-b1bfa87a6248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786fb4bf-921e-444c-93ae-ec3349c51945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d589c6-92ff-4017-8880-0ad8d3c06b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "897d6d8f-eb49-44de-a5b7-b3c459305cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961ea758-d2b0-4aee-9b3c-37856af0e84d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcc7d73-ce58-4862-9a2d-1e0dc4d35425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a99902b-ad9f-4f73-bfdf-deaa3eaa4ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb004460-ccc9-44e3-bc1e-ef5f40dc73a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ecf941f-5a6d-4493-a0ba-b730d0e181ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9ab8ee-9800-40b0-a607-09f77aefdcc9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd604c1-1570-412d-9be6-e7b029b7371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfedabf-4ccd-4051-8120-aaefc4245ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73104fe9-5d53-4688-9d44-9583bcd27502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2772f7de-cf4d-46be-8e37-c0305a18532d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ba955c-e4d9-4d6e-81de-a4fb0a6a016e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f50abe-38d5-4e78-b8f7-6d5c00de692e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0906304-8d97-4a9e-ae49-7cd14bd53a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007515a3-a544-44f2-98f6-43df4bca264a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb3eda1-f98e-4577-8e46-51b61de51040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5dea6d-6542-4b8b-8445-777f95c080f0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f0a8e9-b90e-4d55-b21e-8dc4be21fe8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06cf620b-24d5-4375-ad74-28e6bcc5780c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaf9e42-38a1-4cda-beb4-dff47f783613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da97ec0e-c151-42a3-aeb6-03e83336f46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f82648-a594-49bd-8e65-a3264d529745",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdb008b-01b6-4f4a-9005-66b4afa5a5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e447ee-e2b2-4922-b52b-1189a62e5925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2356270-8e1a-41f9-9278-60a7785c6f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "863040ae-393d-4960-8f58-896143f7e58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fef096-6682-4a87-bafc-39e2b4bc466a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197a75d-a6eb-418b-8612-1a83550097f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4943d4f4-243a-4203-a397-8e6865fe285c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657eb310-8c94-4524-a6d8-492eff029bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eab3676-0e8a-4622-ace2-ab6da3d0ce44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c42999b-f087-4a4b-b4bb-25e90f09a4dc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67603f18-c54e-45df-9d9a-dad61b78bfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2431f29e-0e32-440e-bcaa-2830a74196ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fd769a-5c6f-44f5-98a2-4caf391d64d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ddc006c-7d5e-4485-86a5-76722b0d3074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ae1e01-ae4e-4281-aa20-efa0ee63f164",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a229f8-e620-42ed-9343-78a9e997bf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43aacae7-71bd-43ec-92e0-e27b85eaea96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecc675a-f2d0-4a13-8881-c47f1fb545ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a3281b-c53a-4c58-98b0-daa9e9323cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed8c891-33b2-496e-a193-07ef91d0811f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bffb2c3-8119-46cd-a716-c9490ee1c3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c345bd95-e43a-40d3-80ad-138f64a760d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23f9924-dd35-473d-b3fa-5d93917cfde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd7ee9e-8fef-4789-a56b-cd4e8e3d11db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d558eb6f-3820-486d-bae6-5e794bad3e3a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3555205c-4658-4d40-adab-5b483a294826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16f51f8-b6ed-4cc5-bb5e-346aaf9a1962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec6a945-d48b-4333-b3ea-eaefab539e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa72bac-fc81-47f1-878e-b44ab01b380f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b65dc-2cc1-4111-95f7-54d9337556c1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8e70ea-fc29-4bf5-b834-d4a464c0a6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8cb84d-8b54-4b78-8dfa-64f2c62a4d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8fd3bd-6213-4d94-8b52-1dbc1191d8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "feb6fd4e-37b2-406d-b644-a6b9ab3d672e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9343bb8-20fb-440d-b938-52b951bf1463",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76712599-e086-4ea3-8694-0ce977d9b1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcade51d-f6dd-43af-899c-5b4ce8106dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e1ccc8-d1bb-4158-a547-1e5074ddc075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "621b7e82-c6c5-4480-bea5-7d2d1e289aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1865c5e5-7b31-4fba-9a9b-a28b9afaa7d0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a7eade-4aa9-466c-a9bc-97beafb03ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669b7034-79b8-4fb5-9817-6c68eb054377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c06988-c8be-4e79-b616-f7a225e8ce10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3edbec20-4bfb-4dd7-964d-60692b06cdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af19a81a-8e55-42d7-9eee-075c95ab4704",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de225ee5-b6cc-4f21-b74c-2e03c4a3d4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33db71c6-58f6-4c34-a382-bae542aa0982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29023869-d799-406f-88e4-889e2cf9f661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b805b3-6020-41bf-9dd6-4a5f86294de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d158f511-b4e0-4fae-ba4a-0e3c4caa86af",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99607df2-71ad-4cb7-9734-674ec4962586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353e0b74-9a62-45e0-a643-e426deacd7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b33884-6c3c-481f-9ebf-8ebc24ceb6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f107ee75-0786-4177-9739-30d49529dee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50f5504-6f3b-428d-b825-d74a13a3a599",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1836b4f-cf93-4022-9ee2-05007cd43aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03bfd4a-21e2-4345-883a-9f897a575cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccd2ba6-e30e-4437-87b7-4f781c09e316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7885d39-fbff-4a3a-ac1a-b61b02adff50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8790a348-2c41-43d9-9992-defc582c8cec",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd84fb0e-220f-4a6d-a7ae-2eaf8909ddb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd277e1-5e81-4437-afdf-3087bd5ea7c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e352c83-9ba1-42d6-87a6-241beee88f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20396521-7650-4b1a-bc6b-c28f1093aa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3938e9e-5a35-4270-b2d2-ef141b735a6e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c85eda-29de-42a3-895c-37cf0abdeeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7d79ef-75ea-4fce-b787-d5f5981bd0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb598f83-c9a8-4dfa-83ef-269eb16f2119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "94527f45-74a9-415e-ae7d-2ff49f3ddc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3d1db8-f8a2-41ba-8402-ec16e3f07ec7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ecd9d8-420e-44b5-bac3-a5c8fb6ebc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6254109-db92-468f-a580-a615c618b7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c01d79-e516-499c-b018-ae765e31fe52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74851e9a-dae2-43e7-9b1b-234d3799316e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868cf9bd-bcba-4f90-a754-fa08e7b80e8a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f05b68f-79e1-4e7e-ab18-9cc8249e3b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47735a3f-93b6-4e4c-935e-fecb1dd3899e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d2fc6e-8ff6-4a18-96fa-62e9538357ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adcae897-8f5b-433c-9d62-133674853a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b69a231-a983-4267-8bf3-8247f346facc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9789e721-472f-44f9-b49c-3c7b83fdd65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf7f220-cfe0-43c6-a70d-7bb46beb186d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af89ef2-90ed-4407-9c4a-7da20f7498c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca04261-87a1-42d4-9bfa-2252ef9e6eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe29bf7f-7ee9-4386-911e-b930e2bbe8c6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fcd6bc-00b5-4bd3-b9a7-90e56f5cb889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd880d1-03a2-4fe2-bc02-6665844c41d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac9bdee-b89a-4bd7-b365-8798fbe120be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7563da48-16fd-4bc9-a4a1-344d2dc110cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534e8cd2-5207-4fe9-a4bd-dff0f2e69887",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404ad282-e0fa-4a25-9eae-769eb2345501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7bcc45-3f4c-4182-8442-2c2bd1015fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473eec52-4ec0-4a57-a763-3adebd7d9cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5515bb-c9f1-4b6e-aab0-d11ab5feb39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b75e2d-6afb-45da-bde6-141118180973",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4512a0e-f79d-4dbb-9325-2dcaf597e0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78abd26c-e6fc-4663-95a6-9ba42cc30692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad41e48-f4ec-4fd4-a47d-7ca60d8ad6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b55e8748-d4ee-41b9-8a0e-e1435f8a7f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798b9df0-9ae6-49b5-b460-d28243fd8fa1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a1912b-f6ac-4406-87ec-675cb39d4820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51f351c-5abc-4091-8702-1e154bd2c5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471f9366-d9ca-46ef-bc82-34ea154d868b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d61efbf-da7b-4c4f-807e-67350100333b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b2adb-c037-40b9-82cc-34d001e90015",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6942fe6e-4dd7-4030-b130-9ff9d813cb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753e05cb-4bca-4ee8-8c43-5ee931b021ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028f7a5a-5540-4514-ac00-b3856dc8d7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6637ddb6-6ecd-4369-bc91-2b1f3e51434b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d67e9b-bdd4-4547-8745-f9a868074ae2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf328f1-338e-449d-bcaa-b9c926bfa56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c1efa7-2d61-427c-9d04-40701f75e594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e17381-57a0-470a-81e4-a8800c11618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbdaf11-954c-4346-90d4-20df618a20f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d5c461-78d0-46e3-9aee-06a807bdddca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5c839b-d537-4d59-beb8-06dfb87d75d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee310266-a498-4a0f-bcdf-8bbd7bc769fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74301fe6-b91c-4daf-b4d8-7cd975999537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "125eae2e-0aaf-4942-89c8-cf98672e4595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b176712-4531-4714-8937-be6f54465802",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ba6dbd-09ef-4b01-a436-c92b3a14f4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc227787-eed7-4099-87b4-2863c6839eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd83e98b-a755-4352-a260-e1141ac20db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e953b2c-8e72-43b2-8118-a78f6b941600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3ee418-2714-45b8-b99d-ad29eb73146c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2fd3ab-10d6-4ad1-9e76-f3fa8411c35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0ebf13-1526-4604-9491-23d93194fdd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3191a847-0d50-4f56-8a16-b40e05f0c3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ae9c3a-3567-4079-a8f7-1afe047b7f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ee852d-4382-4c45-920e-d466467804c4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f5bad6-169b-479c-9006-20b4e75ace14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccee3965-513d-4b58-aa64-fc123cc00090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97a3e6e-e6de-438f-b0ba-a25192175f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "490028a0-e34d-473f-a74e-267871f3f780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f268e5cb-6403-4bb1-a8d9-3d0149f7832d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdb15f1-aae7-4b8e-9078-95efc92e0a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ac04f7-970d-4566-9652-fbaa76b46c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78b5c9b-753d-49ac-b7f0-e1da1df009cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "383d0896-8676-40f9-985c-0b08fa9f353d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1d12d0-01cc-415c-8220-3eb83a8fe672",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ef61af-b297-4ca0-9d4d-8301cde3c81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b5fd2a-bb76-4f06-93f7-ab7aae6f993d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fc8978-8ffe-48a5-b72c-20a3e0e0cc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0b6a0a-f9a6-4dd9-9406-21b1590c5ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3d039f-0784-4a4a-a79f-4fbdbb172662",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf380b4-1cca-44bf-bc0f-1781a287f5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21a18e3-a44d-4b3d-a09e-54b6c3c3cd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0862253-db81-4fdb-abcb-a4ba309d3c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "399bdfa5-d5c9-45c2-b18c-8bccbc54ce59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4437f9-cb1e-4f01-b6f5-a6bf43518219",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70e7f16-6670-4688-a311-2c7c7721c680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949f5da0-3378-40b7-b56f-2921b1c2c66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13da459d-f83d-4260-9e1e-57063d2e87ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db1d72cc-dca2-4f7c-b781-e8cb4d11c03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8936a74c-4710-45e8-b258-7917ddd3fbfe",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4924b5e4-71e6-4f86-b94b-aa68bdb399f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5940f1a-e696-47d9-804a-4f736c2eca3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0380bb-113f-4d85-a2b7-b796f8b83f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ebea4f9-8b75-491c-9998-af90ec42699b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7646252-16b9-42d5-8651-419b5f2accad",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0327cb-c893-4ef5-99be-3aee3f74ee3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441da697-7b6f-414b-ab45-c03702c5e89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df7a58-a162-4b01-9090-2008bb4f683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "049c8973-2a54-4e38-afe2-27d6ef9c11db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602a1385-3abf-4135-b41d-875daa4432e0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fd5d60-808d-4fa4-ae1a-60981b56ccea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642f79c0-2757-4989-92a5-adfda82460d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2289a74-f43d-489f-abd7-4c58c4bd8ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c30f016e-dbb7-406d-9072-cecee868e842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51718133-7208-46e6-9f3f-e19f9431649e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a33674-ff4e-4f73-a0c3-1af12c17276b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f8751b-a094-4130-b9f3-2a16111f09da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fafe608-bacc-423b-8cea-362ca931e8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b042049-b15c-429b-a6cb-3cbf570bc8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d68a5ea-f7e3-40f9-9398-584c13ed9120",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51af526-46f9-4281-99aa-88d58ef2e6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d0b0bc-ba91-4968-b309-06f32fcd15d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365db675-f0f7-4ce1-813c-90847133ae7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb5111c-20ee-47a4-9f1e-d34c14e9b640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dfcb24-e23e-4af4-94b1-753bfd591a38",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf9e618-a92a-482f-b0cb-2d655d491c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fc68b4-d674-42e5-a368-207a6db11d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1046da21-834f-4a86-b498-1cf449387886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e55bc1c3-d47c-4b4f-b5ba-0f559b42b449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe1a225-7103-47f7-a4d6-e1b43e213d43",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd4ed96-cbfe-4a8b-8656-204046250989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf76b41-8c59-4aba-b3dd-379d3220b22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2c0220-b70d-4faf-80af-0766ab94f971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec167884-9e44-49a1-8447-e9ea341c1df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ac6b1e-5d44-404d-adf0-2c921c432ab2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f1c6b2-0c9b-4721-8db0-0c278dcb61f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b999d10a-7265-42c3-96ef-f6c224d917f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8b75f7-7208-42de-b863-0c244b20142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e681ed3-05fe-49b3-a583-2912180a2254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9de1d6-3489-4f90-a0a3-2d80e03aa206",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79972b6-15a2-475e-84ef-e561fa68e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb7d4ad-c535-4cd4-b082-37aa760d6284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e8d3c0-54da-479f-b085-899048db9ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9df823-a48b-4b62-b607-9e5304e79a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4953fbf0-e771-4a9c-8d64-0979c8c775c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d987929-03e1-4116-8b21-aa92f2e7cbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5ac3aa-6034-43b9-8f47-40411d4e0b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48377db0-4df4-4dbc-a780-5231dd0c4bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd44e60a-87b2-458a-ab85-16ad9d316ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2bd9d1-98ff-4c1e-a210-8b362c1a6b0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9230751d-920d-4b01-8785-655e2f93b15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e07b531-5ec7-4ce9-9b7c-27cac632fc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca06548-22dc-486c-b462-1b6848583fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c26921ed-6f80-4156-8612-8fe4243238ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96957073-5382-476d-9e10-3e2f8ddf1be4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c559f2c-b566-4274-b366-9db9850c3a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103b2e4b-cfdc-49aa-9395-7679bdfa55e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05f1c54-808f-427a-94d2-adc26bc0c7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8663a04-dbad-44d8-97cc-142ea08c9780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f325b116-54dd-4405-97b8-b8b1edc2c23e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8161f2dc-267d-4c3d-9fdc-9f20fb163a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540ad9ca-78f5-4fb6-a5ee-f93abea952f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dff857-8df4-4b41-9127-b5d3f30cccb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b659fde-629e-473f-b69f-9a5fdef82c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29d495c-e46d-47ac-94cb-837af392b194",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0432cf87-8438-416b-b3a2-8a0d1c0a7b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21110cc-d75b-4360-842c-9ff07ab1958a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cc9824-eeb8-49ce-bea4-1191f385de6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1f583f-292a-4b40-862e-b9be9e8e9244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d734f4e9-6d59-40ae-9b72-6b70a084329f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea62cd7c-d635-492c-8e6c-4235f9c44337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fff4cf-f164-4902-b49a-24c372ea453e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a56bbe-3101-40f5-92ab-9fc4910ef2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cadca94-3091-4c00-a37b-09b163cf63ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094cb1d0-34f2-483f-8965-9c738c98973a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c000c7-57bb-4c75-8166-0608658c9c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59f7b73-e0d4-41b9-b611-6d15194ac28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c36d991-a2ce-4ac2-9799-5c2b0af5227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0304f0a9-976b-4bac-a7c3-0c0622293abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024b845b-52d7-424a-8325-b500ba8a433b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027615d2-1327-4290-bb2c-0eb7668475b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa676179-c937-4506-b2be-006dc0c16c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32ab08c-19de-4b84-bf48-1c2051b9b7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ae5930-43fe-44db-af31-df7f8c566623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59550bc-5bf2-4fd0-b748-5b72000ffff2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54438cf1-122c-455e-8d39-39d3ab3082b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04ff8f3-d14b-44fe-b566-98f731c4bfc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ec3b01-0a79-4f71-9ca5-0eb00281c165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa2ac79-c600-4a43-af64-70edc6d46d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8226216c-aa0a-4429-98db-5393bf60e065",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2f04fb-ed65-4bf6-9a2f-42b3ae947135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c948a95-0741-49ae-b809-700758d390d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a652ae-a21e-445b-8402-1136ed15f38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0f6c24-5133-43f4-bdf0-a0ef842573ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c30020-8667-41d1-ab52-026376c45af6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7c8f8f-b580-48bb-ba63-fbf2f57f2255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e63f184-9195-4ea8-941a-6b8f512749d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5608f393-269c-47d5-85f0-84f38f06f16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7443ec91-8e61-48b4-b1a2-fb510c74bdd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30734508-ff82-49b8-a0c2-9b123a11d61f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ecdaf5-001f-4bab-b0c0-13f651567104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040f3b74-8225-4dc5-b7f7-2f754f31a2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42fbebd-2a60-47fd-80db-911a6bd93292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4606153f-39c0-4886-a6c5-28290da73f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab44ff6b-9972-4a36-a22b-7864fecb589a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6110023-fe14-451f-9caa-a8889e577d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05013b3e-61f2-4cc6-b93e-8ed6e1f2c6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ce27aa-2ac4-41d6-8768-31151be4e47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2c840f-d02d-4475-8e71-ec7eb76dc0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17363c2-9252-44d1-b865-ed81ed7e4e52",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b266b2-735a-4e07-a33e-bb6863dce3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4be7d89-bd76-4618-88c8-0285be76a622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38804895-068e-4362-adfc-86411e41bf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3126cef-44f6-423c-b922-70f5e7b4db57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665dabca-8d52-46da-a514-312d8b999624",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605cc20c-420d-4d6f-bb2f-9ce35eae1a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04e4bee-e057-4512-9e8d-dc25b6f4cec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7998d3-3a3a-46c8-96d8-e3eb0dd7127c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee91242-dad7-46c2-b641-b420bf49778d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafdf000-e684-4d5d-a7fa-99ed34a7f0e5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d827670-4f4a-4796-abdb-beefe608e78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f45e59a-63a7-41b9-a987-f1e89ecbf11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887ec52a-8029-4267-8d35-82b2be65a31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a74a5d-5abe-4b9c-8fbe-87f0b31e70ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa87f90-33cf-4fac-96af-ba32a02f1720",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba187671-95c2-44db-b9a1-01b2a06aab91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799a214b-bd51-4325-ae4f-729f7da89c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417b10af-3f14-461a-b3c8-fb1a8cc1417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5500d113-404a-4762-99e0-48db9b296df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd45e296-1538-4efa-ba1a-56a4c1d05a51",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dad5187-a7b9-46f3-b882-a1838f7f3a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a1040d-8568-41fe-9d9c-bf494f2d3295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e27edcf-5634-4456-a321-6a8d2f18f782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4a0d36-470d-4f55-b5a3-0ef689d5c2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83747960-38da-405b-a005-ad3da1f98dd6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3b7c9b-b40f-4cf5-8117-e4aa29b25a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2370be0a-6739-4dcd-96b8-f474690f8459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00a9857-f557-4709-95e4-083056c39419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79e1dd86-3d4f-4ad0-8c90-4fb96c120b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498febc2-b52f-4548-a803-ce13f8c4c83c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7276a6-8937-4318-b4c9-c46750bd482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2602801-0fa0-48fb-8ccb-3004991aa74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3415347-9626-4893-a93f-58b24ca8434d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f492779-a77d-4061-a649-f28043bb9868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8548aa7e-d109-4a4b-a6d0-4208db88b8a0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a8590d-b7c7-4711-b80f-055c307f8673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05767333-c03d-4ebc-8bb6-f7200fc94544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cec359-c1ad-492e-9994-8cce34c027ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6abb192f-3a78-4361-8efc-d9bce4ffd2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d0bb40-859d-4aa5-8d9b-157d92cda1d9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b31351-bdeb-4dcd-9b61-af5193ed9f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79302ebb-9e1f-4209-ab38-11db804690bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da48521-f22a-4d84-8ed0-33f4718a62a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "861f7f64-16a2-4d8a-b280-eb27e6e895a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7208d394-25d1-4b3b-969b-96da802d5fee",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96da1236-7aa6-4906-8c2f-f48940c8079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b541d9d-e86e-49df-a1b6-393315e44366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046afdfb-6863-41a7-bfa0-1513e65d5382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f872689b-9355-4878-aab3-a38a48ebb7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d994378-1cc6-4b1d-b029-dbfb5971bc2b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b958962-77f9-4cd1-aadb-249ae781119f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c97b91b-c1a4-4c82-952c-369e70df0801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02518cf-080c-49ee-8eb1-182fc326dc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db0e5635-2e77-4585-b8c7-32112794dc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdafe81-c8f7-4fec-8621-1538c12a7c6e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c5f425-f3d5-46c1-8f80-23854980523f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ea221f-9d41-41da-abc9-37191a74bcc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33949894-08c0-41c3-ba44-c721d620b676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "025a5404-6730-41fa-85af-a8639c69c6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48ac3c9-b34b-4afa-a186-52c3155e70fa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55501ce0-5730-41a8-b69c-d752fff4314a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9311f870-c88a-4f68-99e4-ca363f5f6985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b3ab7f-4f2e-45b9-a0b9-e24b5ce03ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be32b827-6f7e-42b4-99b1-ade09b6098d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bc2565-3d85-47c4-b384-238a9461c75d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e3822f-fb41-4519-b860-b9274a24b786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a54721-1ae9-4e99-8e98-ac73326844d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e3552b-a066-4be3-a99d-f013a09f4e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d03eeb13-d58f-4f41-b4a1-f72a1dd742a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ca3cd0-2149-431c-9ca5-0c1ed01d74b6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5931e418-15b4-4414-a5cf-95cebcc9025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73d5d5d-adcb-4001-a065-75c9a5946afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7142e3d-77b9-499f-a98a-e9b6a3b1a348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a48dac4d-c90b-4dac-a190-a4b6df3356cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075701b9-9226-443a-9898-052ec9756b92",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc615112-305c-4587-8152-5eef0b44be44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65753be3-2d6a-483b-921a-506582107dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622bbe32-5f28-4f21-a705-9ca19e3ef119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ceae7c7-1cc1-489e-a040-9dedaff7b44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6677a8-ef5c-4593-ae09-b87a891f9a11",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363cfa08-36c5-41d5-8557-7a8e034f1b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e202453-611e-4c68-bf4c-0b05f884f60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26897218-00b9-4a32-93ce-3a3a0ccdc895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bde5b1-984e-4e2d-9134-5b4241028616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f026184-f5d8-4e2a-8934-85102d1013df",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915b456f-40de-44c1-a5ad-b08dcca5d99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84e0cbc-5c76-4891-bbde-3a635ee10959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016001f7-11ac-45d7-ac98-c95db0cc9ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1a7c6c-2e22-456e-a5c2-eca682673276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e99fae6-19cc-4692-a1bc-ee0ca2823a5e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bad373-fa41-4e85-b450-551b81f76341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f4a0a7-3c43-4eb7-ac4e-3303c2031426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a132a86d-fda6-44df-9a1a-f7f4b9ddece6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c24be95-a290-4e5e-908d-17f2ef24a650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6655e916-5459-4b4c-a863-3097df0dd368",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf410371-58b3-439c-be30-f77ad92e80a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450d6879-64b8-42e8-8680-5c7777b2dc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9353d2-7e21-4461-83cb-317c7900dce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "56676d64-45ce-4b4f-90fe-bb09af8e0717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535f2e4a-cd9c-4d72-bbe0-204a08fd9cb1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c863a34e-2633-46cf-b6fd-03690deb1596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ee8eca-242d-424e-8ba0-7c38b5e29fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450b212e-5783-4451-b71d-fb21c63c5163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e63dd75-c508-4a64-a08b-df4c03e70575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee80fd3-0326-4aa9-bac1-3b83457bda22",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd926db-070d-4d0e-9193-7b66d2e63d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894033ad-8e25-4c0d-b8ff-3caf79c7b749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0178de51-d28c-4968-a637-0369a71a5e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0517121f-5aab-4a4b-a5b3-b617afbc00f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1c7e4c-5669-40a2-af03-0fd383b82807",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c0b1ce-d759-4dbe-af6c-00cdc70e9f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "990d7319-4b0c-44d4-aae0-d07c0e6cf20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c926bb2-c75c-4a9c-98ca-010297ededbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "696016dd-58b0-4414-b16d-44a379f10740"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d109301-9cf2-44a8-8354-64d45126f078",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a953a6f9-a0c4-4566-b861-b64ad203e56a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d148f9d-0dc6-4eca-b798-73a66c451459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e288355a-af79-4d86-afd5-2d0c83eebb3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81027f23-bba7-44df-8c1f-04f533092725",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6288d97-428a-43fa-afb4-ea99340fe53a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf2bf7bf-b569-4f12-b59a-95a15d2c888a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04777729-3fca-435d-a295-8fe819b84ab0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4257a26b-ff2f-4afc-9637-f797c21b1858",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b71ed04e-63a7-4692-86b5-a39af846947a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1bac230f-4d95-41d8-a03b-67a7101c01af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38892730-e85d-4d7d-a86f-d83497913797"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0e06dc62-8165-46f5-98ff-10e49c303db7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f671e0a-ec0b-4ec2-8e32-086dce7aed32"
                }
              }
            ]
          },
          {
            "id": "e7b5d2e1-37de-43c5-b479-0c0b8e390a56",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a308e57c-2996-4227-ab67-cd452eaae38d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f5c16d15-43cb-4800-a15e-675148ede364",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be84ecae-ac4b-4980-ac13-5fb258215abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5e4f5569-4d49-4dce-967b-0f8872dc9ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5c8dd1-e7b3-44b2-8a3a-a184ef0da036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5837275-049c-4ad4-b566-d2f6cf0eb5f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b169795-ab43-4f72-98d4-26e4145430dc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f52e8382-ef7e-4f80-853b-43b0e88227e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0d6d85a-fef4-461b-b246-7355f6bafa85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5a82eb6-67b8-4226-b022-adc6e9f83cb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6789ef1e-5c7b-486e-b54c-2fff707a8668"
                    }
                  }
                ]
              },
              {
                "id": "e8ab2008-ec77-4987-8050-89f29e1bcc77",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b682d6e-24ed-40ae-9ac4-3d6f30319738",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1341e9f-d0fe-43dc-b40d-02b2b89d1839"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "947275f4-0dc5-4feb-935d-e3c24262f9fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "41815c50-859b-47f2-b2eb-e5353dfc3424"
                    }
                  }
                ]
              },
              {
                "id": "3f083fa6-46fd-4d6b-a5a7-c59175caf4ab",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c12c4e06-d5b1-47c8-8129-af92599c2a22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc00dce2-4787-40b9-986d-ffc8a9fa7862"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "879f93af-9b83-4707-87fb-30b85fcba990",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9710bb5-48ff-4c3c-bde1-0134b2768456"
                    }
                  }
                ]
              },
              {
                "id": "c8d37617-e54f-4b13-b83a-e86a6a992670",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aebbd903-0569-4651-9b71-22b3ce9454bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "667f1823-68c5-4717-8369-7e4cb69e38dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0f7c2db-c650-43be-a745-9e7229bdae53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2715643b-cf9a-4c73-a423-8af967b22f78"
                    }
                  }
                ]
              },
              {
                "id": "d77ebb4f-af72-4889-a065-09fc057c6143",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a6f6e5d-c1d5-4efe-99ca-3d7905f85db6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "262a4614-9caf-4975-81e8-dcfe56e9575d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b52b038-65a0-44c9-b562-fe455ee32bdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7f017168-489c-416a-a76e-92b42c987403"
                    }
                  }
                ]
              },
              {
                "id": "754a4c7d-23d2-41c3-82ee-9befcba928f3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "610ff285-2211-4261-8d37-c9b434c05f8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9802e886-336e-4a40-a1f2-5120de24d89f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3cb0ca1-0225-41f2-920c-5bc9ab17ae76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5538db3b-2873-4f5f-bb36-3c930b8b9e97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70c3c74a-1985-475c-8043-68934c81a92b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51ca1c97-16dd-4f3e-8020-27543b0e120a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4339b3ff-72cb-4977-a273-6a6c0dba0f74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74984aab-1959-46b1-ba11-c4c0e9e5afca"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f0df9c9-3faf-47c2-adc3-143d1f8424e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "208f498d-930e-4d38-b0f2-d4f449a5c306"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdd5ad74-0451-4b3a-a413-3a0202eb10e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7147d18e-e97f-475b-81de-3ce92b187201"
            }
          }
        ]
      },
      {
        "id": "9c4bcc84-136b-4f0f-9b4d-8cd1b12e93cc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dba2731a-b48f-491d-a916-41cf446dd409",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35273a03-1021-4b4c-9939-89a93f71ab2c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "58efd3dd-fc55-441f-ad6e-7009a4d732dc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d31d975-89d7-4060-b949-1790c0f01b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aca1c1c-e7fe-4ab8-9b7c-c59b1b9e9d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d94ef6-9d40-4feb-a165-757bcf1a9317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b055f0-84a4-486f-a9c3-4a8742d1bfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf4947c-6807-4fdf-93bb-1a7151ab7efa",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea5a554-35e5-414c-8df9-2ec28a83ba4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6724fa4a-cc27-4f4a-a315-9f61292ef0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bedab48-fa5b-4a86-8f02-1032a11da276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71183c09-ae66-4200-8452-01f5f4a94ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d5005c-8c26-414a-8c0d-a92c74e2d169",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bceff725-816a-4476-86e1-139da3e6cbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396056c9-0321-42db-9508-12d1dd95c0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28be434-a09e-4f9c-86c9-98b2489ea76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "beeb39c7-e822-402d-9735-bf8af8b8227d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd52c5b-d999-4462-b39c-c0ef2098e901",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce2f972-581b-44b7-b091-aff1e91a64a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef395199-1de5-4dcb-afae-6d99e2e5e6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a793434e-0f70-410a-86fe-71dd0ec0f632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dea270f-c5c0-4641-bb2c-d421d57034b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43edc705-b313-42ad-ad80-4b0f08c9ab31",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d21b91c-3140-46db-9a37-3e94cf276155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9996572-87d2-42f8-8369-06c2da2408b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea68310-0af1-4587-98a4-5d303ffdd2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95b0974-2147-4085-99eb-ed9609b681c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e135ed-b751-4b09-82e1-0ba09e92fa88",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e7654e-e109-44c0-8706-94a4e68fe2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d556ae-4f69-410f-8a77-c1dd78cd55ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51abb11a-488b-410f-94f0-e6aae77bdb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c724be96-a027-4b98-86db-3e460c7b72d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f7d8eb-a33f-41e2-80ca-6c76cdcd0c1c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5097ea18-625f-4f9a-b88e-c41a1516d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4f3c81-f604-4d87-91c9-4c5768fa1dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2cc284-6660-466b-9001-34d9b1b38947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "164f4e22-2c09-4201-a0de-89e78f376d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc67d48-c232-45c1-a1a5-099f399edc92",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a7a0a7-da29-4b79-83d3-7015953a47eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c341c1-2b28-4987-8b27-75b545580879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffdb20d-a9f1-42b8-bbcf-dc4bd4c82acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45970562-db9e-4325-bb73-61570c752815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b64813-ab32-4705-9c9d-fff035f54ed6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969c7ccb-34d8-4e10-b046-6f5636db8a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ce2614-2517-4b5a-b890-0cced0c2f0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3bc71d-95eb-4882-9559-06a9bc8520c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eaf8501-c33f-4d74-8c30-81ceb4eb53e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa65d66-8565-4f7b-b892-96aecd3956e5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd7a265-2f96-4b6b-ac99-d5e0c62b322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7256939-8042-4449-9991-9cb4663cd1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9f7ca4-e16b-42ed-ab91-50cacd999811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5431666f-90eb-41d0-9bb5-13e718498326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1051b5dc-0447-4e94-832b-60fd8308c5ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7af325-1355-47cb-93dd-420a8e5837a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115f3d2a-e193-43fe-ad68-b96c3497efef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f3707e-03bc-4374-9982-bb386a52fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "102664fb-baed-4c48-9faa-50b69b3bd209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885b51ba-a16c-4ec4-ab7a-ac26f21fd3a8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205afe14-7463-4993-a3b7-f5130de03dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef0ecc6-63d5-40fa-852c-5e6d2accc063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c11a68-0e95-4aaf-b137-886834d0049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcdda58b-a23e-4400-9528-36efccbcac06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ed9eb0-0276-4f47-aa2a-b3a31bb00c6c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3d4aca-c1bf-428c-8b5b-30a906e78777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c939cc-087a-4529-863b-c588ffb5fafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3192211-70e7-4b8a-b417-ced66179ac73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9524c7fd-8c81-441c-ae15-4b2f2fd2c7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ca9ec1-c0f8-48ca-8d63-061b799f4ecb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611b0559-9dfa-4ea0-84f4-a38b0cc1e399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaec769e-7403-443c-9049-a17252f6bccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a721bb-9ab6-4a75-bd88-d0adc7f20f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5c375f-acd9-481c-95a6-d8c39bc8a7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551800e9-14ed-48fd-aa3d-eece06eabced",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fde8f2-a1bf-4ed3-963e-f3a799df09e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d78e7f-d6c8-49ba-b4e2-91debc7e3729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b4771-a147-4e36-8701-7dcf846384bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "356ae75a-90d3-43c3-b08d-d14cb262682c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7d5e53-bc00-4451-ae4d-454aa5b8bcde",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa5cd51-601c-472f-bb7f-66f246a5df61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccac408d-db87-465c-ac4f-ae176f0c57af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00000a4f-f408-487f-9077-c49d695b6ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4363a67c-84ea-4189-8e0c-bcb5c512b45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b3f5a2-68cb-4a70-9aea-1545e0086bc2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71478f2-1447-4216-8e2e-9297045b27ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a917b9b9-abb0-418d-81b3-132fbe3f0f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e87448-b645-4122-9681-9c03d5875001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7b3445b-1d88-41b3-b33a-364895121e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da373ea5-8d7c-4aba-913c-74fd05ed3309",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4633abc-5d8c-4542-ac10-f42e050781b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d969c44-2b59-4e28-8534-386c5c00b343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e77c86d-e7c3-437e-b438-4399d87a6d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d8bfd7-9fa6-48ea-8509-cdfc0e4af523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66bea0d-d8c1-4321-80a2-9f67cae17d6b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70aba43-2ed8-4f0e-a589-1bee27f9f187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3cfe356-4e95-4945-9ba8-34c24e921abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089557ec-1bee-44e4-a350-54887281c914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "198f91f6-a0fc-4c02-8038-3e2209bc3b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bebf1e-f700-4503-abb7-cd29c280ac29",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a2c1ec-481a-4158-82ac-cd7ee210e14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88763d8-73c6-4996-9f5c-9ca99bd06379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fb9981-4e08-4855-a9d6-8086b7c4e054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c76ea1e-9042-4021-a2ac-621710f20d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624b3c97-267e-4db8-9cf7-61a623b5493b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14380c9f-0ae9-4722-ab03-adfaf16dbc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9a1c8a-940a-48d8-9ce5-31a285126928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d612de87-7205-41c9-8911-0c2063a88995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b48cdc99-ca28-459f-b716-78483f14553a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf393b5-9c7d-4382-a406-4a26b10d665b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0de2a70-8c32-405d-a9ff-73ed4f6f38a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e48c414-bec1-4ca7-a804-603f01b37b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202bb361-c51c-46ec-9132-6034f59c4104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c577e1-1539-4702-a4b4-832937f5bd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e92d1bb-e656-4198-90b1-8950625af1c0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19e6f74-d203-4d6c-b81c-13b4ed7c4582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b165d038-28dc-4d26-bdf4-a3536e9ab2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5248fa-9ac2-4970-b3a9-f31d4a6e856f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d472e9-864b-4201-a40e-7185553a79f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07700a4-b490-48f6-99d9-e828f3a13275",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13c8f51-fd3e-4774-b369-6d0c51e9b411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c766f238-da2d-48ce-9d05-6ac55c24f135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f87eba-fef9-4070-917c-a969f1d5ed75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3104ee-a972-4ace-befe-de1f40ea2fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b677d6e9-a65b-4202-810b-124d4a21c606",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b1f86b-d6f7-48a4-bcf5-ab653e941d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afb36c7-ce7c-44ab-b566-178c92341ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c72cbc-5ba6-47d7-a523-276aeb829881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebc2b37-1dd7-4319-af99-4f24f18fc8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a21795-758c-4d12-8388-2241e4af19c0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dd4f81-8df5-443a-93b1-de83ef0bdbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294c0f96-1567-47e8-8a40-7d5a70a0270c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75df46e-7719-4e7b-9125-83c1f7a4ff58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aed6b6ad-b605-4ac8-b873-2733026e0868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8625f1a-ab9e-469c-a776-d3644342482b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f388bde3-f850-4199-a049-236cbcd1e55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9384ec69-e696-4a24-aa8b-d63bda2a5f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0170a029-fdbf-41f2-8e2c-5919b9b10438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93a26aa-671f-44a9-910a-8ffab28d76a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f41a490-a1e0-4708-918a-31cbb8ba3735",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1c1142-4cfd-4083-971e-2e6f15405618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a938d8-3658-4be9-b114-8099bc7feed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd340bac-0ab3-4b51-84b5-629ac1bafaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0aac50-2538-428b-a48a-dc59e8d70b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd4b834-ee9e-4f07-89bf-86e29fb58ddf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089d9d37-3c30-464d-a139-96cb38ad08f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4462292f-bff3-41ee-95e8-60d26670efb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48bf932-2ee0-4d0c-916b-9e6bf163ef68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e6fe17-cca4-42c0-bd41-40bdea5aa654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6e7d02-84cd-4abe-a0a8-3d0f9f388322",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb2fcdd-0c6b-49bd-84c2-e25aa7f0c3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1954ed-2a1b-4181-aa62-8523e6088e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7a6ab9-0e0d-4bf7-8791-eb64843d6c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "323fc7de-2103-4206-a138-c26d2b5d5e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cad8c4-8a5e-4991-9e35-ce8ce3901044",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5913076-9828-4610-acf9-0dc699dc565f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8798196f-0c31-424f-ab5b-9d8b68f6dff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ec1bc4-6297-4743-ba08-ebb9da6f9b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40125447-98ec-4309-a079-e41d9d8d4f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e81fb4-f80d-4754-9926-dd9312986e8d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19297d0-5a71-4b38-97b2-97352ab88f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65456914-ed2e-46a8-9a20-88de753316ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bea6ee-2f69-44f1-80db-bd70e87c6794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e474fc49-72fa-4957-8877-219e37683390"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8c5afa00-3ecb-4ff2-8fd9-4a5261cf73e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0dfa849b-9277-4429-9986-502e0bfec753",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddbccb1-6023-40da-a476-f52e58498ca6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "51fd7305-b955-4700-a826-c8d82814a78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53a87fe-1bbc-4837-b1c3-4c1d6595f2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9af5c3b0-23f3-4728-b969-a79f2b49e59e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc4c87fd-2d9b-4191-9588-db92d9dcaece",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb5f36cf-0749-456d-9300-4223112c6c57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a7ed24e-325c-452c-9e30-185c80a73c40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95be4d24-4501-4687-8d94-b2bd7e7a1d81"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "552e46b1-a735-4ed6-a710-b7b6ddfaa575",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "29dd4348-c163-4fa8-a689-77cb7c29f6ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93aa08b0-1f83-4e5d-b5e5-95cf4d7b0e01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ac3ab50-b0da-4564-aa1b-976aec6da8fa"
            }
          }
        ]
      },
      {
        "id": "a0567fdf-120b-4b89-b71f-ada80fb573f8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "24dad2ae-c79c-4300-95aa-f61ab04048df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29d9fc63-62a2-400f-ae0a-ca41588e6731",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a0210c8d-fa25-4443-a833-b6d193e677d6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27f75f3-4293-48ca-98dc-5ce3d1a0259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa3f330-1607-4e89-925c-77c2f1f735f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a570e160-6e41-4159-92d2-d446e52b21a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "21221db1-0d84-4524-86b6-d6d8e60eec05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f579ef-7d24-4e99-991e-5065905a8511",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423e8636-addb-4230-9fe8-9c9227ae27cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6959197-c1a4-43e4-92b2-bb16ee1f5dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1f86a2-ce37-46b5-82ba-89967a15621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3109cb-c8b5-4bf3-87c4-065aeea3f6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9886022c-6f57-4a44-aeb8-251798d9b717",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f63b293-b7f4-4b70-921c-613d8df32076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a253655-c3ef-4ebd-b358-b4e1eccf87e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fb1c88-f5f6-4438-8dd5-f479abd2d323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaedd81d-f3da-4d2e-b714-243810dd9a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c4c65d-0465-4acb-9bd7-4e7d7ab283e8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107757de-d25b-4974-99f3-e193c4910b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64304b0-9122-45e8-af13-98c30b61267c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4404dac-0637-4408-8191-f9566c8e36bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2488767c-1edf-4a78-ab90-347f97525ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9871602-a96e-4c2b-a2f5-1af711b27f09",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786f4ffd-ade2-4e8d-ad38-29b9ad2bb588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51b0048-6f34-46fe-b109-a80ddf826f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b454d74-0aac-4662-8803-adf718163150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8da08041-1e48-4ad7-bb36-ef6eba17f862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069c34af-c211-4793-91fa-284ff2ad055a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60f34ee-2db5-4e36-b20c-883e42475f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def92b56-a5f6-4b9a-88b3-95aa07d149fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b84f827-dbf8-4204-82bc-30f6267a0825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12a5c392-bc11-404c-a1fd-57c6ca7a448e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391be1b1-17ca-47c4-8847-509d150c7189",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e47c87-42e1-47e2-ac27-c93baf85c0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799caa90-4675-4186-9747-3adb7a3b7ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5916c9-de73-459b-b46a-b686c73ecadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "08924273-cd81-47ff-86e8-957b74c9d0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661cdc36-f4e4-4074-b90b-83e0abf70f13",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b0bfc6-397f-467a-b9ca-f94e7792bacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1350c9f1-e370-4515-96ce-44548c89c9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7a8e47-45e9-47f5-a9d3-53fe9c1f9c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7471435c-4d28-4481-8b1b-71558dcb0192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1fa064-67b7-4d6e-b225-432f1dad1cc3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0dee25-1c17-47e1-8bcd-e10d30735c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b978fa1-45dc-4575-b66e-a660621e1a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3b8240-47b0-4c7d-84dc-097944551e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e004d7-d88d-4f63-b884-5c0538330982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec13cb9c-160b-493f-9027-7581ec3a901b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2147afe9-dc28-4016-bdc0-7c7ae1b50261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d998db67-a96e-4ff3-9221-4d14aa80bddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb77a0e-0ab0-42c7-8011-66f77d00180b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a18051-b684-4407-ae57-680e202accde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8a958d-843d-4327-87b9-2893e244a354",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e241c2bc-3a3e-4144-862b-3ae19f77f7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd938e7e-11cc-4287-ad82-9c02d45d10ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec3b52d-6f4b-43b3-b802-b8bae1ff2114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c132a107-b713-4831-9433-34360c9a4370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c322a3c2-9b22-4703-a6f0-62a6a5bfd99d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34951e76-8351-476f-ab6f-956caf0a4a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c442de-d998-4f64-875f-30970197f58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eadac68-a705-4dcd-992d-388ed2f1ec66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "821e9555-7830-4ced-96cb-f57399ea4f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf64193-d202-4e5a-9fd9-381a2584744b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40386392-b261-4bfc-b85c-2a885cb787ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e827b973-4054-403a-8b7b-fbe06487c83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c805cde-80f2-47e1-af79-1ee2b0a5e5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0846464-a703-45c2-b7c9-a1281a3b6856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be866d7c-b9e5-4dc4-ae30-8f194acd0148",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2d46d7-1c56-45c4-bd74-6432b83877cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b8a132-a509-47bf-a213-2844ab8593b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177694aa-dd2a-422b-8f38-e7fb3edda561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "32a31534-613f-4faa-9f5c-3f890675fee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030f8af9-8209-412b-82ac-11733a560b59",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d415a6-1a2c-435f-91ca-509ba179fdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be094a9-0523-403f-b024-f30cb570b977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cc32d0-5cd2-458d-8653-637a182f3db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae1eecf-e9f8-4840-82fc-2f1a7b866337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d2c1c2-0495-43c7-8d5b-6a1153cbe257",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4350be94-08c3-4b5c-ab51-75117f49ab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc4f134-eac9-478c-a0ce-a3afab1125c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e33f579-a84f-4ee7-a226-27ee26d21954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8e5831-10e0-48a5-bef0-3bd2dceaae3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa4f475-cfdf-4ee1-a6e1-a8fdd4c5fc2b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83f6ab1-97e3-4792-b7af-7000e7581fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640e99b5-6410-44a4-ba78-061b59840fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93567db-79b9-4e35-85e8-57fec9e7f522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac54b7ce-66c7-471b-80e4-392c2c0b69aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6440761d-aa42-47b6-a054-0adb2345b616",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6053083e-14c6-4695-9e00-7f63a2de5ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74625918-bd83-45b4-aeda-4bca1f43e01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ad462b-3446-4724-beb2-08efa5ca6845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2badc07b-78cd-4d33-8a1e-fa48a9472b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef57363b-997c-4918-af9e-3c6f598520fa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406779b3-7343-4494-9171-9f4dd9ab9874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59eafdb7-9040-47bc-85a4-537af28ae9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c11f08e-3320-4783-ae38-bb82b3b81a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d9956a-4e41-4be9-86ac-07ccfded432a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa385d5a-6cef-4624-b33d-f75daea15c28",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2c40e5-c483-4fbb-ae2f-e0f8a4a7be91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90d03ff-c58c-4700-a7da-16d6a28b30ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d35fe64-3bf7-498b-bc8f-32d8ddd8168f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6352b91a-8774-438d-bb44-fa4fba32947d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d36b5d-e117-47d9-8e55-11f7802794fb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10488c1-553f-4424-b7b7-8d49c5da091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adce8cf3-8637-4458-924c-66e3f18f2d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7fbc00-2621-4cda-b646-89db6906068a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc9c839-cc25-43c7-91e0-558f771f452e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6fe838-c49e-43ef-a6df-2cea8340382f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f08358a-accd-402c-b818-54e2447e909c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153f2121-9c08-4720-a47e-2e65f998b070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aae9913-ccf1-4b6e-8ee5-13af8420d425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42108d51-7503-4519-9ecc-749be23387fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93048361-2a59-49db-acfa-d321edc34577",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69e3786-800c-480f-96b8-d40cb76b1730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5477c080-cb57-4ccb-a291-d93f10dc7e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2d1360-c6af-406c-a107-3a316f2af27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89733b56-b3de-4411-bdcb-64e71f8e60c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0742c6e-471f-43dc-8d87-77491c505a78",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5dd66a-e6c9-4755-834e-7db34a6bcb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad785dc5-f770-401c-a1c2-ca7089f072bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07df79d6-348f-4639-970e-e9e65dfd95fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b011348-e2c5-4c06-9904-f4d040177e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faa37a4-e2fc-4d1a-afad-300ef5304d6a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e7d158-d796-4b4d-ba28-6c4ea6ac3802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028541ea-30dc-48b1-b927-03d1a3523eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4aa175-1978-415a-a7a7-389e1ce4a59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ba018f-5670-415f-ab72-b0b25d74c562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d7befc-6cdc-48ab-8c11-6a94e0ac3e3f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5079dd-60aa-4dd9-9626-d6280ed08f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50719487-e210-4821-ab90-8e308c5f0c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e550beb9-6e47-44fe-a21a-0231281b49c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c1fe7f-2bec-4480-a86c-c66ecb810db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f526f318-06b8-4fb2-9e86-cadeb9024cfd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49de1f1b-6ec4-47e4-b83b-99095e1cd239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f319c2-6efd-4ea3-bd4a-55cefbf642a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6264dc0b-2998-448b-a4a0-4c242a771ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90b538f6-0ac8-47ee-b4bd-27af003b0fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e310cc86-5aa6-4f5f-b76a-821e9b01e77f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a959764a-40cf-48a5-a8b5-ba3d8e2bab41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876fdae7-fe9a-4199-ae43-846802362460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69f4fb3-623f-4614-a5a0-888e69b3c968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f771174d-8045-434f-90bf-af6348f86991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3ae7ab-d96b-4976-a5f6-f1539e733c77",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f94420c-57ee-4658-b2f2-ca91ff124a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099e6ca9-ea17-4d8a-890b-d5dfa8e2cd8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84634d8-97fa-4c58-b682-3d48070fa695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccce7c92-e3d1-41f5-8397-d5459c90b0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc64fb1-248c-41de-be72-3e09c14d666c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623d8b9e-ddcd-43f0-9da9-4048aee3d840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd76783-64d1-4e2b-a0de-c4d87ff09c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01368243-0e97-41f2-ba83-e4292b6be2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc7716a-7c3e-4f07-b8dd-650e838b46c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1559c62c-265e-4572-91ea-a32345ab4c7c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646fb7d2-408a-42d0-9896-abaf94078727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49dc885-ccf6-48b9-b151-8b49031ac8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260ed2ef-67b6-47c1-b8cf-04b733a6ccfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5396e2b-62e2-4df2-bae9-bb1e3aa2b665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4e0ddf-238c-419c-8236-7a0a529b52a9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c62ffc-915e-4327-8ef5-536a2c51fe2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff0f649-b84c-4f9a-b3fc-824302fdf02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c429b90-b322-42b5-b9e7-dd034754ea45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06e7f5a1-e18f-499c-8fce-81dd03dbb479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b789029-1f45-4f1c-92d5-e51c8395d02a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed66d506-bc63-401d-8f8a-963f1e357655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c256f8d3-d97f-4d52-9b50-15cc13080a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca38f42-bfc9-425d-9171-49b9576e3c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be2cdbf3-eb12-414d-8fcf-03d2aa0436e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06b55ff-d804-48eb-9d41-76e58006fac5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be397962-8770-4982-a325-f89d8ede33a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d323443b-3480-4122-a82b-c26685b80d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa1c115-0ea8-4e9a-b8ba-1485a077e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c391fbe4-f188-4a16-9108-4cbfb5c7e080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0675e6-15f6-4e23-b2c3-69e704a2152e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c6b06-d26e-45e2-ab75-db125d4ad3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d12746c-ff35-42c2-9dde-ccead586e07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2733abe4-9e2e-490e-9ca1-e2d1073fc014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "291415db-d63e-4a34-8cdd-64571ea1cd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9aa997-ffcc-43be-a5be-929f33dd515a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac91798-e977-4da0-9d1c-9e512d2db0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06ebfac-b656-4f10-9266-f3a2a961464e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec3f2d0-387c-4a24-8f72-daf57708f37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8415d0-40b9-4bd0-a510-35f322a224fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2186e4-89da-442a-b5de-89f8466ef60b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e18426-0085-4eef-b523-82db1acfdd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21676afc-713d-4072-bf21-55426e1febaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda195ad-e7b2-42f1-8ce6-9bf8bd087098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fef8164-2289-4802-94a8-6c61da9c18d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "40bb3a62-7e25-4974-a7e6-9dec07351601",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8478bfc9-e594-4d59-8e76-f158b70d86a8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa97892-4a57-4e22-87c2-85fcb3bdf791",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "103a8e59-11a7-4860-9861-b76432420d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ebfc26-9700-44e3-896f-bbe67bad0ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b574ba54-0a89-4e85-a067-4049841c172e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ba5e3a8-08ab-4fe4-a8e3-b16248cae237",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a886a45b-e1c3-4946-9ee6-a0f8f2072009"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31b5f04f-e049-40ce-9930-19f444b28ff4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7b61f5f-6335-464e-a12b-6160a7604cb9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04b4ecaf-0541-478d-9c89-4e16d277f816",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5aa5858a-a8fb-4686-8aab-44938c9d0856"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6929941e-72b6-4242-a906-0b324196cbc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad34cf3c-b082-4643-bb1a-71d38e8263b3"
            }
          }
        ]
      },
      {
        "id": "19216e40-9808-4d5c-b6d0-25c3e472615b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7b3fe247-3905-4eae-8399-67bdcca0f8dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68584e19-f34e-4bd2-952f-a090234e18b6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "16ffb7e2-a9e5-410d-a238-0e38955b3ff8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6217e24-b8d7-4a0c-b91e-7a1da25dd55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d5abce-5e74-4f9b-895b-3923b750af16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efaba6e8-77f8-4826-9cc8-06e36eb3c079",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693c1b51-f396-411c-b4a1-f325bd378f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2e7b18-81ca-4fc0-94b2-20f63200280c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f5e652-7e68-4d89-9169-025e7ffbe65b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f984dc-8abc-42a4-8021-9769d0d29d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6daf712c-5380-4dd2-a8e7-e85d8e76c9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401eea83-4c74-4087-805d-41499c192d66",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f6c013-e420-45ad-b957-67d0c1b9729c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e774c3-06e3-4699-91bd-a910373f146a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234d17e0-e292-4144-ba1a-ae3ca296fbc3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d1b60a-86ff-46cd-98ff-0cbdbe96810b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd6dd9c-4564-48bd-915c-a8e320af93f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd289f4e-4cc3-4bec-bf1e-30af89a3e36b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e787f409-4608-4ef7-99c2-95ad70125b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb88cb2-dff3-49d6-b68c-d7b0c0a0f811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1f5bc3-4546-497d-af64-d7626c8e82a5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5f6dcd-8adf-4143-a6ea-e24c74b9e820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a1eb94-4385-4ab5-bbc8-ca5a0cb2b0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f53cdb-a37c-4d0c-bc32-ff6ababd3ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49aba71-bc71-4fbe-96f0-70ca1ee7d69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7a54e2-b037-477e-bf85-49035a3d0b32",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a947f50f-05bb-434c-9a9c-c67d93a6e18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831edb71-df67-42d4-bf09-97249c426627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5a362f-48c3-4b16-bf92-0e1ef4c1d8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4124f15-f477-4187-9f76-b26f800dedcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baee313c-6c77-4a6c-9938-0d6e911201ec",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dae3e1-50c1-4693-a488-7b4a2fb75ee3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7400fdf1-3df6-41f1-bec4-cfdce98fa8b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe604ec-14d0-4178-8157-c334485a87ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee0ddcc-9082-4d25-8076-12d9fd222129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93925f4c-2efc-42aa-9ef2-bdda82f9b8fc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95311fe-e008-44fc-9cb8-d505836554c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d5ee96-fc30-4c68-8403-5f9a2bcd1f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251ea709-0c3e-42c1-b87e-d1ddd83bfcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43c80e9-9b05-441d-865a-25a6febd9b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed05275-2a6b-454e-87aa-80c71c2b6b3f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf24a8e9-6ea0-46ce-9d4d-7b64d1c896e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eecf35f-1926-4dad-bf36-e08274700884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b0dcea-c764-4ce8-ba85-6e4aa6f7f4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be19bd25-4082-4299-ad9c-f7b9dcefe646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281f5a90-63f8-4e5b-98b5-35a5c0aafdbc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88ec78e-6678-4c8c-b3b1-14ab66d0c8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6c3ae6-a1ac-4f19-ba60-9e7504023ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bde319f-1176-4e87-87be-29b87334aeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbcbe22-028f-4b6b-b521-710efde925d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86806dab-e834-4bc6-b870-63ca4e5fd024",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9f1d18-a336-4338-b8d3-eabc762fd1e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7d5fe9-f912-4442-86b1-d3b71813bf91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b17418a-2692-4107-9e34-437a971a50c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d23974d-a6d1-4bbc-9220-29cbf9c98593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0c18f3-1544-4e11-91f4-faf83da92442",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e9704a-2ae4-4644-b426-dde7bd5320bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b5c2f58-fa23-45e9-9f95-f5a845c0764d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4a4bf1-995c-4de2-be8b-72b538dad498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b27d7e-d01b-4843-af75-e6c7143bc802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c72f4c-0739-4ef4-ad55-2c210c1f4013",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef39280-0a93-4a6c-9f8c-4f347f850e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3854a5ad-dbda-4ee0-8014-ead72b1061f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a37c89-a54c-4d8c-a3b2-0d558b53e32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c799916-a634-425a-9398-6153e08370dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0edc0c0-1d2a-4601-92bc-e90feaafe564",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e342351b-6083-4eeb-9dee-f870ec5e6eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c596de50-bd82-473c-a028-df23bf04dd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7446d0-0640-4002-bb87-4014638c2ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe18538-9f14-4a67-b373-d40c86cb3aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111cb557-f388-4813-a720-87179667fbe9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08970b6-65d2-4806-95e1-2fa719deb2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f2ea65-9c80-4d41-8de2-1261cf10fcea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d011d82f-2b46-45ed-aa1d-7789c91b5f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd8d2fc-2347-4095-ba25-d8f04818afa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7651fe2a-28c3-4cad-9cc4-c64c8890ec3b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24db2d2d-57fe-4e87-aa4b-f3214d5433b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea9f4c9-0e6b-4a47-91ef-30eff05bafd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bb866f-3543-4122-9927-7d47d1be73b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8779f25-a0c0-4c87-b238-1608f1693867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf0dd66-f9b4-4385-90eb-c98389fac090",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ba732b-77d1-4605-a129-ffa9400e4438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006b26f1-0374-4e20-b8cc-8c99b2c1be86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf73d52-55b6-4066-85c7-ea2e30da324e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a56b5d8-720f-4bac-8fb0-5b588b4eb3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e0e270-41cd-46c2-b93f-b02d478cde45",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fdb466-a624-44f7-8761-2c8910448c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad16fc85-f432-4059-b6ee-bc1087b3d900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8caa86-afaf-4da3-a3b4-a55e3c6a6878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28258c5-b0c1-4b85-a5b6-b7171fd71da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a92befb-a866-45be-8046-ea6a5147fe91",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c87f7d-2725-436f-b297-5884a74eb4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84b903b-b438-4419-8e94-22d2ea3e4f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9782e4e-8e1b-42fe-b619-0e242ce553a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca7d426-0a75-486e-9112-29a7a19274d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1217bcb1-e5cd-42da-a4ea-d7d2c0f86333",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2eb851-11b0-496d-80c8-a3507300d202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00e470c-30f4-40ae-9b99-5f61e6ce5486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92aa728-5306-416f-9ab1-a1fcce3bfd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c44e35-78cd-4a06-9e7e-8f5c027fb096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4011960f-2326-4e19-bc7f-1060e29951a9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a95eb8-3d94-418b-9654-974126a7eaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4836875-7e4f-4793-8803-edcfd2380ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717790c9-c4ec-45f6-8f26-1139561a5449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6184686-5fe5-4ee6-8996-8bbdf2958ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04f238b-b779-412e-8b53-98ea8aba8cca",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57375ece-17ac-4aba-b5f8-7932d8295455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768fcb13-bef7-40d4-bc67-d4e14c066c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2da1a4b-5278-466c-81eb-f073d34c08ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44fe7f9-59d2-4961-9a63-f397d381fa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eeb28a7-aa88-48f4-94af-fd2d1a7f5d4a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d20c60-1f18-498d-b4a4-39b316426a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9801eb2-3a45-4d5f-838c-65640b5cf39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d60bab4-d4a9-4183-8a9e-0b9b7495b5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbed3cc-8836-4350-85ce-7d11af78f461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aba596f-869c-47b1-aa9d-faf77c599689",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebe6454-e3e2-4fcf-9cce-658fe42c9cb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3abe5b-e3f6-4fd7-a863-efa3b07de9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3658e5-77f1-400d-927f-b7691101b8c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1e94ca-d4be-4f1a-8603-171b1e14a9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27caabb9-df67-4369-a709-033b529be4a1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce723f3-7094-47ff-baf2-c3748add148e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1315ba94-ad4a-45f0-8f60-b2d5f4c98ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5306e4e0-df70-4cfc-b5a1-0278f8a46b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04cba094-3316-4134-9bb8-a0e5c6ae61cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2941bd6-d46e-48b5-bbcc-0b93ec3ab5f6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df312ad9-9001-46d4-8aac-341e8d3d7c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82c3824-cafe-4073-936d-5b822a5fc94d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4abf81-6531-436e-ad67-f2ecf4f71dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571ae77a-2836-448d-aa04-a6ee6226a4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304144c4-1526-41f3-a8ef-97c5e4bb2428",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe85c54-99cc-42e2-88d8-f0256738fa4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3025d5f-0eee-479b-8933-0b583320425f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38abb4e-f291-48ec-91ac-458af6ad74e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b827800-a83f-40e0-84ac-813d777766d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e91dc9-f1f0-4d93-b937-6e9ce20fb16b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38516a80-bd67-4578-b021-9e1704a583ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18fcf8f-22e7-497b-a0f4-ebc1887fea27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95536a47-991a-4020-aebf-cd37630075fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61171b13-f0a4-4923-975b-d2256ce93bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf4d24e-5156-4d43-9c1e-13836763d086",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93982dec-d4e6-425a-a4f6-0da59bdbed09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc1a7f2-2b9e-43c2-8d77-db91e25a3d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc3b6f0-4b6f-4263-8150-61ad6b630918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8486642d-8c48-4a73-9791-e195c4b84b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e39ce08-2caf-4fee-8b93-1786db22ab4e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539269d1-0240-4244-8635-dba144b24fef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e326de-7dbf-4d76-8386-88ba09580712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d940ac-6251-4cd9-8dd1-115ad8f5a33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212b13ba-ec67-4ea8-b43a-190665a4c95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b33a04c-2c64-4879-9808-8a760cdcb013",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2ccd4d-2c13-45f4-850d-d76dcb4891e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89784927-85bb-4770-931c-87ae5ace73d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e680a009-f167-4143-b584-13bcb7eec7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b112c8fe-0303-4788-8154-a62d951ec704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1732a697-6774-432c-86fb-268f2107adbe",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153fad4c-3c42-456b-9373-a99d6288a3f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c344cf-dcbf-45e9-a6c0-26cde6b4a66b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673346e0-ffe6-4507-8649-63478c22d597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca800d1-e4b9-49c2-820a-85a978b3e6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee11baf-6e93-4186-8b3c-a7d9f0857f50",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14915df7-27c7-4b8e-9bcf-9071d706277d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05160f06-52d8-4f30-a78b-3587599f15d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be13fe5-eef8-48ce-b3f8-f5630a687fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5d7459-4225-4505-9afa-affb5e063700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f71c72-bb5e-4d8c-a660-569473c16e1f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10328d39-953f-4a9f-9294-85cc34bb4231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f42f11-bbc2-4564-82ed-d3bc63f2678f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba44ea8f-8338-464b-91b3-558ef016c7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61075dfe-3577-41b6-aad2-7c5b9c636eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7cc287-c7b3-4bb8-b7ad-5926ef581b00",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e353385-0df5-4168-aefa-ab2e40540cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c6f650-a747-44b9-99ae-5ce60e15b3ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e713e879-183d-41bb-b2c6-b1b9cc231147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94bbed02-632a-4580-a4f2-be0df6ec1889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9960fe-768a-4c54-8298-b52ab87933fe",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8cd39d-77eb-4bde-81a3-17156d7e9722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e81ca9-07ce-46fc-9cb2-e396dfef9ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cd0d44-bd29-48cc-a3ab-5289704be1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6267ca8-78bd-4074-b778-95a078442aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1551ce-0ff3-41bc-8e6b-63a65d1dad84",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845a75d4-dcb1-4dc8-b72d-9422095aabb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a1af02-1601-416b-a2da-5600da16eca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecdf18b-f0ad-49af-af26-bec2bea6e30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e011edd-f9d1-4780-b79c-c7aa79d97fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e6c1aa-dbba-46de-bfd9-7c1f72aeb562",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404c97e7-9ce7-41f9-85ee-fea92c81bfdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb62636-1973-41a7-9f9b-33e7d5647b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b89ae7-08b5-4d75-b757-655f65ee15aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ed955c-449a-40ed-b370-6847a7d2e696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3fe6e1-51f4-47da-8f67-622d3cc4dbc7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbe83b6-a382-47ed-aa84-c2bce1a48c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef3f556-9f8b-4e67-9a9a-c305502aec3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc470b1-0718-400f-86c2-49e8c3157228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2652639c-7eac-49e3-b1b4-be59b7f39d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51752eea-7b61-4e0e-83cc-2351808f10f9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe52d9ce-7c40-4621-8d38-189fb7b58771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3afa35-40df-47a9-9615-ad3e8f5d1a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d7ec77-9635-45e0-99ee-7af0ba2a1603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41094b82-d176-4a65-9a9c-7e1cff223083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24326827-4fc9-4059-8be2-cfcabb2c047b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebd1496-ed8b-4c64-a445-ddb753e5d071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7635ccf-7c4e-4103-b354-046e309debd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f2ccc9-2a82-4f28-afed-ba0b337e0ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cd205a-0133-47aa-9594-b9f856b7a6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04b0710-d2ab-44cd-8fd9-7d2b3b7e7b77",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b17015e-a605-41ee-be24-4a357c22bb03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7b3e1b-c580-4a5e-ae37-1ee776f2ffba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3eca6e-eea8-4592-ae34-49d7155d9dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8430b6b0-9746-4144-af25-bc93361e7201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1dd947-25c4-4906-9f2e-f882bbdbcaff",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c3eb54-0126-4013-bb00-fd88fa569608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b92eb9-7e5d-4815-9f75-01f39aec2413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d45c42-1945-4695-bfa5-400396c65ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6c7c83-5da6-4d41-b112-16eac59e3699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb387833-df84-4fea-a857-1ff191a95b56",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628f6649-6468-4455-aa01-206823a1994e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b35253-76c7-4ad8-9d44-037e3e22e3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8103ec-646d-44c3-9b4b-04c96fc1075d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273918b0-b471-498d-a117-adfbfd6f9261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74f89d4-af49-4d53-8ba5-8f88b17382dd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b771240-59a3-4b04-b30c-1cb3459a90d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2b0245-491a-4a18-866c-0fa631bf26d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f06ee6-467d-4e6f-9276-5906d4d73fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279eb889-0e6d-4da3-9e78-d36142fdd5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe8d2a1-11ca-4546-a737-b0d84df40242",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c06540-67f3-4ab5-a981-9fb2ad0b29bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23db453c-e123-4f1a-ae78-d1ad0e9b3c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf57bcf5-36dd-4cac-8a82-64b842eefac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd7088c-2d2f-483c-ab48-9acc3e8560bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867d117c-acfe-41f4-a49e-da6acedbb90e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24225101-92a7-4a36-b0a6-036818255bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499ef4d9-29b9-41ad-9eb1-fa28e1ef2d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339eafa5-131f-41f4-8aad-18552448ed97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18de7ab-0013-4799-9b2c-937fd6bad8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bb6403-9520-404e-9f00-8794f45201f9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e702cc-72cd-4a85-ba54-820681a41943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2f4bce-492f-4434-80de-dc44444ca053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407dcae5-5ac6-403b-a37e-413130c1e01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c04eeaf-0eac-4769-8b5a-b0d4d1ab8148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54709c1-9abb-4d92-a899-a79df45c8eb8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5974ae5-6115-4503-b30d-2c2a8ce83297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df2433e-f036-434a-b5b5-3f15fea93377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0b124d-5358-444e-9003-950affc29aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc307cc2-8d00-45a5-a612-d28233f74b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35629da-4161-4af3-a8cc-b541d2f152e8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679258c4-285a-4ca3-9ec3-70f3f883669c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbf9e1f-2ab2-4eb6-8b00-179727bbf240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c406ca6c-75e9-48c6-8e0e-4f93afd1a75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c049056f-a28c-4572-af24-2412ea8d8f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9b08e5-48fd-47b9-bf85-ea22fc892567",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5cb486-11a5-4e8d-8153-61bba6e8206f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641365d8-639e-4846-b548-4c7f5252f84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb83a12-c321-49a6-bd2a-a2d3599f8751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f083cf1c-1376-4b33-bcd2-ef5ef514cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffdae1a-1e6e-4a24-9d7f-fd0708d42c93",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6001e085-22a4-40cf-b9a7-91874fb9725c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92dc4e53-f690-4aea-971e-237cf26399a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de60df3a-1329-4b9d-b36a-52161deca5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ec8719-cb7c-4e71-8b48-9c363813a6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e81365-6655-4be6-9a5a-a26011afc04a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73b77a1-2a09-4fcf-8aed-58d19e547da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce198d8-7073-468a-a900-596f602c3d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6179d9d-5abd-4e2c-8a3b-fb8c037ab3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a212810-048d-434e-aa14-5ef5dee48058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1602f2eb-570f-4c09-914a-0bb01d9be0a6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af312719-ab9e-4b73-b0ca-2ae0f903f0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b546c32b-2459-4e48-abef-3928d6239140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4041857d-c0a7-4238-8208-2d54b2142eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8514e000-777b-4a7d-a99e-a8fecea492bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38312c34-c053-473a-a8db-2b906cc4fce2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3704041-1ae1-48d9-ad71-00d9aa7102af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdd0b3b-577f-489a-b8a8-6a32431d83b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d80a27-d4aa-4176-96ae-99d461159c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c5dab2-e9f0-4233-ba00-d4c4ba6a1e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a6fef6-b8ff-4a28-aa80-1f3f566338fa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a67db6-cbd1-423c-8edc-f6bff034231e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6bba1c-3808-44f5-9cc6-bfbc0f209a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fa3838-b110-47a2-9ab9-e29ec8866ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a317ff7-d77b-4c4e-b2ae-cf6873fafb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d357f19-b008-4d10-bf98-334f9b24d3ae",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c31cd4-949c-42d6-9530-035241d1305a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abe12ec-8bb7-48d4-a986-e00fb6730548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8412170-916c-4856-add0-02c4bae281d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ea26f4-8c42-4f4a-b00b-52cc0b17a9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3effe54a-aee4-4666-bd8b-196a720f7154",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729bd3ed-8b3b-4bce-978f-71cdfc6ca717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4beb580b-ab40-4913-8324-f94f3fd24a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e60324-d10a-48db-9df6-69715e44881e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b6ee4b-032a-42b1-bf59-edeaa270e659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b615b9b-217c-4ca1-8545-b7393a81a64d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1115e994-f096-49b1-9200-5bcc997420e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428a2813-3efe-4c74-aadf-210cd1e81c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ba014a-3394-40d4-9a52-6ee92773bb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6650528d-42e9-4c92-8293-0a3749fff952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68660ca8-294a-4c79-9d83-4522ba539344",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ddecc3-8fb6-4360-b4fe-cd3ee01e259d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c591f1-9630-4991-a2fe-ed7baf1a45cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603e3a7f-516b-4dbe-a658-8c3e769bf75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84480788-6e4a-4059-9c97-57f98c28e3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a1cbe3-50cf-4e66-9c1d-599f1e245ce3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef081ef2-ebca-41b0-a3bb-a0d6783a3c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9604afb4-73af-474a-82e2-0b19f29bd2ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbca634d-d9fb-4b4f-8482-de2ec957bd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3f9e05-90e6-4c4b-b2c6-a1730d0606ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d2843c-f436-4e06-b527-08aaae0f7dd4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573b5ecd-536d-4cfa-84a2-fcb519616f0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9110c8dd-3838-48c1-a2aa-384f540e66cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75478b5-a519-4ac4-833f-6ba83726710f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e392083-5783-43e0-8a3a-b3fb7e1658f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dab674-64b5-46e2-b566-29c593445ac4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f7eee5-6e12-449f-84f7-16b06903dda2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeabd2ad-f988-4e30-9fa5-fdcd7240e900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c236b6-349e-42aa-95de-2bec19988ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0fbfef-6a20-427f-8137-2f418214c688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936edb52-31ac-4770-a320-1f3723a886c2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2cb3b1-7df6-4bc2-ac3e-d6dd7b9fe2b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34387113-bba0-4dcb-91d1-f00174a453e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e061671c-c143-4877-95de-e01997bb0558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4ab9f4-989b-45d1-a0d1-e84a0e98913c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1826b4c-3a42-42fb-9c6e-2515755ddd19",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5404bcf-2bbf-4091-8172-1681d5acef5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ff124a-c297-48e2-a480-acdbee86ec62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc0177a-5c16-41e9-9566-54980aeda21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d619ccdc-0fa7-4dfb-9aa1-3a77e159dc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7775a677-c81f-4d81-9983-e456369c34cf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d833c675-9d4f-4aaf-8f8f-f3504d6f5b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54e826d-a7a7-4de4-82d0-447614045e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbd7c5a-66d8-449a-95a6-7fcc2779bfe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c68be19-7162-43e7-8f08-76e945768b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab9fa53-dd2a-478c-a7e5-4f5a1b65665f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9da36a-adc6-4b04-91a2-a320b26d5977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b72627b2-7c29-4b91-80e8-6960e9876b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef15fce-8c0e-4632-8b99-12022efa570e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f51440-2bbc-4de2-aa75-d93f638dc70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b28207-fd40-4562-a00b-6683d6a64476",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2461ccb-d0b1-47c6-8a79-30c1b96a92a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9020219b-f002-4b34-a44c-b11c8ccc6533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de05aac0-676b-442c-b1a5-818d91dda210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d539be68-4a69-4b69-a6cb-c540dfa7a9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583b7399-0c1d-4d62-a0fc-16064f39707b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bf09d0-4d73-42bf-863e-7c09fa4688da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "565fcc64-53af-4441-ae69-e7cb18a61d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068223ab-3289-4fa4-b69b-cfecd4994dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62804b9-d064-4ea0-ba9f-8f604302eca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88be9ec8-a7f5-4fe5-9238-779e62bda7c6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a57e4f-9ab4-44ba-9f0f-48248f5e0f82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1677bccf-7864-4a89-90c7-9838dee0fe02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e569b6-5590-45c7-a86f-ffcf18de3b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febad1eb-bacc-4e84-a221-9ccc21493997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedd9101-e1e7-4ca2-b771-43abfaf477aa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5328b72f-f08e-4454-8890-374f7f6c4991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1b97d2d-b82b-4a8a-8642-e35dd3006a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8214177d-3653-417d-8c4b-0b5f8566ce37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cc0912-56a9-48bb-b0a5-ee453375a70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb6a2e0-9f52-442c-8d88-35eaefcef66c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186da7c0-e4bc-421b-a3a4-021fbdbfcd3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2ecc3d8-7c1f-4d7f-a42b-e61af8ee9f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25c9b87-94fa-4538-8083-fe9d022a3e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d91b53-af3a-483a-b451-0df3cccfc393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba02dac5-fc9a-4f37-bb6d-706117a6f931",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74d90f8-3cc7-49db-a424-2042cc0448b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db125393-637b-41d8-ad31-bb3201306cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afb98a4-8f4a-4359-9b60-a1fd39499c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a876c1-fa0a-4fbd-b35a-684c5f208eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac7dc38-2325-4051-943f-fee3d7aa4ec9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b557997-f742-4235-bcd9-d04d50ac477c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc3f1c1c-29db-4fb0-8b01-ace6c771c0f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafba7e9-8607-4a7f-b8af-223852aa5699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ae16e3-c7ec-49ce-9158-b6e39af1a49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7d728d-70d5-4469-86a2-e5d3691b4fdf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7509c9-17a0-4fb6-b4e7-d7fcdf28f719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "312ca364-6b04-4773-9c31-ae7f5084eec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f2bb90-4eab-494f-8d50-47bf0ecd4358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12642e8a-cac4-441a-a396-f1d7e84925c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee2508d-b175-4ba6-b895-d38f96787ae8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9e04bb-0aa2-4926-b2cb-41977a71c268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18e0c18-e94f-4d01-8a71-b48b34c2c90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbee313-7dfc-47ac-8846-e2aba018ef60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d77895d-1213-451d-a00f-099de3e15d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c59de4-940b-429a-bb30-c7594a112dc6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33da7399-4c25-4284-a127-dd2197d57c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ada594-60d6-47c9-842e-63005e9eaa60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f0c84b-1d62-4a12-b9a0-cccaab6e8249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b097cb9b-ac6f-4d96-b983-425cb071a513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14aebcd-4bb9-4653-9d6f-d4d94522bb02",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1ccf52-667f-4eb8-b003-3e08c3f2b7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134e619c-09d0-436e-af15-373d379f491c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677c2b2d-1eaf-49d2-9d1f-ded326043065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5834786-065b-4f22-94ba-6dd5abb1bfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7763cdb-f175-40df-a11a-17019cc981c1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0218f0-1dd1-4b4f-9c52-4ba876fe8d2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4db1404-013c-4f90-b960-063105f9f07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0263261-935b-4d2a-aafe-e61af5b9058b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03965d0-4aa3-4445-8792-6487b787485f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e44720-5cf2-4881-a834-78b017339078",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c64125-d428-4e4b-811f-06d78629cae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8337e639-ad7b-44b5-8e02-d6dd93ce0e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac8ea1a-7a78-4972-8d10-0536be834cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e273690b-c6f4-40e6-b1a4-9d7e9944f4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83940404-3482-4e65-992b-e00a86540fc4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcecbbf3-3d5c-468b-b430-6bb349d70b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6cdb4da-74a0-4f75-97e5-182389c79ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4197b1ec-34f3-4d7a-b424-1e810fdb1a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93fdac8-284f-455e-bff0-c0d448e58b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446130e8-e148-4a3f-96a8-e975a85029ca",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0d5bdf-b221-4450-9b3f-04ba0bc71ec8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5744c81-c702-4cd8-869a-3da8ef3e88cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad7ca5a-aefa-479a-bf95-0eb323d0c1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0220d1-a834-437d-906e-720284a1fbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3687c2-92f5-43c1-b121-b0067c63342f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5900dcbd-01f1-4fe6-9e8b-bcc23afcde94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ad39e47-bda3-4829-8f6b-618e4fdbd014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb9d72d-00b3-4739-bd1f-6e67696ee9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da42ce43-a501-4938-ad2a-cf5ae83f6105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d62336-9019-400d-97c9-e986553a8dfd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bc8b34-9eda-4d8d-920a-9029f4d0d464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f196b81d-b88e-48c3-a95e-d63fdd2ff5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74077bd-7b3a-435e-9c97-51d5878c301d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6337f717-1892-41ac-9481-74d7bc48af82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf42e6d-0fd8-466d-af80-d68968c0fb54",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb8480a-e0f2-4a00-b80a-30157253f37f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "532d38e6-f199-481d-b927-d1bd25defb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "991aaab6-695e-495c-bcba-7c5ea0832f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6aa015-6758-46bd-95f3-6c3e20c09aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511b0fa6-b96e-40ef-bad4-75322119a7e1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac1ee67-80bb-4839-b0e7-3f6a11ed6a27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "477c2d62-9f9d-44d3-8eff-f1b1a5c2aafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a548ad-6659-48cb-b164-6533eb5272bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c4fa0a-bb0c-488b-816c-4cd9b623c2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8848bbcc-89f5-4081-88da-95e4772afd03",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc6f37f-d9ff-43ae-b870-5e2017d06568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d6b113d-e82f-49d0-b2a4-32c5a83cb48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f61479-466f-4c35-b017-2f9f58d26416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73b3099-967b-410e-8552-d5ccb1da297c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8aa183-d06b-460f-b86c-433207e00295",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542c26c0-cacc-4d2a-a9b6-f0200390635c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c94d55b-fe75-432d-a5ad-5eec48e9e5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63ff3ef-682c-48ca-bc21-12c9e9d49b10",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94150521-12af-4ed4-9e1f-0e1e1f374c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dc194b-cc68-4315-bd1c-9cbdc4c27fd1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8f8f4d-ac6e-42ff-959f-c8e5c56172ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e239f52-21d4-4dcf-b9d6-e6728a7381b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6b8e8a-60c0-4656-a196-efedbfc0d940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96445f61-b59d-4ef5-a5f1-7e137ff15bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc3ad76-075d-4d25-8fe0-94e9b2d3fcb5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dc3efe-2422-4986-a253-799d57f8658a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e06961f0-3650-4f3f-9ef7-764dd0b3e9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e626da-93d1-45a4-a493-21adcbbd6479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2090ce84-157b-45fa-8e23-87ec0a34f562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273346db-c1fa-4065-b605-c4dbe14eedfd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d174f0c6-589d-4306-acbc-d5a23e43bbb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12dbceb5-594a-46c7-b771-fb1a63fc078e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff216d3-087b-4d40-8204-ca54c69e41aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdbb15b-934c-4f6c-a4fd-a77458cae07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d379cf-c197-4c8c-82bf-0f2bfbf11d3f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c65176-2584-41c0-992c-19131ab97c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ebde745-4571-4e58-93fa-12e7884eabc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bed7e5f-79d8-44d2-86db-b9fe636f615b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c51c96-63e9-4ea6-b0e3-914c955719fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fa91af-a19f-4bad-8d1a-90c86eb7d9ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5139ac42-6188-4ea5-a180-bb8b7a901aa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42f3a3f6-496d-4bc6-b23d-90e1a928a8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeba4ee3-540d-4a1f-80f2-61899dbe53e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d310b09c-cefe-4c87-b406-e79853994a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd910a0-e659-4714-a097-98421d7840a7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5052de33-f3a4-4f5d-907a-37ba10a5e465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7575ffa1-7f97-4e24-aa43-5594b2c1962c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b0bbfe-103e-41a7-9e58-52b1a52e4b90",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb95f446-6b76-4c87-8a39-edd78d4fc9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd427ca1-0064-415a-8a1c-88fb4cb50a8d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c297772c-802e-4de2-b8ed-1b4d0b9a84c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395d3227-0446-4b1a-a178-8ca8794f1a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c95470-e703-4bb3-a251-882bbc49211e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbabaa2-6824-458f-847e-2009b4c32735"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe33a09f-00e6-4753-a1af-1ef1ccc6d248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "addb6653-5640-4bef-b539-0a5d2dda56d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa33b438-74c1-4764-8db8-df93cdc3f7e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e765483-833a-4678-8ac0-57c22a3aabb2"
                    }
                  }
                ]
              },
              {
                "id": "a92f1c04-630e-491e-b319-af5452e697e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12fe4286-60f2-4d95-bb24-ce33f562aaa0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5212c7-4294-4dd8-8c3f-015c1839b293",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5e8994c4-8f75-43d2-a0ff-507d4613c9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7ce4d0-05f2-4a6a-839e-b8a02d7689e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "317c82a2-aee3-4911-b694-0bdb387fb23d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "620829f2-dfc2-465b-9fa8-fb3d13aa5a43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0f26031-8aee-4d8e-bbb4-ed503a3ef7c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ca5b6e0-d321-4977-af39-547e6d151d70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "198d33ba-e6a0-48a6-a299-257900e2cf2f"
                    }
                  }
                ]
              },
              {
                "id": "7f775700-ae77-41ba-bf18-7286584e4240",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8bbb3c24-afd8-4deb-8e4a-12f1b55364dd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b708bfec-6632-4938-9c5c-f4bca9cc8c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dcbee779-d121-471b-af8e-56f7b9e5c891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7398938a-60d4-49b9-a428-d9f0928fc642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958e39c8-10f5-46a5-a68f-535479f55ec2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5dd04f74-7ee8-4219-bd0f-200e067b92bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccab336d-473f-4a5d-8068-7f56f4ace65c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3ab86cc-b46f-4466-a46e-2f35a177e392",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c59bfdc6-ba89-4d71-a338-0ca932d05208"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "738e21ae-143c-4b77-86cc-967fd1ffe7f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "246eb232-ef94-4124-a13a-7b759295bc97"
                    }
                  }
                ]
              },
              {
                "id": "6bae95c5-55be-4f0b-b221-37e42bb45a60",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01866dba-a71a-4099-85ca-95907ae11987",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "997a5018-da59-4983-8ac6-1246f32d6ba8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab54153e-4662-462e-a42f-d81f3cfd22be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee45b84a-1e89-4d76-b8d6-5b8a66d550e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30101dc5-f970-46f6-b106-43d7cd74a0b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "40067a98-79cd-4017-bfa9-2dc2fa39175c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afa25926-f782-485e-8059-112c8ec5b89f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02e9b2cf-a482-494c-8366-cce601c53d03"
            }
          }
        ]
      },
      {
        "id": "9ffa8950-7006-4f7c-afa4-c18d774c1fbe",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e17dfab9-3da3-46e6-af46-c68fe9988eb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38487a00-40dc-4f31-ad85-72fccc96d03a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3754491-95df-4430-92f8-13d9f854f16f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12c00ea-303c-432a-a245-8b57fac2112a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "48ee1fb5-239d-45fd-8523-e937d35fd05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806df7cf-2153-4d5f-816e-466b68f6b045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0b08005-7560-47da-99ba-e866a010d835"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79c4715b-0144-4899-8d30-0c6aef340906",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8edace41-136b-46f1-bb1a-088c357c254b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88d70c7f-7385-4782-9f2d-54d0a3fc9e19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ae9a85b-4ed2-49eb-9801-e2d8d71335d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "759e7c26-f693-466b-8f7f-5f573573261f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "910c3c96-d22f-430b-9c1d-06b3e910b58f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36493383-5d93-4f52-a0e5-983aa8089aa1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34819893-134d-4fc3-9b65-20ae05886e3d"
            }
          }
        ]
      },
      {
        "id": "1dbe6a40-c580-45c7-8b02-4d71a68a0d83",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "37fa6a68-79ef-40fd-9a82-8d351a9bc07b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71f5f951-4c83-4672-9bcf-db2dbcc87d2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2b0b26a-6bb6-4380-930e-478eabc2dff8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e63970-bf20-4f20-a7f3-90bc7fb66395",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ddae528-a8f7-4ed0-8b6e-a7044bc22569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d44a204-bdca-4431-8f30-a95227d2f208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8538f1b-6d1e-4687-ad78-578da51e4aae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51bac4c0-7d52-450f-b6e4-313480a47089",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be106916-ccb1-4689-99f7-a44b3fa7facc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c73f305a-0482-4018-9019-78201bf066c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaed5446-7217-42b4-b643-17e2f485a74a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1dd8047f-a776-40cc-b453-b2a4aff47ce7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "80ecd4b7-3ebe-4f2c-bb5f-15ef55ae9519"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79482f8c-012e-4837-8a21-01b0f66f75a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91084ca9-23f5-4678-b8c2-e07450c06305"
            }
          }
        ]
      },
      {
        "id": "16915c3c-9b05-489e-b6e0-5c4feea94fe3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bfcbf0e3-28fa-4619-8641-cc79bec3f6a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7092eeca-59ba-4881-81a3-8eff27429a3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a820a184-5e75-4500-a30c-b3677782b2dc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7ca837-1dbb-4c00-8571-52cd26e0a66a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d42d932c-fae9-4cd5-8eca-81549f9a5b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5810927f-bd31-4c0c-9b53-62baa81f3d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d7f94d3-1a61-42a0-bec0-401af5a7b3ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c76055b4-f5fc-458e-8cdb-6bcae810b3fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41fd13bc-2a9b-4d16-be6f-accea42cdfdb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71288eae-5918-462f-b20c-efcc51c9f708",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cffa7cb6-c9f0-44e3-920a-ebdf4df08b18"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d00b0e4d-3db0-4941-8a69-d37d76959f1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "faf8ef19-28f9-4737-8123-943abf98b028"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "665c958d-8c53-4ecb-8af7-edece1900223",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3949428f-9e2a-402b-8d8c-0f10e0cbcca0"
            }
          }
        ]
      },
      {
        "id": "a5f994cf-2d24-4649-9295-f1df0bbe751f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "295fba25-6d3d-443f-8efe-d0692a74bdeb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fac9f0d4-1342-4aa7-bab6-2d3f8d3264b0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a6b01035-8bcb-4f6a-8d64-4ea0ecc35f6c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cddb13cb-9cdd-4767-8fb9-1427c9c1327f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e944137a-84a3-4019-add4-cad54333acdd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.02105263157895,
      "responseMin": 6,
      "responseMax": 664,
      "responseSd": 67.88602092838,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702773528097,
      "completed": 1702773553059
    },
    "executions": [
      {
        "id": "89b0d5f1-0a2c-4ad3-aedd-769e478e8688",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4e4121d7-7332-45da-aeb8-5e1fb7641db4",
          "httpRequestId": "e393cf8c-410d-4fa9-b6d4-f07480ad6622"
        },
        "item": {
          "id": "89b0d5f1-0a2c-4ad3-aedd-769e478e8688",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "87103c81-338f-43ab-a25a-300683718cf5",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "4fdc146a-f7d5-4469-9cbe-1af9380486f8",
        "cursor": {
          "ref": "d357314e-cc7e-44e8-9758-397b49de3039",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9badb6a9-3bcc-4555-b2f7-56a697da19fa"
        },
        "item": {
          "id": "4fdc146a-f7d5-4469-9cbe-1af9380486f8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a6919841-fbcd-4906-b2e5-ea4e51d4b8ff",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c5ba34d6-d564-4c8f-81d6-93d37d542c3d",
        "cursor": {
          "ref": "0c0b130b-3129-45d7-a665-5a09263a100b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ed2a64fe-74da-4d38-bffd-a13b43995d01"
        },
        "item": {
          "id": "c5ba34d6-d564-4c8f-81d6-93d37d542c3d",
          "name": "did_json"
        },
        "response": {
          "id": "86dc2176-a0c8-478c-9d72-8e14c807db63",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6730c89e-36d3-409f-88c5-b2f260f096c4",
        "cursor": {
          "ref": "e5c5d593-ee40-4429-92a2-accdad346ed5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7054491f-cd96-46f5-a4c7-6e6d6daab890"
        },
        "item": {
          "id": "6730c89e-36d3-409f-88c5-b2f260f096c4",
          "name": "did:invalid"
        },
        "response": {
          "id": "93d115cd-0a2e-4256-8ac3-c5d8f3160552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6730c89e-36d3-409f-88c5-b2f260f096c4",
        "cursor": {
          "ref": "e5c5d593-ee40-4429-92a2-accdad346ed5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7054491f-cd96-46f5-a4c7-6e6d6daab890"
        },
        "item": {
          "id": "6730c89e-36d3-409f-88c5-b2f260f096c4",
          "name": "did:invalid"
        },
        "response": {
          "id": "93d115cd-0a2e-4256-8ac3-c5d8f3160552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1ce1ce-5da9-4150-ac6c-d5e071cc2343",
        "cursor": {
          "ref": "50fc8907-49b7-46ed-8b40-a12082190e3d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3ea32f48-04df-48f8-a982-812abcb1d818"
        },
        "item": {
          "id": "bd1ce1ce-5da9-4150-ac6c-d5e071cc2343",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "aa804a79-4a39-43e4-adc1-6b68bcebbbdb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d698f1-17ad-495d-9c56-73760df0ecfa",
        "cursor": {
          "ref": "27d5e10b-38c8-4e6f-88a3-b607993f1d4a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0d069d68-29c3-4b02-b745-5515fc85ab97"
        },
        "item": {
          "id": "d1d698f1-17ad-495d-9c56-73760df0ecfa",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "67030f08-b7ce-4ecb-ab4b-52796c95fa25",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5bc185-95a1-4a15-a2c8-c724c22530ee",
        "cursor": {
          "ref": "fd464fd7-8747-4d0a-b630-074637b4bbef",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "39e8477b-9f0a-470e-914e-5c4d5aee24d5"
        },
        "item": {
          "id": "8e5bc185-95a1-4a15-a2c8-c724c22530ee",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4b8b7912-a730-4252-900b-e1e466a0203b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7773f787-98fe-4637-a628-34c8e2d03b1f",
        "cursor": {
          "ref": "d89d68ef-2839-4e05-9c90-cf633b4d8537",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "99fd0dbe-da27-42e5-b075-b401eb42e424"
        },
        "item": {
          "id": "7773f787-98fe-4637-a628-34c8e2d03b1f",
          "name": "identifiers"
        },
        "response": {
          "id": "968006dd-160a-45a0-97af-bb9863b06f36",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edda8724-49e0-4f51-9500-07a1e5e48959",
        "cursor": {
          "ref": "415ec625-7988-48f1-baea-bcbd61025bbc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa5d1a30-080f-4adf-b76c-d55a3cb8a753"
        },
        "item": {
          "id": "edda8724-49e0-4f51-9500-07a1e5e48959",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "62134a17-6628-4182-bb99-50465a9778ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa43cbc7-5495-40bd-8125-fad2cd3812ad",
        "cursor": {
          "ref": "b02b87df-0354-45fb-b27f-0eeac0a1399b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "31f82d60-2dee-404d-84f4-0e12e0f8d1bb"
        },
        "item": {
          "id": "aa43cbc7-5495-40bd-8125-fad2cd3812ad",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "54365423-5bb4-4afb-bac8-3fb7b173415b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca804f16-592b-4aab-bbee-9489d38e2564",
        "cursor": {
          "ref": "c28e441e-c09c-4a30-befc-ed9393331d4a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "817163a2-2b2e-45ae-b84a-b0f0cdeb0038"
        },
        "item": {
          "id": "ca804f16-592b-4aab-bbee-9489d38e2564",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "84dc5534-3f99-4561-9138-622f37e1ee38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32fc1d2-3ab0-4c4a-964e-1595ef428121",
        "cursor": {
          "ref": "1d31b727-8c6f-47f9-a94f-076201859481",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "347b99c9-d5d5-4574-a616-de23833825c3"
        },
        "item": {
          "id": "c32fc1d2-3ab0-4c4a-964e-1595ef428121",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4224a242-321d-4ef2-903f-5b231bfd3e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b5a722-724f-433a-bd74-1e408edf72b0",
        "cursor": {
          "ref": "c7a57553-8ab7-4b96-acf1-e11931a9b4e4",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d0d527af-e3ec-4ba3-8ff3-07decc827d5e"
        },
        "item": {
          "id": "b3b5a722-724f-433a-bd74-1e408edf72b0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f556d514-6d80-4c67-87f1-80bb52568800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5245c529-19e8-4cfa-b80f-136386e2ca0f",
        "cursor": {
          "ref": "66f9f78f-609a-421f-8164-8cd9b22a9a4a",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "de768a26-1072-406c-a742-3e0ea8593437"
        },
        "item": {
          "id": "5245c529-19e8-4cfa-b80f-136386e2ca0f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "35f6f84e-8945-40a8-afe0-a2ea925d3f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59ee5ac-a4fa-4ce2-b0ed-703b6d69713b",
        "cursor": {
          "ref": "450bcb8f-64e3-4828-9a48-62be5579aa73",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c941c389-75d6-4502-a16b-ef21ab4e7d10"
        },
        "item": {
          "id": "c59ee5ac-a4fa-4ce2-b0ed-703b6d69713b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a003b508-4b84-4013-b69b-c026a9e4330c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d475d6-1f5a-4289-986a-d0aa23e8a25e",
        "cursor": {
          "ref": "30d3af55-b88c-4fad-a4f4-f8d6377a3b0d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ed34399f-b5af-453e-8c45-1cabfb1f7ffb"
        },
        "item": {
          "id": "89d475d6-1f5a-4289-986a-d0aa23e8a25e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "379b1866-9c3a-44fa-a0d4-5b042fd8631c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3e422b-3e5e-452f-a40e-7e93ccdad7c2",
        "cursor": {
          "ref": "76db6a43-20ed-4331-a6a8-1cfb5cc4af73",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bea8d80a-82f1-4181-8f74-c0d5d23b8273"
        },
        "item": {
          "id": "0d3e422b-3e5e-452f-a40e-7e93ccdad7c2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "72df4c22-85f3-4d02-9314-73b672f47104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad6c271-895e-4594-b35a-424774d416ac",
        "cursor": {
          "ref": "767614d6-6535-4736-9d27-6d7955854ef0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7bf6c0aa-4e2a-4637-84a9-9a58c018cfb3"
        },
        "item": {
          "id": "bad6c271-895e-4594-b35a-424774d416ac",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "17219c6c-a5b1-4009-8e6f-8a18adabfd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349e6d5d-51ee-4fe9-998b-8b9d75284a4a",
        "cursor": {
          "ref": "d4b248a0-261c-4dd6-b855-3cea917435d1",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "351b08c6-2a89-45c6-9349-4e2ed990ce74"
        },
        "item": {
          "id": "349e6d5d-51ee-4fe9-998b-8b9d75284a4a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eb44fead-e476-4a09-beb9-96d22acb2c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27b5fc7-e0be-496b-b676-4b9614a5cd69",
        "cursor": {
          "ref": "e26054bc-3e02-4fb3-82be-ebe20aa72051",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fa237111-e391-4509-a6fe-fbd948e39e3f"
        },
        "item": {
          "id": "d27b5fc7-e0be-496b-b676-4b9614a5cd69",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a908227f-7299-4e01-b3ff-2ad9cf14d569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961ea758-d2b0-4aee-9b3c-37856af0e84d",
        "cursor": {
          "ref": "c4cc9dc9-2edc-4788-8231-cfe32cce8159",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4f58526e-99e8-42ce-8f6c-e19e4d6739f3"
        },
        "item": {
          "id": "961ea758-d2b0-4aee-9b3c-37856af0e84d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7708ac48-b414-40a5-934b-0dcb732a96c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9ab8ee-9800-40b0-a607-09f77aefdcc9",
        "cursor": {
          "ref": "39fc0396-461c-4b3d-a672-29a586def28a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ff6c020c-ea15-4904-8d20-6e6a4026d7b2"
        },
        "item": {
          "id": "dd9ab8ee-9800-40b0-a607-09f77aefdcc9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "88b28f1b-6882-4fa2-8523-d6376c19f54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ba955c-e4d9-4d6e-81de-a4fb0a6a016e",
        "cursor": {
          "ref": "8d9b257d-2dfd-41cb-9a9f-fb002c2b8afe",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d73b5115-b103-4f26-8cef-d4352f994654"
        },
        "item": {
          "id": "a5ba955c-e4d9-4d6e-81de-a4fb0a6a016e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "17bfb20f-f09c-4527-9c13-cc38eb5377dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5dea6d-6542-4b8b-8445-777f95c080f0",
        "cursor": {
          "ref": "cebd56b8-7a4a-4a61-878e-57f40a79ca84",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "43f48f0e-089a-4f4f-8ce7-4bd23dc8956d"
        },
        "item": {
          "id": "cc5dea6d-6542-4b8b-8445-777f95c080f0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d689bd1d-bbf1-433a-aa61-13ce494cb8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f82648-a594-49bd-8e65-a3264d529745",
        "cursor": {
          "ref": "8e372e84-8688-4dc7-a19d-7bea0a326080",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "68d83fa4-f99d-41e8-874e-2ad3ba23db07"
        },
        "item": {
          "id": "75f82648-a594-49bd-8e65-a3264d529745",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2a00423a-b6a4-41d5-8f08-ad5d40a6509b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fef096-6682-4a87-bafc-39e2b4bc466a",
        "cursor": {
          "ref": "2d4df02f-f3b1-4bb1-85ab-2ec6ffd35462",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7c8824e1-92bd-4d57-9316-a8d36094e9e3"
        },
        "item": {
          "id": "83fef096-6682-4a87-bafc-39e2b4bc466a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "13c7fe18-b3e0-43f3-90ba-c38adc13a60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c42999b-f087-4a4b-b4bb-25e90f09a4dc",
        "cursor": {
          "ref": "57f49371-ebf1-4b28-a7d3-010c32db8e99",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "faf52f1e-d6ba-4eca-8225-7167e28f52b0"
        },
        "item": {
          "id": "6c42999b-f087-4a4b-b4bb-25e90f09a4dc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c4a27a70-103d-4128-a4d9-ba61d94071a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ae1e01-ae4e-4281-aa20-efa0ee63f164",
        "cursor": {
          "ref": "9e09037a-1cee-4c3c-a74b-c0b274789275",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "62f17500-7acd-4cbd-b063-bdf2e6d87700"
        },
        "item": {
          "id": "02ae1e01-ae4e-4281-aa20-efa0ee63f164",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6817acda-6430-4a57-a804-1515c8a34743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed8c891-33b2-496e-a193-07ef91d0811f",
        "cursor": {
          "ref": "6719305a-9412-49a4-b86b-39170afce435",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bd38e4ec-1429-42af-92c2-0455fde6628d"
        },
        "item": {
          "id": "6ed8c891-33b2-496e-a193-07ef91d0811f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "62f4008b-cd94-4918-8249-4a547574fc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d558eb6f-3820-486d-bae6-5e794bad3e3a",
        "cursor": {
          "ref": "3711465d-97c3-4bd5-bf7e-c783a9d41dae",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2c2716f7-0b14-494e-bd80-086e6a7765bf"
        },
        "item": {
          "id": "d558eb6f-3820-486d-bae6-5e794bad3e3a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5bb79f40-ce99-491e-8ae6-337c0888bdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874b65dc-2cc1-4111-95f7-54d9337556c1",
        "cursor": {
          "ref": "e7ea53fc-a961-490d-8af7-0ef3e411b968",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ebc7c12-d0c4-4cec-8586-f0998c74bc71"
        },
        "item": {
          "id": "874b65dc-2cc1-4111-95f7-54d9337556c1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6684092a-3b44-458f-8ec9-371c35913b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9343bb8-20fb-440d-b938-52b951bf1463",
        "cursor": {
          "ref": "2ce10f2b-33c1-42f7-afbf-cfdb377efdcd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "54bcc6ac-0735-40d1-9e4c-317d3248506f"
        },
        "item": {
          "id": "d9343bb8-20fb-440d-b938-52b951bf1463",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "85b48b61-3f94-426c-9292-301270fc37b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1865c5e5-7b31-4fba-9a9b-a28b9afaa7d0",
        "cursor": {
          "ref": "d2a46895-f74d-45da-a92b-91de19e5085b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2c7ec9aa-5250-47d7-a81f-a1daf2a7ead9"
        },
        "item": {
          "id": "1865c5e5-7b31-4fba-9a9b-a28b9afaa7d0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8164270e-684a-41aa-8b2f-06854c881daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af19a81a-8e55-42d7-9eee-075c95ab4704",
        "cursor": {
          "ref": "e0114aa4-b98c-4349-9d2d-a85692c02b59",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a1b32771-8d37-42df-9883-d54637b93b80"
        },
        "item": {
          "id": "af19a81a-8e55-42d7-9eee-075c95ab4704",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "63228ce9-4d81-4a6e-9ae0-0d6efa0c7b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d158f511-b4e0-4fae-ba4a-0e3c4caa86af",
        "cursor": {
          "ref": "37bff9b6-bd72-4654-8d05-9511746a4d7d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ed42126b-bcc6-49ca-8d83-5f2ddc961a82"
        },
        "item": {
          "id": "d158f511-b4e0-4fae-ba4a-0e3c4caa86af",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "89108c03-1bea-44d9-9ca6-cbdd49c9141b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50f5504-6f3b-428d-b825-d74a13a3a599",
        "cursor": {
          "ref": "de2342c4-95a3-4c60-a017-bc72abce9fc7",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4a16ad3e-7167-46cc-b1b0-b17ce3106085"
        },
        "item": {
          "id": "e50f5504-6f3b-428d-b825-d74a13a3a599",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f9ac583b-17a0-4d6b-a609-58f66e6bb507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8790a348-2c41-43d9-9992-defc582c8cec",
        "cursor": {
          "ref": "9634b2d9-5b8a-4d42-ac68-13aeb10cf52a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "209eb350-ddb5-4b25-9e34-9c2a77cea94f"
        },
        "item": {
          "id": "8790a348-2c41-43d9-9992-defc582c8cec",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "be3dc5fd-e9fb-423c-9770-27ad51b8fe14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3938e9e-5a35-4270-b2d2-ef141b735a6e",
        "cursor": {
          "ref": "dbea0379-aef1-4126-9165-eda37c20ccbc",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6779e4c8-2e0d-4333-a905-0411dc0aaca3"
        },
        "item": {
          "id": "e3938e9e-5a35-4270-b2d2-ef141b735a6e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0125667e-4acd-47fa-bfd7-3d64aba775ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3d1db8-f8a2-41ba-8402-ec16e3f07ec7",
        "cursor": {
          "ref": "20a781e1-e1be-42cd-be10-ca994fa4eaef",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7ef299f7-a870-4c88-8a4d-26e4cb1e8be9"
        },
        "item": {
          "id": "7c3d1db8-f8a2-41ba-8402-ec16e3f07ec7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7de30367-2b2e-42af-b14e-475f023a3ad8",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "868cf9bd-bcba-4f90-a754-fa08e7b80e8a",
        "cursor": {
          "ref": "39ee30a2-6f41-472c-81e1-37a2d13387ed",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ac67b2cf-941b-443c-8699-61dccf6cc5fb"
        },
        "item": {
          "id": "868cf9bd-bcba-4f90-a754-fa08e7b80e8a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c72837a9-d274-40e5-a346-988df6e4f69b",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2b69a231-a983-4267-8bf3-8247f346facc",
        "cursor": {
          "ref": "9543e41c-0a8a-4ebb-a3bf-bff4a9a5eee0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0edb3023-eb29-4e38-8de4-037e0ab96f9c"
        },
        "item": {
          "id": "2b69a231-a983-4267-8bf3-8247f346facc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3a70b664-0ff4-4723-ac0c-9d710cbbca88",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fe29bf7f-7ee9-4386-911e-b930e2bbe8c6",
        "cursor": {
          "ref": "b0265152-8489-423f-8f4d-bc9517caf6c1",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9b523266-3cae-4d10-9490-c21545080f58"
        },
        "item": {
          "id": "fe29bf7f-7ee9-4386-911e-b930e2bbe8c6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "aa60db0f-f707-44ed-8ac6-3b3d51c10e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534e8cd2-5207-4fe9-a4bd-dff0f2e69887",
        "cursor": {
          "ref": "3602acfe-2256-45e4-8a5f-d44dee24a3ac",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3bc24dfb-f11d-429c-b693-5a3423092703"
        },
        "item": {
          "id": "534e8cd2-5207-4fe9-a4bd-dff0f2e69887",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3ccc4485-8d5f-4c03-aad8-f849d6f04f22",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c3b75e2d-6afb-45da-bde6-141118180973",
        "cursor": {
          "ref": "42aedf63-1d00-4dd9-89ff-b4dc5a64adbd",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ee461885-5baf-414f-a916-2dda824cee40"
        },
        "item": {
          "id": "c3b75e2d-6afb-45da-bde6-141118180973",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "66f6fa23-1009-487b-a0f3-b076f0988ae8",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "798b9df0-9ae6-49b5-b460-d28243fd8fa1",
        "cursor": {
          "ref": "3227da8c-2f75-4333-9cb8-2c8625650780",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2df1f003-1ebf-4c99-9528-c6592bf92675"
        },
        "item": {
          "id": "798b9df0-9ae6-49b5-b460-d28243fd8fa1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cbabd732-79d3-4d36-b18c-539b4ff7aab2",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "621b2adb-c037-40b9-82cc-34d001e90015",
        "cursor": {
          "ref": "89718353-c942-4412-9501-a68b02e8c8e1",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b60ece8f-6a56-4da7-956d-b7edecd73745"
        },
        "item": {
          "id": "621b2adb-c037-40b9-82cc-34d001e90015",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1d72c569-962d-49ae-a7fc-069ea3a649d0",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "96d67e9b-bdd4-4547-8745-f9a868074ae2",
        "cursor": {
          "ref": "fbf2dbb1-3560-4e85-bdc9-ea54b08638f6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "790f3afd-59c2-41bd-b589-c7bd03c3e53c"
        },
        "item": {
          "id": "96d67e9b-bdd4-4547-8745-f9a868074ae2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "69b0e977-d40a-4939-ae9f-c0ff557ad190",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e5d5c461-78d0-46e3-9aee-06a807bdddca",
        "cursor": {
          "ref": "69ea6fe1-b391-40ac-b580-df3cb6024b5d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "24747830-09df-4f92-bc32-157542ac2a51"
        },
        "item": {
          "id": "e5d5c461-78d0-46e3-9aee-06a807bdddca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "968864a4-4955-43df-9c13-0decaf4589f8",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6b176712-4531-4714-8937-be6f54465802",
        "cursor": {
          "ref": "86755776-6025-4053-b42c-bcbb43b6d0f8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "09779590-a478-4e83-bbed-ed768937e010"
        },
        "item": {
          "id": "6b176712-4531-4714-8937-be6f54465802",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bc2abbe9-46ff-455d-bc09-abfe1e865f2b",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9d3ee418-2714-45b8-b99d-ad29eb73146c",
        "cursor": {
          "ref": "310a9d7c-83a4-4d3e-9ae7-980e37db541e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1418086b-cf2e-4f7e-9477-fd56b32060f4"
        },
        "item": {
          "id": "9d3ee418-2714-45b8-b99d-ad29eb73146c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6659e785-5ef9-43d3-9329-c085d4c426a2",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c9ee852d-4382-4c45-920e-d466467804c4",
        "cursor": {
          "ref": "08cd4453-af89-44ab-a870-0166c042540d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "457f77ca-843b-4780-a7bc-60879df3e0f0"
        },
        "item": {
          "id": "c9ee852d-4382-4c45-920e-d466467804c4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9da1772e-bf9f-4811-a752-7981b392b8db",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f268e5cb-6403-4bb1-a8d9-3d0149f7832d",
        "cursor": {
          "ref": "3ec90df1-895c-4446-95ac-a95b5712caa5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b3134cd6-b21e-491e-ac70-31956bd0c43b"
        },
        "item": {
          "id": "f268e5cb-6403-4bb1-a8d9-3d0149f7832d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eacad2c4-b254-4657-b836-562474c58405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1d12d0-01cc-415c-8220-3eb83a8fe672",
        "cursor": {
          "ref": "0311c914-3c2d-4b26-b131-1dd4286bac1a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8ed1128-8d06-447f-8a87-167d056d8d62"
        },
        "item": {
          "id": "ca1d12d0-01cc-415c-8220-3eb83a8fe672",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c95de129-576d-452c-ab98-b78ee9e0e1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3d039f-0784-4a4a-a79f-4fbdbb172662",
        "cursor": {
          "ref": "c3872ef4-7267-463e-ac84-a2b07ca7d235",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "65832e69-4216-44ae-94aa-d12365dfbfa5"
        },
        "item": {
          "id": "5e3d039f-0784-4a4a-a79f-4fbdbb172662",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4dcc2a36-dadd-40f8-93da-09f13bf07659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4437f9-cb1e-4f01-b6f5-a6bf43518219",
        "cursor": {
          "ref": "2c2d4392-a933-455f-b8a8-85d66d463709",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "faab1150-8c0d-446c-b523-c355ed04ef9b"
        },
        "item": {
          "id": "be4437f9-cb1e-4f01-b6f5-a6bf43518219",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "64f00a24-babf-44bf-86cc-5a64d3634644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8936a74c-4710-45e8-b258-7917ddd3fbfe",
        "cursor": {
          "ref": "13d7e76d-159c-4a75-93a8-edea604b3770",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5e006cd6-29dd-429c-b702-4142a1c5ecd6"
        },
        "item": {
          "id": "8936a74c-4710-45e8-b258-7917ddd3fbfe",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8880194b-8ae7-43c5-b1a6-f8103ef6dc97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7646252-16b9-42d5-8651-419b5f2accad",
        "cursor": {
          "ref": "c055074d-a2dc-49fa-aa73-c30b2cc0e442",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0e21e876-cd66-487a-ab81-3e348cf39fde"
        },
        "item": {
          "id": "b7646252-16b9-42d5-8651-419b5f2accad",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "32d1f6dd-6eb8-4d69-81a5-0b294a7d6580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602a1385-3abf-4135-b41d-875daa4432e0",
        "cursor": {
          "ref": "ae3fc78f-1852-46db-8df9-74547a9cd820",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "534c0c57-fbe9-4aaf-bf21-59e8ca58e00e"
        },
        "item": {
          "id": "602a1385-3abf-4135-b41d-875daa4432e0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0176291f-b541-4f2e-a50c-241f29c9ca56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51718133-7208-46e6-9f3f-e19f9431649e",
        "cursor": {
          "ref": "b070bc0b-0a44-479a-84fb-1b4781a985c7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a57649a8-7374-4b7e-ac6a-d70412746b82"
        },
        "item": {
          "id": "51718133-7208-46e6-9f3f-e19f9431649e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1a4e8c28-11ef-42bc-af2d-fddcb48723de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d68a5ea-f7e3-40f9-9398-584c13ed9120",
        "cursor": {
          "ref": "0c2efa60-c2b1-4ab3-a05d-af1c804e0172",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "667e326c-d3a2-4742-9bee-509d2a54b3a5"
        },
        "item": {
          "id": "9d68a5ea-f7e3-40f9-9398-584c13ed9120",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "42dbaba7-0c5e-4baf-94f7-e822ba8c4720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34dfcb24-e23e-4af4-94b1-753bfd591a38",
        "cursor": {
          "ref": "eb0e58ab-8d53-4d7d-859b-9b6ab0ea0349",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bf59b71e-3a0a-4ec5-a880-525f9a748294"
        },
        "item": {
          "id": "34dfcb24-e23e-4af4-94b1-753bfd591a38",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8d3e1f99-5f48-415c-badf-1e173ddf9826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe1a225-7103-47f7-a4d6-e1b43e213d43",
        "cursor": {
          "ref": "7b0d661b-7e3a-4a32-8832-0694b1b3c41c",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "36beb3a1-7eaf-4db3-b5ca-844598febbf3"
        },
        "item": {
          "id": "dfe1a225-7103-47f7-a4d6-e1b43e213d43",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7c56675c-ddc6-4b93-a808-68515d4a71ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ac6b1e-5d44-404d-adf0-2c921c432ab2",
        "cursor": {
          "ref": "20c401b8-8082-4cdd-a0e0-fba1ed2374e2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "84b0a7ea-010d-4b4f-b706-3c586324d217"
        },
        "item": {
          "id": "43ac6b1e-5d44-404d-adf0-2c921c432ab2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a9dcb1e8-8ae8-445d-8d23-75c0d25d7c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9de1d6-3489-4f90-a0a3-2d80e03aa206",
        "cursor": {
          "ref": "6cf8d9bf-71aa-4129-97a1-ef80ab31f6e4",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ba2a859a-d0c3-4f8b-be7a-88a417e49320"
        },
        "item": {
          "id": "4f9de1d6-3489-4f90-a0a3-2d80e03aa206",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9526f404-dd0a-40aa-8963-a410c0687334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4953fbf0-e771-4a9c-8d64-0979c8c775c7",
        "cursor": {
          "ref": "71c4454c-a8d6-4cf5-a91f-e9686afbd341",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "24b00b8d-6cbc-4039-a8dd-497a8fc761db"
        },
        "item": {
          "id": "4953fbf0-e771-4a9c-8d64-0979c8c775c7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3045c506-9585-4023-b04a-8b5406901ca8",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6c2bd9d1-98ff-4c1e-a210-8b362c1a6b0c",
        "cursor": {
          "ref": "f42b00e0-171c-4f64-82df-a4ba2eb70c48",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ed486208-0329-4b03-acf8-00132e7c6a9e"
        },
        "item": {
          "id": "6c2bd9d1-98ff-4c1e-a210-8b362c1a6b0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "df06984d-e17e-45e3-9135-28849a494d40",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "96957073-5382-476d-9e10-3e2f8ddf1be4",
        "cursor": {
          "ref": "bcda2986-c517-4b43-9642-610afd1dea45",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1506c381-a61d-42a6-b91c-f57b5f239e27"
        },
        "item": {
          "id": "96957073-5382-476d-9e10-3e2f8ddf1be4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9830e79f-02e4-4d77-9ed6-b48bd883dd8d",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f325b116-54dd-4405-97b8-b8b1edc2c23e",
        "cursor": {
          "ref": "a80a160c-fc9a-4fc4-bc6c-11f29a3dfc30",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b6b1b693-ed1a-4cfe-a189-2011e3dafa38"
        },
        "item": {
          "id": "f325b116-54dd-4405-97b8-b8b1edc2c23e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d5052ace-26b4-4087-8bb5-92f4b26f0613",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a29d495c-e46d-47ac-94cb-837af392b194",
        "cursor": {
          "ref": "e49517dd-a233-4597-aa57-933abb662f54",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "90963180-9754-4e6e-8ff1-3845d31a3284"
        },
        "item": {
          "id": "a29d495c-e46d-47ac-94cb-837af392b194",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "639be247-0efd-4f8b-b9d4-b553d13d03bb",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d734f4e9-6d59-40ae-9b72-6b70a084329f",
        "cursor": {
          "ref": "806ba3e7-5f5f-4266-b8d1-d4c09d7e5a2e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "57214199-bac7-4c1c-adea-6cae6b52142e"
        },
        "item": {
          "id": "d734f4e9-6d59-40ae-9b72-6b70a084329f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "66d2370a-7251-4a9d-a96d-cb5a0a033fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094cb1d0-34f2-483f-8965-9c738c98973a",
        "cursor": {
          "ref": "7024c9a9-fcbc-4d9d-9f1e-d024827fe28c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "27297f50-49b2-4e25-96ca-834c6aca3eed"
        },
        "item": {
          "id": "094cb1d0-34f2-483f-8965-9c738c98973a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b7bebebb-c535-4590-accb-2db552cdd21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024b845b-52d7-424a-8325-b500ba8a433b",
        "cursor": {
          "ref": "fdc31806-d5b4-41f3-8725-18b4c6400a69",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2ae606dc-f2a9-45e6-943c-7b0a3142ae5e"
        },
        "item": {
          "id": "024b845b-52d7-424a-8325-b500ba8a433b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "10811fb3-fcac-4137-96e7-5ccef320961c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59550bc-5bf2-4fd0-b748-5b72000ffff2",
        "cursor": {
          "ref": "eb943484-155b-40d8-8f4b-54bc7ddc5345",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "981c5339-197f-4cee-ab0b-34521a4256f6"
        },
        "item": {
          "id": "d59550bc-5bf2-4fd0-b748-5b72000ffff2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "63e4cca1-aa13-40ab-9bb0-96420d126894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8226216c-aa0a-4429-98db-5393bf60e065",
        "cursor": {
          "ref": "1acaecb0-e1bd-42bf-b535-917df94afac0",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f2cd9204-5da6-4a1d-bce7-4866c483d200"
        },
        "item": {
          "id": "8226216c-aa0a-4429-98db-5393bf60e065",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eaa78501-82f0-4fd5-9e9d-7905a1c8bbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c30020-8667-41d1-ab52-026376c45af6",
        "cursor": {
          "ref": "910c1556-d2bf-49e3-9a79-ea5422a32971",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "969d8270-3c84-4941-b06d-4003de388725"
        },
        "item": {
          "id": "b7c30020-8667-41d1-ab52-026376c45af6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8c8359c3-f6ec-400d-8a6a-0f6100b1abcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30734508-ff82-49b8-a0c2-9b123a11d61f",
        "cursor": {
          "ref": "bb02b8c9-08a6-4229-abf2-7a77017e8b77",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "80282c19-2e70-412a-8cd3-1481f812a850"
        },
        "item": {
          "id": "30734508-ff82-49b8-a0c2-9b123a11d61f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "49872453-39c0-477b-a2b6-98e14618281d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab44ff6b-9972-4a36-a22b-7864fecb589a",
        "cursor": {
          "ref": "c31a1388-912e-4698-a54f-ec17193e88df",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8252f877-7b65-429d-8493-0e3c904050e9"
        },
        "item": {
          "id": "ab44ff6b-9972-4a36-a22b-7864fecb589a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "518bb331-a907-4536-9f1d-c72b4df4deb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17363c2-9252-44d1-b865-ed81ed7e4e52",
        "cursor": {
          "ref": "a52ad454-cc94-477a-a9f4-14841164d3d3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e58b25a6-7e85-42d4-97aa-e77dd5e0b2b2"
        },
        "item": {
          "id": "a17363c2-9252-44d1-b865-ed81ed7e4e52",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d0270224-aacd-4516-aa51-41e98a368f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665dabca-8d52-46da-a514-312d8b999624",
        "cursor": {
          "ref": "f754b25d-1f89-4ae2-bd6c-f32487393bd8",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "44ed0f47-115d-45b8-ac91-11d9c36adb88"
        },
        "item": {
          "id": "665dabca-8d52-46da-a514-312d8b999624",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d4f74453-8e0e-4c74-b63e-39beb60741c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafdf000-e684-4d5d-a7fa-99ed34a7f0e5",
        "cursor": {
          "ref": "a49c590b-3474-4006-b960-42bab11febb9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d49f059b-4e2b-44ab-96ad-6cb037b070c8"
        },
        "item": {
          "id": "aafdf000-e684-4d5d-a7fa-99ed34a7f0e5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3bfa0daa-5e83-4b48-b9e4-52d7d472463f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa87f90-33cf-4fac-96af-ba32a02f1720",
        "cursor": {
          "ref": "1334bd0c-02a3-4ba0-94b0-22ddeb29db6c",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dead4a0b-9f04-46ac-9c28-9c635f959061"
        },
        "item": {
          "id": "1aa87f90-33cf-4fac-96af-ba32a02f1720",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8131e630-ca26-41a4-abb3-1c3615a5c88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd45e296-1538-4efa-ba1a-56a4c1d05a51",
        "cursor": {
          "ref": "18d23296-ff7a-45a4-acd3-2a5a81b50ca9",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4acb0be5-54f5-4482-aada-6531c272964b"
        },
        "item": {
          "id": "bd45e296-1538-4efa-ba1a-56a4c1d05a51",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eecd4ec9-b951-4402-99d8-3b9ad92f2d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83747960-38da-405b-a005-ad3da1f98dd6",
        "cursor": {
          "ref": "82104741-d650-4c31-802a-ced4ef88d772",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9cf8cc18-64b8-432f-8a3a-47ea868e2313"
        },
        "item": {
          "id": "83747960-38da-405b-a005-ad3da1f98dd6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d633f0aa-4b6f-4a4b-928c-08c237d06ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498febc2-b52f-4548-a803-ce13f8c4c83c",
        "cursor": {
          "ref": "1b5d2a16-d53f-4ad0-8608-3df23a2410f0",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d443069c-cb1a-4ef0-8af8-6c71045407ad"
        },
        "item": {
          "id": "498febc2-b52f-4548-a803-ce13f8c4c83c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bec189bc-d47a-4b17-93dd-7081548e5e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8548aa7e-d109-4a4b-a6d0-4208db88b8a0",
        "cursor": {
          "ref": "8430e137-9408-421f-bf13-1b9615c534e1",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c6f592ea-622b-425a-b06f-d955e94f3964"
        },
        "item": {
          "id": "8548aa7e-d109-4a4b-a6d0-4208db88b8a0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "94ff31b4-248c-4887-96a7-ea03408f3e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d0bb40-859d-4aa5-8d9b-157d92cda1d9",
        "cursor": {
          "ref": "9023e602-4b49-455e-871d-695fa01efa0a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "93a4085d-0b58-4034-9a24-cbfe7170cb8e"
        },
        "item": {
          "id": "94d0bb40-859d-4aa5-8d9b-157d92cda1d9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8581aa4a-dffd-4aa3-ae2b-a5d308fe4a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7208d394-25d1-4b3b-969b-96da802d5fee",
        "cursor": {
          "ref": "9118d98a-7ea2-4e7d-bff9-f5c0e2808cf6",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3b381843-81f9-49ce-b37c-5940f16a7bca"
        },
        "item": {
          "id": "7208d394-25d1-4b3b-969b-96da802d5fee",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0d803b22-b68c-456a-b1a9-af446ca5d4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d994378-1cc6-4b1d-b029-dbfb5971bc2b",
        "cursor": {
          "ref": "15f4e024-e247-48ed-af36-281d88ff2bef",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "11b46690-383c-4944-899b-fb8efbeaee41"
        },
        "item": {
          "id": "4d994378-1cc6-4b1d-b029-dbfb5971bc2b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5378458b-37ed-468d-93f9-1b024ce2046d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdafe81-c8f7-4fec-8621-1538c12a7c6e",
        "cursor": {
          "ref": "9af8725e-fc26-49cf-8a5c-5dfd37c274fa",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fbc8ab33-cb8c-4bfd-84c7-159a78a19e27"
        },
        "item": {
          "id": "3fdafe81-c8f7-4fec-8621-1538c12a7c6e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4dc9b8cc-69e0-4de9-a376-b58c72985b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48ac3c9-b34b-4afa-a186-52c3155e70fa",
        "cursor": {
          "ref": "59162e58-f7b6-46d7-ad63-1e3051aeed8e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b29b8544-678b-4cbc-abb4-371fb654b16a"
        },
        "item": {
          "id": "a48ac3c9-b34b-4afa-a186-52c3155e70fa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a897720f-35f1-4eff-a194-e18b8ecc1989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bc2565-3d85-47c4-b384-238a9461c75d",
        "cursor": {
          "ref": "d38db94b-ec47-4d87-9d11-76d86b015814",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a6fcf69b-29f5-4d6d-b9cf-e377ce4e35f2"
        },
        "item": {
          "id": "f3bc2565-3d85-47c4-b384-238a9461c75d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a4228f9f-660d-4859-a9b2-68c5e03bd0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ca3cd0-2149-431c-9ca5-0c1ed01d74b6",
        "cursor": {
          "ref": "44f9d74c-a0ef-47f4-9d69-1049639ebae7",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5b8948c8-5c6e-469b-b6aa-5e60a41293ce"
        },
        "item": {
          "id": "46ca3cd0-2149-431c-9ca5-0c1ed01d74b6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dd1d2ed0-c9e7-46e3-8f0b-ddacc69da01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075701b9-9226-443a-9898-052ec9756b92",
        "cursor": {
          "ref": "90084636-04f7-4a89-9fee-f41cbf4d45f5",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ba51d7b4-cfb9-4bc5-a010-869bc40b0eaa"
        },
        "item": {
          "id": "075701b9-9226-443a-9898-052ec9756b92",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f4e94c57-c9b3-4278-b624-3aff669aca65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6677a8-ef5c-4593-ae09-b87a891f9a11",
        "cursor": {
          "ref": "31680133-f1f5-4702-871e-59353c91ba11",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8b836e46-f875-43fd-b693-16be5717286f"
        },
        "item": {
          "id": "0b6677a8-ef5c-4593-ae09-b87a891f9a11",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e529402d-5d80-4a0d-a48a-c1ec8ac36aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f026184-f5d8-4e2a-8934-85102d1013df",
        "cursor": {
          "ref": "015631ed-8e85-4048-903f-9d0db7ce7bd5",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d77a3dab-fa58-4ceb-a052-b6397a69b878"
        },
        "item": {
          "id": "9f026184-f5d8-4e2a-8934-85102d1013df",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f1b87a9b-c1b0-4d0e-9760-5d481759503f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e99fae6-19cc-4692-a1bc-ee0ca2823a5e",
        "cursor": {
          "ref": "bf615090-3fec-4460-868a-4c5472c29e4d",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "eb142125-068c-4fc5-a6a9-d108592e4049"
        },
        "item": {
          "id": "8e99fae6-19cc-4692-a1bc-ee0ca2823a5e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a628780d-48e3-4d40-8411-25e85ecdd771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6655e916-5459-4b4c-a863-3097df0dd368",
        "cursor": {
          "ref": "d6988055-2a91-4612-9fc1-cb2c7ea48def",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d9060323-a1fc-4e6e-8e00-b797fce1a768"
        },
        "item": {
          "id": "6655e916-5459-4b4c-a863-3097df0dd368",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c28df611-e296-47ca-bd62-a585069bbd0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535f2e4a-cd9c-4d72-bbe0-204a08fd9cb1",
        "cursor": {
          "ref": "ac89b786-8a8a-446d-9c62-7e780d6305d9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "519272b1-f1c3-4019-92e6-d3df1f57b498"
        },
        "item": {
          "id": "535f2e4a-cd9c-4d72-bbe0-204a08fd9cb1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e4fdf9d2-8a37-4769-9719-a67596b9d81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee80fd3-0326-4aa9-bac1-3b83457bda22",
        "cursor": {
          "ref": "376a1a18-5caa-449a-9916-6cc88cd7651b",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1cd0b938-bfc1-4771-990f-d93d050f9c6b"
        },
        "item": {
          "id": "cee80fd3-0326-4aa9-bac1-3b83457bda22",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a805951e-614d-4f67-a48b-2a93264a3376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1c7e4c-5669-40a2-af03-0fd383b82807",
        "cursor": {
          "ref": "1ea8b27b-cf05-4dff-94c5-6a07175dc17a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "89dd9951-490d-4ab2-ad9e-bfebfc529f47"
        },
        "item": {
          "id": "8d1c7e4c-5669-40a2-af03-0fd383b82807",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7bf19f80-3a75-4c1d-9896-d5a76b20393f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a953a6f9-a0c4-4566-b861-b64ad203e56a",
        "cursor": {
          "ref": "dd67a633-3e35-4701-b348-21579c9f45d5",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5d203b30-6e3a-40c3-9d48-0db14aa0341d"
        },
        "item": {
          "id": "a953a6f9-a0c4-4566-b861-b64ad203e56a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4840e134-f4dc-421f-800a-59649e185563",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c16d15-43cb-4800-a15e-675148ede364",
        "cursor": {
          "ref": "1d0ebf04-62b3-48ce-9f1f-bd8b640246bd",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8fc401fa-c904-4fd6-b54b-50bdbdd56419"
        },
        "item": {
          "id": "f5c16d15-43cb-4800-a15e-675148ede364",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "cd1f4455-4897-4e81-82c7-0b36dd3359d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5b169795-ab43-4f72-98d4-26e4145430dc",
        "cursor": {
          "ref": "40db77ca-388b-4cd0-9d97-3292ee6524d9",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "296e624c-3cac-449b-b179-7c0f91eec176"
        },
        "item": {
          "id": "5b169795-ab43-4f72-98d4-26e4145430dc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0472798a-520b-4292-b207-e8415c8c5a82",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ab2008-ec77-4987-8050-89f29e1bcc77",
        "cursor": {
          "ref": "77862a63-6456-48e9-a6bf-67d70d78a213",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6d46568c-b92d-43e4-9dca-58d7d99e6cd0"
        },
        "item": {
          "id": "e8ab2008-ec77-4987-8050-89f29e1bcc77",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5385dba5-5823-4192-bb0c-05aace012576",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f083fa6-46fd-4d6b-a5a7-c59175caf4ab",
        "cursor": {
          "ref": "e5a44fdc-a69c-47fa-beb5-e51182ee5705",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a87bce1b-8fe4-4c30-93d3-5eb6e2ec1b04"
        },
        "item": {
          "id": "3f083fa6-46fd-4d6b-a5a7-c59175caf4ab",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ad70b4a9-3758-4887-b847-6c864fc6874a",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d37617-e54f-4b13-b83a-e86a6a992670",
        "cursor": {
          "ref": "4f71c68e-3987-4cf2-989b-d43b6ac8f19b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "092f91bc-66bb-412b-8523-38c43c26afca"
        },
        "item": {
          "id": "c8d37617-e54f-4b13-b83a-e86a6a992670",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3afb7b9d-53f5-43d3-82c0-91d84bba1cde",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77ebb4f-af72-4889-a065-09fc057c6143",
        "cursor": {
          "ref": "214084d7-2455-4136-a043-85a1d409ef01",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4ff787ae-6ec3-46fe-bb70-824efd750d38"
        },
        "item": {
          "id": "d77ebb4f-af72-4889-a065-09fc057c6143",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "310a608c-e1c4-47df-967f-3f497819eabb",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-17T00:39:00.728Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-17T00:39:00.728Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "754a4c7d-23d2-41c3-82ee-9befcba928f3",
        "cursor": {
          "ref": "33028d03-6988-4a17-aed6-e2595e274ede",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cbaafd10-f74b-4a0a-a1a7-9baac94134f2"
        },
        "item": {
          "id": "754a4c7d-23d2-41c3-82ee-9befcba928f3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ea8547b6-f70f-463b-b773-8d5073165182",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58efd3dd-fc55-441f-ad6e-7009a4d732dc",
        "cursor": {
          "ref": "b2fe2970-1b39-4e0b-a637-670c5bef4eb0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0160efc2-1a96-4531-958c-17646bc5d816"
        },
        "item": {
          "id": "58efd3dd-fc55-441f-ad6e-7009a4d732dc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ccc265f-6b52-44c8-97fd-0a2be5cf8199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf4947c-6807-4fdf-93bb-1a7151ab7efa",
        "cursor": {
          "ref": "3eabe093-3e0a-4f05-bd88-cc783486359d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7b7ae6bb-ed87-4cf9-9695-6c77b28fbbaf"
        },
        "item": {
          "id": "5bf4947c-6807-4fdf-93bb-1a7151ab7efa",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "45aec428-7157-40fc-b182-d210d02f54b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d5005c-8c26-414a-8c0d-a92c74e2d169",
        "cursor": {
          "ref": "6b99083e-a211-4107-a516-4bfff5f2cca9",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "44095c7d-8fdc-4e7b-94ba-15f1153dfd53"
        },
        "item": {
          "id": "07d5005c-8c26-414a-8c0d-a92c74e2d169",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "868786f4-4b4a-438c-b0a7-d0a635124ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd52c5b-d999-4462-b39c-c0ef2098e901",
        "cursor": {
          "ref": "5a012ae3-db38-4be1-8ad6-a75e17b10b68",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4f583307-2a4d-402e-939e-73a78f353fde"
        },
        "item": {
          "id": "9dd52c5b-d999-4462-b39c-c0ef2098e901",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b903c617-d091-4399-af5b-b1de845dbd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43edc705-b313-42ad-ad80-4b0f08c9ab31",
        "cursor": {
          "ref": "c5958df5-2c1a-467e-8ffb-e5ef6d84e1df",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1b13522a-9c9e-45a5-b5c4-336212f9c65a"
        },
        "item": {
          "id": "43edc705-b313-42ad-ad80-4b0f08c9ab31",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ea93cf2e-3e8e-4b99-ba05-561c4a381967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e135ed-b751-4b09-82e1-0ba09e92fa88",
        "cursor": {
          "ref": "e9615668-1d7d-4ce2-80b9-5149961c19c0",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5e2527da-fe4f-4f0e-a8b6-199468964272"
        },
        "item": {
          "id": "61e135ed-b751-4b09-82e1-0ba09e92fa88",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8bc5835a-3808-415b-8408-46f63159ed8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f7d8eb-a33f-41e2-80ca-6c76cdcd0c1c",
        "cursor": {
          "ref": "ffb34cc0-b72f-4194-9dbf-09eca7c324c9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fc1f1847-ed0b-41e4-8f04-f6369696f51e"
        },
        "item": {
          "id": "a3f7d8eb-a33f-41e2-80ca-6c76cdcd0c1c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "394e1bdd-894e-40dc-a230-0e7d4a2d8093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc67d48-c232-45c1-a1a5-099f399edc92",
        "cursor": {
          "ref": "902fbb8b-b2b8-45cd-8a2e-ca8755ef7601",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "883d5e41-37b4-4303-810d-133afb55d116"
        },
        "item": {
          "id": "ebc67d48-c232-45c1-a1a5-099f399edc92",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7fa1f16d-2812-4627-ba7a-e4eefe3cebab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b64813-ab32-4705-9c9d-fff035f54ed6",
        "cursor": {
          "ref": "9ab7c513-4bea-43ad-8025-b68d4d958f6a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "85553a36-8345-4ba4-8aec-7735eb24fa24"
        },
        "item": {
          "id": "c7b64813-ab32-4705-9c9d-fff035f54ed6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8cac491d-4278-4a2c-82b0-9a247afebbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa65d66-8565-4f7b-b892-96aecd3956e5",
        "cursor": {
          "ref": "2b036cd9-fed2-48b3-9dce-c39af02f13b0",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5a37a1d0-11ec-49dd-87dd-ba84ae74b567"
        },
        "item": {
          "id": "ffa65d66-8565-4f7b-b892-96aecd3956e5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4a96dd42-0d1c-4e50-8d35-b578bd2d4bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1051b5dc-0447-4e94-832b-60fd8308c5ae",
        "cursor": {
          "ref": "41017d4f-6461-44ff-8612-63d68dee35b9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "06eaf494-ca01-4611-a390-1772a3376654"
        },
        "item": {
          "id": "1051b5dc-0447-4e94-832b-60fd8308c5ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2a98541b-dfb6-4a51-8aac-6351fbbad23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885b51ba-a16c-4ec4-ab7a-ac26f21fd3a8",
        "cursor": {
          "ref": "2e413186-1a36-4ff8-a17d-26951c7276e0",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "68b95ad3-3ae7-4670-858f-cd1c936e83ef"
        },
        "item": {
          "id": "885b51ba-a16c-4ec4-ab7a-ac26f21fd3a8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "52cb9ddc-72b1-4752-83c4-c8bc39bfa91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ed9eb0-0276-4f47-aa2a-b3a31bb00c6c",
        "cursor": {
          "ref": "71f97397-00b6-4261-8f9d-d9403f87e3fa",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d09a2136-9c5e-4aa8-ac7f-0c2580cbf23a"
        },
        "item": {
          "id": "68ed9eb0-0276-4f47-aa2a-b3a31bb00c6c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "34c4e99f-621c-4699-9f91-359d8c26c6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ca9ec1-c0f8-48ca-8d63-061b799f4ecb",
        "cursor": {
          "ref": "d7a749ef-bb79-4dbf-a47b-9fa4a73b8406",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4d9d07bb-277b-42ba-8556-9144d10eda9a"
        },
        "item": {
          "id": "21ca9ec1-c0f8-48ca-8d63-061b799f4ecb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "149cad60-37c7-4ce0-bc4e-a77e8792347d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551800e9-14ed-48fd-aa3d-eece06eabced",
        "cursor": {
          "ref": "f5ec77b3-79a0-4e5e-9b6c-7af96a53e5e1",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "505b96d0-0bdb-470b-a6dd-c5766f2bbbf6"
        },
        "item": {
          "id": "551800e9-14ed-48fd-aa3d-eece06eabced",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dad69a2a-21e4-431b-82c8-8e1cedaed577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7d5e53-bc00-4451-ae4d-454aa5b8bcde",
        "cursor": {
          "ref": "a1228fe8-f2c9-4fb0-a755-3d20799052ab",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7579a819-29f1-4316-90d7-aec8a2d9251e"
        },
        "item": {
          "id": "af7d5e53-bc00-4451-ae4d-454aa5b8bcde",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c1f5cb46-d4ba-45bb-8019-4d67192ede2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b3f5a2-68cb-4a70-9aea-1545e0086bc2",
        "cursor": {
          "ref": "ff8999e3-288f-4769-8a1a-17c521bb3e10",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5e166b16-26e4-4d03-bc2d-985dc3c6c2ce"
        },
        "item": {
          "id": "e4b3f5a2-68cb-4a70-9aea-1545e0086bc2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "13cd5e62-80e6-4b88-987f-4f53e7aa87e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da373ea5-8d7c-4aba-913c-74fd05ed3309",
        "cursor": {
          "ref": "d55ab8a1-f1cc-4dbe-b227-cfdc1d6d1940",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4e24864a-ecb5-4049-9958-0cb65ffe0bfe"
        },
        "item": {
          "id": "da373ea5-8d7c-4aba-913c-74fd05ed3309",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9f55a27f-74fa-47e1-bf08-67d2a8d4284d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66bea0d-d8c1-4321-80a2-9f67cae17d6b",
        "cursor": {
          "ref": "253148b0-e3e2-46eb-b7db-57f036b37f79",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ff2fb5cf-3c3f-47a1-95eb-49495dc16dff"
        },
        "item": {
          "id": "d66bea0d-d8c1-4321-80a2-9f67cae17d6b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9bfc1445-e47e-42f1-8751-dee8c35c59ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bebf1e-f700-4503-abb7-cd29c280ac29",
        "cursor": {
          "ref": "ee52c612-1d66-4391-ab17-23a0d5c6c200",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b09e6a3a-c758-4d45-944c-62fe2ad1780f"
        },
        "item": {
          "id": "05bebf1e-f700-4503-abb7-cd29c280ac29",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1b2d405d-c713-4229-bb60-64bb4daac999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624b3c97-267e-4db8-9cf7-61a623b5493b",
        "cursor": {
          "ref": "11caedbe-315c-4722-a524-d3e3e31ecddf",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b4677925-744d-482b-9cbd-ded8b43ff833"
        },
        "item": {
          "id": "624b3c97-267e-4db8-9cf7-61a623b5493b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0911f3b7-194a-400f-89a1-91220251b65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf393b5-9c7d-4382-a406-4a26b10d665b",
        "cursor": {
          "ref": "d2333c2c-f95e-4111-96b0-252b719b0d09",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "96227a4b-1013-40b9-a333-4ab42d6e60e9"
        },
        "item": {
          "id": "dcf393b5-9c7d-4382-a406-4a26b10d665b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b92d9bea-1616-4418-a59a-aadd38e0fc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e92d1bb-e656-4198-90b1-8950625af1c0",
        "cursor": {
          "ref": "7b744af0-96d2-4eb8-9ef3-645f44d48bd1",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c62d92c7-ee37-4b14-b9ca-51e1ce225506"
        },
        "item": {
          "id": "0e92d1bb-e656-4198-90b1-8950625af1c0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f9a4cbe8-a048-4d3c-95aa-e5e8f669956c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07700a4-b490-48f6-99d9-e828f3a13275",
        "cursor": {
          "ref": "665d8ec6-9bce-4124-a8a5-50c810a123d5",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f9dbf597-8fde-4044-bd8e-47e3eb40eb83"
        },
        "item": {
          "id": "c07700a4-b490-48f6-99d9-e828f3a13275",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1a907101-7f25-45ee-bb57-8042dceb23eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b677d6e9-a65b-4202-810b-124d4a21c606",
        "cursor": {
          "ref": "2f22d60d-1087-4258-971a-9cadd585efb6",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4cbda96b-a7c7-4c1f-ba70-bb4c67b58af3"
        },
        "item": {
          "id": "b677d6e9-a65b-4202-810b-124d4a21c606",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a1f51d4c-3b91-4b9e-9689-924004a404a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a21795-758c-4d12-8388-2241e4af19c0",
        "cursor": {
          "ref": "a1a0fe7f-1326-4aba-bf85-9ae6acc95d42",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a982e629-1c62-4981-80b0-a5c9cfb58548"
        },
        "item": {
          "id": "14a21795-758c-4d12-8388-2241e4af19c0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "24529070-88bb-46ab-8a20-09f5dbb6814d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8625f1a-ab9e-469c-a776-d3644342482b",
        "cursor": {
          "ref": "8a7c9397-a96d-42e8-a435-cd8cfd94e93f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fbc00b28-0e4f-42a9-a8ee-c3c72605cbb3"
        },
        "item": {
          "id": "a8625f1a-ab9e-469c-a776-d3644342482b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "51fab7dc-905e-4a74-9e95-a5737094ebd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f41a490-a1e0-4708-918a-31cbb8ba3735",
        "cursor": {
          "ref": "237b606f-403f-4d15-bea9-68d1776b981b",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ca0e7a8e-a177-4378-93fa-78beca94b243"
        },
        "item": {
          "id": "0f41a490-a1e0-4708-918a-31cbb8ba3735",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0b786e7e-8051-4959-a359-ac84b53d50e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd4b834-ee9e-4f07-89bf-86e29fb58ddf",
        "cursor": {
          "ref": "8cee3dd0-c718-4f1b-b60f-eeeb9ded6370",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "94258af2-03d0-4209-985a-0377e58e80da"
        },
        "item": {
          "id": "6bd4b834-ee9e-4f07-89bf-86e29fb58ddf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7298bef0-a032-4a3e-ab02-62f07d54befa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6e7d02-84cd-4abe-a0a8-3d0f9f388322",
        "cursor": {
          "ref": "6f0a8830-6485-40a0-8e94-2d2db02c85a4",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d1c1aa51-0d86-4434-81bd-c324964c59ad"
        },
        "item": {
          "id": "8f6e7d02-84cd-4abe-a0a8-3d0f9f388322",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5d322907-e461-4fc9-975a-a2e6ee648ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cad8c4-8a5e-4991-9e35-ce8ce3901044",
        "cursor": {
          "ref": "0bcc8287-b758-429c-bbfa-bb5d33867bdb",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "56b27d4d-8f9b-4c8b-8a22-597ffa4c2d00"
        },
        "item": {
          "id": "c3cad8c4-8a5e-4991-9e35-ce8ce3901044",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "842a0363-3461-4248-9cfb-a495e9900195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e81fb4-f80d-4754-9926-dd9312986e8d",
        "cursor": {
          "ref": "3c873c32-ca4c-4350-a176-38dcd5044440",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4b247c68-8685-4eee-8d30-d7dff22fe026"
        },
        "item": {
          "id": "d9e81fb4-f80d-4754-9926-dd9312986e8d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3b620e61-c1be-411e-9ed2-015c554b4b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfa849b-9277-4429-9986-502e0bfec753",
        "cursor": {
          "ref": "c9950780-423a-4b76-9647-fe30f9a55211",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6f2cb587-6743-4911-8bef-44db9cae3a25"
        },
        "item": {
          "id": "0dfa849b-9277-4429-9986-502e0bfec753",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "454d2313-dd96-4eae-b11f-844984e3a78e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0210c8d-fa25-4443-a833-b6d193e677d6",
        "cursor": {
          "ref": "1bd41212-1623-45db-9e9b-e41beb95b24b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "97b844a8-39f5-4157-bb3e-ccc2377d4232"
        },
        "item": {
          "id": "a0210c8d-fa25-4443-a833-b6d193e677d6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "793024e1-3fe9-484b-b64f-a0c8c775be20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f579ef-7d24-4e99-991e-5065905a8511",
        "cursor": {
          "ref": "2e04c983-b5a6-4c53-a5c1-8db7467ee89e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d2b9e28-7fcb-46b5-b366-17e5759c3620"
        },
        "item": {
          "id": "57f579ef-7d24-4e99-991e-5065905a8511",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1fa86556-c428-4e4a-878e-52cb791e675b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9886022c-6f57-4a44-aeb8-251798d9b717",
        "cursor": {
          "ref": "7b0f8914-fb62-4b71-9262-09cbc1ff2d87",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "19d3646d-fe65-4cdb-bdbc-b8b93e3c344b"
        },
        "item": {
          "id": "9886022c-6f57-4a44-aeb8-251798d9b717",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5603befe-3dbe-4cee-9b6e-9244b805d35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c4c65d-0465-4acb-9bd7-4e7d7ab283e8",
        "cursor": {
          "ref": "227cadd4-d259-4ad3-b803-4fb0bebb11b2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4f8388a0-9161-46b9-b40f-7c33f07e1ade"
        },
        "item": {
          "id": "44c4c65d-0465-4acb-9bd7-4e7d7ab283e8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b83e3b37-c239-4fb0-8622-9048b468d518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9871602-a96e-4c2b-a2f5-1af711b27f09",
        "cursor": {
          "ref": "9404d54a-771a-4e26-9508-b6ee68749631",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bef368ea-f65b-4e49-8a97-0a85241c7b21"
        },
        "item": {
          "id": "c9871602-a96e-4c2b-a2f5-1af711b27f09",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "528dc4f4-afc2-43a0-898c-0cdb811d13e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069c34af-c211-4793-91fa-284ff2ad055a",
        "cursor": {
          "ref": "652e7e09-ea0c-4a8d-8e44-16f898ffe4c8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8c4157a2-75b1-4175-9d3b-651f916d5ddc"
        },
        "item": {
          "id": "069c34af-c211-4793-91fa-284ff2ad055a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9dcbda4b-2ffe-4bbc-b067-20acf33a652b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391be1b1-17ca-47c4-8847-509d150c7189",
        "cursor": {
          "ref": "5dcca503-7ef5-4bf9-9aee-688bab388638",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "eb9c7a46-f539-4418-8878-d6e43cd487be"
        },
        "item": {
          "id": "391be1b1-17ca-47c4-8847-509d150c7189",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6a33d767-1c78-4a22-a8f9-a40d6b3f564a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661cdc36-f4e4-4074-b90b-83e0abf70f13",
        "cursor": {
          "ref": "caaebfd9-ae6f-4b67-ab19-47260ee27c96",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "311aa0b0-4e32-47f1-af42-f8f373036337"
        },
        "item": {
          "id": "661cdc36-f4e4-4074-b90b-83e0abf70f13",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "01427bbd-e728-4d72-8de7-a0b739c6d944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1fa064-67b7-4d6e-b225-432f1dad1cc3",
        "cursor": {
          "ref": "94760a83-aad3-45d5-afce-344f3bb3386b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "452fea17-9694-4d25-89b0-48337daacbd9"
        },
        "item": {
          "id": "1a1fa064-67b7-4d6e-b225-432f1dad1cc3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d3554dd0-e8fe-4547-b99b-f1a9eb892fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec13cb9c-160b-493f-9027-7581ec3a901b",
        "cursor": {
          "ref": "fe3b074e-833a-4fda-af50-12c0a5676033",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a56d5ef3-087f-404f-a4da-7b9e87e47f0c"
        },
        "item": {
          "id": "ec13cb9c-160b-493f-9027-7581ec3a901b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2ef765ff-09c4-486b-a8cb-fefc4ad93731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8a958d-843d-4327-87b9-2893e244a354",
        "cursor": {
          "ref": "b76ec447-71aa-4656-9d2d-819f0a6632d6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "29ead01f-95c3-4ce7-8fe8-2b3e0ae9c4a1"
        },
        "item": {
          "id": "5d8a958d-843d-4327-87b9-2893e244a354",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0ffb47bb-8686-41a9-9b86-9af3c09ff920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c322a3c2-9b22-4703-a6f0-62a6a5bfd99d",
        "cursor": {
          "ref": "cd8c6922-10c6-455c-afc2-ca01cbb0b65b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "00c2b10d-ba0d-4585-be57-0d358a59bba5"
        },
        "item": {
          "id": "c322a3c2-9b22-4703-a6f0-62a6a5bfd99d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9d2d30b1-69f5-47bc-a9c1-a7f2aa8a4ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf64193-d202-4e5a-9fd9-381a2584744b",
        "cursor": {
          "ref": "49e61c81-3028-41c1-bbf2-ea9589f8297e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "edbea8ae-a99f-4c4b-91fd-fdf248b71869"
        },
        "item": {
          "id": "0bf64193-d202-4e5a-9fd9-381a2584744b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4014d420-4bb3-4895-8c34-01d09dc1eb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be866d7c-b9e5-4dc4-ae30-8f194acd0148",
        "cursor": {
          "ref": "4ea8d08c-cc18-408b-91dc-66af92239f2b",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d1637faa-c3dd-41fc-b55c-2865e5f66540"
        },
        "item": {
          "id": "be866d7c-b9e5-4dc4-ae30-8f194acd0148",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "073dc07d-4531-4db0-87f0-02efaeaf0637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030f8af9-8209-412b-82ac-11733a560b59",
        "cursor": {
          "ref": "2770c6d5-dad0-480c-a4c0-15867e3e768f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0c069d0b-2034-4620-abfe-1f7cbc1e69f0"
        },
        "item": {
          "id": "030f8af9-8209-412b-82ac-11733a560b59",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "80e5e5d7-0ce1-471d-82ac-7eafc65ac641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d2c1c2-0495-43c7-8d5b-6a1153cbe257",
        "cursor": {
          "ref": "9f565f65-08b6-4cc0-bec2-a43f01e78a1f",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b2a98a0-6083-415a-9d9b-7b8df4f909e6"
        },
        "item": {
          "id": "09d2c1c2-0495-43c7-8d5b-6a1153cbe257",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "12dd3f28-9fc0-4d5e-942e-4e4e9c7ff0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa4f475-cfdf-4ee1-a6e1-a8fdd4c5fc2b",
        "cursor": {
          "ref": "a18f3650-63c7-4777-91a3-d351a394894b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0a018612-f5e3-4b77-b13e-d997ea87fcd4"
        },
        "item": {
          "id": "6fa4f475-cfdf-4ee1-a6e1-a8fdd4c5fc2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0106eb93-a411-4865-b5d7-9f6c40a772e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6440761d-aa42-47b6-a054-0adb2345b616",
        "cursor": {
          "ref": "43ba072b-189c-4c1e-86f8-d2c2f0ec13b4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "45a7cc6b-9fd9-472a-bcc2-d9d50cbb8765"
        },
        "item": {
          "id": "6440761d-aa42-47b6-a054-0adb2345b616",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "85d3d870-1d7f-4361-9f20-8c9bb60b8168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef57363b-997c-4918-af9e-3c6f598520fa",
        "cursor": {
          "ref": "4e75cf34-ba10-45a0-994c-4e5e2670d27f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a4531708-478d-4f2f-87e0-9bc978699350"
        },
        "item": {
          "id": "ef57363b-997c-4918-af9e-3c6f598520fa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3d91dfc4-e94b-4f19-bb48-98a967bdc2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa385d5a-6cef-4624-b33d-f75daea15c28",
        "cursor": {
          "ref": "61145a7a-27ee-41cf-b6ae-7b3d93b5bb09",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "54e358e8-bbf1-4edc-8ab9-ca3476d5791e"
        },
        "item": {
          "id": "aa385d5a-6cef-4624-b33d-f75daea15c28",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2bad74ee-541c-4e8e-94da-3ac59b536b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d36b5d-e117-47d9-8e55-11f7802794fb",
        "cursor": {
          "ref": "8c26f2d2-c0ee-4a58-b8d3-c22937c53e74",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d09a27e9-267e-4098-b226-f1f0adce8704"
        },
        "item": {
          "id": "14d36b5d-e117-47d9-8e55-11f7802794fb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ec836559-8fc6-4d21-9bc1-7d0fcbdcb18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6fe838-c49e-43ef-a6df-2cea8340382f",
        "cursor": {
          "ref": "2d2b301b-778a-420d-a5a6-ff2b69a051f0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "477b92ab-1637-4c11-84ee-5c81d045dfb2"
        },
        "item": {
          "id": "2d6fe838-c49e-43ef-a6df-2cea8340382f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "76188240-e179-419c-81d5-eadc3dfa43ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93048361-2a59-49db-acfa-d321edc34577",
        "cursor": {
          "ref": "774136ed-0f2b-43e0-ad9e-7596ee4106a5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6ad7aa0c-93c4-4e92-a3cb-cd8b4bfc02fe"
        },
        "item": {
          "id": "93048361-2a59-49db-acfa-d321edc34577",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "879a88ad-d897-459d-9932-167154f2cb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0742c6e-471f-43dc-8d87-77491c505a78",
        "cursor": {
          "ref": "e588848f-20c4-45db-a79e-146d5bad5328",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3088337a-1a7c-47c5-823c-6b9bce7dabd6"
        },
        "item": {
          "id": "a0742c6e-471f-43dc-8d87-77491c505a78",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "99200e70-e48d-4e5d-b74a-d2d07cb0c5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9faa37a4-e2fc-4d1a-afad-300ef5304d6a",
        "cursor": {
          "ref": "80ab217e-5e01-4cc8-9651-020b2407e061",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "279f7a4d-a1b1-4486-a41c-100a8dddadc3"
        },
        "item": {
          "id": "9faa37a4-e2fc-4d1a-afad-300ef5304d6a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6d44b1c9-6e32-4886-ab9e-deecf845d79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d7befc-6cdc-48ab-8c11-6a94e0ac3e3f",
        "cursor": {
          "ref": "c26e08c8-0c86-41a3-981d-4f75401a2eab",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "68a49617-2787-4b8e-bc84-9d3c4bdd982d"
        },
        "item": {
          "id": "b9d7befc-6cdc-48ab-8c11-6a94e0ac3e3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6f6ae747-70f2-418f-891f-1f024f8b28ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f526f318-06b8-4fb2-9e86-cadeb9024cfd",
        "cursor": {
          "ref": "fb4e4fcd-9ab5-45fa-8668-2a3b05dd83e9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1ea14ff5-7439-45a1-86df-a791382ce54a"
        },
        "item": {
          "id": "f526f318-06b8-4fb2-9e86-cadeb9024cfd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "09fa9114-e6ad-4491-b2dd-c0152dbf795b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e310cc86-5aa6-4f5f-b76a-821e9b01e77f",
        "cursor": {
          "ref": "c5a72fb5-e07e-4b15-965a-8c94bbbe9479",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ea88b70c-85f0-49bf-b5a6-a6f76e58fb42"
        },
        "item": {
          "id": "e310cc86-5aa6-4f5f-b76a-821e9b01e77f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bc2e3b57-2db8-4b9e-bbf2-4eac0fd5ce11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3ae7ab-d96b-4976-a5f6-f1539e733c77",
        "cursor": {
          "ref": "7f4f6146-6993-43f4-99d3-38b3705e959c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "14b6352b-482e-4eea-b216-83b16158c058"
        },
        "item": {
          "id": "6b3ae7ab-d96b-4976-a5f6-f1539e733c77",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c28f41d9-3e21-47a1-a26f-1f33a4f617f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc64fb1-248c-41de-be72-3e09c14d666c",
        "cursor": {
          "ref": "e1a27458-df84-40b7-afbd-8018f68110aa",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f7298059-ad04-4936-ae8c-6b2b053b24f2"
        },
        "item": {
          "id": "ffc64fb1-248c-41de-be72-3e09c14d666c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eaf950df-9f9b-4d5b-9f2d-0f0a31e7725c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1559c62c-265e-4572-91ea-a32345ab4c7c",
        "cursor": {
          "ref": "3abc76c9-7e24-4f81-9a09-b10939b5e11b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "25dc5d4a-643f-4839-bf0b-379a54c7eaec"
        },
        "item": {
          "id": "1559c62c-265e-4572-91ea-a32345ab4c7c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "630ef444-9bbe-4c61-8cd2-26c988128850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4e0ddf-238c-419c-8236-7a0a529b52a9",
        "cursor": {
          "ref": "9129f1f4-407b-4efa-9de8-be7f43e5ae1c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "861ddd63-9fc5-4e22-8108-5704c4510c7d"
        },
        "item": {
          "id": "8a4e0ddf-238c-419c-8236-7a0a529b52a9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fc646245-8cbd-4fe3-9594-d23780abbe11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b789029-1f45-4f1c-92d5-e51c8395d02a",
        "cursor": {
          "ref": "c30c04c1-1ea9-469b-bca1-85bbe4cef404",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "db5b039c-1a55-4c1a-9f6a-c72d041ff031"
        },
        "item": {
          "id": "8b789029-1f45-4f1c-92d5-e51c8395d02a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "57aed8d7-e0ba-4ad1-9826-26bb7aec5e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06b55ff-d804-48eb-9d41-76e58006fac5",
        "cursor": {
          "ref": "7bb1d8eb-ae25-47b1-86e7-c99e0aba5f28",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "77fc97fa-23b8-4161-8bb8-a4d6080e3119"
        },
        "item": {
          "id": "b06b55ff-d804-48eb-9d41-76e58006fac5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d37b560d-ae2a-458c-8ea5-1a35358ecd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0675e6-15f6-4e23-b2c3-69e704a2152e",
        "cursor": {
          "ref": "699fa04c-22d1-4893-9205-bebfb18fd4a9",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2c2719a3-b0b6-4144-b4e8-85220e462a77"
        },
        "item": {
          "id": "1d0675e6-15f6-4e23-b2c3-69e704a2152e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "aae180e3-b7e5-4233-b5a9-6059560657c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9aa997-ffcc-43be-a5be-929f33dd515a",
        "cursor": {
          "ref": "04c0f106-cb4d-4a1d-b3dd-3f8da7f4f342",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4584b225-b64b-4f61-9fe5-d55014176328"
        },
        "item": {
          "id": "ff9aa997-ffcc-43be-a5be-929f33dd515a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2a15be65-b656-44a6-a717-26c7bb436c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2186e4-89da-442a-b5de-89f8466ef60b",
        "cursor": {
          "ref": "8e70609b-1a85-4442-a9d1-eda6f0c81b6d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0d013ff0-7a11-4496-90d7-e522c0434cf0"
        },
        "item": {
          "id": "db2186e4-89da-442a-b5de-89f8466ef60b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4b852be7-7a87-4366-8393-70897e17e6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8478bfc9-e594-4d59-8e76-f158b70d86a8",
        "cursor": {
          "ref": "b8cabc44-b23b-4b6f-9569-f51d94588db0",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "95be6ba0-a5f7-49ea-b4ae-0e60fbdb379c"
        },
        "item": {
          "id": "8478bfc9-e594-4d59-8e76-f158b70d86a8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d7278e2b-91e6-4971-9a26-8dd5a3da8b0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ffb7e2-a9e5-410d-a238-0e38955b3ff8",
        "cursor": {
          "ref": "af5285db-27a3-4744-a5c3-deee20b28b77",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff81d52c-b8eb-4b1e-bfe0-1c1752bcf348"
        },
        "item": {
          "id": "16ffb7e2-a9e5-410d-a238-0e38955b3ff8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "170d9920-6375-4600-aafa-13b136f021f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efaba6e8-77f8-4826-9cc8-06e36eb3c079",
        "cursor": {
          "ref": "eae6ebdb-d67d-4cb0-803f-df956fa58922",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b125c6a2-04e5-430a-9c21-b4b49be9d7e3"
        },
        "item": {
          "id": "efaba6e8-77f8-4826-9cc8-06e36eb3c079",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "006fbcde-0285-48b5-8e79-8a6f8a82f3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f5e652-7e68-4d89-9169-025e7ffbe65b",
        "cursor": {
          "ref": "df8d66e2-1055-41bd-997d-d6e3564130e9",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c3871f53-159d-4eb7-9c17-5ed81d962fa3"
        },
        "item": {
          "id": "52f5e652-7e68-4d89-9169-025e7ffbe65b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3ac53b2e-364a-492a-be3b-a91d6c361248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401eea83-4c74-4087-805d-41499c192d66",
        "cursor": {
          "ref": "27fa848a-13e7-4409-8207-f6ba44bcfd97",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1927f3d6-42cb-4fdd-a336-e98edebece37"
        },
        "item": {
          "id": "401eea83-4c74-4087-805d-41499c192d66",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f5f7603a-b0e0-45b0-8d91-be87a4008ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234d17e0-e292-4144-ba1a-ae3ca296fbc3",
        "cursor": {
          "ref": "51b7ac6d-7c2e-40fa-95a7-05b585a32d0c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5d628ce3-0493-422b-8a50-0b9c3fdbd516"
        },
        "item": {
          "id": "234d17e0-e292-4144-ba1a-ae3ca296fbc3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "12cf34b4-5881-4fdb-9acf-cb6cb619c03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd289f4e-4cc3-4bec-bf1e-30af89a3e36b",
        "cursor": {
          "ref": "b9915527-d5d7-41db-a0b4-172fc0fe1c2b",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e86886bc-90f1-4554-b198-5d28b288496a"
        },
        "item": {
          "id": "bd289f4e-4cc3-4bec-bf1e-30af89a3e36b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "64e3d2dd-ea4b-4c88-b1db-99549a680e88",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ea1f5bc3-4546-497d-af64-d7626c8e82a5",
        "cursor": {
          "ref": "f36eb38a-0e5d-42f3-82bf-ff640d7eaae9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d0b4c764-9c5a-4340-930a-1a84c4dea646"
        },
        "item": {
          "id": "ea1f5bc3-4546-497d-af64-d7626c8e82a5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eaf7d974-b60f-4116-928e-143096b45e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7a54e2-b037-477e-bf85-49035a3d0b32",
        "cursor": {
          "ref": "31720446-d4aa-46da-9cb1-9f992b16118d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7ba61ab7-3871-4245-a8c3-7a7e7877abb1"
        },
        "item": {
          "id": "bf7a54e2-b037-477e-bf85-49035a3d0b32",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "afa15c5a-035b-4478-8d25-2caeae7d9635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baee313c-6c77-4a6c-9938-0d6e911201ec",
        "cursor": {
          "ref": "cc41c10c-e3e9-48a1-9534-bd129fec8daf",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3a372099-6357-4176-9f58-a94e867451f5"
        },
        "item": {
          "id": "baee313c-6c77-4a6c-9938-0d6e911201ec",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "43b1156b-2372-42bf-982c-042088c2565b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93925f4c-2efc-42aa-9ef2-bdda82f9b8fc",
        "cursor": {
          "ref": "a73cd53c-3bc6-4f8c-8143-0e7e39049ed1",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9a88bac9-9193-4a15-b17a-75dff1b5f776"
        },
        "item": {
          "id": "93925f4c-2efc-42aa-9ef2-bdda82f9b8fc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a4ac6596-5aa6-4b7e-a329-11600ba58b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed05275-2a6b-454e-87aa-80c71c2b6b3f",
        "cursor": {
          "ref": "d9b4f0de-af0d-4ee5-969c-be32e398e879",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2efa1399-504d-4900-816b-e7fe106c3cfa"
        },
        "item": {
          "id": "eed05275-2a6b-454e-87aa-80c71c2b6b3f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "289e4e9c-f19b-4f6c-93fd-5253f2539109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281f5a90-63f8-4e5b-98b5-35a5c0aafdbc",
        "cursor": {
          "ref": "ce1a5218-4b21-4b57-9463-c83806a1a140",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "60265824-c24b-4ae8-bb94-cc6a0c575238"
        },
        "item": {
          "id": "281f5a90-63f8-4e5b-98b5-35a5c0aafdbc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f33dd8c4-a377-46ce-90bd-b59dac531cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86806dab-e834-4bc6-b870-63ca4e5fd024",
        "cursor": {
          "ref": "8cb17dc4-a15e-473a-85a3-79a1ae81de62",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f2801886-a66d-451b-82cb-5e366160a714"
        },
        "item": {
          "id": "86806dab-e834-4bc6-b870-63ca4e5fd024",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6a7e384a-02e6-4aa4-9613-3ed5ee335e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0c18f3-1544-4e11-91f4-faf83da92442",
        "cursor": {
          "ref": "af1c5167-e93e-4fa2-a7cd-76820e8b716d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9b12079b-cf27-4bea-bbfb-2969cda9b6ab"
        },
        "item": {
          "id": "0d0c18f3-1544-4e11-91f4-faf83da92442",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e0459153-80bf-4885-b65a-c4c521d0e4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c72f4c-0739-4ef4-ad55-2c210c1f4013",
        "cursor": {
          "ref": "93892176-509b-4cd5-91cc-269b1dffcdf8",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7934750c-41ab-4574-b4dd-2c5dc0c93edd"
        },
        "item": {
          "id": "37c72f4c-0739-4ef4-ad55-2c210c1f4013",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ce0269d8-59e3-4b9e-ab0b-a1622e2cfd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0edc0c0-1d2a-4601-92bc-e90feaafe564",
        "cursor": {
          "ref": "1cc6e0d9-eec3-406f-825a-b008306f01df",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0c87a2f7-6bee-4225-8e60-8d625d9c0ad2"
        },
        "item": {
          "id": "a0edc0c0-1d2a-4601-92bc-e90feaafe564",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "044a3a60-81e4-4c18-ab12-3ca2c67113a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111cb557-f388-4813-a720-87179667fbe9",
        "cursor": {
          "ref": "1c7fd16b-bc9c-4eb7-9abb-5b8fc92a8235",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "40832d9c-d7e3-4b45-811c-5cb4ceb64743"
        },
        "item": {
          "id": "111cb557-f388-4813-a720-87179667fbe9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e0efe478-13e4-41dd-badf-e980d5092643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7651fe2a-28c3-4cad-9cc4-c64c8890ec3b",
        "cursor": {
          "ref": "944d31a2-155a-4e1f-833c-826aa8f3b2db",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cc5de779-d15e-462f-9f5f-cbbc1fab4ab9"
        },
        "item": {
          "id": "7651fe2a-28c3-4cad-9cc4-c64c8890ec3b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a69ad25-3772-407f-8c51-66c4708bd7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf0dd66-f9b4-4385-90eb-c98389fac090",
        "cursor": {
          "ref": "9690a523-0504-4e7b-994f-93bd91c768ed",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "237586e1-595c-4dd0-abf1-e2e0dedb6d6a"
        },
        "item": {
          "id": "ebf0dd66-f9b4-4385-90eb-c98389fac090",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fcc9611a-179e-4fc5-a819-7684b321e5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e0e270-41cd-46c2-b93f-b02d478cde45",
        "cursor": {
          "ref": "ce343b50-e144-4e17-a540-68bcff4c6639",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e010d65e-ffa0-40f4-bf69-a44e7fcf9cb7"
        },
        "item": {
          "id": "33e0e270-41cd-46c2-b93f-b02d478cde45",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a8b9e723-3ee5-4804-aee8-6a2d3c47ce82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a92befb-a866-45be-8046-ea6a5147fe91",
        "cursor": {
          "ref": "45d49398-fd31-465e-afd9-f59e3761dd2a",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b02dcdf8-a09b-4587-9298-3f46abee4fcf"
        },
        "item": {
          "id": "3a92befb-a866-45be-8046-ea6a5147fe91",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1087ae1e-7388-4549-837c-587af1f0ecbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1217bcb1-e5cd-42da-a4ea-d7d2c0f86333",
        "cursor": {
          "ref": "fb5c760f-e54b-4734-899d-51b88d257809",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "449a474e-5c20-4a4c-8731-7449743359a4"
        },
        "item": {
          "id": "1217bcb1-e5cd-42da-a4ea-d7d2c0f86333",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b92e06cb-3e22-4886-bb82-87286997fbc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4011960f-2326-4e19-bc7f-1060e29951a9",
        "cursor": {
          "ref": "ee5569f0-9e8d-4224-aced-e8e2457c5a17",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a8ce8cd2-e603-4fc6-9e5e-47c63cf7d3b1"
        },
        "item": {
          "id": "4011960f-2326-4e19-bc7f-1060e29951a9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "831b9ee5-5b15-4484-91b1-922155f912ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04f238b-b779-412e-8b53-98ea8aba8cca",
        "cursor": {
          "ref": "f93ef255-af9d-48ee-9f6c-0e33757250e0",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5c29ea8a-06d0-430f-9865-fe03bb756a1b"
        },
        "item": {
          "id": "f04f238b-b779-412e-8b53-98ea8aba8cca",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "00cb31b0-e178-4cdb-9584-af41131bf742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eeb28a7-aa88-48f4-94af-fd2d1a7f5d4a",
        "cursor": {
          "ref": "3a72246d-3263-482c-a961-7b28cde8245f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "601d7af5-bc47-4d45-bce2-64538ffd5cbe"
        },
        "item": {
          "id": "2eeb28a7-aa88-48f4-94af-fd2d1a7f5d4a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fd985ab2-f0f5-4d1d-a76c-71b1cf658fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aba596f-869c-47b1-aa9d-faf77c599689",
        "cursor": {
          "ref": "f79bd30d-c8e8-4990-a720-cb69f9ba71b3",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "951a7624-1b62-457d-ae48-c6765c63a578"
        },
        "item": {
          "id": "6aba596f-869c-47b1-aa9d-faf77c599689",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "050ee918-91c3-41b3-974c-da7a90abde31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27caabb9-df67-4369-a709-033b529be4a1",
        "cursor": {
          "ref": "f9029cf7-9639-47f9-a4f5-afe10b60aff7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a04194a0-791b-4a3f-95ef-d1bc3add6fd2"
        },
        "item": {
          "id": "27caabb9-df67-4369-a709-033b529be4a1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c7a60584-07bb-477a-8af3-ee65858f5c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2941bd6-d46e-48b5-bbcc-0b93ec3ab5f6",
        "cursor": {
          "ref": "ad107cb3-9ad6-4422-bf20-575c2feba7db",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f060eb41-a8be-4ebf-9728-ac82c7b27d66"
        },
        "item": {
          "id": "e2941bd6-d46e-48b5-bbcc-0b93ec3ab5f6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a8e4d646-de17-41ea-a852-606913cf8de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304144c4-1526-41f3-a8ef-97c5e4bb2428",
        "cursor": {
          "ref": "fcc44625-a770-4e01-96bd-76dde18e3b47",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3043360e-a6eb-4f63-8e1e-e4fd11d9d875"
        },
        "item": {
          "id": "304144c4-1526-41f3-a8ef-97c5e4bb2428",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "05d2309d-c527-4f52-87f5-c4539109b866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e91dc9-f1f0-4d93-b937-6e9ce20fb16b",
        "cursor": {
          "ref": "945d2172-2ee9-4099-b6ba-229629a9bafe",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b69af426-635c-401a-950a-47ae37c8d69f"
        },
        "item": {
          "id": "c1e91dc9-f1f0-4d93-b937-6e9ce20fb16b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c778c777-e8a2-45a8-a79a-a7d0055d47ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf4d24e-5156-4d43-9c1e-13836763d086",
        "cursor": {
          "ref": "a7ce2278-4e7a-4dd4-8a62-6d3960e8bd1b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "157ae45d-015b-4150-bdde-5a4ea4f11887"
        },
        "item": {
          "id": "5cf4d24e-5156-4d43-9c1e-13836763d086",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0fabffe5-46ab-42ba-a653-5447b0bdb90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e39ce08-2caf-4fee-8b93-1786db22ab4e",
        "cursor": {
          "ref": "f2fa2652-2a03-4104-9bc3-ca8d83e652f6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f9b8b918-15d8-46f9-90b3-99b3796252e8"
        },
        "item": {
          "id": "2e39ce08-2caf-4fee-8b93-1786db22ab4e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "441b3750-6058-4d22-b022-5d8f8ee8f356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b33a04c-2c64-4879-9808-8a760cdcb013",
        "cursor": {
          "ref": "643fefd6-04ca-4565-98ba-635469ad5a45",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "63339a2d-2d16-4bf0-a8bc-c8a2099afca8"
        },
        "item": {
          "id": "5b33a04c-2c64-4879-9808-8a760cdcb013",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c605ca0f-bafc-4875-9094-c2f44b270a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1732a697-6774-432c-86fb-268f2107adbe",
        "cursor": {
          "ref": "44d09335-7b01-4651-8e53-6e10922c1cec",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ac07d981-4a39-4526-b997-d19a0aa2d085"
        },
        "item": {
          "id": "1732a697-6774-432c-86fb-268f2107adbe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b275b8f8-fd8c-4c23-835e-bbe381555938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee11baf-6e93-4186-8b3c-a7d9f0857f50",
        "cursor": {
          "ref": "2cc47b01-1a99-43a2-8a1a-b78ee823f5fa",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b990d3e0-7461-4283-b9b2-60a799b3343a"
        },
        "item": {
          "id": "eee11baf-6e93-4186-8b3c-a7d9f0857f50",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c84022d9-27b6-41be-8f14-780ecef34b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f71c72-bb5e-4d8c-a660-569473c16e1f",
        "cursor": {
          "ref": "dd8f6984-347e-475c-a37b-e29cd689dbca",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "17ee91ef-0ade-4d07-b17c-ab1edc2499bf"
        },
        "item": {
          "id": "66f71c72-bb5e-4d8c-a660-569473c16e1f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "90978a7d-e3d8-4508-8591-cb4819590c12",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8e7cc287-c7b3-4bb8-b7ad-5926ef581b00",
        "cursor": {
          "ref": "4b521ac4-a4f4-4f38-82ca-1a2a91b40b2b",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7ebf1272-c117-41ae-9ea7-349e0669ad06"
        },
        "item": {
          "id": "8e7cc287-c7b3-4bb8-b7ad-5926ef581b00",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "28d67d89-a458-48b9-b2c3-98f5fcd91fc7",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5c9960fe-768a-4c54-8298-b52ab87933fe",
        "cursor": {
          "ref": "8a4f2204-9259-4a2b-b4c7-c26a61bee5f4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4917fcce-aa1e-4fc2-bd0f-26f1fcd97b7d"
        },
        "item": {
          "id": "5c9960fe-768a-4c54-8298-b52ab87933fe",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ac62736c-14ee-4192-b064-dcef1f1835ef",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "bc1551ce-0ff3-41bc-8e6b-63a65d1dad84",
        "cursor": {
          "ref": "8df89a7e-09ee-4720-8adf-29a0a28bbd3c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "25cebad8-3693-4452-a8c4-67a058b3cd14"
        },
        "item": {
          "id": "bc1551ce-0ff3-41bc-8e6b-63a65d1dad84",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3bcb7f98-10c1-4ed6-8511-1868d4be624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e6c1aa-dbba-46de-bfd9-7c1f72aeb562",
        "cursor": {
          "ref": "2b8e9763-2f71-44cc-8312-04dcd2421973",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d7dbc944-64da-47a1-a8bb-c12ba334d0a9"
        },
        "item": {
          "id": "74e6c1aa-dbba-46de-bfd9-7c1f72aeb562",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4fa533e5-45d8-4579-959b-a4a13a5bc82f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ba3fe6e1-51f4-47da-8f67-622d3cc4dbc7",
        "cursor": {
          "ref": "d70a9f86-75b5-4367-b816-b1adde3ffda9",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "41b5a66f-74b5-4140-9627-3f1463aad8f6"
        },
        "item": {
          "id": "ba3fe6e1-51f4-47da-8f67-622d3cc4dbc7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c08480d0-017c-4870-82a8-e2cc447319e9",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "51752eea-7b61-4e0e-83cc-2351808f10f9",
        "cursor": {
          "ref": "b610c5a2-6b38-4b73-a0f5-cb07389e71a7",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d7b097db-44c7-44f8-9afd-92a386f80d0d"
        },
        "item": {
          "id": "51752eea-7b61-4e0e-83cc-2351808f10f9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b34ce531-b648-481e-91b8-25fef5ce59a3",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "24326827-4fc9-4059-8be2-cfcabb2c047b",
        "cursor": {
          "ref": "875ad53f-2841-4e4f-a5ca-310d26059daf",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5adc30e1-18de-46b9-b460-863066914a90"
        },
        "item": {
          "id": "24326827-4fc9-4059-8be2-cfcabb2c047b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f515f4c9-3e47-460c-bbe1-00f42ca9f822",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b04b0710-d2ab-44cd-8fd9-7d2b3b7e7b77",
        "cursor": {
          "ref": "c4b0365a-9f17-4803-8013-5f9df5b2dd5e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "06401e7d-e096-473f-b3af-b5965c84270d"
        },
        "item": {
          "id": "b04b0710-d2ab-44cd-8fd9-7d2b3b7e7b77",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9b6734a6-e565-4cca-a5fd-ccbcf9dbd735",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "5b1dd947-25c4-4906-9f2e-f882bbdbcaff",
        "cursor": {
          "ref": "115094b6-abf2-41c7-9929-c53aa4df6b8e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6684afa5-cb33-4373-8a71-4eca0f16f550"
        },
        "item": {
          "id": "5b1dd947-25c4-4906-9f2e-f882bbdbcaff",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "363ce339-65ec-45e7-921b-0c0ac4665d1a",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "bb387833-df84-4fea-a857-1ff191a95b56",
        "cursor": {
          "ref": "6edfbd7d-d525-4f6c-855c-b775fee76965",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "06f5d64c-dadb-439f-91ba-b565e7ef250e"
        },
        "item": {
          "id": "bb387833-df84-4fea-a857-1ff191a95b56",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ffc0dbaa-fe91-4a88-9f04-759a73ee8ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74f89d4-af49-4d53-8ba5-8f88b17382dd",
        "cursor": {
          "ref": "edeea3e9-350b-4d41-8bc9-0f6954fe2392",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9ede4c20-a198-4ddb-928d-de0c300887af"
        },
        "item": {
          "id": "f74f89d4-af49-4d53-8ba5-8f88b17382dd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "876f0b37-581e-417c-a0fe-d5c8f437d533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe8d2a1-11ca-4546-a737-b0d84df40242",
        "cursor": {
          "ref": "7105f252-7f3b-4a45-9c9c-412af2f9c068",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e38714dd-a4ac-4d4f-87a1-bd9bbae59705"
        },
        "item": {
          "id": "2fe8d2a1-11ca-4546-a737-b0d84df40242",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d16badcd-dbe4-469a-99be-df0f09f6d3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867d117c-acfe-41f4-a49e-da6acedbb90e",
        "cursor": {
          "ref": "ebe6d0ac-7032-4249-baa5-7518ce54f204",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cd43c099-050e-49f2-9f37-008c62013df7"
        },
        "item": {
          "id": "867d117c-acfe-41f4-a49e-da6acedbb90e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e28d652a-6d3a-4d75-a2c1-27bc39d2fe37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bb6403-9520-404e-9f00-8794f45201f9",
        "cursor": {
          "ref": "0599d420-711b-4557-a380-dcb0636d64f8",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f7af750c-a5f8-4de6-b27d-4700930db1b4"
        },
        "item": {
          "id": "12bb6403-9520-404e-9f00-8794f45201f9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5692d259-9198-4f3b-a849-5324c34f2720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54709c1-9abb-4d92-a899-a79df45c8eb8",
        "cursor": {
          "ref": "652062d1-8745-4b13-85fc-a60440818244",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3ab006ac-6aee-47a6-872e-5bdf42c0fa73"
        },
        "item": {
          "id": "f54709c1-9abb-4d92-a899-a79df45c8eb8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ce859ab7-b18d-4e6c-ab83-8adbfe0678b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35629da-4161-4af3-a8cc-b541d2f152e8",
        "cursor": {
          "ref": "d5a11eda-89c6-4f21-b59c-ffafde81bcf3",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cf5387da-bc2c-44c4-a677-444f52a4a413"
        },
        "item": {
          "id": "f35629da-4161-4af3-a8cc-b541d2f152e8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e331c9b7-61df-46ae-8c9b-78397466ac39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9b08e5-48fd-47b9-bf85-ea22fc892567",
        "cursor": {
          "ref": "b998ab9f-afaa-4380-8160-7a873e6eead5",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2ae35a6d-bedf-4cd2-a6fa-d69fec6d5da3"
        },
        "item": {
          "id": "7f9b08e5-48fd-47b9-bf85-ea22fc892567",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "29d421d9-2f13-4ccf-816e-4a34ade639c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffdae1a-1e6e-4a24-9d7f-fd0708d42c93",
        "cursor": {
          "ref": "088360cd-3cca-43e2-a841-99bfd190120e",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1bb9b68d-5e62-4b1e-959a-38ba577be16e"
        },
        "item": {
          "id": "7ffdae1a-1e6e-4a24-9d7f-fd0708d42c93",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "02cb89e4-6bd3-41e6-aa36-bd722b577222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e81365-6655-4be6-9a5a-a26011afc04a",
        "cursor": {
          "ref": "88083dc8-3a14-43d1-ae70-ef82cf21a6f5",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "54f28510-0852-43bc-802d-3743d618b26a"
        },
        "item": {
          "id": "46e81365-6655-4be6-9a5a-a26011afc04a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "62a8db1a-96a3-4559-aa8b-d998cd7bc0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1602f2eb-570f-4c09-914a-0bb01d9be0a6",
        "cursor": {
          "ref": "ed3a74e7-7bee-4ff7-9eaa-7cb46513cfef",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d6808a16-10e7-4b06-90fa-b08e2edb8d06"
        },
        "item": {
          "id": "1602f2eb-570f-4c09-914a-0bb01d9be0a6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dc96ba5f-db82-4606-9223-cce988edf255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38312c34-c053-473a-a8db-2b906cc4fce2",
        "cursor": {
          "ref": "d61af7e8-5d61-4876-a101-0b18966ae09e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c42489d4-0a8a-49ef-afa7-e2f051da6602"
        },
        "item": {
          "id": "38312c34-c053-473a-a8db-2b906cc4fce2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "31780038-a30f-4098-bbbb-83dd37b884b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a6fef6-b8ff-4a28-aa80-1f3f566338fa",
        "cursor": {
          "ref": "27b1a3c6-aeb2-4f5e-8f00-0e123d7c40e4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f45352aa-764c-4713-bd98-2dd9a472fa01"
        },
        "item": {
          "id": "18a6fef6-b8ff-4a28-aa80-1f3f566338fa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f2eb3a53-7472-452c-a133-37d0ce39837a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d357f19-b008-4d10-bf98-334f9b24d3ae",
        "cursor": {
          "ref": "e5cb2b7d-99fe-4270-97d1-86ee129959d8",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "55f54d6f-6783-420a-ba23-ce752fe0314b"
        },
        "item": {
          "id": "4d357f19-b008-4d10-bf98-334f9b24d3ae",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c2f197b0-2e4c-48aa-ab6c-30e96d06f453",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3effe54a-aee4-4666-bd8b-196a720f7154",
        "cursor": {
          "ref": "1de927d5-6e34-47d7-84af-2a6e83464683",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "168058df-50c5-48f8-9c20-15f6462d3017"
        },
        "item": {
          "id": "3effe54a-aee4-4666-bd8b-196a720f7154",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dad5f311-e85e-4ca5-83f3-53b7639a1408",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8b615b9b-217c-4ca1-8545-b7393a81a64d",
        "cursor": {
          "ref": "009a79ea-49d7-4fdf-a4be-2d23eb7080d2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8671ad3b-2771-43f5-8e44-e813da9e7003"
        },
        "item": {
          "id": "8b615b9b-217c-4ca1-8545-b7393a81a64d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "908309c4-728b-454f-83c8-20f0a4d6cd1a",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "68660ca8-294a-4c79-9d83-4522ba539344",
        "cursor": {
          "ref": "f9441e2d-7f79-4f9d-883f-954e04a2db4f",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d910df4e-983b-480d-921d-c0ae6f1cbe2e"
        },
        "item": {
          "id": "68660ca8-294a-4c79-9d83-4522ba539344",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9ad4e611-4427-4aaa-bc83-a2d4db43d666",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e6a1cbe3-50cf-4e66-9c1d-599f1e245ce3",
        "cursor": {
          "ref": "f8e77576-b677-4926-8732-29489b07a916",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6168dbc9-0811-492b-9586-c318a4a96c96"
        },
        "item": {
          "id": "e6a1cbe3-50cf-4e66-9c1d-599f1e245ce3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9ee1896c-5c6e-4d4c-8ac3-ccaf26f64c19",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f9d2843c-f436-4e06-b527-08aaae0f7dd4",
        "cursor": {
          "ref": "b36c5b00-c1ba-4e5e-a264-fa9878b237f3",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3fc2fa28-3f53-4d26-b669-998b051075b1"
        },
        "item": {
          "id": "f9d2843c-f436-4e06-b527-08aaae0f7dd4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "36137afe-2beb-4bc0-99fd-f46f20ac02a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dab674-64b5-46e2-b566-29c593445ac4",
        "cursor": {
          "ref": "c4a4865d-bfc8-4704-b820-af84a1961be9",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ea98b5c4-307e-42d3-8608-3a1ec08c8bf0"
        },
        "item": {
          "id": "16dab674-64b5-46e2-b566-29c593445ac4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8b64f457-9c24-42f0-bb3b-37bc8b720d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936edb52-31ac-4770-a320-1f3723a886c2",
        "cursor": {
          "ref": "dcdc72ec-4c94-4229-9fcc-5d50b031b32e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "96966450-e0ba-4f2a-a8fb-ea44d31be8ac"
        },
        "item": {
          "id": "936edb52-31ac-4770-a320-1f3723a886c2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c18afc18-5359-46a9-8c84-93e22f431e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1826b4c-3a42-42fb-9c6e-2515755ddd19",
        "cursor": {
          "ref": "05464acf-b2f2-474e-bcf3-30263f4669ca",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ea3fbff3-a3a3-4ebe-bd4e-f63136ae033f"
        },
        "item": {
          "id": "e1826b4c-3a42-42fb-9c6e-2515755ddd19",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b578c9ab-6f55-42fc-8299-8c5006ee4959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7775a677-c81f-4d81-9983-e456369c34cf",
        "cursor": {
          "ref": "2e1c7b30-8442-4905-abba-85dc54776476",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "09e61eec-c829-49fd-9d0c-9ee3af5084e8"
        },
        "item": {
          "id": "7775a677-c81f-4d81-9983-e456369c34cf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b48e5a62-16dc-463a-b278-d8916e6cdc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab9fa53-dd2a-478c-a7e5-4f5a1b65665f",
        "cursor": {
          "ref": "a1018482-8fde-4e6d-9c7d-178c5706c3da",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d1f69317-273e-4808-8ae6-f09b8b09ee0f"
        },
        "item": {
          "id": "cab9fa53-dd2a-478c-a7e5-4f5a1b65665f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c813ce08-4ccf-489b-866d-68803a12df66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b28207-fd40-4562-a00b-6683d6a64476",
        "cursor": {
          "ref": "3141aeea-d0aa-4401-8baa-a11044f72766",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "85b9e504-7f29-4114-bdd1-f152e88241b4"
        },
        "item": {
          "id": "90b28207-fd40-4562-a00b-6683d6a64476",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "79b09518-3bfa-444e-af68-4cdb94808886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583b7399-0c1d-4d62-a0fc-16064f39707b",
        "cursor": {
          "ref": "3170629e-bb9e-461c-88e5-c69b099a7352",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ec2c0dc5-5437-4529-8714-a78559a7902d"
        },
        "item": {
          "id": "583b7399-0c1d-4d62-a0fc-16064f39707b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "93779ebd-1a06-4a76-a76b-805fa8cbf5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88be9ec8-a7f5-4fe5-9238-779e62bda7c6",
        "cursor": {
          "ref": "81086747-959d-4a4e-a486-682364c05e7a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ab688ac7-c84a-410f-ba21-a1ed8ee92ba8"
        },
        "item": {
          "id": "88be9ec8-a7f5-4fe5-9238-779e62bda7c6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "184fbe74-0bde-43bd-bbff-1c7c1aa11c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedd9101-e1e7-4ca2-b771-43abfaf477aa",
        "cursor": {
          "ref": "a3f2c018-d851-465c-b907-2f080ca6fe35",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fbe10e7e-946e-4def-bfd8-c00390a06ab9"
        },
        "item": {
          "id": "fedd9101-e1e7-4ca2-b771-43abfaf477aa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d4024ebc-93e0-45e4-8550-ebbe0b7e27e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb6a2e0-9f52-442c-8d88-35eaefcef66c",
        "cursor": {
          "ref": "7ba69907-a2e4-4d13-be4c-806d5fc3feae",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9f68e004-762e-4cb1-a501-4f60ce9f93c6"
        },
        "item": {
          "id": "2bb6a2e0-9f52-442c-8d88-35eaefcef66c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a0e73cc4-efe2-45bb-b78e-f1ec4f93d4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba02dac5-fc9a-4f37-bb6d-706117a6f931",
        "cursor": {
          "ref": "ae49f866-ce20-4570-bd71-cd44345ea57f",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b6e13182-ceac-45d2-b596-a5db6cd55a63"
        },
        "item": {
          "id": "ba02dac5-fc9a-4f37-bb6d-706117a6f931",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0e2e3384-22a8-4958-a637-b10fed9c92c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac7dc38-2325-4051-943f-fee3d7aa4ec9",
        "cursor": {
          "ref": "b22bcf2d-6e6c-4658-8e12-e511b71bdadd",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "2494ec62-a150-4fc4-be24-9e0bffb85eae"
        },
        "item": {
          "id": "eac7dc38-2325-4051-943f-fee3d7aa4ec9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5549161e-79cd-4bad-8411-89927791aee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7d728d-70d5-4469-86a2-e5d3691b4fdf",
        "cursor": {
          "ref": "146ebe6d-041a-442e-a08f-adc91ab62564",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a1d6e3d6-494d-4feb-8a77-2fceeb724b68"
        },
        "item": {
          "id": "2c7d728d-70d5-4469-86a2-e5d3691b4fdf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "823f670a-cd24-4a93-8158-1ba1b087f30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee2508d-b175-4ba6-b895-d38f96787ae8",
        "cursor": {
          "ref": "c4a9faf8-a9a3-48c5-8b33-7d5ccbc4b2f9",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e0f6a46f-f57a-4a67-b3d2-39ff245b7ff5"
        },
        "item": {
          "id": "8ee2508d-b175-4ba6-b895-d38f96787ae8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7dac4b65-0e05-4a2e-af74-bf24572b2be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c59de4-940b-429a-bb30-c7594a112dc6",
        "cursor": {
          "ref": "b9fd423d-eae4-4c16-9585-e773bf8cee27",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e4e740c9-e2fb-471f-a8fe-be3736af285c"
        },
        "item": {
          "id": "29c59de4-940b-429a-bb30-c7594a112dc6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "33dcf3db-5e2c-4305-999c-6283b5be7d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14aebcd-4bb9-4653-9d6f-d4d94522bb02",
        "cursor": {
          "ref": "a5d4ae8a-da26-4843-808a-fa051cd8ab14",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "89f377fd-0b26-4a96-931d-197a9914e161"
        },
        "item": {
          "id": "e14aebcd-4bb9-4653-9d6f-d4d94522bb02",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4845afd3-a103-454f-a764-93fc2b8ec3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7763cdb-f175-40df-a11a-17019cc981c1",
        "cursor": {
          "ref": "971420b9-d67a-4343-aff8-806287ef4d10",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "43f59f4b-b5cf-416e-9315-7b8e840cc69d"
        },
        "item": {
          "id": "b7763cdb-f175-40df-a11a-17019cc981c1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b95946b1-2d5c-449b-969d-f01541fa6a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e44720-5cf2-4881-a834-78b017339078",
        "cursor": {
          "ref": "27c1a446-8351-427f-b3e5-123711d581ba",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7097b247-b6d5-40f0-8a43-3f1a7c7aa1af"
        },
        "item": {
          "id": "f3e44720-5cf2-4881-a834-78b017339078",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b59e0dcb-23b2-4dc2-9349-c5a3593ff3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83940404-3482-4e65-992b-e00a86540fc4",
        "cursor": {
          "ref": "bebdc9de-03b4-4fc8-8906-c137aa1280e2",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c56cbf75-2e08-4ee5-8984-aae1fc0d58a2"
        },
        "item": {
          "id": "83940404-3482-4e65-992b-e00a86540fc4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7a6a09c3-079b-4bdb-96ab-3e453f948468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446130e8-e148-4a3f-96a8-e975a85029ca",
        "cursor": {
          "ref": "dabb3f86-2ccd-43ab-9cfb-909741d3328d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0d187a70-0b66-455f-8a17-fdb1cfe31c8c"
        },
        "item": {
          "id": "446130e8-e148-4a3f-96a8-e975a85029ca",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "406077c3-a95a-4c36-8951-2dfa6d8a3961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3687c2-92f5-43c1-b121-b0067c63342f",
        "cursor": {
          "ref": "4f197346-3620-4126-bc73-8e8a778ec9c1",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "79529552-91b0-47c4-9be9-016bc7080962"
        },
        "item": {
          "id": "7b3687c2-92f5-43c1-b121-b0067c63342f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9e99c6c7-6ca0-4ddc-8471-8b30aa9b5671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d62336-9019-400d-97c9-e986553a8dfd",
        "cursor": {
          "ref": "41700bf6-1128-4f96-a4fe-127fa86108d7",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f4b7a129-443e-4d8a-8af4-69951bd88bdf"
        },
        "item": {
          "id": "64d62336-9019-400d-97c9-e986553a8dfd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3204743c-aa7a-4e8f-b4f8-49b97ef4db13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf42e6d-0fd8-466d-af80-d68968c0fb54",
        "cursor": {
          "ref": "98777618-7a91-4b06-9998-3ba58312c48b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "434633fc-bc3f-4f7c-a949-95654d5175a4"
        },
        "item": {
          "id": "bcf42e6d-0fd8-466d-af80-d68968c0fb54",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "31e2dc90-fbea-4c92-8af3-2994cea328f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b0fa6-b96e-40ef-bad4-75322119a7e1",
        "cursor": {
          "ref": "9d3ab968-e598-4bff-acf7-0cc632945020",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "391bd048-4c42-4607-80e0-6b4b7e490d3d"
        },
        "item": {
          "id": "511b0fa6-b96e-40ef-bad4-75322119a7e1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "54fc7687-01f0-472f-8f13-bcdadc9f4a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8848bbcc-89f5-4081-88da-95e4772afd03",
        "cursor": {
          "ref": "6d024f2c-2173-443b-8459-91ad7c140478",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "87d2987e-915c-465c-9281-3e306adfe7f1"
        },
        "item": {
          "id": "8848bbcc-89f5-4081-88da-95e4772afd03",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e70114e3-3daf-492b-b26e-b85ec784f421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8aa183-d06b-460f-b86c-433207e00295",
        "cursor": {
          "ref": "04c67b23-14e2-4e7b-a13d-31b034969016",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3cd89843-583f-452b-b004-18db6c0dd596"
        },
        "item": {
          "id": "0b8aa183-d06b-460f-b86c-433207e00295",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2cdbd74d-5361-40e0-bd95-2992b07f405b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0dc194b-cc68-4315-bd1c-9cbdc4c27fd1",
        "cursor": {
          "ref": "dee05531-8f12-4730-9cc5-1c50fb3ffeaa",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8013c05a-1eac-4310-8760-757d67ec7101"
        },
        "item": {
          "id": "c0dc194b-cc68-4315-bd1c-9cbdc4c27fd1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6ea9238b-8e43-4e81-b3ea-e5f42c453433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc3ad76-075d-4d25-8fe0-94e9b2d3fcb5",
        "cursor": {
          "ref": "eedab7be-2f65-40ef-8c68-a71d8b7042aa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e1dccd1b-a940-44e8-8121-a7350538cda9"
        },
        "item": {
          "id": "ebc3ad76-075d-4d25-8fe0-94e9b2d3fcb5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "21545ff8-9217-4e0b-a5f6-fcc20652375a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273346db-c1fa-4065-b605-c4dbe14eedfd",
        "cursor": {
          "ref": "a0324bad-b55d-4bfd-b027-4d54321c06f5",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "063a5c9c-060a-4807-a24c-8cbaf4081801"
        },
        "item": {
          "id": "273346db-c1fa-4065-b605-c4dbe14eedfd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "20c1bac4-e380-4183-9a57-8ef5d4b729d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d379cf-c197-4c8c-82bf-0f2bfbf11d3f",
        "cursor": {
          "ref": "88c1ff28-ffbe-45c4-90e7-99590aa637bb",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "980cdd6d-d64d-4ea1-93a1-67d8624d972d"
        },
        "item": {
          "id": "e1d379cf-c197-4c8c-82bf-0f2bfbf11d3f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e0d7f426-7236-4f0b-8ccb-3c8019002fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fa91af-a19f-4bad-8d1a-90c86eb7d9ac",
        "cursor": {
          "ref": "65e68224-744e-4c57-8b12-22990250e824",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ce0240fe-4197-4e78-b217-ea00b7ada0c1"
        },
        "item": {
          "id": "e7fa91af-a19f-4bad-8d1a-90c86eb7d9ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ec6370ad-b788-4b50-b6cd-30a576ec8d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd910a0-e659-4714-a097-98421d7840a7",
        "cursor": {
          "ref": "a092b3c0-5d9e-40ea-ba0f-bb0cb89ba923",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fe4993ba-9182-4921-99a9-176762ba726b"
        },
        "item": {
          "id": "2cd910a0-e659-4714-a097-98421d7840a7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6dbcf907-2320-43f4-afd1-c80c1d33996b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd427ca1-0064-415a-8a1c-88fb4cb50a8d",
        "cursor": {
          "ref": "f27e67fa-ab68-4b2b-9f48-22d3c3dadf2d",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e118cb08-f5e3-4770-9e2e-8dc3dcbbaba0"
        },
        "item": {
          "id": "fd427ca1-0064-415a-8a1c-88fb4cb50a8d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4f421641-e321-4d4c-8c9e-94fa5fcd3977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fe4286-60f2-4d95-bb24-ce33f562aaa0",
        "cursor": {
          "ref": "95c8c9a2-a115-4afa-bc00-6738663de20f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e1f0ba3c-9bfd-42df-b43d-6e61c3ff0e74"
        },
        "item": {
          "id": "12fe4286-60f2-4d95-bb24-ce33f562aaa0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "24a0d759-1871-47c8-89b1-c46e1e8395d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbb3c24-afd8-4deb-8e4a-12f1b55364dd",
        "cursor": {
          "ref": "ba2d6c38-bff8-4c3c-8abb-806107a8b50c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d29887c8-1d6a-491f-ba6b-471193b5bab2"
        },
        "item": {
          "id": "8bbb3c24-afd8-4deb-8e4a-12f1b55364dd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ff633811-49e1-46c4-829d-2ea28d8a7c3b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ccab336d-473f-4a5d-8068-7f56f4ace65c",
        "cursor": {
          "ref": "b71505b6-9aa1-4098-b2c6-91e4d2703c47",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "edcca751-8a15-4cad-955d-4bd85254fdc2"
        },
        "item": {
          "id": "ccab336d-473f-4a5d-8068-7f56f4ace65c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6f683db1-da2d-4776-ba60-59986e93bd93",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bae95c5-55be-4f0b-b221-37e42bb45a60",
        "cursor": {
          "ref": "afc9eb92-60ad-4072-9775-8ea8147a3dd1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f6b0d631-01a7-429e-8c16-378e9c1a412d"
        },
        "item": {
          "id": "6bae95c5-55be-4f0b-b221-37e42bb45a60",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "05700a81-162a-4bc7-aac8-5eff429d096c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3754491-95df-4430-92f8-13d9f854f16f",
        "cursor": {
          "ref": "17e20d64-2370-46bf-9b89-380c0c8382b1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6d6beaeb-82fa-4109-8f7a-758559476a30"
        },
        "item": {
          "id": "f3754491-95df-4430-92f8-13d9f854f16f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0afa9d88-b6c1-4e8c-b3d6-4804d9fe08c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3754491-95df-4430-92f8-13d9f854f16f",
        "cursor": {
          "ref": "17e20d64-2370-46bf-9b89-380c0c8382b1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6d6beaeb-82fa-4109-8f7a-758559476a30"
        },
        "item": {
          "id": "f3754491-95df-4430-92f8-13d9f854f16f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0afa9d88-b6c1-4e8c-b3d6-4804d9fe08c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b0b26a-6bb6-4380-930e-478eabc2dff8",
        "cursor": {
          "ref": "9b617366-dd52-4046-8e68-8b975945efdd",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "33070bfd-79e6-4f4a-bd44-61a2f5a467f0"
        },
        "item": {
          "id": "c2b0b26a-6bb6-4380-930e-478eabc2dff8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9744f0ea-39e6-445f-b9c4-2afa238ceadf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a820a184-5e75-4500-a30c-b3677782b2dc",
        "cursor": {
          "ref": "4431566c-7b17-47c2-aa6c-340cc44bfb82",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b7ea08e6-7588-4500-b68b-51826ecb47ae"
        },
        "item": {
          "id": "a820a184-5e75-4500-a30c-b3677782b2dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "66e84bae-915a-409b-9660-252b1867a7cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}