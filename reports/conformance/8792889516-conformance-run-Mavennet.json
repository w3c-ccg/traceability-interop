{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eb5c88cb-81e3-415c-b28f-52a6ce49d18b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9dc71882-f600-47fb-af4d-c7bb365e3a75",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d06fe9d-27d8-49d4-8914-9a002583fe1c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "260bc6a5-63a9-428c-abc5-a389da1832f6"
                }
              }
            ]
          },
          {
            "id": "30866608-4b79-4637-a525-cacc31aa869a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c61f8c7-b3d6-4328-b85e-4e76c422729c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8781d514-14fe-4190-a98d-7298849beb96"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1326084a-cac4-4467-9b66-52cb76a32505",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f9c1f0ec-8e98-4f0c-98a0-728e31201d08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "870833d4-9fd9-4fbc-a04b-8fa2b674b0ac",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "661b6f20-63f0-4203-a9e3-f8b1fca5d3d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24570fb4-f368-4026-bbcd-dc5d705ee0c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d5b9b37-77e5-4562-8b04-5532fb0d0688",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c4102fa-5088-4a15-84ef-f019a9f7124b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fef50a19-ef72-4282-b4ec-67324148413e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36422956-c0d9-4cee-9742-d5155ef0f318"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbeb4116-b774-4728-a23c-552da8900ad6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0158b57b-b289-42a0-8b37-4d830c7ea853"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6907708-1810-442c-a3f0-4e0281014253",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "acb15e74-7705-4719-ac7c-d153d1ac38b3"
            }
          }
        ]
      },
      {
        "id": "05020214-801e-400f-a0b0-d566cecaf0b7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "39d1e39d-9de3-4c64-9405-45ab22e531b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d30f6f5a-3e99-4ef0-953a-31b9599027fb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04389882-6b28-436b-b005-d65cab54b5c4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e36c67-4edd-49af-bd67-9c8a3e5a90ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f69e5854-58e3-460d-a5d6-8f65b6c9c9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6680fe0-1b80-4518-a9b1-99c339052d1c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cf3ed9-1dcc-41ba-b3de-28c2a3c0008e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ccecea8-9c94-4d6b-8265-5288587ef851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48806dc0-5bb2-4897-a43d-b29a6b675bb2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5515b737-8f23-4187-a641-b7f36a3c477c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7320eec7-0f9d-4b55-b896-c67701b4ea9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8865499b-1775-47bc-bf6c-e6c2cceedcd6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31165560-ae65-434d-bdaf-95d89d154768",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7e8a21-a8cf-4f39-9d5b-7cc28ea3e38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b10825ea-7988-442e-98f4-877f304f87d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c710f7-9f5d-4fe2-b629-c393162aff45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9647903-2ab3-4bda-a9d1-48bdfc89923e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "41aa743b-37ed-4ebf-be3e-74807e1bdf5b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "685d5db4-6ea5-477f-85e4-b31bfb4ad0d4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1207c314-f23b-494d-ae14-eba68f2266d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6beca7cf-2024-4610-a83f-8104a23a2db6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a6ac639-c09a-4549-a8fd-eaaa9f1793f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "42e413a0-9328-4d3b-ae7a-db9c693637da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79849812-f544-47e9-babd-e442ede1a063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96f97653-3514-4a09-a75e-f048c78061f6"
            }
          }
        ]
      },
      {
        "id": "99fadafe-90ee-4439-87ea-1a5ff7aba5b0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "42e4ab94-8d93-437b-8534-f750e238c342",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df8c854e-1800-4ec4-839a-6957e6c27a2c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "15872ca8-c401-40f7-847f-4802e1b91b12",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeda69a-6f4f-4c76-b496-b08d46058404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b0d98e-8352-4779-8bc4-b6f77d713e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20268384-9bb8-48b5-9cb8-7cce99cf4828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e45a8d3c-b25b-40d4-baaf-23e421180228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf3a3d8-2367-414a-9f77-03d5c4cfcd87",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b250de39-bd80-460b-82c1-4b57d1bbcad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1b4875-8581-426d-9474-0db5f8bac5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb47c2c6-a61e-495a-982c-db2ff54dfb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35d8e390-8e39-4aed-9ca2-00c2e94a4b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72af92fb-3420-4e53-91eb-130b76833082",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7c5e60-c689-4736-84d1-a82e4594a425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359eac92-9e12-4a9c-80cd-4fca8dcda55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1795e9b0-bf34-477a-99fe-a770bbd0134a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66e8c9f6-571d-405b-b1d1-9f52b82670ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f09cf04-06e6-43d5-a421-01b123402a84",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0122aff9-a441-49ca-b50a-402d9eb59d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a687c1a1-d4a0-4081-8d18-b745cc711515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2c3c5e-d7c4-4663-aec9-b120cf39255d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d8b2410-96d3-415e-9a73-81d56f487da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a65bed-a378-4092-9bc8-a3a74ae01d84",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ef9f05-0868-42a1-a366-756ab6b32dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56583d82-8dc8-4fe0-8439-e44af99f840c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018cd996-9642-48b7-8f44-a202f0e36d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "797d0678-73b3-4166-8a10-022e85a79908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8378ee-5d85-40f2-b9fe-7315ccc125fb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb8539c-d5e9-4945-a24e-9ecd64e380b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c169f210-a7b9-4909-b1b3-17d128dbc161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303b6108-611b-48bb-8b74-daf4a564622f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f41e9e0-52a3-4fec-a99f-2904d663bb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7a7898-053c-4f9e-a9d9-2a30644f9027",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8257b9-3580-48a7-8074-1a584942fbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681f93ce-5e6f-4384-a3ba-35c9a3b9a6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff17773-a34f-4ae4-b489-54afc351f9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83f391d1-fd49-408d-a2f2-f012ae01071c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e36871d-3e6b-4d43-b25e-f9b04403f157",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876c4c4c-9975-4d13-9f55-5c5b308c4404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c73bc67-54cc-4a81-b249-636730d03b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7918de26-8315-46c9-ad25-d418a178a4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc682c14-d0f2-42c2-a4b5-7e8f82fa54bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccd5dd8-68ad-44a7-8687-77f8b604bf3a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f18ab2-78e3-4d71-b358-e525fe4190c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584b47fe-5503-4b7b-8472-1d31fc11ce97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21e1a8c-715c-4fdd-b99c-493cc53a4109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68755ebf-080c-4994-8cfb-206f4ccbeca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa1ecab-4bb5-4cf3-9777-f87163d8aa74",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7742b145-b23c-4f1d-b97a-f3ee8cdcf153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62de626-f353-4812-ba3f-e521de4037ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923e41a5-8f71-473a-98c9-a8d909b5f5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85f346e4-7ef6-4405-8f19-836ac1a1c31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c72059-7e8b-4a37-89df-cd27554f9a6e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b221468-d297-4aa2-9ed6-a19be5a5b212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bb5d69-a7bc-46b5-a82b-c0e0624f68e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44c4036-f38d-4e65-872c-eb14d615bc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba532b71-6142-4106-9cca-19b3b0c7d6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb52907-d2f1-402a-891d-bb912f76f4fa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c19719-be85-493e-9ee3-7a4b8768dfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d691c4d1-843c-41db-bfbf-707b0e06b085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d230b9b-01b8-446b-b82f-ac404f2e29d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab703814-7a8a-40d7-bb15-69222a374f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28812091-9d03-40c4-84ff-609509b47f4a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a400413-a4c3-4824-bf3f-e2a6848508f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a30734-3ae5-4170-b463-ec8ed78d9c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2c6602-edf5-4be1-90d1-56bd24eabd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2df4e89-bb66-409b-8d8f-16d546ec0e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c1bb3b-1c72-4cbc-97ac-1a86c4a9e2f3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c178919-7488-423a-832e-3ea7b27cca83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee3b279-4b7d-4dc3-bbbf-10d69fd846a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa25365-fa63-490e-91ec-35c4cc9fd6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3203060d-490f-4685-8e2c-69c93885c72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855de5f8-53af-4f20-94ea-c7af6411b408",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcf4fdc-4f05-443d-a07f-73056aaf8451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7fe400-958b-4ff0-8c03-b1f143ec8f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9b607d-746a-46c7-a253-b5079330acc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba889908-023d-4349-ad8b-1d0c3962b1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a80809-a317-47ff-a7ea-461f87a54713",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa3a8da-571b-4458-a9bd-63fc4f931024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5ffe12-e477-4fa8-ab07-0928a7207097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0f40ad-27ac-45b6-8dcc-75be2679b82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ac8ce41-f533-45ff-b25c-ea02ea9416b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf20436-7850-4852-bb6a-e146d736b584",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41b39de-2c58-45e2-b203-2750bc148225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f021f62b-844e-4b7b-babc-8b26f82188fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1039e8-3800-4c16-a220-d6326304c830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d24bc01-0500-4481-b368-bb5f000a205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc29b58d-93c3-40df-a8ac-315544d033b6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcb5c36-9152-4c00-9cd3-5c083421cf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef67dbaa-7561-44ad-a15d-9e99a4543233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dba183-4521-46a2-b496-16794588c40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4582a21-eafa-425a-9bb5-ee8ad56e6e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d624be2b-9568-4f62-82d5-9a8669bf1382",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138e6827-f08c-4f12-9d3c-334817af3996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c33b9e4-e2f3-417a-b772-d9d064fa8e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cb8ee2-d4ce-4ce2-8ee0-e6b07f22e0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a5e8cb-8798-4444-8b7c-8b4e0c875bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45654afc-7a93-40a8-bb7f-1a459e75b976",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00791c14-7827-4494-a69e-7f1a5f951c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca2c580-7882-4d86-9d1d-0484e988c4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ec4ec5-0d3c-4c09-a018-5b57faf88f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68f02bca-6e9a-40e2-b36b-3309a7d834aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c454f1-c1c5-471b-ab7a-1e3fc575c128",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad464cdf-40f8-4f74-9518-f19889a24375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24abf7bd-bae5-42d4-b992-2f7c5b7cb2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af66409f-1407-4ec5-b903-5cf9f9d76ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6683370a-32c1-4ba8-a21d-3b38644295ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb1aeff-079f-4356-a8cc-b5dfaf685398",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6db9a7-ac2f-4d45-8993-a369425fa8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697692ad-313f-47a8-bd47-88a00526ab4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdc80d8-5067-4869-9f7c-a870f048a7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b178af0f-b807-4d33-acaf-9d287bf9ea63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0390f34a-b0e2-4bcd-bb1b-424fd3c0edec",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7cef76-ed0e-4e41-99f4-23661f6c174b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3a0f44-d74a-4406-a181-a99e1e8977db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3d6121-23db-40ab-8976-ab3eb72a88d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53fa2e53-6f1a-4f92-9013-89c524d1046c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bd564f-4782-43f1-957f-6219da297055",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fc8c51-cc9d-4bd6-8893-a4f99147335e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c47d30-1453-4568-9e35-df49eeda5ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152a1830-624c-447f-9513-938b06608ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bbe996-d18a-4517-9421-deaff372badc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79480049-9b96-4e5e-9e7f-4c35407675c4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b708152c-456e-4e13-8951-33216e534f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33efd6f2-acca-46cd-b4d9-dd6c0894b3e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75fb60a-f28f-4fda-ae7d-238d205f3555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4cc800-ad20-4b84-891d-9107a57bfd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e2dcd4-8c74-4baf-b6af-9a82e7d2d5f7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5133431a-232c-4c7f-b083-4ad3a7f73b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed6f9cf-be8f-4683-a1e6-4e8a170fcfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197a9482-f66a-4c95-9068-674a851ec9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14d4845f-0813-4e11-a309-8241a66d080d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d106b5b-68ce-443d-afb9-ba4718730ef3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4e10de-9d43-42ea-a548-fa8753477b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67812601-9ad5-4550-a380-82bbc2dcbb9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d389b471-ff25-4bb9-b886-57f462b9c2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f21232-00e1-48ca-b079-774687b8d729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d760e6d-14a3-4b12-87e7-e59f404b28f5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3858132b-3f5b-4ffb-9682-4c8e392b2988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dac425-5528-48ef-8710-8082d9f1fac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287a3138-61aa-4cd8-b4de-14cab98abfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "271b5698-ede1-4d08-a711-dba86e30c44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a239ddd-6629-4fe2-9bbc-8ca872aa7363",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5215e1-7bf0-4442-a2d7-60777b3805d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ee957c-325c-4b46-9e37-ae80550151ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c97339c-a3d4-4afe-a80d-8b91df3856d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1528c2f-a43d-48a1-89ab-137bf7ad8cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7622f1f-e7aa-4df9-a549-f16ee99dad6d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642527bd-d42a-4ac4-9cce-6026711bfb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb44742-5e69-4b1e-bc02-1b4d2cf31160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72df63ce-7889-4eb1-aa41-307ad4554332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ccaf6c-e873-435f-ad69-31bd704c0b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1220ecec-c587-43bc-9656-a692c7e726bc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f717dc23-bbaa-435c-9e5c-a08dbeccebcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef42f10-89d4-4e98-b9e2-9a09f76d6972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2487ea24-d76d-4e17-8464-2fde72036ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e04b8f0-2fb2-4f0b-9c88-585bc7aca3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff5e99b-c808-4e52-bac7-2739f9898d8c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a367c6-45c0-4ce4-b8ab-30235468b80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642b93cf-f506-4f0e-807e-9e70f8cb8138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3530e8e-760a-40f6-9977-7e9245ff66bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdab8913-f81a-489e-80ff-8f5a0306e285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34107b9-f034-4e24-9d1e-9b8c7502444b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7cd767-6eaf-400c-a93f-18bfdc33437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af8ce30-2a2c-468f-aff9-7d796e2070a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace89c43-e843-4d9c-ae37-6b0002874eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad70299-9d1b-404c-9678-a912962e9605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dad974-372f-4fd0-91d6-96bce58012e7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9389141f-fec7-4481-9f3d-75e6e5100a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc458a38-5158-4171-b43d-27455ff06943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d646509-08f8-4009-b9b5-8028e1001bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b363b61c-0891-4eca-87d5-0a3ea9c74ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9af1e4d-e625-45f9-abc4-3e1068495adb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde4894d-ac4a-46bb-9d18-ca6ca22a5edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909a8d94-f590-4f44-bf98-67003aaac2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bc29af-381e-4199-af0d-67d48d3f11ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "44f1b661-1b3b-438a-bc13-6262850dcb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd5beee-24f0-4904-a9c8-668514dc0174",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e192eee1-cde9-4a66-b0a0-c57ca5626999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "749c6222-1af6-4d29-9144-ed95e2228e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41afb43-ee14-4a69-a66b-0b2492c38a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9da5705e-58ea-4873-978f-c6fffcf5a8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fe8104-f497-4a87-a624-42f7ef0d0a8e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d636d2f9-7e4a-4598-baef-01472724b69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07334e3-289a-449c-b33c-949c242dbbb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e819b0c2-8b94-40dd-878a-52d275c3565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc642f0-3744-406e-af15-87b416a5b8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec6efc1-9823-45a3-95b0-a5b85378376a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782718f1-5611-4b35-ad86-20a85234f2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a707b7fc-00e6-4dd7-8b23-79ebec5faaa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24ebd9c-1123-45d0-95af-cff4c646c3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc49c8d-8911-4397-8cc3-ead7f4e98a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c43aac6-e4e5-4b35-85c8-06798f709ec6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8ab36f-b0d9-432f-abf8-1b4695aa8a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b9cda5-b87a-408a-a60a-4aab836b1f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5114b12e-65b4-48ff-9ded-38588bba3cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b31955f-1d29-42ca-bd8a-72117115d9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd5539b-7130-4acd-887e-7bdea0830ffc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a945c5d4-45bb-4e01-a14f-eadc7582113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b5e018-fd02-4421-ba12-61a87953c517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0a41f1-078b-40b7-bf86-59fb54d733f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47066954-8825-4af3-880b-2984f28e54a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b130bdc6-9bb5-4d25-b946-9648014f0076",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6ad3ee-5f00-44a3-8669-a497de1d060d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e825aa-54dc-4d67-b1cb-a3c3c23ad293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3453d38-f066-4970-9313-a4ff77752d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7041af8c-c444-45d3-bf8c-4bd7fd1626e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3cc527-958d-4966-a322-e70d519fbf11",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f69e51-f5ab-451e-8998-8e4666d7f496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8194ee39-832d-4889-bfc6-2276db5846d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db1d9d6-31ef-40d2-bc9e-39f7ed2086e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ee04706b-3d5f-44c3-82ce-a69e0e882c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05952497-de2f-41d8-916e-41b392b2448c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0768f2c4-1aac-4501-87cf-e153cfb36add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6229a1-f416-40a5-a33a-ab4919bda0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5bf402-41a8-4c88-ad5b-372219586141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "85a1ad9c-75f4-46d0-81b8-511c8a9fc4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0163eb6-302b-4221-af7f-d19f028bf108",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bcae53-36ab-4660-8052-ecbdb3906456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332aaa00-f5c0-457d-b3ad-ab647cad8bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16e57ab-f65a-4a65-b061-9509ac9ec4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d84aa2-ad80-4752-849d-0e977dc66858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043b5031-cc27-410c-8b35-25a9c716769e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3d6ec4-f38c-4859-9e61-daece823d438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61383567-dfa2-4f6d-84ed-eaf965167e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadb710e-4d6b-47f5-a167-d86acfb3561d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b6e1f3-6b91-46ea-8802-51b1f56aa2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f90c7b1-8d51-49a1-914f-f15f472d96ad",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4d7da2-0b93-45e4-af49-f5a89b025610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc076204-5b81-45bc-8188-be6c6ed6af5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832630ac-fabc-475f-8e03-6a26eacabbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aee6236a-e9e1-4e12-972d-0897a0a4d97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13a3170-3fd3-4e63-8664-5b6d4b165bbf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc81613-5a8d-4e71-8083-2b7b3edbe472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29716e06-02a7-4366-a689-3a2189c949eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b6fdc2-c324-49b2-acbb-dfc249170881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30290b9b-eed5-42e5-a3ff-f67721cb7441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef58b88-39d6-47ee-9305-444a33d68d6a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f1bbda-7ee4-4337-9a82-fe4b87ba1f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c2a7df-6e80-442a-a3b9-fbb8e1130f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387c8054-63db-4f30-b95c-05a35b249bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfe06a1-a178-4ad5-928f-9542478cff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d75e432-5f41-4445-aa12-3183245fb790",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a820bbe4-b027-497b-9ed8-4089b9e6ff44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4a840c-52b7-4997-bd6f-312492cf3001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02c8bf4-21b0-4fa1-948e-9b0cede7bc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca139848-7f98-4cf7-be32-53aa367bb320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f672848-2cb9-4d90-8d1d-7f8c4b4debaa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7fc12c-ec70-426e-a08a-662511e4cb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31158ccd-1ed8-4c7c-b207-2aec32919905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0fd230-8843-400a-a43e-f541bc81f5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "186926fb-e847-4380-a897-6619edb6e20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e96410-dbe0-4ce1-a9d5-c050469177ff",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34798b88-da7b-4583-85c3-397cef266027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45fd618-9df6-43a1-8840-ddb67e59b8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecd6e11-3ded-4384-8888-46ac6f8168ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5c12e2-ba17-46e5-8a00-b895c739c0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e625e003-63fb-4362-95a3-5525b4ee403d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc98814f-ee1c-469e-a55b-80bb5c705945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce641111-3032-470e-b37b-64acbe0f03cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b136c2a-0a11-425c-a384-0b8c0f07d535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4d6e2f-dcd1-4d50-a4d6-b79faab99e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9ad320-0588-485a-b574-c8979fa9d7b3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1012d1be-9109-4088-adc2-93b421e8dcfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de26eeef-37f8-4b6f-9f6a-aee678216c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c51c799-d8b2-452d-8933-6fa91d9d9b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddaafaa-3f7c-43af-b402-dc6b1204836e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c275d0-5e56-4dcb-be43-89670ac7a3e4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ba6584-017a-4e1d-b26d-a13124ca8b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d73ae91-715b-4252-8c15-2416aa177786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634d8856-2024-4382-8ae4-30f2b31e8b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db95d7b6-18f1-4ec6-b41f-2884e5799e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95edc63-d457-4d58-be2c-54873934b289",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4823ec10-9960-488c-9323-b26da4e91e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf543cda-f44f-4ffd-9db9-c4b72bf4176d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540374b5-1571-459c-9b9e-07c8a2e142f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f745de77-dd6e-488a-91da-b2f00b2fbbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a0b7a7-eb33-410d-a3a4-e73a6d1792c5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a76d75-0bbb-40c5-841d-d0704fc94608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886dcc1a-b4e5-4e7c-8fc3-7fa6f7725984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ac742d-be4e-4cba-a20c-dfe1ad4e1d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dc79f7d7-4954-480f-88dd-fc59166e4c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca09d5b-aaf1-4380-b34f-5b20ebb498ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c08504d-8ee5-44f7-a064-809a7d94634b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1270c440-1717-40c8-ba6c-0a05c2fba174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b240a326-78e2-4722-bbab-5b6f4cfc2cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8038269b-b5e0-4de4-9cb2-5864f7abfa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271af625-d13c-4311-b6ef-a2383e6d2ea3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e617da98-e093-48c0-a51c-6fd0bc876137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a37f6ca-94d2-48ea-a810-d9e46162d11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebaf1c00-a589-4dd3-9c47-f18203d8f642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccff7d3b-f4a9-4d81-861d-839b36bd36d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71da01b2-67f1-4938-9e47-1e507603c229",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62f2a51-1c61-4e70-b4be-bf7d6ec32d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5a702d-55fd-4534-a115-7614d6b13da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ee56b0-c8cc-484b-b3db-c82dd5536cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7843e7a2-a570-4dfd-a749-d265629f50fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25e506a-e249-4e34-9e2b-c183a8c32645",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c917a179-827a-414c-89d1-51de46d18f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8b9d3e-4d3c-4729-aef0-77e86a374042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5495b899-a664-473b-bb96-a929ff8b3000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d33b7c-f6a1-43a0-bc1f-3d023ff3a313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448868ea-6b32-41c9-ab3d-914cfa7a1ab6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bedf7e3-2a4e-461b-9fe6-338b9712e9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30b6511-f5b4-4b07-a4ef-164b013e79be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe744e9-6753-4b30-9428-491f1f00dc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3e37b7-7c66-4c18-8c27-894ed2b6b76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebca05c-749d-4983-98db-5c99bafed5df",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1087944-4cc2-4715-a83a-f84fc17a4e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b114eb-2cc2-498e-9c64-c890fc4882d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88afce7b-5ccd-439b-b4f1-84b6f6a0add2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2622ba09-b9d5-42bd-be6b-22e3c9fb5e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f10ef8-9773-499d-8d5d-0c6044895f08",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4489a2a-1597-4f42-ac93-0ed4d5b71169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f5f150-7f91-43e7-8872-270b7de707db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5b008c-5b85-41de-a152-b2f987b5107f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3cd465-e34a-4bd4-9886-abb40d4cd851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2f700f-f305-4760-8231-b5ed54b3bacc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9d9b3a-9358-47f5-9e0b-9fac47c13b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e2188b-2e82-4829-88cf-5b2cbb572efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5031a0-1f1b-4c51-9d92-e1bde63c7fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1da42d52-d8ba-4dc2-a0e2-f9bc408aa4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d77c649-4f1e-4bd6-9b10-a869c77675c2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301760ef-554a-44c5-92c3-3cbf4a97b944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918740b5-4014-42dd-8527-b9fc7d98a300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e34af4-f3fd-4737-92e2-db3c43957cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "748999e4-0836-4eb3-a2aa-8aa4517e8605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673a9150-28c1-41af-a83b-980dce17d14e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8173712-bc10-45d1-88df-709da6716658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4579d212-262f-4d59-8024-17efea375d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee035f88-80a4-4d3c-9c2b-7acab030750f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d12267d6-330b-4a02-b71f-bd9aaf744217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a2bd12-6201-4c38-a51e-3d6cabad69c5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a781127b-753f-42e6-b989-4e4cfe39ce3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74eedb1d-a9f2-4120-8b6a-1538f41776f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c01ea92-2bec-45cd-aee5-2d4ced059f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eec86581-1dcb-4238-ae1d-d765a1634f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f3055b-e863-4449-a820-db5d084d328c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77496ee-abf2-40c9-acec-1baa3d99330e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cc45d6-a15a-452c-b09b-68964385a328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59ebd7e-8056-450d-b0cf-1601e3bcc0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bdea563-b371-436d-be96-2ca96e23a89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1178fe4a-3092-426c-8bc5-bcffac66d5cd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f772e1-7a2b-4837-b540-61849b4a13f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cefc1b4-6f09-4fca-b9a4-6fc8e2e7500c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cfa989-d13f-4484-90ac-34b124d07fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c3c387-2951-4b57-929b-b0f12fe0fe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdeea419-928b-46fc-a27b-7b6cf2febb62",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc4a649-d6d1-48f2-93e6-3b47e1f1f41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8a72d4-f417-4d89-9014-2b8887037e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef86872-ff57-4920-9d99-4a7a84c7b3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6b9b04-b36a-42ab-bb45-4ebf3cd9dbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2556f636-35e1-4b67-a173-1eb07269dd5d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18c92e5-e3aa-48f1-9318-10126e50c0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0597eacb-76fd-42ee-a949-071cca71ea6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f09f2dd-1054-40f6-8097-cfc01beb89ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf24037e-ee3d-4e8e-8b7a-5f0c11e59e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a79db7a-9b26-42e6-b70b-2849fe789fc6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0318047b-bf32-4ae1-8cfb-9ffa73f0600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84790563-b14a-4f71-ae31-1ce2b28711fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfc56bf-2c68-421e-bee0-a3f657fff7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9d10b7-c8a3-4b24-b196-46728ac9c6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685df511-3906-46d6-af81-b4cb4124e650",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65a3d77-7056-4c7b-b729-af1f025f186a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdfa415-23ac-4815-8d44-3fd68958bb08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c755da5-dacb-4a32-8fdf-41b89deccdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0a436d-eb28-401c-a401-70fa713fde9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36640d4-faa4-4a44-a1bf-c3acd13932d1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e245c58-7f88-4cd5-a856-ba775886c584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee80b8d0-ea08-4fb4-8988-486aee296405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fe1faf-a7dc-4ad2-9b4d-3ad7a6322199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21c04ab8-33df-410d-b957-9de9683c97fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaed9e0-64c6-4fa1-8820-8220f9f95fc3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c18b458-75ec-404c-bde3-fe41677d0048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd2333c-2af0-4618-a29f-dce59538fe54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f88c429-bf4a-453d-ab93-51c325bb6dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04893f6e-8a6b-4440-b95b-8ff27ebbba07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81bcea1-41d5-477c-90c0-bee377e42303",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebce6263-d1c9-443f-a528-9dc64e438eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa840192-43aa-4712-ba36-34db854c3036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada7ac28-259c-4e17-8d20-ea572166a1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01515e0a-0c9f-489d-aebf-78acdc46f350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80af5add-6c67-4272-b62f-e2eec6e6cfd7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd66087c-5739-4e46-9c6b-ac5aef58b1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39e9856-efa1-47c3-9a8c-e0aceffbbb69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45880c75-c1cd-4531-8804-8a8064b2e97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ebc22b-d157-430d-8e0d-d0a712275eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a749138-8456-403d-9dec-346386bd1506",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3d2273-3c33-498b-a3ca-03d8603090cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb7084e-170e-43ef-8863-ff154984bc7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e4de86-32cf-48d8-9230-c6afdc30de22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52602b7f-90bf-4bc3-9e00-da9c4d2de906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8060e3b0-a649-4587-abc3-3d8cc86e21f2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d34094f-667f-4911-bdf1-c9b14c3ceab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900a2d4e-2fcd-4003-a733-01b482afefe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408f749c-e916-41e2-a0d8-13a41930072b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "959491e3-26bc-4870-acf8-1573668c832f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2baa89e-4dd8-43ec-80a1-89167b4246ff",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de2d0df-1f29-4525-8fb4-8b78569efc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fea3366-9e2f-4576-acfb-c0b03c723aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ff2478-5fd3-481e-b98f-043fe5c00398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21b44adb-8d3d-4229-99bb-839c641bcc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae19a99-7dc2-423a-a930-931b9d567406",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e90bd7-20c8-4835-855e-3913beaa61c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1a0431-ab7d-4440-9785-31daf89431a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e891308-27ad-4766-810c-8bfdf2c32fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b739d0c-e1b9-4f4e-b745-2dae46a81027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9da74b-f3d4-41da-b4b5-37dfb9e624f3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed0fc7c-d9fd-4ebb-8a51-162bbb06f119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92efacc9-b8af-4ac4-81ad-f33171d2c726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a1541c-0d31-465d-b0da-e6134f8e2db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "085001f3-5baf-4f14-8ae2-1698aa88aadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5ce35d-f2ab-4d43-95c2-d9295c5d530a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebe3050-61f8-4e7d-9024-c9ae7b089c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8389454f-5f1a-49e5-ae95-4ab9ce20b610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac5ae29-be8f-4271-b5f6-ea955e17a30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63490477-0f1c-4546-addd-10af472b7168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b6df32-6f9e-4c4b-857a-543038c9c514",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e2f4dd-1c37-4d7c-9b44-8e5dd5f45aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedb98e0-3679-44cf-8ea9-cfb3bf42b3ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c226c97f-0e13-4052-9c5e-f0f804fdf2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5d6c8c-409a-4db1-94a4-26553fb5e0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff7f81f-5800-4598-8726-78babb78f204",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ada590-24b4-4709-b9bf-58e9d402503b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f02afc32-76ff-4816-b9a6-f7a8b5017689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893d2def-c986-427f-b19c-d0735bee3ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "606a8d16-5b80-43c0-9165-fbf828319b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e448af-70eb-4c7e-be02-b5b660384373",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bc6ba7-182a-419d-b51a-3bf68b848751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc48922-896b-483c-b1ce-c5a2fd4f1f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcdb66d-9f1e-40e0-a0ff-42b31482099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50428750-e41f-4c6c-94bf-b6bf77f0c970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd81f9a8-7778-4364-ba3a-c1f71a57c2d0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a01c9b6-e176-4a44-b35c-25dc41b38ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf8a6cd-37f9-417c-b7ec-0df4c34d3ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6283b62d-39ea-4ba9-8b1f-a9dba87a3a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1953c4-b3bc-4199-8098-3847e374ac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba69fcb-9c9c-45bf-8130-3a9c87d9f7ca",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3849d07-38a8-4143-bf6c-957a91d22a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c20b971-2095-445b-aeac-2bbf3aa065c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4503258-9f69-4d7b-910b-6c16102c6b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1cb318-186f-4845-abfa-7d7ab3110ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638756ce-a06d-41b8-bdfd-5e58cb2fa92a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b66589-0844-41b7-b5ce-8dc59cd075a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c59139a-8a8a-4233-9829-a8338b17b21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3d1002-0531-4be5-8955-46ad4fec8805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af7932c4-abd8-4659-99ba-d5d8a27c35e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dd4ac7-c0f7-46a6-996c-204e76ab6d65",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418607e7-8cdf-4536-b71f-47a5ddd8508d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30251bfd-f117-4538-9165-d55ebf5cf65a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9287e5-a022-470c-b226-97ac7516a9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ce8271-52a8-40c1-ac74-8a0ef739cfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f4d871-0261-4a79-8bd7-fe61eb238023",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86043f58-8df4-4ed1-b958-f5469110c8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b239d5-4f62-40a3-966a-1500d3a4b345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d441f8c5-83b7-4a40-b87f-5ba32975cbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cac6716-664e-4030-b630-e1b0d211f9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c03f082-e376-492b-b97c-4ae036799378",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f0995a-a39a-4b3c-9edc-00418be2bb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d1e46a91-605e-4276-89ce-82e7c8dfea26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7006613e-6dbf-40ed-b62e-580b479fade0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c64a8dfa-8ea9-4456-b813-87384ce3c518"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe289a19-7792-4140-ab7c-0e643a12a1ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c52020b3-79f3-4b08-b63d-831d4ca81888",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1282ccd5-c8fa-42ed-a029-b9cb9d9c543d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cb4e078-2b6f-405c-83a2-2eb91e2d5d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cba01d-7ee1-4156-bf70-dff07bbb02c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25752dcd-3c21-41ce-8910-495da3e1d6a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7be6107b-d276-4aca-8dc7-035fef08f20f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f354e816-5d78-42e2-b77c-cd8c22a7d7ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4318e1c2-5499-4d33-9209-0e0f7dafd923",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c840cdc-39df-4482-874f-abed0c1dc6c8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c812b45-d148-413c-bee0-002028de714c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84b17af6-2f67-42ca-86bc-7636c9b68d5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1b20d1a-655a-4762-b22c-6f28e715ce4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b60cb8b-fda5-4e49-bf8d-cc1e14efa0bd"
                }
              }
            ]
          },
          {
            "id": "73d5a207-c547-4ffd-8be8-371144ddf81b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12c0a625-e610-46cf-b2b4-c19ebace7aed",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8e428f45-3f70-4880-be15-c09a895adac6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c809eb-3beb-4abf-b48f-c7e4eb66b039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c04fe86c-a073-4926-af31-5546ed11a349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe8b1fb-d086-4a6d-9f2f-8fd5e000bd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34e8a93-527d-4470-9443-d9c59aca3630"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e116fe32-41cd-4431-a2ab-34de0bb14aae",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79aa0ee3-e2a3-4728-b600-650eac8c4726",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe74ae64-544c-4aed-881f-7b89baf98d96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00bcddec-ffa4-4b3d-b371-b576c951c927",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c7c2000-05a0-433b-9c33-5ce8de80de39"
                    }
                  }
                ]
              },
              {
                "id": "2f884a6d-022c-4b57-b2a3-f8eb1d10d8fd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b665708d-6eb9-4c4f-a546-a0df5a45aab8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "899d7958-63bd-4400-8117-29ee98f11f3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "070f34e2-cbf4-4b4d-85b3-a8ca945306c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd53daab-2e6d-414a-8315-a340dfb352f0"
                    }
                  }
                ]
              },
              {
                "id": "8151635d-da01-49fd-88ea-55cb3941b468",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77953e23-d044-4a50-9809-20870785a510",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99dc77d4-ad08-482c-a07a-67ccd824efaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00bd99c7-0157-4e9f-9016-1752ba56d50f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a32ff2e-acb7-4cc4-b9b3-9372e0725618"
                    }
                  }
                ]
              },
              {
                "id": "4546b63f-7a0a-4c3d-9360-493611168458",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd71b4ad-459b-465a-a6c6-ce9a3a77f1c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17b359e2-2d83-462b-8dd7-1f042c2db977"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14b6aa4f-e25e-4917-810c-2adfba63850a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1c58815c-b196-43d3-af2b-8b9b554230d8"
                    }
                  }
                ]
              },
              {
                "id": "a59df9c5-31e1-42af-936a-94e3537bd054",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e14df7e-864e-4752-a7a9-5003f14233d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "254a0f3a-fd9b-4843-b2fb-ede291eaf4af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b95227e2-4fd2-4c58-9416-35537994f3fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "673f22d1-3f49-4e18-92c6-1212c20ce825"
                    }
                  }
                ]
              },
              {
                "id": "4d0e7101-69ee-4976-a22f-21930a7c6ca6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "285703ed-24c1-4fbd-9191-688f48f3f1b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13000b6b-4a6f-4db7-b5e8-5aacb3694ed1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8a59221-3b39-44fe-ae18-0339b1fd204b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dca12ce7-0cf1-4393-af63-d7753937e8d7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0a082b2-a748-48a1-aab2-523c345b0bda",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "170eacb0-d8bb-4f42-85f2-5f9aeb79b9fa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4c53fef6-4937-4140-9ae7-2952f81188ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2e771b8-fd9c-414d-b237-06277741ee62"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d5070f7-0bd8-4248-b1e5-a717235dc8b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0a676b78-3809-4fa4-9eef-7332a479437d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b529e682-2710-45ab-9276-11ef4d451ebf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a239f566-bb9e-4db3-bc37-34c2c7005a6a"
            }
          }
        ]
      },
      {
        "id": "0fd5983a-ff65-49ef-b4fa-70d9e748b5b0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9c1995db-0d2c-4321-b419-a8115bafa0a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29610f16-5772-4196-b13e-f4c92d3e596a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc85d1b2-fbf4-49fe-b67a-7141324ce2e8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f0b2f6-2653-423c-94a3-1f88debf1874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec75cab-8d92-4be0-ae82-456d2262c055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ab358b-2965-45b5-b13f-ab5addab5306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e59e30-4223-4148-8438-3ad2cf4186b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d14671a-fe4e-491d-8e4b-8d3e3c81fb5e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4326d94-9972-4df7-a0ff-4a9dbc934d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59038360-4bfa-4d9e-b140-eb612b6d4c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95add0b-65f1-4385-9561-cc3bae543965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d04f152d-a08f-4cf2-b39a-46833e62dc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def411e3-16de-4553-bddb-5499e7ba5431",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b89f5c8-b454-4b23-bb43-5a67ef084db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a317e70-fe3a-48f1-ab2f-e16bc9c2d650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279cf599-1de6-450b-80e1-df101ded303b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "230ff4ff-fc07-4d44-bd50-90bb8d45209c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5885a377-f68f-40b2-853a-14c69b2c66f0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f959f50c-b082-4c05-a6e6-779550a62489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f2ca50-4c54-4e43-ba09-bad2c2a7ed82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b942e62e-b256-4de9-8bb1-76cc52369912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa2eec0-1f08-47c1-8417-3df2fe5cc06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d746c93-4a22-421f-a9ba-9f4363e73b63",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1315c80b-4eb6-45ab-872b-a017b3ff7c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a1a8f3-598d-4e50-9891-b050857779b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1ce7ef-1cff-40e4-be06-827c5a559ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba41f82-8dff-4c1e-a01d-c37f255ec282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34d7b5d-14cb-4b1b-90ea-b8e8782ee63b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f0c6dc-f912-4fbc-b1e5-b43635f7b2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615b6a7f-e2f2-4265-bfdd-7e43f5a83db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541856c2-e126-4d4c-a2b2-5c1583d5276c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70fddb7a-cb24-48d7-b3c1-d1cee750b0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12514d1-b861-4cd0-b9b1-f6f85b6e9a27",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151b3ec0-059e-44b3-accd-c9b8cbc3ec9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0c375e-0e23-4829-8385-fa0556ff1a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9136a8eb-d79b-45cd-a24b-c8c348bb397d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c248962b-aa2b-4f14-b6ae-6821cbb5e8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2cb61c-3c59-47c4-8ee4-b2d3bcb72741",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a46562-e512-4398-b309-21f6c6e459f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04714c1-3876-4fd7-a2e9-1fb14c748893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ecd41b-4e35-46db-b6e7-6ffa0bdad24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb3778b-c370-4f8b-a2de-3d52e11db815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29217a46-a5d0-4b03-9477-eb9f894c4b5a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9e37d7-82fd-459e-97bb-a14db3d857d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4cdafa6-fda4-4e4a-a357-b5e729c86367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf5034c-dcaf-4e0e-9733-f5685a7d0e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1bb2dca-06d3-4541-aca8-1abfedc1ff32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152827ec-d003-4d93-ab43-8216e1595541",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91e2138-acb8-4a1c-8b40-31ab0a1081a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f9c6af-d491-49c5-8cb9-ffde1379253e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842202be-132e-40eb-a146-06e5871d2ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bd32fd-27db-43ce-9d20-ae580a0f9317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead20250-5b54-4aa7-b5e6-e942e0bd2187",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c70d75-ea9f-491d-8f55-b2ec2e510354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9122be-721c-4060-b43b-9aa6b51d0cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f0002f-14ee-4dfa-9327-60c9a0f215b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2df71fd1-762b-4190-8b0d-685287e49e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950b4124-c944-4569-b56b-6fb979e19bf9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff429ec-37fa-49d7-ad10-4df08a4dccbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e45390-a66f-41ad-adcd-4a561d27bd9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe0e314-f018-4e1c-9077-bb3f13117235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27a1e4a5-fedb-4224-bf19-9c7f6a695f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a03694-8e91-4da3-a3e2-395524369804",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d888104-3cac-4f07-a03e-a5925bbe9ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee70a600-b575-4438-8a24-5b51646dff3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eb6bb6-03ce-4039-a14f-536f5daa456f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b5b79b-9a13-42b3-9ca3-45934a7579c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4532935-7506-4ee1-898a-8420ed5965c1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a04124-3ba6-4b29-be6a-b9c9c151e144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef99f60-7018-4d58-aa99-a70c5a59349e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6114946d-4215-4ab5-bd55-f545983a686d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd71e75-5538-4ae8-9b46-2cae5029f693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd781d0e-e535-4740-ab34-cddfde6bfe3a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d0808d-adab-4117-9929-f889ee4bc0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b7ebde-6bec-41d1-8532-3beb19efb2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911cda2a-b0b4-41e4-a36b-78bc5814c5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "dee49ab2-3b27-4927-bd2c-98fae72b1bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80e5b2e-305a-480d-bd8e-7fabc9248d86",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebac77b-c521-4c3b-8a00-4eaea60ac2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8245b179-62cd-436a-9fb8-df1f40c69060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d02c35f-957c-4ce9-bfa8-bbbb15bbc8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6ad8ba-747a-44a7-ac03-e64a7dabbbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6d7ad1-ad14-42ba-a33d-f8eb8c1955b9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bc0743-c089-4aa9-b768-7b8c3215bd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258553ca-d280-4fe4-9508-6896169aeed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c84b62-e64d-4596-8c1d-67934b0ceafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d758700b-c5db-4703-9fe1-b0b6868180ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2ca996-87f4-409d-9566-39546056e40d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144f546c-934b-4945-880a-f316eb6150c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a762d1-d64e-4de9-ab49-da87f34edf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c577a0d2-2dcc-4ef2-a261-195b69d07721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac433e63-a2ef-4ed4-af1e-d53098271a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f82a8e-4faf-45a6-834e-60af237548a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0c9a3b-3e55-48eb-bedb-78b3c8d03817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d20d7d6-ec94-4e6b-9175-86d912f9f8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2f8123-e07a-4570-8839-a95fec897b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfb9bbc-d561-495e-afeb-07c2bcd1a807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c66c9d1-391d-4bb9-8b07-550a5dc9f41b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b76f063-db5f-45eb-9d34-c3c2c2154233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35dc1d54-8d24-4073-8021-5188e29b2680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f984544-775f-4449-9381-c98b349cf8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e06e9b-74c3-4141-9fd0-aa71c0375945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777330ef-7ed0-47da-a0f0-fb67805fa3bb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d48dfa-b2df-441f-80f4-3068af1672d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54264e1-9b2a-460f-88b4-a82d7e749be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee34859-d3b2-4ac8-846d-3553f124c844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e81c90f6-6034-4201-b4dc-7fb65981d747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0780ec0-3e58-4247-a7cf-63b87391072a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3380294b-c9fa-4338-b7fa-e079a6a5a84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df39b098-0e02-4a79-9e0f-b7c293e51086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47ec8dd-f589-4af5-bf60-fd67216c1699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41761fbb-b99c-4729-af46-eaea612e9497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a715f4c-bcfb-43b2-bde1-c84a2d134f2b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7c386d-5ef5-4b5d-9def-bf7e79efa198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbd2a79-b595-4579-acf6-c50aac018a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de45df0-1e58-4d50-8581-244a77f2e880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce62b20-2d09-451a-a1a3-e11bfccf525b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0b67d3-54ed-4dff-895d-9da1daea9ed7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f1c243-c0f2-44df-aa12-c04a44018cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d49891-b372-4726-bdc5-c80f3b6fd6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb1d390-c167-48f6-b5e0-3f9cf7599bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2955f5-c0ac-423c-a3d3-422ab5dd09e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111d243e-0eec-4df1-9609-f7502d04aca2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef263ce-4abd-4330-bb4d-beb4728dcbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bcd779-f0f5-44c3-beb0-baa7ee3fb7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe38231-9948-471f-b46c-f07221a44a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67eca2cb-ed90-40e2-a248-b3a654bae5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e591efe4-411b-41c8-89f8-299ac9d933a9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eede300f-786f-4eff-9441-93c97e472b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409d5e14-43a7-4d1e-895c-690769954baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0650084-2dac-45e6-8edc-9d06ccfb22c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55c9f8e2-92ea-4b53-abcf-2d8751922928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df13871e-7757-4324-a592-27046b026eed",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8ef265-527b-4bcb-971d-01e87f7d9bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8fbcd5-d833-4dfe-b705-d7e366c059a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036e9d6b-d203-4738-9840-32fe40f94bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae976916-e485-4227-828a-afd721f61a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7867ab-b1c7-48ec-9445-99e96593e3d8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b55bff-0ddb-450d-9f89-42d6a95b931e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229ce119-c680-439d-8773-d6ed6e4db738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738eac14-27fc-4b65-8837-6eb3b82318a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b10b7bf-69c9-4814-9461-1d16509b39d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ad4eaa-ca63-4528-9869-2f759f8d65a6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ccd0ef-f85b-4051-94cb-e1d29f637bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d70cc4-8e24-4594-a63b-ae0d5daa3040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7225e1f-7de1-4114-9a73-0dc8f3846afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d998902-cf5a-4a25-96d2-b5eaacd5e955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99aeb6db-0db1-4c1d-8dc2-46e48d566317",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b80f17-70a9-4dff-ad77-0fa52e521e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98efd0b-8cee-4ee7-b040-cfa0d5abc003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2d2405-ee8f-4d6b-a8ca-bbbc58943f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55e94f46-fdb0-4480-b04d-f2256f01ae36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed444eb5-ce17-40eb-b7c0-38e9d35215a1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8877cc74-c70f-4d6d-9f2d-ac5b632bca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc1a3ce-bf95-4890-a17d-41bff72c17d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a560e62-0853-492a-9bf1-625087bbfdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6201f63-ab6a-42ca-9fac-2083109a925d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8681990-ddf4-4386-929f-bc8a58ce6481",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf323ecf-7333-483d-86b7-405d4bc39b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1bbf8e-e30f-4feb-a209-908eaf72d1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d626c79-6312-4e26-a46e-d9266ee0c85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad68320-b259-4478-abb7-89ee266e70d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522de7c4-5297-42cd-9593-592d5ea9280f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4795beec-6e52-477b-8e54-172559158954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d59686-993c-417a-bf83-188676e55efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c281ef1d-e08c-40b4-ac83-20c507c97b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac286b14-7f0f-44a8-91f4-df0f23c90c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94a430a-551e-480a-8914-7f13cf9a38d8",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3900e5-28da-4e53-ac1f-c6bee78c3f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd2573d-9657-4ee9-a000-33eba58ec4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b62ccb-aa6f-48b9-b212-f4d1a60ae8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad9b13b-3ef8-4495-9d8f-f48329f8b4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772e1a35-592d-40ed-ae93-0166025a20d2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4260149-07f5-4f9f-9558-5492bce37036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63e9588-8365-447c-8846-9b86bdc1c1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee80c74-8d4e-45d4-9871-ed624d36f3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f09db0-7c2c-498d-b474-463bca0a4398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93a08e1-4c8e-4907-af79-1f1aeb930c2e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f74f38-569f-4f83-8249-9607830bc9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df00910-554c-4594-bc1e-cb014e2cd7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0159813c-1aeb-4a07-af10-5f452d09ecf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5c5a58-af0a-463f-92bb-bfbbd38a390c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec079479-f777-4be8-9cd9-1d716b18b659",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8222d2f3-5d62-4138-8014-7a9473323d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d837738-cf64-4ecb-b6a1-f017641ad1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0e834a-7362-4183-ae8c-a2575405bea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e85d227-a50e-4a0e-a0ea-997db38bfd6d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "657a4ebc-d382-4c7a-bba3-b516dcfe1963",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21daaeba-eed1-4936-9e8d-2baba24f4d6e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bb84bf-7b8e-4c26-b19e-0b8a097bbd7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f84ca1b4-6c39-4b43-92f2-1f46a57c07f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61fef14-8856-4001-8922-d6276684226b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89748096-d8c5-441c-90e0-44a982bb1f67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "692734b1-eece-46fe-aec7-9e0b0370f2c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c36b96f3-43d6-4392-8434-bb15170820f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01d6c80b-0f7a-4e87-ba87-18cc5aef1c67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a77ec706-1f0f-4ee3-b124-6698b4374099"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcffb624-041b-402f-9fb5-07215ff4f4c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be257507-8847-4d3d-ac7d-443836e47423"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "155d23c1-ebe7-453a-8b3b-1039a8cc91a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d624ed0e-0272-4518-a07e-3b92d4a169ce"
            }
          }
        ]
      },
      {
        "id": "c2d5a001-af45-4552-88dc-00954ef3ba19",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f340e495-6a17-4451-823a-7cd78c02b880",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af875e68-ca13-46b2-a81c-5779120541fa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c7dbba0-da3e-4cc1-a0d8-d89929e0e9aa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507a877b-39a5-40c8-a70a-59f9f5106f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a29c6f-1f03-4a5a-b0ff-45bb7baa665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25923002-b405-45de-9bf5-57ff47a89a92",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febab17d-ff93-44ec-9d82-6dee9d4ee1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e0c6dd-9431-45b5-96cb-3334ffc6f750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7912926-1216-497e-b8cb-ad1ed113d506",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15dd501-3ce6-4ab6-8a56-6d0c127144ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d81d38-4f68-4610-b2c5-6523d6276262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f7147e-2707-408b-838d-d0231380dc27",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed7119f-14ca-4489-8754-35313576233c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea1f9d1-1311-4140-ad2a-dff0b4e4bba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f004ebb-032e-4bfd-b326-f1eac283b1ac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a35b33-6765-48cf-bdb2-84b77d51b675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a841c9e8-47f1-411c-933c-8f4d1b296e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cef283c-1e33-44c2-a2d5-8ee6410c1484",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e090acc-b5e9-4109-96d0-b5db1d96aa16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7466288-6af9-410e-b0a8-7f020f8cf3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af6e3f6-186c-4270-8a45-43fa1ed491d0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6756b17-52f2-4b51-8e91-d74e67665885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e9cbad-84d0-40ab-ae87-66d8e789da3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e57baa-c041-48f6-aee9-92a687a2e4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1306cc0d-04fc-4482-91c2-68a0319d863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1e999e-cd19-435a-82a0-403585deced5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb57069-eeff-4092-83df-c8d3382824aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3feff3a3-e4e2-4303-8cd4-7ee842dfb62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa65f4a5-f5c0-41bc-9a1e-1ae786231571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f238cc-8ae1-447b-9a9c-af403b5ed9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6698c08f-4b51-4a31-bff6-2c122ed6ef34",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64094d78-e961-45f1-9bc4-a85eb8626818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96851cd8-449f-4adc-81de-fdb4fbc430ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd93a7d6-a0cb-40e7-b55c-0dc55641fb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1477e1f8-0c1c-476f-9103-29d23dec857e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f008f0f-3bdf-4320-b621-dcad83847b0e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b1639e-df96-4652-a61b-b40f5db5b857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6868885e-3367-4559-8640-6137f0df472e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f00d34-9943-493e-8366-ea3a3a81ee5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3346679-3946-4aea-8b7b-c3573fea11a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581ae1a9-efa8-421b-930e-d25e9ea408ab",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3f29de-8cfc-4585-944b-91ca46162173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24ca2b5-fa94-4737-9c52-0c474528f584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4954b7-b83d-40fa-a3a7-0887e3fe53ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c9437e-f60d-45ce-8553-214631a0de4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be79b6b-c1cb-4b4c-824a-fa7906832a96",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba31c57-6167-4ff0-bfdb-820a11c2f326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f66b64-f140-42f0-be50-f58b49825bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941ef5c1-a533-4848-9f0a-9cf81f46b696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cc3e76-336d-4dd0-b2b1-a68c5da508dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14053fd6-56ff-4894-aff1-a7a49f83ede7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4aab3ca-c201-4b36-a647-50c2f2940962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1fc5a80-8cb7-4e23-9f20-200a5fbccd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4218be9f-6420-407f-8029-394156c38f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655034ee-5fe5-41de-8b5e-ac9a30f0579d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6e9126-a0dc-4653-baee-4c7d32e1bdba",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651d2af3-5b98-4e14-b9a2-c6e91a33bf57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b65bc45b-d27c-4e77-90e9-ed4228a84086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25fdc30-bf5a-4f37-8a49-90954d7a36fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b75b89-1b5b-4146-8a19-073e3e9f763d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92dff548-a9b0-4a76-b80f-b3302a3a4553",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d9bdef-4fd6-4eb5-bf6a-d8c6cdc7d40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e446d191-2c40-4bb5-a1ec-ea307524575f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251dd72a-171d-4d71-a7cf-eaa1e6a0f219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e29d329-e4cb-4cc2-ab06-204524afe6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fc912a-0af4-4caa-9d7f-5ebe5e942a34",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4666d3c-e2f9-448d-aecf-0b52c828e1c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd12adce-793a-4915-9378-0c9b7a4ac4c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095b3979-bec4-4bad-8d00-2aa53f5f5161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8272a6-eca4-4376-bb8f-f020122af9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398028d6-8d82-4b4f-9cfe-d28a5ec3e101",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bfd896-27d7-481b-8bb8-020ad79730bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ff767b-78f1-4a2a-a25f-26d6acb8f284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461e8e20-ae1b-4d6a-878e-26218b1f19cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5f0c88-cae1-4e02-93a3-3a88ee5fd36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd5beda-b61f-489d-8238-bf36b8f1ed5b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c181dad-71f7-434e-9951-90e204eb9dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a629b5-ec75-4f4b-83e0-d1b4ea6b7ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db58dc5e-c594-427f-afca-5164d59f41c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d59b9a-e1c3-42e4-91f7-cb27f059d970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df17ba-1244-41b6-8f57-c75ca0132673",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dcd801-f479-49be-8968-39ce0298eaca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5cf66bc-46c9-4006-842b-86c9af79c341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970bcdb8-e093-44b6-8ac4-b3271d546a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d53ff24-c9e4-4a20-8a0c-a3b58617bd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860a5712-6e49-4742-a51e-7abbb054240e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec29460-ae6b-49d0-8068-8988492fb964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b709c9a5-add9-4be5-881f-d6f85d11c86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aad4ce7-b7d8-4b41-8afc-92c4b5072011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c9aa26-15f0-4e24-8ff4-b683dc680980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b7deba-ac60-4d6a-8a7b-8974ec53048a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402df3c2-6b61-404c-b6ed-43b09fb10919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d6c12b-6d93-4c21-a984-215e265f99d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268e1e00-8378-4226-af45-f61c802361c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f42a89f-df65-4c3b-a912-77a1945de845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f78877-40c2-491f-8d33-810d891738f1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c193466-eeff-412b-9739-2f035ddd003d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fb4602-d6b2-468b-8840-c746d0a08687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0ceec3-1667-4bfe-9a70-8cc2943d7739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0c3975-feb1-48b0-8df2-8558c61d85d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c0b1e9-5e5f-4e3e-93d4-0e98e1183810",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f0af8b-e336-4142-9df7-cc76dc14badb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98ebc4b-6295-41bf-9ddc-7c94a7f0a3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3b4445-4952-4d9b-960c-b89ed9b12103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6164f84-e9a7-44e1-8403-ee4f3e4e359c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42986580-8840-462e-b7ae-319692dc01f7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342d5239-a8fa-4290-aadf-81a28c7914ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e28d14d-95ee-498b-87c3-faaa58d01347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e64111-911d-48bc-826f-0354d4320b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4ea0c8-af94-4fa7-b2e9-501dce943bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6768463f-575c-4da6-be82-fd3f2123f522",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d32cfd-291b-4e54-bdf4-46397a70cf6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4261dc7-1de8-4b50-9b6d-ae34c683cc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3421f1-a781-4865-846d-70fd889e552e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdeeac0-32a7-4bb0-816c-8775870aac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc6c03d-3586-4461-a5c5-b498b878c9e0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e0bd99-4b2e-400d-9a1c-661b77e93c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09726dd2-43e4-4640-93a5-182e4de89226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2908ecb-b3dd-4234-a1fc-2b24e1ba7c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0af163c-a7cb-4a75-84e1-ead3f33ba14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93361ab1-a7e9-4117-969a-8479d7771d83",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a77c2f-857c-4e0a-9b9a-0fe25603d5b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c9547e-b10a-4855-bb64-cef92bc2cfce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3692956-46e9-4020-a9cd-87515c506612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56b71c6-214c-4a3c-93f9-6799055f1b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a39a5dd-7830-43c9-84ce-8a59b4107fa7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3bdfb1d-4cb0-4230-a37c-c8b07d1aee3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04704795-f277-42af-afea-283dbc8aa996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cc1aac-261c-4b67-9f8f-661f36647db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e1bbb0-3b73-4eb7-9c94-3c4f8c9ab74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b7bd07-ff0f-437f-b3de-18dc33c23393",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf897ce-0865-41b3-9beb-0eccf5fbd076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf17ce8e-b8a2-45b3-b2a3-a9a9ee050943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6181a0-b75d-41bd-bb92-8e2a9ed2e939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b7c1e0-b21c-49d0-bbf1-329ad8664d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b5552a-efde-4130-a578-9f3d3cb1e3e5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c33572-ff04-4778-acd5-da2c46c0b252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b077b14-e256-4d99-8d30-819c312ece35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f67e453-3434-433a-9062-bcf3e38f8434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6139d06a-0c62-40e9-88db-fc589132e731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988cceed-f86a-4dcf-8471-48aa5500a3cb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14b11d5-7719-4dae-b01f-56ee01ad7b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76cf8b91-a189-4ac9-ab62-85e87c19b923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51e4e8c-4544-42f0-a8c8-2a449596174d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0809eeba-75a9-434a-9f18-d14d65d04b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb277dca-83c1-4550-be20-558af793de31",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca0a8c1-6d40-4f63-bbe7-337eaa248ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3479645a-2bd5-4a1e-9a96-8799adb7abb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b44ca-31c1-446c-b793-ec34c22cd041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f76aee-a2ca-4f06-ad3d-4fcc61aaa2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cc9078-7e8e-4a85-8b97-095e4c5cf77a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd5def5-82df-43ad-ac8c-44858ed1de1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cdf0cd2-6647-4092-9bb3-bf458ca56718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7170de27-f586-4763-8b0d-5b96ae3c528d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c184a5-e8ef-46c9-b52d-070bbc7545bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f55312-3fc1-4988-8d64-5fa51bcb5c39",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf648e6-4bf8-4238-bfcb-8ced2ca80694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "932dd55c-3dbe-4278-bebf-11d8fa9959ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6fb80e-627a-4367-bd93-b8a2b9e40a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91ecbc2-6508-4cf5-b07b-625653b166e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db49324f-fa59-485a-bede-0c6e1b0e7613",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b363062-26b8-4d9c-9585-9093f2bccfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91875bf5-442f-4020-bb36-af4a9ccbe83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928867c4-d9df-4381-a55d-928b99b11e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df408f6b-7109-46a4-9e2a-f7ab6f4102a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacc2ee6-2605-4f63-b305-5275ef1d6799",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79ae360-2dde-42c9-8b16-b396d00f9883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba92552-e7f8-4980-b7d0-ad011ed86d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a395954-10af-42fb-9b56-f49494f2a899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b777d7-d867-43f1-a12f-9a399c365d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a676b6a-c616-413c-b53c-ef257bb15be7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b39a44-620f-472c-9ba6-8765b3809e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bfebf3d-7276-4d64-863e-4db13f265612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95ec878-8b01-44e7-a86b-d28f2e6be648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fe194e-896f-4c86-b006-9a4e6875ebe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea89eed-c0cf-4de7-bd93-fda778a99692",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4a90dd-634d-46f6-a16c-4ab30b00490c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d15d1db-296a-4917-8efe-6e3cef278a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3497c94a-5d4a-4d05-9512-784effef09db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2c5445-3f26-4562-9969-07162a7a577d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef19b660-45c6-4f37-a016-2a94caf435d6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd72e3c-c4cd-4d40-b868-f7d2658debcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e0a6c3-1333-446e-b50f-f9a782cf399e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7082af9a-e02a-408f-b109-748bd96fd718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a110c08-bbda-4ba9-a320-6e8e92201566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349856d3-c3f1-4184-9ebd-ea43822e39bb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d8e9b0-2245-4c9a-a0d4-bcdb22b30c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f339956-4872-4f68-8879-4ec1ccfbf8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eb5f4f-b310-4207-8235-fe7276d397fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdbd2cd-eeb6-4691-93ec-6cdd0c230aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91740864-2f26-45b9-9a01-01b6226b4fa6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa4c703-1a01-4e87-aa19-c87ec2c889af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8570d3e5-6a03-4f98-996a-8a27c7d29a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e2ade3-0667-40d3-a16c-7f8bec66fd49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb6bb1a-f716-40ef-9b24-cabe9b7d4feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61863b2f-d194-4dee-abda-87b54d3123d7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd8aa31-5859-4750-8913-c2bea343811a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0821cac8-1a39-483e-8dc8-af99110431ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cad0dd3-31dc-4264-b1cf-995a3481fa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d60519-3600-433f-b65a-9d69eb174371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4ef199-39ac-44f5-9859-82d7abe7b982",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc246b9-7b44-43e0-bca3-bb8b5270d51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42ff165-65bf-4515-b63a-56ca7120c41f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904bdfad-bb37-4b6e-8bd8-973901efb3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c549679d-9281-4f2f-82d3-92bd083840ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1b223d-5e7e-43d1-8229-e91e4c2d23e1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e145ad3-3270-4c08-8ae6-200769a0f371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4805546b-eb4d-493a-b267-23bb556867f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fed12ae-39af-4993-9ae4-40da4aa2a5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ec7ee4-3777-47e9-8f41-badb0e84df23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e20982b-75f8-47ff-88e0-a948ea1a8111",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7213653-2d7b-4e0d-a0c2-56aca525720c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985f25bd-6c34-412c-9ccc-a5660532e036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1eeecb-7e74-4f8c-b7ec-b02128693a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc00f6cd-f1a6-4ae6-b5bd-5b9209bb77b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3264eb-cc7e-4055-944f-1322bcf1526f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c6ee0c-d951-453a-86fa-1ddaa74449a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3e9577-da7c-4391-924c-823d024c9703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "309a82d3-ea94-4dee-9a20-af13951a85a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458d5751-b5eb-49d7-b8c8-d906e6b2c99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f80a45-0d03-41bb-a9de-154d12d9704f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3161075f-2ff1-4e03-b830-26b0d8ad920e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ffe63e-8a78-41ca-a3dd-9d2eeeeff881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32500c2a-0e9b-4bff-9c5b-108847eb6840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d4ef3d-adc5-4227-918c-fe746c8185b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e85e20-ad54-4a7c-bb30-699addcb741c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775a6d59-6a59-4a44-af12-6ca4fcdc7d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777aa68d-7f07-4edb-b9a6-b796635b973a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915d6224-461a-43b9-83c1-5edd1dcfc2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0f44b2-e2e4-4756-a738-8095c3fbba7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a42c3fb-62fe-42cf-a123-407039b0863c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4808609-fe43-4456-ad72-d8debc390f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b88c36a-cfee-4129-acf4-ea555f042c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017ab7e1-6e8f-4391-82c4-e2d7e21336a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd14c0c6-92e9-4b33-977f-1c1cf17c1b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d43a3b9-881e-4ffb-ae4d-8f71919b7550",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68990813-33dd-47c9-aa4b-f2b47c877000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991fe939-4002-4ddc-b55e-749390c288b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a1a6c4-8fad-4554-9877-1259b9751a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac53808-6edf-4174-9d73-6bcf096c9705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f5d589-2a56-40d5-a397-55897bcb175b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17fc343-8faf-4272-adc3-86cea99ea8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c51a4d49-98e0-4ab2-8ae2-c6cbced4a17a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764cb1c4-1a3d-4420-a05b-1badd3d8c5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb9f0ab-775d-4886-8031-2b3d0996f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0577ab-df15-42a0-afbc-8b1ac03a6aaf",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732a6492-5dbb-4114-b1f2-1a487d2717cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d854c216-514e-47d0-8129-3fd156c761ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7372e0f6-dfe3-469e-b421-50648b34e640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d786d06b-f156-4e6f-a590-a1b6a2bec8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd668588-1348-414a-ae9c-ad15225b3914",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87bbc5a-72a9-451e-89c2-df7c35d24c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee44001-d42a-4cd7-9829-147b0fc291b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a83e22d-1982-4869-9a88-373684177b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a3a969-40bc-4bd7-b9d9-f5878d7faabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5f139e-d00a-4b78-baf3-410367305cbf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315b385b-0b4f-47e9-9f94-437b2d89ec47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014013fe-87d0-4c9f-a517-25981881120d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e18c35-1944-4733-8265-809c176bfee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecfdeb7-211a-4260-bb07-cd61da101abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63be4d3e-90b7-4b6a-a106-5ed9fd90a5f2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6221683d-e823-4bbd-a2ac-ebd59061824e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7a3426-1c1b-486d-a328-368b2bddc93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342d3337-ff8e-454b-9e58-8a331f9c7d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf33ccb2-046d-4f9e-8081-d584dcfd1908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed16e4d1-2adb-40dd-8672-700527e1aef2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d16c0bc-d316-419b-9ebe-da211f3076f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f156f81e-9e92-42db-868a-ee8bf23ed3a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4397f19c-b424-40a6-b89e-9f7afaa575a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542c9970-34a1-47b4-b133-3606868e64fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00b5978-827c-4e18-8c39-30018267c240",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1bf9a4-5992-4dc2-ba8a-9f95a2243f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9267dc-3939-4457-8376-f2596558ea78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d318cabb-a391-42cc-8ed1-852238919906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2648235e-3dd9-4892-9fec-d6606c976619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e454ad-9874-4591-bf71-6ea6ae0a448d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9e7b34-4426-428d-a009-e95095976789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebefaad9-3d63-40f7-a1bc-b0501c74a830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e1f213-590b-44c9-8fc9-201869f6c2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee00d6a-3ec3-4ffe-80bf-e63ca045f4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8cb3ab-30f7-4dd5-88c2-d797b14bee91",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643ae6b-b67c-4924-8f75-b65df12d3cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7cdf64-e7b9-448c-b5b7-010713737622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdbc9fa-962e-406f-927a-9bfd348050d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc974554-ee79-4700-8c5c-9633571d8285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305a04f1-3888-434f-818b-109b1eb6736b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7f33ff-455e-43d4-8424-00f398dafd7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5650b822-a466-41be-8946-9296a403e4c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a59a74-a9ba-4147-b46a-e5fae46e7c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9cf921-4ba9-4387-8655-f60e7aabb0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df913d2d-e549-42cf-abce-291e20eef951",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afe7ce1-1146-45c3-a1a2-2de6000ed424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898dd79a-fe27-4c96-81be-dca732e93fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd060ca3-1339-418c-82d9-32ceb38231c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311f4190-d1eb-4ebb-aad6-545828b82634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88f09fd-0746-45aa-a9fa-e28cebe27d15",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ba9d5f-f761-4204-9e74-7fdf39aa2ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a446e3c-379e-4513-aee1-406aab002810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43942d54-5110-4ef9-8a57-e0a40fef17ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdbbc30-cce1-4f1c-825e-1285126d065f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a863cc82-5f14-4934-afd4-1d65bcb37c42",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f8f665-a3f3-4b78-9ccc-3f84b478e8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9419b4cd-cb9d-4449-92e0-de1df94455a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4a00b2-825b-41d6-81cf-fa6ca77e5cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3778324-5f69-4387-8e58-4034c1c2fccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879dc9c6-db5f-4753-ba2d-ad42667f57f1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6298b093-5432-4d16-be11-62c56beedf11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d875e784-2ba0-4aeb-a561-d1375e894dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64b00ab-5279-494d-bbd9-f514be0c9e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6488e8ce-b25d-4d92-a8c2-a64f89890df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139e9b58-dd9e-40bb-9e6b-6545a3a022d8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476ae10e-c112-426e-a0e4-608122d66422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b72380-f9b5-4e01-b2c8-44012ecf9d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d3db79-6676-4108-a8a9-0bdaeae49d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174d3cc1-72dd-407d-83b3-a22d3cd51048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ccab87-931d-4092-9b51-bd426c1f41d5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abf96d4-fd07-4917-9062-351bfa12a55c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab8ee003-afeb-4654-a4bb-8c3dc31294d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef1e3a3-64f0-4c07-b69d-f4d6ec53b98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1b0d74-6366-4707-9cd1-f563523dc293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259cd6e3-985d-43bf-9c91-8b1277c129aa",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db0ba54-f15c-44fb-bfe0-4c96d9b3828b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e58bea2d-2b1d-456d-8661-24b92039c612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eae3ee-56f0-4c49-97ba-ae6d5d8be8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fa3638-28a6-477e-8827-87ab38f7928a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d50fcc-766b-4138-a076-eb5acc27bccf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af383302-2553-4013-8063-e1a0077fff7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "635b29e8-dc0c-49dc-b5f8-a4acd2d472bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652840a7-53cf-4ceb-bf32-197d2b4bc8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acec781-c6d0-4961-88e8-587872f1137e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f66e2aa-9e6d-4505-a685-d51083c97d87",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50211c5-12c3-4421-b815-b9fa4f52e9dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2dbef51-c844-4fc0-8da7-365b3de7267b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2339bb39-f958-4fe6-9791-4749129fe418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1205cd-c47b-4d40-94dc-eb6f6fd91a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c8e3cd-7194-45eb-9759-583f7cf9e890",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454bff56-a30e-4c05-b1e4-088c58ac054e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff21b70d-52e8-4abc-aeff-deba5a275baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3a4fe4-2bd8-4342-bdc6-161940d4d674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17530a42-1d97-458c-9177-af81c6bad347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4fe1b4-6bfa-456f-abad-4c766f4d2526",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0020ed2-e9f3-4619-aa73-356a7eebaef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c23c1ef-4aad-46c5-8415-55e298826c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c543e670-372a-43d2-89cb-b4a64c395af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b8978d-121f-4ee0-ae05-31623f3ec131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab83ba5-f3c2-46ff-bc8e-74c7d6652aad",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468c62f0-6368-4be5-9fc1-e0ded199390b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2012f1d0-b5b4-4d26-a926-c33a88efb019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d8f0ba-a86e-4348-9431-d834b2b98670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b880a18d-1352-46eb-bc8f-be99ab6e9b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a7a06b-9b87-4d6f-a815-07d52ebba3c4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcaf6a7-8d0b-40cd-96ed-e8efe09530dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b4dadd-63f0-44b6-a9cd-99ab333e9ed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6162aef8-74cc-413f-9e1d-f2d12e098b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cad7cc1-3f72-4716-8b72-df1e2641f94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc434777-a50c-4de6-901f-3cc4d328bea1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1359564-ed12-432f-b54a-6e13742aae81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019f1d9f-4766-47a2-baae-1da4971d305f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05314b1e-6a80-4adc-99c3-14c5659d0915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da88d6c2-1d14-4bcf-80c0-f86c232a4d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac6dfdf-1388-4f56-93f9-d6f91f31efab",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1111efab-4234-4730-bda7-cfe15db31136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4664e12a-87c3-4dee-afaa-a8ffb8d89014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddcdb95-a430-49e7-be17-8f6e505847cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384a246b-f5c0-4203-a5a0-c18d8ac1bf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab65813-f843-4602-a3bf-cdd7219136dc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4d401d-41fa-4f15-81bb-a3332deb75f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05f1600e-190c-47d7-a49b-2187a7ee43fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256edfb1-09e2-4bf8-b8f8-2a099ecaa4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12791fb-6cda-4af8-98ca-1399f2499bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c0f306-5b07-46fc-bb5f-b0240b8849c8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857ed603-223a-4459-ab78-37494b78896a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a01421f-b9f1-43b6-b2c7-46119ff0e429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e703f11-976b-448a-87f0-36a1201f0482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902aed00-3ff3-4f16-a702-689f0c89e5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e503e6c-7684-4c96-95eb-9c249c7a109d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df4f881-d360-439b-b2ea-c27eae10c62b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17abd93c-896e-4b1e-b3e8-a3fd8fde2510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa6e7ac-aa62-451a-9ce6-f27f4d1239da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f61ff3-a693-4bbc-b162-12009468ad4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927e5352-3ed0-4510-a411-aabfd98c50d3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8077ec-9fe6-45a0-b54a-284369f08527",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2e3feb-2d26-48dc-824d-5f0a4ec80e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f61051-ae53-425e-9a5c-655c6e23a552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ecc6d2-418e-4446-8b75-52d909b82d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c197d873-3d3c-4287-8b0b-aa032d7d7321",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eafecbe-5819-4a65-bcc3-a1f2acf74e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d6710e3-3e6f-4b95-bb6a-7a090067dc56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92b3b89-4090-4a45-88c5-e5cd8c5a766a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed31671d-f991-4e77-b6c4-2880e9868e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c072e44a-f264-4a7d-a80a-c88f303343ee",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c6b89-a072-4e6a-88ce-1fc1e79219cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a44f984-2de8-49fe-ba04-00a21fa1f2c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdb2905-9ddd-444e-ade1-72e8023ac425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0fd8cf-2a40-4d97-a1a6-34552e4296dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9033b065-91fe-4091-ae39-93f9dc8f3efa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2beed07-0024-429c-b065-0f7f2f7253b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "032f731e-af74-4c2e-bc8f-57540b4a7d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ede3205-02c5-496b-9fd1-7e57f069ad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432e41c1-f6e2-499a-a37e-3f39b7a36541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5b9471-a7e5-4c62-b8a8-a83d12c3d538",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cf9baa-a7a2-4796-8114-89e8d754c1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "445d5b38-5551-4575-becd-9b8e09d5b660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8513f5-7510-421d-83aa-6f4fb0b3e306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b485fe1-80b3-4b68-96b2-2e658948e8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1dab93-b684-45b6-a2fe-7ff4c0ae5365",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47a14bb-bce3-448f-aa05-9431a1d5bc28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "416ef3a9-8e1e-41bf-9239-7e190d41fda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620f2b60-0ed3-462c-a4a1-69bee8512735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba10c59d-8176-4433-a9a9-c8210f5e38ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d292cfa2-3c46-4b4b-bfd7-d70fb3f01c92",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a79f1f-52c5-4006-82d2-a92ea2339489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eec44b2-1695-432c-8a62-ed10d4e81098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f90479-9876-4e2f-ac93-7d293670159a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07bb51f4-9fc2-49d7-afea-1c1f0c85ced3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0902beeb-cd34-4b6f-aea7-173bfc8c5c5f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf06bae-1bfc-4c5c-8619-008cd72a3667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730416e2-e60d-4281-9816-22e066331615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2260733b-b490-4254-b570-4542f218d9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3072a3-3586-466d-996c-1f7ccd8e0064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1638690-44a0-4784-91c6-0df13c4ddfd7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623b7919-18f5-439e-88c4-cee2871e30f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c0c340-dac3-4d91-8783-d79c4f32002c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b3fcd0-c271-403a-852d-8faf4b1c17af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d36fb9-f4d8-49bb-a71e-4a09799e3f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e947ae1-1017-4bd1-8fa9-be1163c9417b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1db405-3b1f-4953-8bd6-dc83ee1a2886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e0f006-1604-45ca-a382-2450cd5070bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcff1973-9b22-46c6-91b1-cc8a5f2e35dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f00537-7576-4e2c-b6e8-9074218eb56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb50799-8051-4fc6-9be8-ae64afc321c4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9cb06e-c544-4ba8-9d89-e9ab8e870f82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af92d1cb-351e-4479-9b9f-fb89c08fa8ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed56aba-cbf6-48a6-9bcc-3121d8c14a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e55cd6-7db5-4c1c-aedb-8d8fa8c5e94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cc9086-b222-412a-a027-e5402aa20827",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6cbaf6-d229-4cfb-812f-120f40d32b0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc8eeb2a-1878-4365-9272-8d924b6e3393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2050b9b7-be09-463b-9013-93cf492d68b2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae255b6-4443-45d0-9f95-0e4a1f833823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31020a74-44be-4adf-a952-b10289c4c95f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03e94d6-304c-41ae-85d7-24ab1ce1c79a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5059098d-b029-4c11-9239-065c2700afcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52cc4f51-4747-4b85-8997-3195ef77e491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dcee7a7-f71c-46ba-8ead-223b5e089bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079cce39-2dde-4705-bcbc-8467324ff826",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adffa22b-27d9-4961-9559-4217bfee81d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804f8e1a-1230-4ca3-a1bf-0a3408a83a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3be0ce-10ba-44b5-8a4d-9424d4d95abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0097e611-b79c-42ab-ab44-009b8eb2b7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dc4973-10fe-4f4b-a1d3-9d460ca16016",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ae2d74-e91b-458d-b7f5-ba1797b6a32e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33a33a9-a272-4aaa-bbe4-3760e04aa860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facd1561-a01f-4626-b37a-b14ad2f1312e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722261f7-a8f3-4391-b0e5-a9f6791a4c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c197f05-1aef-4acc-b06d-8791b3e3dc26",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ed7b16-f7cc-4df3-8913-949edba8a26f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd0b6bbe-d674-4acd-8c49-d1cfc41fb699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1176fc7-f48a-4bf5-8cf9-d3edac251108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf06145-f8c3-4c47-98af-c79a44f50c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79c91af-8207-4049-ac46-4078cd2f272f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3303bc83-708b-4431-b46d-8203cef74c38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b2ee345-3e1e-45b9-a0c4-27df5280d877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cf8d4b-149d-4224-9540-b9f5fd1b4796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7ea395-737f-4a92-adfc-cc7e4f733728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8fe51e-7c3d-4cad-8a7d-34e95d53cad9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f5948e-634a-4e5d-914c-7d63871c90e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99da8327-e90b-4950-b269-ed54c4f1cdba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380db2c1-ac9f-4734-92e3-133b7163c9b3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90737381-f98b-4b4a-b616-c31fc7e1cf1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f62751d-3359-4122-a061-4d1abc889a1a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ecb680-f27f-4002-b5c2-036f50f531b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ecf73ce-27c1-4f27-912d-3840959b0b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be795703-ce60-4608-b453-dee307e64349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87f8440-9a9d-4a3c-a5b8-b97c7c5cdec9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c941d356-e5ae-4403-ac3e-b03166c7ff1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5ba7848-4e8a-4d84-a635-aedab68b93a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "731733f6-d24a-4bdd-b1b0-05e5288fdf47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9133137a-6263-4201-9c50-22f219101245"
                    }
                  }
                ]
              },
              {
                "id": "d64d763a-d2bf-4a7c-b3c1-e5b9ab0d0bf7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c01b065-c245-4536-9548-23608b801e8d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e96630d-7140-4609-a4f7-377d7095a504",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9d92b35e-832a-4d22-ac8b-3ec1af0bef83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93063ce7-2385-4f24-a023-6317153f85fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a78537d2-517c-4c25-b5dd-6ba892f77fd5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cc3dd83-f4cf-4246-a2b5-87a6194655e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86013f49-daae-4974-b989-940432625c4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bb44a0e-af70-4c47-b59d-dc7fbe2ff2b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "529a66f7-41d5-4ab4-b2cd-bdba82adf6a0"
                    }
                  }
                ]
              },
              {
                "id": "99eab52c-e8a1-4937-b054-019cb715d8b4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c78612bc-2226-4558-a6de-f1950a291279",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3883698-d0cd-4e11-8a32-4c722e59b342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "66fd7a9d-6557-4af7-8fe7-f923ac7c413e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cbf5b3-c5c7-4585-82aa-f43d5e3902f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82850f3b-c2db-445a-8f65-8e7cbd8817ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7f80105c-98ea-4b85-a053-42a961cd8e5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "256a65c0-e0d4-4fe4-b942-97c1936f49e0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb37a58f-c9ca-41c9-b628-b0c4d7510a59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ba209f28-e218-4322-9272-b2e4d567a6af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7341526-b274-4be6-843e-3296617feb42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49a65d30-6a2d-49ad-8bfd-2681ac645f2f"
                    }
                  }
                ]
              },
              {
                "id": "4bb14f9d-95fe-408f-a276-eb43d4c4eed7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b6e7a82-5cab-418e-8472-1af007990f7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "13659348-7e8f-44a5-9da8-67101373e211"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12c2ecb7-d269-4d56-ab5c-a1820c9ecfa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f12cc24-1e1d-4d21-9d60-453f279f8227"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3db97b5-8f07-49f4-ad13-6bd0d1bf633b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f433bfa9-8166-436f-a64c-e362ea772bf3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0de2247c-d0e3-4e53-ac02-131b5d55b8ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7460129-856a-4afd-b658-02aa5709b34a"
            }
          }
        ]
      },
      {
        "id": "fe2d0838-895e-4fe0-8169-954ac0f1e464",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b2aa12c1-13ce-42df-9d36-8e50bda2f0b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c0cb747-8350-402f-bbc7-ec1c987ed065",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2cea9dd-67ba-4938-8663-4bfe5160b101",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038fbf0a-e477-44e2-a6ae-79fe633aa0ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a1a7ae69-9c08-470e-8ce4-84ac97d4734d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb89a80-728c-4ca7-b8b3-50790433d532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2664a83f-5d10-470c-b219-7692d634a0e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08f8e9b0-e120-4ebe-8fc9-95264a7996cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e14e48e6-af9e-4bcf-a913-7ce9fc45f22f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca17f4b0-ea17-417d-8dd2-41f9060ac0c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7874be2a-cba6-4920-b24b-cac4eca513bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01b51ca7-4df3-4e1c-b5d4-532f7190b741",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0df13ddd-69d6-43ee-ab15-fbf8ea29f1a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa634e65-25bc-4fb8-a615-1dafe6e19873",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11c3c1e9-6e37-430d-a6fd-2b4e36119f34"
            }
          }
        ]
      },
      {
        "id": "e84bfb27-2075-4929-93be-45704688d464",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e13656cb-3377-4b32-a2c4-5e4c599012ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fbde197-52fc-48a2-a314-9859528a3cab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5c13fe8-ed8b-4488-ad9e-fe820e7aaa37",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbf7571-1aca-419f-8973-4dd82ee72668",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83810fb7-2c58-4412-8bb2-c917fba98194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d43bad8-91cf-48c9-96e9-059255dbcf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2ea892c-d787-42a4-94ca-fc8e54b3f3c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63792370-652f-4c07-9e23-8d707e621365",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d29de28-7e2a-4fc5-968d-dd12b58435e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69b4fb4a-18ad-43fb-b3f7-88136974c996",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "366c9462-af5c-4c4c-b3f4-411e686bbf7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6cf7bb4-9a32-46fe-a533-356d5f962a62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e40f0ab-4668-47f2-8b25-25f1108c1032"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1199803-9b27-4f02-b8b9-6c745029358b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15225a1d-ee56-4382-92b0-85fe4079a624"
            }
          }
        ]
      },
      {
        "id": "17126a48-364e-476c-af7c-f120019c29fa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6ac96a40-42c0-432d-8dab-5e8d2cbf9fbf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2947cee4-ac15-4726-a3a1-901d1ce5e6be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a3f2592-3627-4843-8e28-35c41495d539",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e03428c-a7fb-4f66-b99c-a8862c8908be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b9c0b99-3c61-458d-91df-e75dd633953c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d375a58-bd27-448e-b798-24e44154fc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "173aa485-9dbe-4652-8b5b-395c59d908fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f0f455d-b415-403b-b8bb-0e107267b868",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f948c3e-29dd-499a-bf51-2edeeeaa8931"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "706aea65-6b1c-4327-b440-1ee3a6ae3ace",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5df88e39-d185-42aa-a2d2-14383c13bf44"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07008a24-f47e-4414-a1a7-d1766c9842e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d954cdba-1e9f-4b5f-bc92-e15b265cce0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "548d4f87-3916-4575-b647-110b8f7b4b92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74a57621-9d31-4032-a63c-748fa7f653de"
            }
          }
        ]
      },
      {
        "id": "6bb80866-b944-4e06-be5a-5591d441a2e6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbdeffd4-c524-46ed-a2b2-90d08133aad3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7be4366d-26aa-4b45-8286-13ef168f044f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "000cdbb2-372b-4c46-8760-b920ca09be45",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "215c9c49-0405-411b-8f12-44e4f3d5d0d1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d63ac89d-3040-444a-a8fc-f6cfcdca6ac1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 80.1904761904762,
      "responseMin": 8,
      "responseMax": 669,
      "responseSd": 89.1270463186542,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713832545573,
      "completed": 1713832575000
    },
    "executions": [
      {
        "id": "9dc71882-f600-47fb-af4d-c7bb365e3a75",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "415414d3-f7b2-4317-95e2-ce5bcb2cd0d7",
          "httpRequestId": "ed5fd3c0-8d1c-4824-915a-92d7136923cc"
        },
        "item": {
          "id": "9dc71882-f600-47fb-af4d-c7bb365e3a75",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "54c90988-d358-41d3-8a99-90756d9d9ce1",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "30866608-4b79-4637-a525-cacc31aa869a",
        "cursor": {
          "ref": "7457ed8d-9579-4523-9b78-e03bccac6e58",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5feca08-2e56-4bbc-b7bd-1453a4b21995"
        },
        "item": {
          "id": "30866608-4b79-4637-a525-cacc31aa869a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fe14dea9-2093-4405-8bd2-70bdaa605c50",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "870833d4-9fd9-4fbc-a04b-8fa2b674b0ac",
        "cursor": {
          "ref": "39267644-2779-4548-8338-227d7be45f31",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1ec4a7ee-2606-4667-b5cb-03525f7c0940"
        },
        "item": {
          "id": "870833d4-9fd9-4fbc-a04b-8fa2b674b0ac",
          "name": "did_json"
        },
        "response": {
          "id": "d7f853d9-6fa6-4a61-a6d2-e5e37ac97584",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04389882-6b28-436b-b005-d65cab54b5c4",
        "cursor": {
          "ref": "b89775d1-5746-4fe8-84f6-7de160e075a4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0b48666d-800c-4ade-90f9-78951c95393b"
        },
        "item": {
          "id": "04389882-6b28-436b-b005-d65cab54b5c4",
          "name": "did:invalid"
        },
        "response": {
          "id": "0bade683-d36a-4f6e-afb9-f10118c4ad4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04389882-6b28-436b-b005-d65cab54b5c4",
        "cursor": {
          "ref": "b89775d1-5746-4fe8-84f6-7de160e075a4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0b48666d-800c-4ade-90f9-78951c95393b"
        },
        "item": {
          "id": "04389882-6b28-436b-b005-d65cab54b5c4",
          "name": "did:invalid"
        },
        "response": {
          "id": "0bade683-d36a-4f6e-afb9-f10118c4ad4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6680fe0-1b80-4518-a9b1-99c339052d1c",
        "cursor": {
          "ref": "312f2c81-5062-4ef7-83c3-9a68637f3abc",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "25725874-6ced-436a-b171-07d0702a40ed"
        },
        "item": {
          "id": "a6680fe0-1b80-4518-a9b1-99c339052d1c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9e5ac50b-2db1-412c-bd80-694c76c41182",
          "status": "Not Found",
          "code": 404,
          "responseTime": 317,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48806dc0-5bb2-4897-a43d-b29a6b675bb2",
        "cursor": {
          "ref": "6cb9c679-b5bc-46cd-a934-9b1cbb2720a2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5b946b0b-8b5c-4f81-b553-0d2b60cab9b9"
        },
        "item": {
          "id": "48806dc0-5bb2-4897-a43d-b29a6b675bb2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0e146707-49f0-4d71-b6b3-c81dd31b21e1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31165560-ae65-434d-bdaf-95d89d154768",
        "cursor": {
          "ref": "0ccdcbb6-2a83-4bd1-b8cd-a3d460b6455d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4c76ef94-6786-4cf2-a6dc-96ef4cbba3b1"
        },
        "item": {
          "id": "31165560-ae65-434d-bdaf-95d89d154768",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2b706def-54e5-4eb0-ae4a-4af67e306ed5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685d5db4-6ea5-477f-85e4-b31bfb4ad0d4",
        "cursor": {
          "ref": "349720be-3574-4d38-865e-36a6320f146a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e1c44439-c124-4541-8773-ec8f11cfc625"
        },
        "item": {
          "id": "685d5db4-6ea5-477f-85e4-b31bfb4ad0d4",
          "name": "identifiers"
        },
        "response": {
          "id": "33b57a2d-c7f1-4291-8450-e2c9b09f6119",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15872ca8-c401-40f7-847f-4802e1b91b12",
        "cursor": {
          "ref": "71c45b86-dd00-40ee-b4fa-6f3fbc67e3a6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7a72fdaa-5241-43b7-b110-c4033e33e242"
        },
        "item": {
          "id": "15872ca8-c401-40f7-847f-4802e1b91b12",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ee53769a-7286-4c5f-b90b-3a3749dea361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf3a3d8-2367-414a-9f77-03d5c4cfcd87",
        "cursor": {
          "ref": "edc3cb77-368c-4243-ab07-f66f1cc7f189",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b33a645e-ca8d-490a-a221-179cbe0c2934"
        },
        "item": {
          "id": "5cf3a3d8-2367-414a-9f77-03d5c4cfcd87",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bf5933b8-b2b4-4060-bafc-c0e2c98ec7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72af92fb-3420-4e53-91eb-130b76833082",
        "cursor": {
          "ref": "bc7366d2-a8d7-43af-b6a1-285aabb055a8",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e9443b28-1299-415b-a385-e4d80dfa8679"
        },
        "item": {
          "id": "72af92fb-3420-4e53-91eb-130b76833082",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eb8fcf4b-a797-4e45-927c-6cb76836d310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f09cf04-06e6-43d5-a421-01b123402a84",
        "cursor": {
          "ref": "c6cf8f7d-cf83-458b-bf93-45d8db6ecea4",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0765bbb6-f0b1-4542-a0e2-6154bfc91bc4"
        },
        "item": {
          "id": "5f09cf04-06e6-43d5-a421-01b123402a84",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "397414ff-9ec4-4e05-a5c1-fae95a5ec3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a65bed-a378-4092-9bc8-a3a74ae01d84",
        "cursor": {
          "ref": "4f11ec96-db15-4e64-a7b4-c088dc9df469",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ea3c0df4-ff8b-4059-9070-a33e207d2840"
        },
        "item": {
          "id": "49a65bed-a378-4092-9bc8-a3a74ae01d84",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "36f7ceef-f3cb-43c1-bb4b-7928dc8d430f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8378ee-5d85-40f2-b9fe-7315ccc125fb",
        "cursor": {
          "ref": "2b7be1e3-63e0-446b-8f5a-7e0e13799a3a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6ddf4bd7-847e-4d5b-a3c6-5de234f8ca90"
        },
        "item": {
          "id": "4c8378ee-5d85-40f2-b9fe-7315ccc125fb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c3488a5b-7cc5-4f81-8086-87f88c5f5e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7a7898-053c-4f9e-a9d9-2a30644f9027",
        "cursor": {
          "ref": "c45db181-3235-4991-bb9d-2ae97c878a27",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0a0eb67-ecf3-4a68-8d67-23e393427fa0"
        },
        "item": {
          "id": "2e7a7898-053c-4f9e-a9d9-2a30644f9027",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a7a53674-e69c-4129-ad88-51b020f9e570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e36871d-3e6b-4d43-b25e-f9b04403f157",
        "cursor": {
          "ref": "ce725a54-0d3c-455f-b123-3a232e44617f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3875c58c-af8b-4f66-8af6-03d59ba96af7"
        },
        "item": {
          "id": "6e36871d-3e6b-4d43-b25e-f9b04403f157",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b4063a6b-ec69-4e37-bbf7-a6a2e822f168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccd5dd8-68ad-44a7-8687-77f8b604bf3a",
        "cursor": {
          "ref": "62549b9f-d490-43a2-8064-74c211b2fed1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "442297a8-d3de-4c60-be6c-dfaac05bdf3a"
        },
        "item": {
          "id": "3ccd5dd8-68ad-44a7-8687-77f8b604bf3a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d60c28c0-4a1a-47f2-bff9-c8b1c38f7cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa1ecab-4bb5-4cf3-9777-f87163d8aa74",
        "cursor": {
          "ref": "3f97331e-37c3-426a-a1e5-7d3c2e69fc29",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0c547d77-4250-471d-8ed2-7f3ad26002b0"
        },
        "item": {
          "id": "7fa1ecab-4bb5-4cf3-9777-f87163d8aa74",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ed3b7f84-c4b1-4b8b-b8ea-c67bd35a50c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c72059-7e8b-4a37-89df-cd27554f9a6e",
        "cursor": {
          "ref": "bdf586df-cc78-432a-baa5-a96c7d1c01bf",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "689eb2f5-87a2-4904-8fa1-cda11666ae7b"
        },
        "item": {
          "id": "04c72059-7e8b-4a37-89df-cd27554f9a6e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "76f0ef15-fbb7-4531-8760-46ba4621eab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb52907-d2f1-402a-891d-bb912f76f4fa",
        "cursor": {
          "ref": "784e2937-948f-4e91-90dc-bb346dac6147",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "22ab94e3-1cf7-416f-81f6-768d4803a5f3"
        },
        "item": {
          "id": "cfb52907-d2f1-402a-891d-bb912f76f4fa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "58f365d6-475a-40c6-bf42-a7d180882cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28812091-9d03-40c4-84ff-609509b47f4a",
        "cursor": {
          "ref": "4cc034ad-b83e-47cc-99c6-795341067006",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "54322cd7-9a0c-4da0-915c-1379d90406df"
        },
        "item": {
          "id": "28812091-9d03-40c4-84ff-609509b47f4a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3b6b9abf-5f06-4c66-9732-f16b1333a7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c1bb3b-1c72-4cbc-97ac-1a86c4a9e2f3",
        "cursor": {
          "ref": "14f17412-0dae-40b7-aeaf-276a7bb89612",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c538a056-cfc7-4589-86eb-39b1ac9da77a"
        },
        "item": {
          "id": "d8c1bb3b-1c72-4cbc-97ac-1a86c4a9e2f3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3f07e2a6-7831-4e4d-88c9-d74439002b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855de5f8-53af-4f20-94ea-c7af6411b408",
        "cursor": {
          "ref": "c9696730-a75c-406f-ae1a-ba6709266157",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "780e53a2-53d9-4be4-bee5-90d39d2b682e"
        },
        "item": {
          "id": "855de5f8-53af-4f20-94ea-c7af6411b408",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5a92bbbf-eaa9-4953-8fbe-79087057ba91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a80809-a317-47ff-a7ea-461f87a54713",
        "cursor": {
          "ref": "fc2373bb-35a9-47e5-beaa-b154bae0c5bb",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "57699a5b-cc4a-4907-bed5-9024055284e7"
        },
        "item": {
          "id": "99a80809-a317-47ff-a7ea-461f87a54713",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "51102546-65e8-4006-a855-ed6714609668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf20436-7850-4852-bb6a-e146d736b584",
        "cursor": {
          "ref": "6d02eb7e-f429-4b00-93ee-a903ea83612a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb908f2f-2a12-4c2e-84bc-b06c56985ae8"
        },
        "item": {
          "id": "ecf20436-7850-4852-bb6a-e146d736b584",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fd6a449f-620f-4a8a-ae30-449cc1c0dd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc29b58d-93c3-40df-a8ac-315544d033b6",
        "cursor": {
          "ref": "a539673a-0b0c-4365-9c45-6b3106421823",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "836a3e90-5796-4616-9ffe-cfb14a44bca8"
        },
        "item": {
          "id": "fc29b58d-93c3-40df-a8ac-315544d033b6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4d3189b8-964c-4a16-8be1-7d2e3f57c0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d624be2b-9568-4f62-82d5-9a8669bf1382",
        "cursor": {
          "ref": "97dd12d5-73ad-4904-9f3a-806b4b5479d4",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "684250cb-11ca-42be-835f-392964026030"
        },
        "item": {
          "id": "d624be2b-9568-4f62-82d5-9a8669bf1382",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7625b45b-90e6-479d-b087-2e2665da60e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45654afc-7a93-40a8-bb7f-1a459e75b976",
        "cursor": {
          "ref": "7025b33e-45dd-4026-8396-f23fc6066199",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1f9cb098-3eab-4d2b-aa6d-b96798509d0e"
        },
        "item": {
          "id": "45654afc-7a93-40a8-bb7f-1a459e75b976",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a4f6dc5c-c5f1-4dba-a777-0bedfa3c72a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c454f1-c1c5-471b-ab7a-1e3fc575c128",
        "cursor": {
          "ref": "70497971-12ef-4d42-8dfa-4e9b160c2b3c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a8d241a-3880-4ec5-8023-a2db12634071"
        },
        "item": {
          "id": "38c454f1-c1c5-471b-ab7a-1e3fc575c128",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fb4ae997-da49-4ad8-b553-2d0c051d560d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb1aeff-079f-4356-a8cc-b5dfaf685398",
        "cursor": {
          "ref": "09eeaee1-3a9f-4f07-b2fb-a8e6a7b64112",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "006c3fbc-aaec-4ee6-8d8c-921efc44cb2d"
        },
        "item": {
          "id": "2cb1aeff-079f-4356-a8cc-b5dfaf685398",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0ac35bcd-5ffa-4524-8bd6-394220142a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0390f34a-b0e2-4bcd-bb1b-424fd3c0edec",
        "cursor": {
          "ref": "960c36af-868b-429b-afe2-bc7f1ed4f27c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4537f5c0-9834-43d8-8533-19a6fb893ac6"
        },
        "item": {
          "id": "0390f34a-b0e2-4bcd-bb1b-424fd3c0edec",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "473713b5-6d38-4aba-b173-954e34ef13bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bd564f-4782-43f1-957f-6219da297055",
        "cursor": {
          "ref": "280cdc89-0a0d-49d2-beef-e2a2a36d513c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "116e5107-deaf-4a80-9422-d1c800b31e00"
        },
        "item": {
          "id": "51bd564f-4782-43f1-957f-6219da297055",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "03d199e0-c2ac-48a7-a0e0-a1fa15a31ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79480049-9b96-4e5e-9e7f-4c35407675c4",
        "cursor": {
          "ref": "b893431f-fa38-4a10-a1b9-c8c81a35f4e7",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e43d1afd-b9e2-4d22-aa84-2c6f915a11e5"
        },
        "item": {
          "id": "79480049-9b96-4e5e-9e7f-4c35407675c4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "75308371-abb1-4f0d-a4fc-faabd121b927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2dcd4-8c74-4baf-b6af-9a82e7d2d5f7",
        "cursor": {
          "ref": "4e19c257-9012-4089-9688-8539df3857da",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "acc5f674-3dd5-4820-a549-0dfdd6766f0f"
        },
        "item": {
          "id": "66e2dcd4-8c74-4baf-b6af-9a82e7d2d5f7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b5137663-ce29-4713-8a94-cff2780ee6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d106b5b-68ce-443d-afb9-ba4718730ef3",
        "cursor": {
          "ref": "3ceee9a5-fce8-4204-a8ee-9f0efe6e90aa",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9ec22453-1920-4425-945d-6cd437bc14f9"
        },
        "item": {
          "id": "6d106b5b-68ce-443d-afb9-ba4718730ef3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "61576cef-e54a-47f0-a349-e4412adc84fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d760e6d-14a3-4b12-87e7-e59f404b28f5",
        "cursor": {
          "ref": "31ca0f96-3dc6-43d4-b0ee-c21859b8f742",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b2351a8b-a544-48f7-879b-8c71ad899772"
        },
        "item": {
          "id": "7d760e6d-14a3-4b12-87e7-e59f404b28f5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8bd2aec8-c542-43ce-ac49-4d802b67cb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a239ddd-6629-4fe2-9bbc-8ca872aa7363",
        "cursor": {
          "ref": "5962cd5e-63f4-4235-92b6-fa1c66debd8f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "10abe845-5002-4eba-8673-d464db624882"
        },
        "item": {
          "id": "2a239ddd-6629-4fe2-9bbc-8ca872aa7363",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "65fceb8b-6d05-4ecb-b239-f66d47763b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7622f1f-e7aa-4df9-a549-f16ee99dad6d",
        "cursor": {
          "ref": "dcdfef01-6d3c-4a3e-8199-5da6a11f2a3e",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4cc1d381-0d7d-41a6-a01c-98075a40a99b"
        },
        "item": {
          "id": "b7622f1f-e7aa-4df9-a549-f16ee99dad6d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b0a938a5-436f-4c00-87fc-4d0904f44c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1220ecec-c587-43bc-9656-a692c7e726bc",
        "cursor": {
          "ref": "84aff239-7e1d-4ebb-a6d1-eb3cba34c18d",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "325d7480-757b-4a91-83dc-c6cfccd95a52"
        },
        "item": {
          "id": "1220ecec-c587-43bc-9656-a692c7e726bc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8e4d41c7-3c19-41e7-9054-52c6b8178be6",
          "status": "Created",
          "code": 201,
          "responseTime": 669,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9ff5e99b-c808-4e52-bac7-2739f9898d8c",
        "cursor": {
          "ref": "655e60e4-1a70-4ba8-926e-43d927db8cbf",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "44c19547-6bf8-473d-ac9a-bf5fae637913"
        },
        "item": {
          "id": "9ff5e99b-c808-4e52-bac7-2739f9898d8c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bd48c77f-c03e-4ad5-92db-c4994f8c6662",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e34107b9-f034-4e24-9d1e-9b8c7502444b",
        "cursor": {
          "ref": "3917e135-fdcd-49d6-9889-c8fe4b891b08",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6602c384-ddc9-425f-abc4-249e0517bdb5"
        },
        "item": {
          "id": "e34107b9-f034-4e24-9d1e-9b8c7502444b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9151cfb9-c403-425b-8ec9-175046ad738b",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f2dad974-372f-4fd0-91d6-96bce58012e7",
        "cursor": {
          "ref": "f8979407-0877-4334-a0a5-12c79c25f08f",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "755d76d1-fd8f-464b-b147-f081db02bcfe"
        },
        "item": {
          "id": "f2dad974-372f-4fd0-91d6-96bce58012e7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1d467c2b-92e9-42ba-9470-d7f3b8f50bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9af1e4d-e625-45f9-abc4-3e1068495adb",
        "cursor": {
          "ref": "e91d1eee-f7e6-4c0c-82ad-c65b8bf21bae",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "90314a50-6cf0-4733-b67d-2e199898346d"
        },
        "item": {
          "id": "f9af1e4d-e625-45f9-abc4-3e1068495adb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "039311c2-1ec3-4f4e-b870-b8c2be5b1b7f",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6fd5beee-24f0-4904-a9c8-668514dc0174",
        "cursor": {
          "ref": "926808bd-d8fe-4fee-b195-9c8158fa050d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19ad5f77-4d07-47a6-ba2b-a44e1b2c4baf"
        },
        "item": {
          "id": "6fd5beee-24f0-4904-a9c8-668514dc0174",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3d56b59f-2d32-4ebd-9d00-de2b9ad22126",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "47fe8104-f497-4a87-a624-42f7ef0d0a8e",
        "cursor": {
          "ref": "dcfe8c87-7590-46ec-aac5-7583b642de33",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cf5fe953-d545-4cdd-9948-393f8af3d26b"
        },
        "item": {
          "id": "47fe8104-f497-4a87-a624-42f7ef0d0a8e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4ab70058-e939-4d6c-8e25-602d7676235b",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5ec6efc1-9823-45a3-95b0-a5b85378376a",
        "cursor": {
          "ref": "caf82816-6f22-456d-8e54-302890633ad7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a734ea12-463c-4706-beea-9584ed43bacb"
        },
        "item": {
          "id": "5ec6efc1-9823-45a3-95b0-a5b85378376a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "164f518f-c1a4-441c-a54a-5c9075489ce1",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7c43aac6-e4e5-4b35-85c8-06798f709ec6",
        "cursor": {
          "ref": "23aa074c-74a8-4903-aef7-902efdf2a692",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ca68dbf7-541f-460a-9de2-f98bb936c639"
        },
        "item": {
          "id": "7c43aac6-e4e5-4b35-85c8-06798f709ec6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a0b4c0b2-520f-4249-942e-53b3aed3b67b",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "edd5539b-7130-4acd-887e-7bdea0830ffc",
        "cursor": {
          "ref": "19372526-d1fd-41f2-a273-88a6ad20d231",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "62581a38-0a90-40da-ad97-e7624ce0fcd6"
        },
        "item": {
          "id": "edd5539b-7130-4acd-887e-7bdea0830ffc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e366db07-be48-491e-beac-75d381c14d57",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b130bdc6-9bb5-4d25-b946-9648014f0076",
        "cursor": {
          "ref": "c9a07c6d-b5fe-4152-a2b8-80618a1f8eac",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ba5c1938-d197-4f84-a7b8-f7aff4c4bc8d"
        },
        "item": {
          "id": "b130bdc6-9bb5-4d25-b946-9648014f0076",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "727c7d69-485e-45f9-9226-cde8dd1ff857",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1f3cc527-958d-4966-a322-e70d519fbf11",
        "cursor": {
          "ref": "b0681dea-0fc6-4805-8292-1a8b31e10894",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f89562de-182d-408e-ad63-d42b0f8346a2"
        },
        "item": {
          "id": "1f3cc527-958d-4966-a322-e70d519fbf11",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bc06ae0e-2dc6-459a-b0d6-a9bc1b10f1e6",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "05952497-de2f-41d8-916e-41b392b2448c",
        "cursor": {
          "ref": "9031a6b7-7290-4352-9cf7-f50fef395941",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "285f825c-35dd-49de-901a-d33dada9256b"
        },
        "item": {
          "id": "05952497-de2f-41d8-916e-41b392b2448c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a38a09a0-d50b-42aa-a2b3-910002c90987",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d0163eb6-302b-4221-af7f-d19f028bf108",
        "cursor": {
          "ref": "d8a01be8-85bc-4476-9aff-67fa56c4ff95",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ad7e2d1a-8cf5-42fc-b937-4a21f805c459"
        },
        "item": {
          "id": "d0163eb6-302b-4221-af7f-d19f028bf108",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "47352f73-b308-402b-bf58-27e27b980332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043b5031-cc27-410c-8b35-25a9c716769e",
        "cursor": {
          "ref": "aaa0c8fe-dd6f-473a-976a-a40fe56ce755",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "09a90768-5215-42ed-b59d-139a5a9cb3c3"
        },
        "item": {
          "id": "043b5031-cc27-410c-8b35-25a9c716769e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d0057f09-5476-4ef3-9906-249495f00978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f90c7b1-8d51-49a1-914f-f15f472d96ad",
        "cursor": {
          "ref": "53c551bb-1c3c-4322-8d32-be050cbc96a1",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "075e39fc-1dea-4cb4-9881-88245a7d3a58"
        },
        "item": {
          "id": "1f90c7b1-8d51-49a1-914f-f15f472d96ad",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f39db86f-d8a0-4521-a8cf-bce73b902540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13a3170-3fd3-4e63-8664-5b6d4b165bbf",
        "cursor": {
          "ref": "18d07134-6226-4efc-aac8-6bd13fa7fbd8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "57876606-6031-4a6c-8119-5b3c4ea6243c"
        },
        "item": {
          "id": "d13a3170-3fd3-4e63-8664-5b6d4b165bbf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "90aedec7-dac4-41a6-ab28-747d76b24de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef58b88-39d6-47ee-9305-444a33d68d6a",
        "cursor": {
          "ref": "44357dcf-0024-4b1a-9a38-93c8bdc19432",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e78c3a0e-f6e5-4cf8-a735-fe36702bacc1"
        },
        "item": {
          "id": "7ef58b88-39d6-47ee-9305-444a33d68d6a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e2545460-0e16-46cf-ba97-2ebaacefab27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d75e432-5f41-4445-aa12-3183245fb790",
        "cursor": {
          "ref": "a7875ba7-fa6d-4aec-8d49-32e29c2409d3",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a2e2f3a3-fb6d-44ef-9df7-7ed01a36a399"
        },
        "item": {
          "id": "1d75e432-5f41-4445-aa12-3183245fb790",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "67105e60-3b94-40aa-bfb4-5b3127a0eb6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f672848-2cb9-4d90-8d1d-7f8c4b4debaa",
        "cursor": {
          "ref": "4e4e26b8-69a2-4ec6-a86a-62b8be57c491",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b51a8610-4a6b-425a-8d9c-c592552e6d84"
        },
        "item": {
          "id": "9f672848-2cb9-4d90-8d1d-7f8c4b4debaa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0f254f09-4acb-4cd0-a6ab-ce535d777f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e96410-dbe0-4ce1-a9d5-c050469177ff",
        "cursor": {
          "ref": "a37ab8ec-c3a9-48a9-87ac-518cc344405e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7de3613f-0718-4f1a-990b-49a602cdaf66"
        },
        "item": {
          "id": "01e96410-dbe0-4ce1-a9d5-c050469177ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f8faf0e2-9888-4d28-bf2a-978ef35c41ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e625e003-63fb-4362-95a3-5525b4ee403d",
        "cursor": {
          "ref": "f6afaf26-6777-4b01-b0e1-4050c3bda1c6",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d9af3404-a6a9-48b0-aa88-a70c5902d789"
        },
        "item": {
          "id": "e625e003-63fb-4362-95a3-5525b4ee403d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "53ce1be9-960a-4f7e-981c-547b1900839f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9ad320-0588-485a-b574-c8979fa9d7b3",
        "cursor": {
          "ref": "3a18a53c-2471-4485-9341-84f14b9b4863",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0f438d2e-5cdf-40b5-a251-a0fa725810c0"
        },
        "item": {
          "id": "fd9ad320-0588-485a-b574-c8979fa9d7b3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "012133d5-befb-4e17-896a-15cd4f0b8d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c275d0-5e56-4dcb-be43-89670ac7a3e4",
        "cursor": {
          "ref": "23c1dfef-10c1-42b5-8f50-1596e93c466c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "468c8b0c-9c0f-4136-96fb-80dd8717ecde"
        },
        "item": {
          "id": "13c275d0-5e56-4dcb-be43-89670ac7a3e4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6734dc66-2223-4db6-a77c-98e9f241eb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95edc63-d457-4d58-be2c-54873934b289",
        "cursor": {
          "ref": "ec3e7176-1b3f-4629-a867-94fdeb290039",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5462cdd1-fbe1-4110-b0a6-65d443db65a8"
        },
        "item": {
          "id": "d95edc63-d457-4d58-be2c-54873934b289",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "03d9448f-9a08-4851-9883-9b8b617a38dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a0b7a7-eb33-410d-a3a4-e73a6d1792c5",
        "cursor": {
          "ref": "32ebafc6-4b74-4760-8586-76b844a5c4ae",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b8e762ed-6aad-48cf-bbf2-0b3133b80c0c"
        },
        "item": {
          "id": "a3a0b7a7-eb33-410d-a3a4-e73a6d1792c5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1ce18284-e31a-4d5e-8999-58475601c870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca09d5b-aaf1-4380-b34f-5b20ebb498ab",
        "cursor": {
          "ref": "a0274ea1-0d43-477e-b430-00e649d20805",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d47b513f-f7d9-4cfe-ba44-9ccb657f5e43"
        },
        "item": {
          "id": "5ca09d5b-aaf1-4380-b34f-5b20ebb498ab",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0807f4bd-c32b-4655-a954-b575f86a7ded",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "271af625-d13c-4311-b6ef-a2383e6d2ea3",
        "cursor": {
          "ref": "156f3ebf-a633-4292-9aa3-aa7094667610",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5a554dc7-0a9b-4c3a-a124-1477dded9c68"
        },
        "item": {
          "id": "271af625-d13c-4311-b6ef-a2383e6d2ea3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "028a40ca-3b34-4251-be42-58313a86e93f",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "71da01b2-67f1-4938-9e47-1e507603c229",
        "cursor": {
          "ref": "5c5e8177-c3e3-4a31-a24a-1b795510b6e7",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3bf6faf2-bbec-4390-891a-34869f8ffe79"
        },
        "item": {
          "id": "71da01b2-67f1-4938-9e47-1e507603c229",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ce8c5691-ce0d-47be-ae10-8341690b2891",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f25e506a-e249-4e34-9e2b-c183a8c32645",
        "cursor": {
          "ref": "04faa541-0d7a-4f19-8860-76fe2171d5b6",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6b5b46fc-7e84-4533-8e7a-b92146bf0088"
        },
        "item": {
          "id": "f25e506a-e249-4e34-9e2b-c183a8c32645",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8a8a30ae-6a38-4e3c-bcfc-68606bb7549a",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "448868ea-6b32-41c9-ab3d-914cfa7a1ab6",
        "cursor": {
          "ref": "e0310a98-8b0d-4240-84be-20213ec4b123",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "174241d1-f923-4bb0-9442-31132f437888"
        },
        "item": {
          "id": "448868ea-6b32-41c9-ab3d-914cfa7a1ab6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9305442f-e551-449b-a782-c7bae0912629",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1ebca05c-749d-4983-98db-5c99bafed5df",
        "cursor": {
          "ref": "396b8b70-9c6d-419b-9758-064b0e76551e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d3f9be2c-5c38-4421-be65-f4b82e906d7d"
        },
        "item": {
          "id": "1ebca05c-749d-4983-98db-5c99bafed5df",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "efa8fd5f-86b6-48c7-b0f1-d8a6d72d37ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f10ef8-9773-499d-8d5d-0c6044895f08",
        "cursor": {
          "ref": "fca7ba29-39e3-4ca1-bc79-132da65553a0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f5735713-b3ce-4816-81c3-70af9a305730"
        },
        "item": {
          "id": "a1f10ef8-9773-499d-8d5d-0c6044895f08",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bc4cac6e-f7d8-475b-bd18-e3e8aea601ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2f700f-f305-4760-8231-b5ed54b3bacc",
        "cursor": {
          "ref": "624a62a4-6455-4e67-b991-e2aadf1ab4e8",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c0e901bf-826c-41c2-b1b6-9294e844544c"
        },
        "item": {
          "id": "aa2f700f-f305-4760-8231-b5ed54b3bacc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7f48a467-77eb-450f-959c-74ef62e306ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d77c649-4f1e-4bd6-9b10-a869c77675c2",
        "cursor": {
          "ref": "89c0579c-57e6-42c5-9747-a1bb5a800fd5",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fc6387c3-c3a4-4f3d-8a89-aacb86f2ccc1"
        },
        "item": {
          "id": "9d77c649-4f1e-4bd6-9b10-a869c77675c2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "85a5eaef-6960-4004-9314-23ea63b59df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673a9150-28c1-41af-a83b-980dce17d14e",
        "cursor": {
          "ref": "216db65c-7770-4854-b36f-da8e2a3fe229",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "31c510e9-4b20-428f-9489-b618817a59fc"
        },
        "item": {
          "id": "673a9150-28c1-41af-a83b-980dce17d14e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b6c10113-919d-462f-8048-cfb0bd3c3afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a2bd12-6201-4c38-a51e-3d6cabad69c5",
        "cursor": {
          "ref": "0e949bd8-0ac5-4dc5-93db-74e73c2f8b9d",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d12ff48a-2a3e-4460-a766-436fe909c44f"
        },
        "item": {
          "id": "e4a2bd12-6201-4c38-a51e-3d6cabad69c5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "422faf79-6892-4031-911b-1ca47d526c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f3055b-e863-4449-a820-db5d084d328c",
        "cursor": {
          "ref": "21f10e8d-7169-4123-b0c6-368b6682d41f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e1a2e136-7113-4bc9-83d3-57f3437fef60"
        },
        "item": {
          "id": "e7f3055b-e863-4449-a820-db5d084d328c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a2b580c7-b7eb-4425-8f99-d2f3e36fa63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1178fe4a-3092-426c-8bc5-bcffac66d5cd",
        "cursor": {
          "ref": "2addfa14-1c79-46f8-8808-1c55c63539f8",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f70515ff-4144-433e-9906-f6a59805def7"
        },
        "item": {
          "id": "1178fe4a-3092-426c-8bc5-bcffac66d5cd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a38decf3-49d7-43ff-9e90-eb4b69e622c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdeea419-928b-46fc-a27b-7b6cf2febb62",
        "cursor": {
          "ref": "9fd0a560-344b-414a-a2de-32b0d10e956d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "69a4179d-f263-4602-afb4-c984ac749fb2"
        },
        "item": {
          "id": "bdeea419-928b-46fc-a27b-7b6cf2febb62",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2ac3398a-91ef-4da0-bde3-dfb24ff69856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2556f636-35e1-4b67-a173-1eb07269dd5d",
        "cursor": {
          "ref": "6a64e1ca-bfb3-4a52-962f-7983d7a1ff01",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "87b49eb6-b66e-43ae-8955-0367334b52b6"
        },
        "item": {
          "id": "2556f636-35e1-4b67-a173-1eb07269dd5d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9c5027a4-7c2c-4bf8-b048-3c695d0c8885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a79db7a-9b26-42e6-b70b-2849fe789fc6",
        "cursor": {
          "ref": "c38f29b7-bbb7-4cd8-bb37-0510a810d8c0",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0874ab41-6466-40bf-bfcd-ae0afc7fe747"
        },
        "item": {
          "id": "2a79db7a-9b26-42e6-b70b-2849fe789fc6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2794c9ec-2b3b-4030-b629-d32a50e295c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685df511-3906-46d6-af81-b4cb4124e650",
        "cursor": {
          "ref": "91db173c-225c-4d5c-ac4b-b27b0df1ed96",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "eb886c47-41b1-4d12-a93c-92ce262237ea"
        },
        "item": {
          "id": "685df511-3906-46d6-af81-b4cb4124e650",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "92a26608-3d81-46be-ac6b-62c3471fb0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36640d4-faa4-4a44-a1bf-c3acd13932d1",
        "cursor": {
          "ref": "768d5ea4-9b20-489e-8abd-f664aec5f0a8",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c794355d-797d-42a1-9ca2-10f804f586c4"
        },
        "item": {
          "id": "d36640d4-faa4-4a44-a1bf-c3acd13932d1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ae21d917-fc28-4bb3-bd0f-d75b2d7e65c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaed9e0-64c6-4fa1-8820-8220f9f95fc3",
        "cursor": {
          "ref": "2e0dd755-c505-47d5-b6d1-a5281d577bc1",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cea3f3c2-54a2-4232-9912-4102bf50db9f"
        },
        "item": {
          "id": "4eaed9e0-64c6-4fa1-8820-8220f9f95fc3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "83605ff4-9ed9-4f1f-a959-ef5e02abadf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81bcea1-41d5-477c-90c0-bee377e42303",
        "cursor": {
          "ref": "3709a3a2-59e9-4088-879a-6225915a2915",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f4d5316-fb5d-4eed-b6e5-921f5a73b5f9"
        },
        "item": {
          "id": "d81bcea1-41d5-477c-90c0-bee377e42303",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b9d369b1-671b-44e3-96f8-f9e13410eb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80af5add-6c67-4272-b62f-e2eec6e6cfd7",
        "cursor": {
          "ref": "761dfaf3-03b9-4eec-bd9b-3afcc6f3f6b5",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "786e3a29-b52e-4b5d-aeda-a2fda742ae79"
        },
        "item": {
          "id": "80af5add-6c67-4272-b62f-e2eec6e6cfd7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9be11023-e644-48e1-82e2-5d763b4a3439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a749138-8456-403d-9dec-346386bd1506",
        "cursor": {
          "ref": "4cd73233-0cc1-4149-8ddb-77850209eabf",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9b13bee3-a4a1-412e-b392-c84701685a68"
        },
        "item": {
          "id": "7a749138-8456-403d-9dec-346386bd1506",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "76856810-292e-4d21-aa10-6010519a8aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8060e3b0-a649-4587-abc3-3d8cc86e21f2",
        "cursor": {
          "ref": "e22009b5-a25a-49f9-94e1-397e057a1887",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e522bf48-5365-4f0c-805b-c42690b9bc05"
        },
        "item": {
          "id": "8060e3b0-a649-4587-abc3-3d8cc86e21f2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "03b16a27-f267-4555-a5eb-b2623e8204d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2baa89e-4dd8-43ec-80a1-89167b4246ff",
        "cursor": {
          "ref": "4c02e2df-d6f0-4a12-a9a4-9d82b4e08f2b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d0d8c668-19b7-4261-a097-2e449a3ede1f"
        },
        "item": {
          "id": "c2baa89e-4dd8-43ec-80a1-89167b4246ff",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3457c14f-cb41-4a95-a4ec-49ed7fa0ecc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae19a99-7dc2-423a-a930-931b9d567406",
        "cursor": {
          "ref": "476ba0d5-cca9-493f-9aaf-fe99eff29f31",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "664aa38e-5e48-43cf-9d9a-aef80ebc5525"
        },
        "item": {
          "id": "cae19a99-7dc2-423a-a930-931b9d567406",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2bd06b2c-a0e5-4a31-b27b-38464bc13ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9da74b-f3d4-41da-b4b5-37dfb9e624f3",
        "cursor": {
          "ref": "b039358d-efcf-417a-b355-9553e2878e50",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c08bef5b-6530-4a49-ae05-4caf181a74c7"
        },
        "item": {
          "id": "bd9da74b-f3d4-41da-b4b5-37dfb9e624f3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f8d4b9b7-a660-42d8-8cd1-8e8850211609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5ce35d-f2ab-4d43-95c2-d9295c5d530a",
        "cursor": {
          "ref": "e5a533db-8fc0-4d76-9430-ef270bf66c46",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "826427d5-c36d-4b33-a8a5-909744fe5c63"
        },
        "item": {
          "id": "4b5ce35d-f2ab-4d43-95c2-d9295c5d530a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "77d35124-ecca-4a71-9472-214d8f117261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b6df32-6f9e-4c4b-857a-543038c9c514",
        "cursor": {
          "ref": "4bc18709-ba68-4c58-ad65-3a53087c9e8c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "07dac92e-997f-4566-891e-43a7cf76fb6d"
        },
        "item": {
          "id": "c0b6df32-6f9e-4c4b-857a-543038c9c514",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bf3b435e-aa7a-4981-b4c4-c4c946324337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff7f81f-5800-4598-8726-78babb78f204",
        "cursor": {
          "ref": "8a64d0cf-d6ab-4a8e-9095-0bda27815278",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e707cd2f-8c07-4b76-925d-aab47c1fc301"
        },
        "item": {
          "id": "5ff7f81f-5800-4598-8726-78babb78f204",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fdf08aba-f4de-4cfa-89f9-4ad38004a382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e448af-70eb-4c7e-be02-b5b660384373",
        "cursor": {
          "ref": "58dea2ec-617b-47d3-8a31-a384fe21244b",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0e32e090-eb15-4a4b-bbcd-31936361a3b9"
        },
        "item": {
          "id": "39e448af-70eb-4c7e-be02-b5b660384373",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e690f7b3-8da3-4293-92bc-7f73ee7bc38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd81f9a8-7778-4364-ba3a-c1f71a57c2d0",
        "cursor": {
          "ref": "8c3ced1a-fb63-44e7-bb02-ac59bc855473",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d809c51f-9a52-4c2a-9cf4-899fe53c290f"
        },
        "item": {
          "id": "bd81f9a8-7778-4364-ba3a-c1f71a57c2d0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "27c199ea-c604-4391-9d14-31718788928a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba69fcb-9c9c-45bf-8130-3a9c87d9f7ca",
        "cursor": {
          "ref": "1442d983-3885-4cd5-8679-51985bc72921",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c9a7d648-86e1-4501-8dfc-dca3afecef7f"
        },
        "item": {
          "id": "6ba69fcb-9c9c-45bf-8130-3a9c87d9f7ca",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "db5c95f3-11a0-47c2-9deb-ef2165e627c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638756ce-a06d-41b8-bdfd-5e58cb2fa92a",
        "cursor": {
          "ref": "d65dad41-2e96-4462-a018-e0103a370acc",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "258261f5-13a9-4521-978d-418cf6967802"
        },
        "item": {
          "id": "638756ce-a06d-41b8-bdfd-5e58cb2fa92a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9960196a-3c36-4f53-8685-cc2aa291b265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dd4ac7-c0f7-46a6-996c-204e76ab6d65",
        "cursor": {
          "ref": "ad27ea6e-6458-40fe-9a55-35fbaa098ede",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "602d0632-84a2-402d-b585-f0dcf454b017"
        },
        "item": {
          "id": "f1dd4ac7-c0f7-46a6-996c-204e76ab6d65",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ab69a44e-49c8-4e31-98cf-11047292b50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f4d871-0261-4a79-8bd7-fe61eb238023",
        "cursor": {
          "ref": "691c8d74-cb16-4a90-a30f-af6804ca2cc4",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1b3a46b9-b601-4d19-82b0-2d5f9589e0e5"
        },
        "item": {
          "id": "c8f4d871-0261-4a79-8bd7-fe61eb238023",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "646e079d-e6ad-4897-959d-ae685036f692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c03f082-e376-492b-b97c-4ae036799378",
        "cursor": {
          "ref": "008ab887-08e9-476d-aff2-ff8252202968",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "96e71a26-2824-4ac5-bebe-2483c804de68"
        },
        "item": {
          "id": "5c03f082-e376-492b-b97c-4ae036799378",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ac9f6b22-87b6-4e94-9612-38f3a615aab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52020b3-79f3-4b08-b63d-831d4ca81888",
        "cursor": {
          "ref": "402d3c4d-9d4a-4c33-8111-dea378be7c26",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e80057d0-9202-4562-a820-5fdf22156389"
        },
        "item": {
          "id": "c52020b3-79f3-4b08-b63d-831d4ca81888",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "72137b08-d047-4cad-bc9a-b86248912195",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e428f45-3f70-4880-be15-c09a895adac6",
        "cursor": {
          "ref": "5f25e40d-5c15-4b27-bd18-9223806b8e78",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8c34082e-4818-4c0c-b946-86a3eb045602"
        },
        "item": {
          "id": "8e428f45-3f70-4880-be15-c09a895adac6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "425ea731-8fb2-49de-a3e5-25bc1ecd7170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e116fe32-41cd-4431-a2ab-34de0bb14aae",
        "cursor": {
          "ref": "8f1e6b51-c6f6-40b2-bd57-554745bbbfb6",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e15544c1-e84f-416d-bb33-1d963ef1ccca"
        },
        "item": {
          "id": "e116fe32-41cd-4431-a2ab-34de0bb14aae",
          "name": "credentials_issue"
        },
        "response": {
          "id": "262fd7b0-baf1-42b0-a291-0ba364a13ba1",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f884a6d-022c-4b57-b2a3-f8eb1d10d8fd",
        "cursor": {
          "ref": "7c1e94a4-42cc-4512-9a3c-6f9b7fdaa5d0",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c7da2623-db2f-413e-97dd-184ea14e8138"
        },
        "item": {
          "id": "2f884a6d-022c-4b57-b2a3-f8eb1d10d8fd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8d2c3ae0-d32c-4c0d-b4a7-5edc3a637b6b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8151635d-da01-49fd-88ea-55cb3941b468",
        "cursor": {
          "ref": "33c0d573-9dcc-4990-bb41-033289ed5f6e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1c259c5c-5b10-4089-9ec6-9cc4d3329e9e"
        },
        "item": {
          "id": "8151635d-da01-49fd-88ea-55cb3941b468",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bc5c51b3-e956-486b-af98-257743c15ace",
          "status": "Created",
          "code": 201,
          "responseTime": 376,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4546b63f-7a0a-4c3d-9360-493611168458",
        "cursor": {
          "ref": "80a92404-da37-4439-a3a0-2d38d7174662",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9796d9a3-4b3a-4769-ba19-58be98b11bfa"
        },
        "item": {
          "id": "4546b63f-7a0a-4c3d-9360-493611168458",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8c52b128-8a47-4b3c-bec2-7f69e50a1e5e",
          "status": "Created",
          "code": 201,
          "responseTime": 395,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59df9c5-31e1-42af-936a-94e3537bd054",
        "cursor": {
          "ref": "fadabc9e-bfb9-4882-9fa0-98e16950b98e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fcb5e6c1-3148-4118-b24d-c51951775c2d"
        },
        "item": {
          "id": "a59df9c5-31e1-42af-936a-94e3537bd054",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9287a339-5f6b-492f-93d0-e8c37618be9a",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-23T00:36:01.675Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-23T00:36:01.675Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4d0e7101-69ee-4976-a22f-21930a7c6ca6",
        "cursor": {
          "ref": "8c82e98e-19c8-471a-9c3a-5d33cce94767",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "99bc5fb0-b2ee-444b-8930-804a4047dc72"
        },
        "item": {
          "id": "4d0e7101-69ee-4976-a22f-21930a7c6ca6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "45427f10-c579-401e-9494-86793118a980",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc85d1b2-fbf4-49fe-b67a-7141324ce2e8",
        "cursor": {
          "ref": "9739437d-ab5c-4e40-90ad-ef7ee786d9e3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "22ade2ce-c6b9-448a-a8fd-b6b5243f1bec"
        },
        "item": {
          "id": "dc85d1b2-fbf4-49fe-b67a-7141324ce2e8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "582bc1a2-9c22-4881-add0-6e54bedd50b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d14671a-fe4e-491d-8e4b-8d3e3c81fb5e",
        "cursor": {
          "ref": "525aabcb-0f88-4ad4-9f55-84af633ac28d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0e71a575-b7b6-447e-a54c-784b844e0132"
        },
        "item": {
          "id": "0d14671a-fe4e-491d-8e4b-8d3e3c81fb5e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec51e0dc-e1e0-4250-8085-6b6b5938aadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def411e3-16de-4553-bddb-5499e7ba5431",
        "cursor": {
          "ref": "a3851f39-86d3-4a03-b897-aecd26779bcc",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3565bf92-0154-4429-90d5-124704f06424"
        },
        "item": {
          "id": "def411e3-16de-4553-bddb-5499e7ba5431",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c889797-f1dc-4b5b-a85b-4a6ef0dc7977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5885a377-f68f-40b2-853a-14c69b2c66f0",
        "cursor": {
          "ref": "5e58a5c7-1108-48e6-b2d1-aeb296d81d05",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9dcb9938-7ad0-4ea2-a930-834f04eb47ff"
        },
        "item": {
          "id": "5885a377-f68f-40b2-853a-14c69b2c66f0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "db6845fe-1da3-40c4-8f06-37de595f21aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d746c93-4a22-421f-a9ba-9f4363e73b63",
        "cursor": {
          "ref": "47a11ae1-d087-40cb-b7e9-6be4834e3309",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6ba28c07-bb16-41f4-938a-85b7786a602b"
        },
        "item": {
          "id": "0d746c93-4a22-421f-a9ba-9f4363e73b63",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "25535cbc-2ba9-4741-bc5d-dca017f45215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34d7b5d-14cb-4b1b-90ea-b8e8782ee63b",
        "cursor": {
          "ref": "938f319b-8788-4510-992a-d2af6bc0aad8",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8382f836-54ed-4491-b88f-18b3bdd39a99"
        },
        "item": {
          "id": "b34d7b5d-14cb-4b1b-90ea-b8e8782ee63b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "201b2634-f058-4499-9134-9306d2ac61a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12514d1-b861-4cd0-b9b1-f6f85b6e9a27",
        "cursor": {
          "ref": "09515182-24c6-417b-93ce-e0ee25b3cc02",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ab436528-825f-4642-ab25-23f0787c6e55"
        },
        "item": {
          "id": "c12514d1-b861-4cd0-b9b1-f6f85b6e9a27",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d55bca8f-45d1-40ad-85f4-89be76035d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2cb61c-3c59-47c4-8ee4-b2d3bcb72741",
        "cursor": {
          "ref": "194cb6af-0460-4632-98d5-713b0956caf0",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b049c688-5388-4768-a255-be215bb28299"
        },
        "item": {
          "id": "3a2cb61c-3c59-47c4-8ee4-b2d3bcb72741",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "21bfa06f-55e5-409a-a8e7-afb80c01b6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29217a46-a5d0-4b03-9477-eb9f894c4b5a",
        "cursor": {
          "ref": "6ad8ae9c-8809-47c7-8ce1-957bd33d9829",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9564cc8b-85c3-4013-b4dc-a7f86ae1ab13"
        },
        "item": {
          "id": "29217a46-a5d0-4b03-9477-eb9f894c4b5a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f9d1a06f-15e2-4105-a731-86dcd9006257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152827ec-d003-4d93-ab43-8216e1595541",
        "cursor": {
          "ref": "84735bf1-b21d-48f7-a41b-bfec5f0dc0d8",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "143b4476-6594-4963-891d-45aa3b40ca78"
        },
        "item": {
          "id": "152827ec-d003-4d93-ab43-8216e1595541",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b4bca2db-a24b-48fc-a795-ad19d8f79c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead20250-5b54-4aa7-b5e6-e942e0bd2187",
        "cursor": {
          "ref": "0cf383fa-94c0-449f-accc-22905ddfdc54",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3847a629-1d78-47c2-aff3-b74502a96337"
        },
        "item": {
          "id": "ead20250-5b54-4aa7-b5e6-e942e0bd2187",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "14a1e7d3-df4f-40e0-85cc-8406e67a7bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950b4124-c944-4569-b56b-6fb979e19bf9",
        "cursor": {
          "ref": "00423c4a-3511-44ce-8d64-2448d16aa017",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "72178b0b-acf5-465c-ba46-388b376c0e3a"
        },
        "item": {
          "id": "950b4124-c944-4569-b56b-6fb979e19bf9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "96b7256f-8713-4387-a626-2348712ac3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a03694-8e91-4da3-a3e2-395524369804",
        "cursor": {
          "ref": "d9a80c86-f353-4486-8ad2-d147bf27bbd9",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "27c9b4f0-3ddf-4954-a76c-0159f52e64b9"
        },
        "item": {
          "id": "51a03694-8e91-4da3-a3e2-395524369804",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5a01fb85-5a38-42d8-bb13-54479e9859de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4532935-7506-4ee1-898a-8420ed5965c1",
        "cursor": {
          "ref": "8f86db28-250e-4b8a-a1aa-e776c1fe2239",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4718bf8d-b0c9-4957-8bb9-6a0e34129132"
        },
        "item": {
          "id": "d4532935-7506-4ee1-898a-8420ed5965c1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "17423ea7-4222-4bbe-8ea7-939f879a4f2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bd781d0e-e535-4740-ab34-cddfde6bfe3a",
        "cursor": {
          "ref": "d90543e1-afdd-4138-a1e3-e4e3abc63751",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9545980c-121c-49d4-bf54-6476e12fb484"
        },
        "item": {
          "id": "bd781d0e-e535-4740-ab34-cddfde6bfe3a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "de5cdce5-fcfb-4bdd-8537-4a0325eb4295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80e5b2e-305a-480d-bd8e-7fabc9248d86",
        "cursor": {
          "ref": "d6c70ebf-ede9-4728-af83-a8d3b2126369",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f0921c82-ff4b-4128-9819-3f171466a099"
        },
        "item": {
          "id": "c80e5b2e-305a-480d-bd8e-7fabc9248d86",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f4baf09c-6780-4cc1-ab4b-9c2eed64701b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6d7ad1-ad14-42ba-a33d-f8eb8c1955b9",
        "cursor": {
          "ref": "c726efaa-80af-4c35-9c2f-bdcf5e10b710",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "878e2e47-fb3b-4a82-9023-ba5f4eadb1e0"
        },
        "item": {
          "id": "2d6d7ad1-ad14-42ba-a33d-f8eb8c1955b9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6d5f8e44-a434-4313-9f23-105acbc20b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2ca996-87f4-409d-9566-39546056e40d",
        "cursor": {
          "ref": "612dd05c-c227-4be3-9e46-dcc0f9aa2784",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c78b45a8-3d7b-468f-a7bb-21ee3de8abdf"
        },
        "item": {
          "id": "0a2ca996-87f4-409d-9566-39546056e40d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1b2f7a77-6b2c-434e-884f-cdbf6dbef6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f82a8e-4faf-45a6-834e-60af237548a3",
        "cursor": {
          "ref": "107bf37e-f4f3-4b60-ac94-fc9d916714a7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "68f497ae-9793-422c-8e15-449484767c10"
        },
        "item": {
          "id": "e2f82a8e-4faf-45a6-834e-60af237548a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "84fd9118-f800-4c47-b3c6-4a1e1b423c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c66c9d1-391d-4bb9-8b07-550a5dc9f41b",
        "cursor": {
          "ref": "cc711cd0-6801-4f38-b052-63c3ee8fcfe6",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "15639641-5ddd-4b5b-be8c-a0471d9a7c52"
        },
        "item": {
          "id": "3c66c9d1-391d-4bb9-8b07-550a5dc9f41b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dcc15c4e-2a82-4bff-9f69-365bcb6c5268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777330ef-7ed0-47da-a0f0-fb67805fa3bb",
        "cursor": {
          "ref": "ce113bcf-4f53-4b49-ba6f-7457e6c50dd5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e23b8531-4cbc-4a9a-b3f4-a7660f381550"
        },
        "item": {
          "id": "777330ef-7ed0-47da-a0f0-fb67805fa3bb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "287b542c-0267-466c-bbf1-82f80b5ed038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0780ec0-3e58-4247-a7cf-63b87391072a",
        "cursor": {
          "ref": "228cb766-6c41-4502-88de-4f4cd75fbbdd",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "027fdc81-6d25-47ac-803b-2f3fbda62309"
        },
        "item": {
          "id": "a0780ec0-3e58-4247-a7cf-63b87391072a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "54a87282-5379-426d-8b05-4596271b1f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a715f4c-bcfb-43b2-bde1-c84a2d134f2b",
        "cursor": {
          "ref": "c8ebff06-45dc-41f2-bb43-3eb58f80f8c4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ab6f1d73-0a22-4412-88e1-ce6e6d18b890"
        },
        "item": {
          "id": "2a715f4c-bcfb-43b2-bde1-c84a2d134f2b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "97388809-9900-4e07-a9f3-3d778ddc5268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0b67d3-54ed-4dff-895d-9da1daea9ed7",
        "cursor": {
          "ref": "a56a0a64-4e93-4717-9858-6f6b5733f34e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c63dc7b7-e9d9-46cc-b30d-7c33a4975326"
        },
        "item": {
          "id": "6e0b67d3-54ed-4dff-895d-9da1daea9ed7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "574f108b-4a7c-46c0-b489-41dbbcb3bdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111d243e-0eec-4df1-9609-f7502d04aca2",
        "cursor": {
          "ref": "ce820f47-57ff-46c9-b32d-d2038a3b3de3",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5b2e9c3c-6f9a-47d9-a2fb-801a938a5fc2"
        },
        "item": {
          "id": "111d243e-0eec-4df1-9609-f7502d04aca2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8ec0fdce-d49f-45b0-ab18-8d735b34c6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e591efe4-411b-41c8-89f8-299ac9d933a9",
        "cursor": {
          "ref": "625c0e53-33a5-4a73-a050-5b02ccd18504",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a787934f-6c5f-442b-a6ea-c6d09f0a3f1d"
        },
        "item": {
          "id": "e591efe4-411b-41c8-89f8-299ac9d933a9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "edda9a1e-aca6-49f2-9021-08ad1db4181c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df13871e-7757-4324-a592-27046b026eed",
        "cursor": {
          "ref": "32f380d0-d29e-45c4-b7f6-d2a75b050361",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2cbd4652-4b82-46e3-896a-26c006be70a2"
        },
        "item": {
          "id": "df13871e-7757-4324-a592-27046b026eed",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b35ad39-0970-47cd-891f-5161afa2710f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7867ab-b1c7-48ec-9445-99e96593e3d8",
        "cursor": {
          "ref": "eb7230a2-d5ad-4b10-b295-658123faa2f6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f611a7ea-f7ae-4f46-8889-aad131461240"
        },
        "item": {
          "id": "aa7867ab-b1c7-48ec-9445-99e96593e3d8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4b4f0ce4-b7fa-4c8a-83a1-b1303239e597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ad4eaa-ca63-4528-9869-2f759f8d65a6",
        "cursor": {
          "ref": "8116437e-a928-485b-866b-e0ea333d53cd",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5805a4a0-0525-4654-bd42-ab31f1b41920"
        },
        "item": {
          "id": "a3ad4eaa-ca63-4528-9869-2f759f8d65a6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6d5d2a95-c2a7-40e2-9d7b-1ebb1a7d0b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99aeb6db-0db1-4c1d-8dc2-46e48d566317",
        "cursor": {
          "ref": "41fb5c3f-54b3-457a-8d19-d77f71946867",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bf119494-0122-493c-8811-453be0f5a483"
        },
        "item": {
          "id": "99aeb6db-0db1-4c1d-8dc2-46e48d566317",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "20fa9a20-9393-4865-8fdf-5ca6d3ced5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed444eb5-ce17-40eb-b7c0-38e9d35215a1",
        "cursor": {
          "ref": "52633ddd-2cef-4924-9f71-81db92742c4f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "40bdd4f8-4353-4ff9-bde5-6f0b40e449fe"
        },
        "item": {
          "id": "ed444eb5-ce17-40eb-b7c0-38e9d35215a1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "655169d3-83c3-4349-a91b-9365399f1780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8681990-ddf4-4386-929f-bc8a58ce6481",
        "cursor": {
          "ref": "941d5ff2-797b-452a-bd02-4896d6f52b7a",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "71cdbff6-8b7d-4228-b9ce-8e172d6e7871"
        },
        "item": {
          "id": "c8681990-ddf4-4386-929f-bc8a58ce6481",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "23f418bd-95e5-42d1-965e-1a34fac686e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522de7c4-5297-42cd-9593-592d5ea9280f",
        "cursor": {
          "ref": "87d0882f-a938-47b8-8793-c3adac81eed4",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ba4917fa-9ea3-405f-ab59-e8c33192546d"
        },
        "item": {
          "id": "522de7c4-5297-42cd-9593-592d5ea9280f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "cdeef6dd-a919-4350-9b2a-408024a21ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94a430a-551e-480a-8914-7f13cf9a38d8",
        "cursor": {
          "ref": "96c1bc84-4b80-4452-9bb3-06fc4827e2a7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "24cb7fd9-f3dd-4358-8e90-24b9180a638b"
        },
        "item": {
          "id": "d94a430a-551e-480a-8914-7f13cf9a38d8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d69bdd35-a632-4324-8ccf-7aa77bf496ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772e1a35-592d-40ed-ae93-0166025a20d2",
        "cursor": {
          "ref": "d80050e8-592f-4fa0-b72b-b885f44d6e3a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9c19de21-452b-49e4-b878-facb289d7e75"
        },
        "item": {
          "id": "772e1a35-592d-40ed-ae93-0166025a20d2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e4891a05-7144-4c43-9179-d0293e90874c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93a08e1-4c8e-4907-af79-1f1aeb930c2e",
        "cursor": {
          "ref": "f612ec1c-5345-4da5-a125-b460fcb5e035",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dbb87eb0-1299-498c-9c70-9c3374f0dd09"
        },
        "item": {
          "id": "b93a08e1-4c8e-4907-af79-1f1aeb930c2e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6c2bc3a3-17a7-4351-8fbc-d3ea16fe2150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec079479-f777-4be8-9cd9-1d716b18b659",
        "cursor": {
          "ref": "502556b4-f613-4057-a60b-b59957003301",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4389ef17-ae28-4d70-8b8d-fac5f9e441a4"
        },
        "item": {
          "id": "ec079479-f777-4be8-9cd9-1d716b18b659",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7168e2ba-58b5-4f3a-9f39-dc56a71abd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21daaeba-eed1-4936-9e8d-2baba24f4d6e",
        "cursor": {
          "ref": "8b312e83-2e67-40b7-ace6-7fec95905ecc",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dabe361d-02c1-4699-bc93-00c54f65ec29"
        },
        "item": {
          "id": "21daaeba-eed1-4936-9e8d-2baba24f4d6e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "66c18397-b7a3-44fc-a5a8-3ebb8f132548",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7dbba0-da3e-4cc1-a0d8-d89929e0e9aa",
        "cursor": {
          "ref": "9ddf44ec-8cdb-41ed-bc11-e200b8ab85fb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d90eda24-10aa-441f-b8a9-060ed7f97756"
        },
        "item": {
          "id": "9c7dbba0-da3e-4cc1-a0d8-d89929e0e9aa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bccbf9b0-1322-4da1-a826-a908dc5fa049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25923002-b405-45de-9bf5-57ff47a89a92",
        "cursor": {
          "ref": "3c2433d0-c039-4258-8ae3-d7e21861bdc5",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2ae3adec-d75d-407c-97b0-2d5a82657f81"
        },
        "item": {
          "id": "25923002-b405-45de-9bf5-57ff47a89a92",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6b456ebf-b103-4c3a-99c3-e491db9427d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7912926-1216-497e-b8cb-ad1ed113d506",
        "cursor": {
          "ref": "f7e8561c-c520-4f7a-84ea-bf64da284bd0",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c499189f-f863-44e1-9919-6b997c3b45db"
        },
        "item": {
          "id": "c7912926-1216-497e-b8cb-ad1ed113d506",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "71301c86-582a-44ed-accf-03fae80526df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f7147e-2707-408b-838d-d0231380dc27",
        "cursor": {
          "ref": "6e0e713c-efbd-45b3-a4fc-00712396a8d0",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ec114b40-99e5-48c5-83d5-0097f3d6b679"
        },
        "item": {
          "id": "43f7147e-2707-408b-838d-d0231380dc27",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5e0b0b78-fac3-442b-afef-d54db884338c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f004ebb-032e-4bfd-b326-f1eac283b1ac",
        "cursor": {
          "ref": "440f86a1-2ac2-4438-8fe2-3e63a7dcb99f",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c2c01163-b161-4c74-9a7d-c19a909efcd7"
        },
        "item": {
          "id": "3f004ebb-032e-4bfd-b326-f1eac283b1ac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ff6e9d0f-c12f-4aa6-9cc3-2b54694731ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cef283c-1e33-44c2-a2d5-8ee6410c1484",
        "cursor": {
          "ref": "7233e3f5-054a-470d-900b-5fd4b530825a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bba4a88b-5ed5-47af-bb72-220ceea3c17e"
        },
        "item": {
          "id": "4cef283c-1e33-44c2-a2d5-8ee6410c1484",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dc429659-84b1-4bc5-bfb4-bb7bcc6e9b8a",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5af6e3f6-186c-4270-8a45-43fa1ed491d0",
        "cursor": {
          "ref": "f6c6caf4-0ac5-472a-99e5-c91e545639cd",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c35fd425-051d-4d24-aea0-ea357eac849e"
        },
        "item": {
          "id": "5af6e3f6-186c-4270-8a45-43fa1ed491d0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b2e75ecb-18e2-4c3a-b99c-c4775e944b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1e999e-cd19-435a-82a0-403585deced5",
        "cursor": {
          "ref": "8c9b8bc8-b1a9-4e5f-ac17-88eecf160d80",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "77d621ac-41ec-4bc3-94a9-21e071ba52d8"
        },
        "item": {
          "id": "3f1e999e-cd19-435a-82a0-403585deced5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9c04ec8b-dbed-4d48-b8e9-3de5622b2fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6698c08f-4b51-4a31-bff6-2c122ed6ef34",
        "cursor": {
          "ref": "de1155e7-0f29-4fbc-9b57-886ed02927af",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9a310b78-df30-46b4-84a2-8a03541e7f04"
        },
        "item": {
          "id": "6698c08f-4b51-4a31-bff6-2c122ed6ef34",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a922d0c7-139a-401d-bb73-5d1de5d7be0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f008f0f-3bdf-4320-b621-dcad83847b0e",
        "cursor": {
          "ref": "a86660fa-abc3-4735-8cb8-903b3f93b1cd",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f13f659d-0f8a-4145-8ebb-2eb56bce1895"
        },
        "item": {
          "id": "4f008f0f-3bdf-4320-b621-dcad83847b0e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "aecc5348-3d2c-4ed2-9f11-5dbabb909e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581ae1a9-efa8-421b-930e-d25e9ea408ab",
        "cursor": {
          "ref": "473d70e2-6ce4-4ae5-8c25-b57f9bf6fd2f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6b71ba09-4911-4e91-acbf-6c3a127d470e"
        },
        "item": {
          "id": "581ae1a9-efa8-421b-930e-d25e9ea408ab",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5de1e3cc-d06e-40c4-96ff-88ef0760a4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be79b6b-c1cb-4b4c-824a-fa7906832a96",
        "cursor": {
          "ref": "ab532338-8fb0-46b8-b70b-a680fefd7cbe",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b22a7b86-ab15-478b-b5bb-dc92fb818aa8"
        },
        "item": {
          "id": "2be79b6b-c1cb-4b4c-824a-fa7906832a96",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "53173a8c-9d0e-487a-a5d6-22bc551bbe86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14053fd6-56ff-4894-aff1-a7a49f83ede7",
        "cursor": {
          "ref": "51e629d5-63eb-4075-9972-1359483bd426",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fb7fa8f2-e3a9-42e3-9716-3dee1d6bdeb3"
        },
        "item": {
          "id": "14053fd6-56ff-4894-aff1-a7a49f83ede7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3f1db2a8-ad20-4bcb-9256-524b787b0ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6e9126-a0dc-4653-baee-4c7d32e1bdba",
        "cursor": {
          "ref": "9859dd53-f46e-4e01-ac7f-4ae37b68e227",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f46a6527-45aa-4464-8e33-0c0bea091879"
        },
        "item": {
          "id": "3d6e9126-a0dc-4653-baee-4c7d32e1bdba",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7e1228a1-074e-4ff8-a995-1e081b8be682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92dff548-a9b0-4a76-b80f-b3302a3a4553",
        "cursor": {
          "ref": "4138ba6d-0ee7-4507-9ac8-6c81e0ff5dc2",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "60c9358c-8c27-43df-bb92-7bae14edc135"
        },
        "item": {
          "id": "92dff548-a9b0-4a76-b80f-b3302a3a4553",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8e27b154-e855-4ba7-86cb-0b85003d65ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fc912a-0af4-4caa-9d7f-5ebe5e942a34",
        "cursor": {
          "ref": "703aa965-4c7c-4769-90bf-4986b035e952",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "71117262-07c3-4871-9faa-77b23313f396"
        },
        "item": {
          "id": "f4fc912a-0af4-4caa-9d7f-5ebe5e942a34",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "763d2878-7edb-4b0a-a0fb-6c2c92c408a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398028d6-8d82-4b4f-9cfe-d28a5ec3e101",
        "cursor": {
          "ref": "fcf02022-8445-4c45-8857-488c215d7d84",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "98f7ebfd-1c97-4753-b7ab-abbcc9021a15"
        },
        "item": {
          "id": "398028d6-8d82-4b4f-9cfe-d28a5ec3e101",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7f814dc5-9b7c-4b9c-a3ac-8cae2555f269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd5beda-b61f-489d-8238-bf36b8f1ed5b",
        "cursor": {
          "ref": "4d613e76-d2e2-4d73-bc3b-594cab757155",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7dd0f03d-0308-4374-9290-1e600aab5cad"
        },
        "item": {
          "id": "2bd5beda-b61f-489d-8238-bf36b8f1ed5b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f37b1463-e703-41a9-a83e-1720cbd171a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df17ba-1244-41b6-8f57-c75ca0132673",
        "cursor": {
          "ref": "59cd750a-c78c-45ed-bba7-e7471c9d0789",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "78799664-ea80-4764-8591-ad4572b595d2"
        },
        "item": {
          "id": "11df17ba-1244-41b6-8f57-c75ca0132673",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1787b93e-bd50-4b6a-b83a-4094442420cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860a5712-6e49-4742-a51e-7abbb054240e",
        "cursor": {
          "ref": "20122d60-1c8e-4015-a96a-b3b189c5519b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "77b14de9-94a3-4d20-9511-3004754d081c"
        },
        "item": {
          "id": "860a5712-6e49-4742-a51e-7abbb054240e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fb8cf8e1-3e13-4849-b623-be5150b5e7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b7deba-ac60-4d6a-8a7b-8974ec53048a",
        "cursor": {
          "ref": "4d17a1cf-6985-4869-8995-bb11150d3b09",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "afa9e24f-c64d-425c-9254-ad409f9fffba"
        },
        "item": {
          "id": "46b7deba-ac60-4d6a-8a7b-8974ec53048a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fb5b71dc-17f5-46d5-bbf1-e82a2cd4dfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f78877-40c2-491f-8d33-810d891738f1",
        "cursor": {
          "ref": "65880ce1-4490-4970-8f36-a20d9f78bd29",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "78d25d8c-0754-4052-84bd-d7ccfc985ea1"
        },
        "item": {
          "id": "d8f78877-40c2-491f-8d33-810d891738f1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "07ec7745-c446-4b81-9f0c-cf8de34a8936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c0b1e9-5e5f-4e3e-93d4-0e98e1183810",
        "cursor": {
          "ref": "cc3a06ba-8024-42ae-a837-29d74640c2dd",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dd4273eb-907f-418d-b137-194b30b1b9d3"
        },
        "item": {
          "id": "c2c0b1e9-5e5f-4e3e-93d4-0e98e1183810",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e528fd06-de98-4c13-bab7-3dc8ecda5e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42986580-8840-462e-b7ae-319692dc01f7",
        "cursor": {
          "ref": "e7b8854a-1993-4de5-bcd3-44116b8e1856",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "52bdf87c-adea-4998-a820-9915ce12a016"
        },
        "item": {
          "id": "42986580-8840-462e-b7ae-319692dc01f7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9f891f28-f3cb-4a73-bd4d-a84dc38252a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6768463f-575c-4da6-be82-fd3f2123f522",
        "cursor": {
          "ref": "fe9ea4c2-ca49-4917-97a9-1b27f5eeda2e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1347fb22-5508-4ed8-8c9b-daf21fa0f393"
        },
        "item": {
          "id": "6768463f-575c-4da6-be82-fd3f2123f522",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3883145f-3009-4deb-9959-378ddb4e09af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc6c03d-3586-4461-a5c5-b498b878c9e0",
        "cursor": {
          "ref": "28323672-56bb-4e47-a97f-166d0e729050",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1f7fa576-d81b-434e-9242-4655a6842442"
        },
        "item": {
          "id": "dcc6c03d-3586-4461-a5c5-b498b878c9e0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4cf1fb27-b091-46e0-9572-9f4b66d001c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93361ab1-a7e9-4117-969a-8479d7771d83",
        "cursor": {
          "ref": "89515d59-6a67-4b8b-a501-8ef34bedaa36",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bb4dccda-151d-4e44-9646-81caa3b2d4f7"
        },
        "item": {
          "id": "93361ab1-a7e9-4117-969a-8479d7771d83",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e887615f-fdec-4a3a-958e-c70c7215667a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a39a5dd-7830-43c9-84ce-8a59b4107fa7",
        "cursor": {
          "ref": "df0a6863-5773-4992-9e7a-7ab460260ddc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "177c93a7-32f7-43c3-be2a-6eb4622f3077"
        },
        "item": {
          "id": "6a39a5dd-7830-43c9-84ce-8a59b4107fa7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "28378c89-94c8-49b9-8e1f-d401280cee0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b7bd07-ff0f-437f-b3de-18dc33c23393",
        "cursor": {
          "ref": "7e83abfe-2d90-4056-ab72-8f0cd0b6ce97",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d75943b0-de47-4c14-ad27-a91636c59526"
        },
        "item": {
          "id": "b7b7bd07-ff0f-437f-b3de-18dc33c23393",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "04778127-32e0-4872-95c4-56f8bfb88dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b5552a-efde-4130-a578-9f3d3cb1e3e5",
        "cursor": {
          "ref": "65ffebda-5449-4008-9018-bb178c0457c8",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2de79da6-b866-41dc-a14c-ecb01554167f"
        },
        "item": {
          "id": "c6b5552a-efde-4130-a578-9f3d3cb1e3e5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6171353a-136f-44ca-803c-c05ca63a64d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988cceed-f86a-4dcf-8471-48aa5500a3cb",
        "cursor": {
          "ref": "3d67a8f2-2d50-4531-bc3e-542aa7abfdde",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "27179c70-9e8e-421f-9ee6-5d28d9b9040c"
        },
        "item": {
          "id": "988cceed-f86a-4dcf-8471-48aa5500a3cb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a09abdae-95ea-45df-89ea-087c84907952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb277dca-83c1-4550-be20-558af793de31",
        "cursor": {
          "ref": "47faebf9-5143-41d5-bfcc-bc24eab486a9",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cbda77d0-45ed-4b68-8a18-a217d34c95bf"
        },
        "item": {
          "id": "fb277dca-83c1-4550-be20-558af793de31",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4796d01c-6dfc-4687-8e2a-aebffb03d0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cc9078-7e8e-4a85-8b97-095e4c5cf77a",
        "cursor": {
          "ref": "6a898dc2-8df3-404e-9e7e-29585c1664fb",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e1f6731a-5f7f-424b-8b8c-1f418da6c8ec"
        },
        "item": {
          "id": "f8cc9078-7e8e-4a85-8b97-095e4c5cf77a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9f800b5a-c80d-4879-ab6d-6e5950981ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f55312-3fc1-4988-8d64-5fa51bcb5c39",
        "cursor": {
          "ref": "8061796d-8d3e-44e7-97f5-88d26b930840",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "eb5f7853-f3ff-414c-bb28-52981eee910c"
        },
        "item": {
          "id": "c1f55312-3fc1-4988-8d64-5fa51bcb5c39",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "40327430-a5bc-4673-b80b-93fb9c2e28bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db49324f-fa59-485a-bede-0c6e1b0e7613",
        "cursor": {
          "ref": "6e796c79-8464-44bf-8aa7-5073ad39dca5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "75c8e9bd-6971-4016-a081-4611c8679cce"
        },
        "item": {
          "id": "db49324f-fa59-485a-bede-0c6e1b0e7613",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7474f41a-a744-4f3d-b12c-008918252971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacc2ee6-2605-4f63-b305-5275ef1d6799",
        "cursor": {
          "ref": "1df83a1b-e9ec-4164-b9ed-c2549a746ddb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "19982d1c-05e3-48e9-812d-ce2e3f55d3a0"
        },
        "item": {
          "id": "cacc2ee6-2605-4f63-b305-5275ef1d6799",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6898509e-4a6c-45d8-bb09-a607f010ae75",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4a676b6a-c616-413c-b53c-ef257bb15be7",
        "cursor": {
          "ref": "c87d6d64-44cb-4a77-8864-286c18ea17d5",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "729d8729-b151-4ceb-af7f-c068968ee5f9"
        },
        "item": {
          "id": "4a676b6a-c616-413c-b53c-ef257bb15be7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e2c852ef-3b34-4187-9a0c-3a5f001004ec",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bea89eed-c0cf-4de7-bd93-fda778a99692",
        "cursor": {
          "ref": "e697d9b2-dcb1-4573-9cf5-b09cb3d6fc7e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0a8938d7-3e1f-4824-a415-87d92a3c3112"
        },
        "item": {
          "id": "bea89eed-c0cf-4de7-bd93-fda778a99692",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0b14e55c-3441-4d67-9251-18fb61319a7c",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ef19b660-45c6-4f37-a016-2a94caf435d6",
        "cursor": {
          "ref": "53f78176-4925-449c-9dce-4eeb50730e7f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "37b7de6d-27ff-4efc-a179-ecaab793bbac"
        },
        "item": {
          "id": "ef19b660-45c6-4f37-a016-2a94caf435d6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5ba5d33f-2f9e-4f09-acca-3ae89a32da9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349856d3-c3f1-4184-9ebd-ea43822e39bb",
        "cursor": {
          "ref": "4d50d151-0cbf-4643-b951-af9fe561ebbc",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0299fd70-2687-481a-9c94-cbb49c1a6756"
        },
        "item": {
          "id": "349856d3-c3f1-4184-9ebd-ea43822e39bb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "79b9b18c-b232-458f-9f49-a5a3509eec7e",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "91740864-2f26-45b9-9a01-01b6226b4fa6",
        "cursor": {
          "ref": "4ee36a9d-1ac7-4136-a7d2-42aed5cc9e32",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ef27e690-d690-48c2-ad5b-0682d9317472"
        },
        "item": {
          "id": "91740864-2f26-45b9-9a01-01b6226b4fa6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4e577ca3-e7e9-40a1-9e87-8deedcf5e744",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "61863b2f-d194-4dee-abda-87b54d3123d7",
        "cursor": {
          "ref": "f029aa47-74d3-40b4-b58b-8347923d2ba4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a17e8714-61d6-4bb2-8b4d-9938eb086551"
        },
        "item": {
          "id": "61863b2f-d194-4dee-abda-87b54d3123d7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fd50c5b2-43f9-4475-b2aa-0455880b6095",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "aa4ef199-39ac-44f5-9859-82d7abe7b982",
        "cursor": {
          "ref": "893d75d1-aa10-4f76-b3db-27d701888059",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "79483e7b-440e-4774-88a4-5dfe8bdce876"
        },
        "item": {
          "id": "aa4ef199-39ac-44f5-9859-82d7abe7b982",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9d17e604-5fc9-48df-8a11-44bfb7902313",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bb1b223d-5e7e-43d1-8229-e91e4c2d23e1",
        "cursor": {
          "ref": "89a5b05a-3fbd-485b-8215-553bd3991be5",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9a4b438a-5f0a-4490-bd62-86c2e5683e9d"
        },
        "item": {
          "id": "bb1b223d-5e7e-43d1-8229-e91e4c2d23e1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d6b75f75-18a2-4e2b-b435-e21ad74d26a1",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "6e20982b-75f8-47ff-88e0-a948ea1a8111",
        "cursor": {
          "ref": "8dc3d011-eaf2-4ea2-91f8-cfc94341aefc",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b2519137-43df-4814-9797-c5acc2034708"
        },
        "item": {
          "id": "6e20982b-75f8-47ff-88e0-a948ea1a8111",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a4b4cd41-4492-4b66-829d-7c5bec20fda2",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "5f3264eb-cc7e-4055-944f-1322bcf1526f",
        "cursor": {
          "ref": "9967ca0f-69fd-4327-84bd-c6428eee9336",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3c645dd1-3279-49f7-b014-9b8122480067"
        },
        "item": {
          "id": "5f3264eb-cc7e-4055-944f-1322bcf1526f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "415d11c5-88a1-4766-a797-16f0c34970ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f80a45-0d03-41bb-a9de-154d12d9704f",
        "cursor": {
          "ref": "44038f5f-8c1c-471a-8cfc-8f750a44f3f3",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6e405084-d77c-4157-a339-05f77791db2d"
        },
        "item": {
          "id": "37f80a45-0d03-41bb-a9de-154d12d9704f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "45493673-2be5-4671-b670-e601143429e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e85e20-ad54-4a7c-bb30-699addcb741c",
        "cursor": {
          "ref": "4c2d480b-6069-4734-b828-85e586a96379",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "23943ed7-e2d7-46fd-bb12-5ee9c71e075b"
        },
        "item": {
          "id": "a5e85e20-ad54-4a7c-bb30-699addcb741c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ddbef3ba-d317-4df7-bcba-c23d2dc07e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a42c3fb-62fe-42cf-a123-407039b0863c",
        "cursor": {
          "ref": "dfc14cf8-95eb-4cd2-b44f-dca811940f45",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1fa49e61-6b2c-4f86-9f9e-0fe26b461930"
        },
        "item": {
          "id": "2a42c3fb-62fe-42cf-a123-407039b0863c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "76008de0-5adc-4bb7-8f3e-4164f7800085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d43a3b9-881e-4ffb-ae4d-8f71919b7550",
        "cursor": {
          "ref": "4ab9518e-35b3-412a-94aa-716f3fa1da8c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ce0b2bed-6df8-4276-b0bf-cf2b51d0b29f"
        },
        "item": {
          "id": "9d43a3b9-881e-4ffb-ae4d-8f71919b7550",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "12191e1a-70cf-46cb-a7f6-a98f29e65a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f5d589-2a56-40d5-a397-55897bcb175b",
        "cursor": {
          "ref": "1c88e20f-89da-4054-804d-654a0ed906ff",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "02675d94-aabe-42c3-b2f3-a1b24851e0c8"
        },
        "item": {
          "id": "c3f5d589-2a56-40d5-a397-55897bcb175b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0e357b5e-f713-42b3-a28a-7551d83e5559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0577ab-df15-42a0-afbc-8b1ac03a6aaf",
        "cursor": {
          "ref": "8c2b28ed-238c-4dcd-a8cd-f9fd5643ec25",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "74779873-c0a6-429b-bd88-55c77a50c457"
        },
        "item": {
          "id": "5b0577ab-df15-42a0-afbc-8b1ac03a6aaf",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3e05ee61-0fdc-4d91-86f7-d2ccfa5daa0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd668588-1348-414a-ae9c-ad15225b3914",
        "cursor": {
          "ref": "5d759c59-36ef-4cd4-9423-323bc7faa2a4",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "423c9c03-c14a-4658-81cc-c0efe43c752c"
        },
        "item": {
          "id": "fd668588-1348-414a-ae9c-ad15225b3914",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dd72c89b-4367-4710-ada0-8f903bfe3163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5f139e-d00a-4b78-baf3-410367305cbf",
        "cursor": {
          "ref": "0cd91507-f5e8-4d9f-ba45-e803a9eacbbe",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eb017d70-4613-46d8-b72f-c9d4585ddf68"
        },
        "item": {
          "id": "3b5f139e-d00a-4b78-baf3-410367305cbf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1bd0f525-d564-4173-b956-0b496ebf92bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63be4d3e-90b7-4b6a-a106-5ed9fd90a5f2",
        "cursor": {
          "ref": "aef30206-b6b8-45c8-951e-e78619ecb4d2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ab323edc-36e1-4f52-868b-45e995a46b91"
        },
        "item": {
          "id": "63be4d3e-90b7-4b6a-a106-5ed9fd90a5f2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a69e6d57-8e87-494c-9365-688967d88623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed16e4d1-2adb-40dd-8672-700527e1aef2",
        "cursor": {
          "ref": "110f7d3d-8cc7-4c0b-a068-ab6d96d4e152",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5ca8d935-d515-43ac-898e-e121e81a8b2e"
        },
        "item": {
          "id": "ed16e4d1-2adb-40dd-8672-700527e1aef2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "76afc0c8-30a0-473f-affd-b29d15fda82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00b5978-827c-4e18-8c39-30018267c240",
        "cursor": {
          "ref": "72b8b855-e6e6-4c29-aa4b-eba43041517d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "65f3ae4a-7e77-4cac-9613-3a1326c1aaee"
        },
        "item": {
          "id": "f00b5978-827c-4e18-8c39-30018267c240",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3e5ee0b3-dfc3-4bd5-8dc8-8beef8cd53d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e454ad-9874-4591-bf71-6ea6ae0a448d",
        "cursor": {
          "ref": "eebd1a80-ba1e-4862-acf7-d0c2c932f7bb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1a4fcb22-ec21-4072-b2f4-94a60afb7291"
        },
        "item": {
          "id": "a6e454ad-9874-4591-bf71-6ea6ae0a448d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "552a2f97-b04c-4c40-8445-d9bfb9886e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8cb3ab-30f7-4dd5-88c2-d797b14bee91",
        "cursor": {
          "ref": "2bd11894-b7c6-42e7-9710-22d24bf64400",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "759ac968-9535-4830-9478-8de7e5e1dd4e"
        },
        "item": {
          "id": "4a8cb3ab-30f7-4dd5-88c2-d797b14bee91",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a66f8fc8-1938-4dd3-b397-59b32ea1eb34",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "305a04f1-3888-434f-818b-109b1eb6736b",
        "cursor": {
          "ref": "e871bd9c-e963-4bc8-93fd-2739e500e775",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f5f597ed-25ae-4c13-bd37-ac21809cf2ad"
        },
        "item": {
          "id": "305a04f1-3888-434f-818b-109b1eb6736b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "31047944-0ad0-4695-986b-6a4ea2e1c322",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "df913d2d-e549-42cf-abce-291e20eef951",
        "cursor": {
          "ref": "0e799ba4-aafd-40e3-a7b2-d2c524ee8254",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fa558e87-6215-44fa-b68f-7fba3f55cb94"
        },
        "item": {
          "id": "df913d2d-e549-42cf-abce-291e20eef951",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "46bb24be-ffb1-4aa4-9ca0-2d28748ecfaa",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b88f09fd-0746-45aa-a9fa-e28cebe27d15",
        "cursor": {
          "ref": "7fb9f243-0c8c-4cf5-b742-f7d8e7ddc755",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e4a03f1f-0c12-46f7-85d2-8dd5f5ccdce7"
        },
        "item": {
          "id": "b88f09fd-0746-45aa-a9fa-e28cebe27d15",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6d8f0af2-2290-4e01-b15f-45cf4647a3d6",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a863cc82-5f14-4934-afd4-1d65bcb37c42",
        "cursor": {
          "ref": "a746e610-e55e-48df-96c7-3ce0413e09a8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9c9b421e-a1c7-455c-944e-4a08ab72cc7e"
        },
        "item": {
          "id": "a863cc82-5f14-4934-afd4-1d65bcb37c42",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "45b6c23c-f54d-46c4-bc7c-9d7c12cbf711",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "879dc9c6-db5f-4753-ba2d-ad42667f57f1",
        "cursor": {
          "ref": "4af57057-8b84-4d3e-afe9-76d019b5ec10",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1127a4de-e64b-40de-97ff-e036dc3c92ee"
        },
        "item": {
          "id": "879dc9c6-db5f-4753-ba2d-ad42667f57f1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9b9b21f6-a491-4b4d-8d4c-e792665f1919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139e9b58-dd9e-40bb-9e6b-6545a3a022d8",
        "cursor": {
          "ref": "0436acd0-0299-43df-a12e-8ba0e589504f",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ffc4d59f-eee2-44f0-b200-547509a7f009"
        },
        "item": {
          "id": "139e9b58-dd9e-40bb-9e6b-6545a3a022d8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8693f32e-1caf-4133-914a-d7736b8c787c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ccab87-931d-4092-9b51-bd426c1f41d5",
        "cursor": {
          "ref": "16d4bd81-30f1-4b6c-9a5c-a26e8b9c7539",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eaee2c6a-35b3-493c-921a-057ba5561061"
        },
        "item": {
          "id": "e9ccab87-931d-4092-9b51-bd426c1f41d5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7af39643-e7ca-48a8-beb4-2731fbdeb0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259cd6e3-985d-43bf-9c91-8b1277c129aa",
        "cursor": {
          "ref": "9b485520-f2b8-4c67-b38c-ba433ba20a0a",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "49b2fdf7-8602-4e1c-8d19-60dfc7f8e0cb"
        },
        "item": {
          "id": "259cd6e3-985d-43bf-9c91-8b1277c129aa",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e3582ac9-5e60-453a-a869-c0af2bbd3599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d50fcc-766b-4138-a076-eb5acc27bccf",
        "cursor": {
          "ref": "b9ae841e-d512-4aae-9227-766f455421ca",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9e9d8862-2ca5-4379-9e70-4d7afe7d8e25"
        },
        "item": {
          "id": "58d50fcc-766b-4138-a076-eb5acc27bccf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "437644c1-2f5e-4b93-9292-7d4460ee2ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f66e2aa-9e6d-4505-a685-d51083c97d87",
        "cursor": {
          "ref": "6a0472d7-b00b-4101-9254-bf8a6aab31b1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7ef26635-a35e-4655-9c78-821af852b503"
        },
        "item": {
          "id": "9f66e2aa-9e6d-4505-a685-d51083c97d87",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3de475b9-4e06-4783-aabd-c242a8a531dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c8e3cd-7194-45eb-9759-583f7cf9e890",
        "cursor": {
          "ref": "311385b4-9729-4488-8280-6c5d0ab8a7c0",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d836568e-e74c-44a5-9d0b-702082148145"
        },
        "item": {
          "id": "21c8e3cd-7194-45eb-9759-583f7cf9e890",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8ae6cbbd-07fa-4850-b73b-231ff339db7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4fe1b4-6bfa-456f-abad-4c766f4d2526",
        "cursor": {
          "ref": "4ec55bd6-3bcb-4631-8899-aa4dd2b4ab6a",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b005a365-768b-4524-b1dd-15bfa0fb742f"
        },
        "item": {
          "id": "1d4fe1b4-6bfa-456f-abad-4c766f4d2526",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7b213da3-df97-47e8-b3e4-db2430e24096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab83ba5-f3c2-46ff-bc8e-74c7d6652aad",
        "cursor": {
          "ref": "9d743777-c757-4f32-a586-6d7b1412c21e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "dba1e054-f769-4809-be71-6ade3df9de8e"
        },
        "item": {
          "id": "2ab83ba5-f3c2-46ff-bc8e-74c7d6652aad",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e8e8ec42-30a8-467e-9ab7-f3c4ae7d9e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a7a06b-9b87-4d6f-a815-07d52ebba3c4",
        "cursor": {
          "ref": "409db79f-db5e-4ef2-a25e-67ca2d7f90cf",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9233bacc-a036-4ff7-89ab-f7a66e6a8a88"
        },
        "item": {
          "id": "d7a7a06b-9b87-4d6f-a815-07d52ebba3c4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ca6a20c8-0a1f-43f2-bdfa-27410fbf8124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc434777-a50c-4de6-901f-3cc4d328bea1",
        "cursor": {
          "ref": "747734d6-0397-45fe-9d9e-6eefdcd2e5b3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8d7fe852-b68f-4989-a88c-0f759f92188c"
        },
        "item": {
          "id": "cc434777-a50c-4de6-901f-3cc4d328bea1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "963363d3-df5e-4b51-9e23-cdbc7ab213c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac6dfdf-1388-4f56-93f9-d6f91f31efab",
        "cursor": {
          "ref": "6f1bcb14-6566-430c-ad4c-c708a402e42a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "25f1b7da-7e3f-4191-afa9-b8c53adae7c8"
        },
        "item": {
          "id": "fac6dfdf-1388-4f56-93f9-d6f91f31efab",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5135f20f-02fc-4c76-844f-fec290056db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab65813-f843-4602-a3bf-cdd7219136dc",
        "cursor": {
          "ref": "d17a0afb-5690-4427-9683-8909d5eea455",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dc847325-7dbc-46a0-8b7a-35cb01e93e86"
        },
        "item": {
          "id": "8ab65813-f843-4602-a3bf-cdd7219136dc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "63b7021c-75b0-4034-8717-91c1dc84bceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c0f306-5b07-46fc-bb5f-b0240b8849c8",
        "cursor": {
          "ref": "744e1a6c-9672-42a3-8a89-9940a11b3857",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "01f1ea39-faf7-40be-afc0-4d586ef181ab"
        },
        "item": {
          "id": "18c0f306-5b07-46fc-bb5f-b0240b8849c8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2f4b8978-3efd-41e6-bec2-eab14bf8e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e503e6c-7684-4c96-95eb-9c249c7a109d",
        "cursor": {
          "ref": "e95f1d23-5fed-487a-9ace-ff3161921d2c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "906b2192-2b96-40da-973a-5c769f99e060"
        },
        "item": {
          "id": "8e503e6c-7684-4c96-95eb-9c249c7a109d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ae6b9533-f2b7-414b-9b64-d0721e0338a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927e5352-3ed0-4510-a411-aabfd98c50d3",
        "cursor": {
          "ref": "1b64d160-5bd3-4c49-8228-744507802ca2",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "396917ff-3bc0-45b4-94c0-a72c7b852912"
        },
        "item": {
          "id": "927e5352-3ed0-4510-a411-aabfd98c50d3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "64f8e27c-cb07-42dd-a78a-6a8581da32ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c197d873-3d3c-4287-8b0b-aa032d7d7321",
        "cursor": {
          "ref": "e459361b-40bd-4aed-8603-58eead48c648",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ddeb208b-2b44-4388-b287-2197e113f2e4"
        },
        "item": {
          "id": "c197d873-3d3c-4287-8b0b-aa032d7d7321",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7be5b5d6-5686-4c90-ae2f-abd7ae4fefb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c072e44a-f264-4a7d-a80a-c88f303343ee",
        "cursor": {
          "ref": "0d61e504-90e8-42df-ae57-2b109695b613",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "61bf09b6-9198-4097-8abf-40d3454d7383"
        },
        "item": {
          "id": "c072e44a-f264-4a7d-a80a-c88f303343ee",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e26687a0-c38c-4c75-bee9-3b02f0cc6996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9033b065-91fe-4091-ae39-93f9dc8f3efa",
        "cursor": {
          "ref": "4b015b83-0761-48f8-a93b-aeae67be3fac",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aabf6550-985b-434a-ba3c-057f648b666c"
        },
        "item": {
          "id": "9033b065-91fe-4091-ae39-93f9dc8f3efa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "67ce5bd9-10b0-4c81-abc2-57196e1cb512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5b9471-a7e5-4c62-b8a8-a83d12c3d538",
        "cursor": {
          "ref": "4ddc6feb-bcd9-4bac-aca6-5dee4a0d19eb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a5b9feed-0168-4787-adfb-f36d3bf7f1ca"
        },
        "item": {
          "id": "eb5b9471-a7e5-4c62-b8a8-a83d12c3d538",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5f5690b4-6007-43e8-bf9c-177371521565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1dab93-b684-45b6-a2fe-7ff4c0ae5365",
        "cursor": {
          "ref": "07859866-624b-4c09-b1f2-5f2e7a726e6f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "02fc184d-f31f-4e93-8ff3-9922ae2bc2ec"
        },
        "item": {
          "id": "5f1dab93-b684-45b6-a2fe-7ff4c0ae5365",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2f976dd3-f375-42ca-971e-ce3c8304c8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d292cfa2-3c46-4b4b-bfd7-d70fb3f01c92",
        "cursor": {
          "ref": "9d1a216e-6064-4818-ac7a-553fbfc0c083",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2d3fd048-11d4-47e3-b72c-38a0f625127c"
        },
        "item": {
          "id": "d292cfa2-3c46-4b4b-bfd7-d70fb3f01c92",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8461a429-3326-402e-bbb7-1a37616dcfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0902beeb-cd34-4b6f-aea7-173bfc8c5c5f",
        "cursor": {
          "ref": "bdebbfdc-466a-46fc-a18f-196320e300b2",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a5092b8-54b3-4340-9f29-f71ad74993b7"
        },
        "item": {
          "id": "0902beeb-cd34-4b6f-aea7-173bfc8c5c5f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "51b05c42-7bca-4fc0-8b38-7c19b68f905c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1638690-44a0-4784-91c6-0df13c4ddfd7",
        "cursor": {
          "ref": "78ad6f7d-a1a9-4275-9151-411419180883",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "040fdc85-c2ba-4907-8c13-ae7381c7d397"
        },
        "item": {
          "id": "c1638690-44a0-4784-91c6-0df13c4ddfd7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c577ec41-630a-4132-b225-6d7f163a94dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e947ae1-1017-4bd1-8fa9-be1163c9417b",
        "cursor": {
          "ref": "8ec965cb-8835-4fea-a33c-d6a56da2bda8",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "99be656a-328d-44e9-8c27-80b60b772be5"
        },
        "item": {
          "id": "2e947ae1-1017-4bd1-8fa9-be1163c9417b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "92005f06-ac77-4492-a9ea-8b5e0b646f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb50799-8051-4fc6-9be8-ae64afc321c4",
        "cursor": {
          "ref": "6147ee4d-b08d-4088-ac51-3b10cc9fd333",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5af3ae68-9b1f-4753-80e4-67f43458ff13"
        },
        "item": {
          "id": "2bb50799-8051-4fc6-9be8-ae64afc321c4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5e18a6b5-d490-4f46-9709-680d6ae3ebb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cc9086-b222-412a-a027-e5402aa20827",
        "cursor": {
          "ref": "8abc351d-28b7-4cf4-8349-c2352481aaeb",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "001fb580-5a4e-4d99-826a-52ae1a3715ba"
        },
        "item": {
          "id": "b6cc9086-b222-412a-a027-e5402aa20827",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1056ba7c-30d7-40ec-895b-08535989d633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31020a74-44be-4adf-a952-b10289c4c95f",
        "cursor": {
          "ref": "c105bd96-7e62-4cfb-a6dd-8506556f138b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0dbe1179-cdce-4a0f-a747-79427a89f419"
        },
        "item": {
          "id": "31020a74-44be-4adf-a952-b10289c4c95f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "003c6ba5-1727-49b2-847d-bcffcf86d141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079cce39-2dde-4705-bcbc-8467324ff826",
        "cursor": {
          "ref": "a4225be5-ec84-4afc-a8e7-e3a16a7149a0",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "40bdeebb-eff9-409d-a349-5b7de276a39e"
        },
        "item": {
          "id": "079cce39-2dde-4705-bcbc-8467324ff826",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c22f13a2-4110-492a-b759-973e89c306a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dc4973-10fe-4f4b-a1d3-9d460ca16016",
        "cursor": {
          "ref": "774ca282-8e2d-4084-8c60-1259927a186e",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1f157b91-4868-4042-8864-353c712a3ee5"
        },
        "item": {
          "id": "94dc4973-10fe-4f4b-a1d3-9d460ca16016",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f30fb0ba-a44c-438f-a17d-aff1f6b3f90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c197f05-1aef-4acc-b06d-8791b3e3dc26",
        "cursor": {
          "ref": "785ee48f-4e92-4fdb-a290-da09d2ec56fd",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "34d01e02-eadb-4e13-8a32-720d4b7a36c3"
        },
        "item": {
          "id": "3c197f05-1aef-4acc-b06d-8791b3e3dc26",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "332d7332-60b6-4f09-a760-051af4355a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79c91af-8207-4049-ac46-4078cd2f272f",
        "cursor": {
          "ref": "4e129475-caea-43eb-9425-1a61ae0e6129",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ad0eaa82-85ed-41e0-8112-902d1d01fb4e"
        },
        "item": {
          "id": "c79c91af-8207-4049-ac46-4078cd2f272f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3e177fbe-3aac-40a7-8721-a41da17a9570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8fe51e-7c3d-4cad-8a7d-34e95d53cad9",
        "cursor": {
          "ref": "9788b507-c66d-42ea-9632-e446527f8c1f",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "70c04661-d200-4dc5-8974-4253a9cc09e1"
        },
        "item": {
          "id": "ed8fe51e-7c3d-4cad-8a7d-34e95d53cad9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "21d215f6-b782-45bd-9ade-ee93d8230b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f62751d-3359-4122-a061-4d1abc889a1a",
        "cursor": {
          "ref": "a726089c-dd76-4056-9b66-a2acb1bb9fd9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "492e3355-4dbd-4e4d-9c22-918a76abbdba"
        },
        "item": {
          "id": "5f62751d-3359-4122-a061-4d1abc889a1a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "290f43d6-ad06-4159-a5b1-09bc91da4215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c01b065-c245-4536-9548-23608b801e8d",
        "cursor": {
          "ref": "f1c1b702-ffe5-4a13-a582-d2e8afd7a0e9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "680d14ec-5510-42d1-aae8-e3e98664d08f"
        },
        "item": {
          "id": "3c01b065-c245-4536-9548-23608b801e8d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "67a9a51f-65fe-41da-91c7-2630d4013cf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78612bc-2226-4558-a6de-f1950a291279",
        "cursor": {
          "ref": "10ef82e0-cb90-4072-bca0-b3c7c66fe082",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b5208f4f-5f88-4d56-b87c-dddd354a8eaf"
        },
        "item": {
          "id": "c78612bc-2226-4558-a6de-f1950a291279",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2b2d5433-d065-4e90-97a9-9ca277440b0f",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "256a65c0-e0d4-4fe4-b942-97c1936f49e0",
        "cursor": {
          "ref": "b06704a4-38c3-4fa0-9b58-3fbb720a0ecf",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "379b9010-c1a4-4fc8-98bc-9d5e862f0db9"
        },
        "item": {
          "id": "256a65c0-e0d4-4fe4-b942-97c1936f49e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e2f7dddb-1e8f-4095-be41-5097b10fec3d",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb14f9d-95fe-408f-a276-eb43d4c4eed7",
        "cursor": {
          "ref": "021c2cf0-0d5d-40d3-a6d5-cfadc0baea2f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1b638098-dd26-4039-a0e9-914165a30301"
        },
        "item": {
          "id": "4bb14f9d-95fe-408f-a276-eb43d4c4eed7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f44476df-f1ff-40cf-89f1-a59c25709cc0",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cea9dd-67ba-4938-8663-4bfe5160b101",
        "cursor": {
          "ref": "979011fd-6ba7-4ffb-8e78-4c7c64ff8b2c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "96c3522a-ccf0-4bda-a3eb-fcd83277ed69"
        },
        "item": {
          "id": "d2cea9dd-67ba-4938-8663-4bfe5160b101",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "514f7e92-0cbc-481b-8c4d-ebd80487bbdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cea9dd-67ba-4938-8663-4bfe5160b101",
        "cursor": {
          "ref": "979011fd-6ba7-4ffb-8e78-4c7c64ff8b2c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "96c3522a-ccf0-4bda-a3eb-fcd83277ed69"
        },
        "item": {
          "id": "d2cea9dd-67ba-4938-8663-4bfe5160b101",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "514f7e92-0cbc-481b-8c4d-ebd80487bbdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c13fe8-ed8b-4488-ad9e-fe820e7aaa37",
        "cursor": {
          "ref": "9bb05e43-3f09-4340-a307-79618c9282d5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "39247240-e136-43fb-8228-69a5fe3a61a3"
        },
        "item": {
          "id": "c5c13fe8-ed8b-4488-ad9e-fe820e7aaa37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b7ba4979-f7c8-4381-b8b9-2e65a352be99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3f2592-3627-4843-8e28-35c41495d539",
        "cursor": {
          "ref": "d9ec0804-c619-4e36-b308-074d08283845",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "33ecea6b-21b2-4894-8efa-2ed5d6c88da0"
        },
        "item": {
          "id": "2a3f2592-3627-4843-8e28-35c41495d539",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "76fc2fc0-bee5-4f34-bbd3-cdbc71f3d68b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}