{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a8fb7d89-bae0-4f85-b975-88aa7cbe40f1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "43a9c447-7886-482d-aba0-cb2468fc669c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21489fd8-4dd1-4d44-a2fa-a323c9f567e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4ae4008a-6000-47df-bb51-3f54c8d54a71"
                }
              }
            ]
          },
          {
            "id": "6e31dd48-717f-4114-aaf7-31f1531155c3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fb6ef17-3931-44a9-b25b-8c0d6ecbb469",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e82f9aca-d7cb-4f4e-afd7-de5c57589883"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "be09b01b-9a8c-40a5-8661-009be505d091",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7b26d4d9-4b44-4170-b2f1-6171b1866de4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97ff1dc2-0792-4edf-ad32-c167776464b9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a907f00c-e8e2-46b5-9033-5fcb3a3ce324",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e69abe5-a367-48f3-bf31-7405347d522e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3284c0e9-d134-4769-b214-00e68ccc50bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51b652c4-c577-4241-a607-7937fa0c22a2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d13e590d-cb81-4a8e-82b8-a0d7e3bc08f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd397d42-118c-4bc5-9bdb-cfcc30758b59"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3250e5d8-df7c-4863-a127-e868f0b9fd67",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a7a6a7a0-f6da-4dc3-a602-305f6d1573ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05f49c9d-3471-49eb-9ca4-ad6a48c0df58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f4b48a9-7644-4355-a279-8dc66f8c83b3"
            }
          }
        ]
      },
      {
        "id": "abf2642b-9ee0-4a96-bed8-a283b586d713",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bd62ee3f-b1bd-4957-ba74-eba1e022a35c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54626e77-7a54-41bb-8cca-7da6e2dfafe1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "321e3f0d-c37d-48dc-8b12-b31842ea3c48",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507ae42f-ab6b-4e51-9ffa-448eb1a65242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4221899-feea-40ef-86dd-16c9835e15a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba41186-3125-427d-8ab3-fab5364795f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a51e1d-f8ae-48f4-93bb-b5fbc9145572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99341772-2627-40ed-b627-51b765aaf77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d527cb7-a96d-48b8-a8d8-13318832d90d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b8cabb-b2ed-48df-9f86-e1a1e8bdb41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "152df1b0-7cff-44c9-bd1b-a282e20e4b31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "751f08e7-b9f4-4329-876e-131e2c62d797",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab4d720b-e9a2-4554-b4d1-90ebfba002a6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9941ce0-651a-4d26-9aaf-9f9de93fa974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0fcc8aa-ac10-4a06-af5b-568e5dfa79cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855212ed-fc0c-4f6b-a4f8-ccb787e0330a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b54780c-f4e1-4a6d-8b6f-9934369b2280"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf4a3b76-4d15-4a5b-b2f7-d7d22307f5fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "394f63f2-7d32-4a76-bed9-dce2860f06c4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cd37aa5-4b78-4d32-883d-a83e65c96603",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1dd69193-f31d-4302-b277-c6dbb4273bc2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "868d65f5-3c14-4a29-83fb-a8224c51d3d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5b8a9c33-cdaa-43ca-af69-370f689f5edc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf05a52c-5bcb-45be-9ea0-581b590a315c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2800d50f-4b2c-49de-993a-1f4aed9d5965"
            }
          }
        ]
      },
      {
        "id": "16a097a5-d85b-4205-bb7c-f13392dbb501",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9037ce4c-2819-46aa-a913-ec6832705c95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41bf80f5-1d86-4761-a68f-dde42a7fc1d7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fc232393-e48d-4e1c-a511-f6dde6584cd2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe2315a-fa20-43ec-a81a-204500484773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a85e64-ae13-4dd0-a7d0-bb9b518c5016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ae753f-dd15-470a-b21c-af55f8ef2a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba3d577c-26ff-4b64-9c90-cdf73c26d0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab622c9-ae1b-43a2-a668-2cc5ff79c495",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498d383f-a7d8-4ac6-bdf9-32f399c34cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5670d20-8853-485e-835a-3ee116fcd87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e360dd6-0952-4ad7-949e-5a94d4b1c7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "662b3a1d-13ee-4e34-8425-ce4e0a0445f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91b4837-d863-4dad-ab79-ac4b288a3de8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60a0ff6-a1dc-4152-a908-16d40ea4133e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f07a55a-b1ad-4c36-adeb-30a18e673910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124f8f26-ea52-42ea-9382-9a0ecd793e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "553bd47e-1508-4e2e-b245-75ec34477237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f55455b-3d12-4fcf-9a50-8b841e819a37",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52a05db-1374-402f-8824-1997b32e71f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80257d4b-3b5e-48e6-9f76-6bb8474f2b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a473717d-32d2-482c-beaf-5e25888a3f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2abf6406-5ccf-44b4-bb5d-9620a26463a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46f3e02-faa8-46c8-9a57-5ef3672e14b8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89171aa0-0fc6-4451-be41-1c7633277000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e2656e-b17f-49b5-9619-55c110149763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043103fa-3bf0-4a76-af02-7c5e4c3a9afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a78afe83-286a-4b38-9d1b-be09f4bea058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d674a081-f496-47c9-91b7-1cd80448e506",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dc5099-cbde-4a1a-bbb5-e2274c2c81f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028da11a-a131-4342-82fb-641f4752ca78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3cb6ba-aa14-4bd1-9d75-fb70bf4f7870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "916369b4-bafb-4526-8cfa-b1b60eb7dfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f17194-2de9-4a7a-87f0-d8e10a4f3855",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f68189-6ef2-4bf1-9ac2-3dea097ead67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56558a4-e575-4494-8379-41cff25d149d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca879430-e9e5-4b68-8454-7cedd0b144b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13a09931-e143-493f-b66b-3b357fa7c29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe6d25e-d129-4723-a115-45ccc117b0d9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef89185-8b81-4c9f-ac7a-3ee1ec211610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ccb160a-f0a4-4636-ba13-e74551e03d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d8fc6a-441a-4f4a-ac95-052e12e5e3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87605860-9f69-408f-a7ea-8a97382a6dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cd2a14-2942-4a79-9527-e33c5602928a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a685cf-83bc-445a-b315-b3c560cea00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e142f32a-c007-490d-876e-28a887f33ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc7ec25-c675-4fd5-8c45-2a5b93df0bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16149ad2-b404-4321-aeeb-ea2421971470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b194f4-df11-4f58-9172-919414211cb3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6129800-d481-4c3c-bcee-79abbc2c2584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157a73fc-6035-4573-98ff-b66b4f4a9b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e992c8f-8388-4b87-aa14-d5a4b9d725b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02833264-f7e4-4913-bcd3-1683e6088a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c492bef-186d-4600-bc3b-d2739e35fcd3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55699daa-5735-4f17-ab13-250837aec92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcff21ae-690a-4525-af9f-e810ff3dfac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171d49a8-0d0b-4e9c-9050-1bab53e33107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21d1d8f2-77bb-4e63-a85e-363fe8244732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1166404-db48-4558-a7c1-b30ffbd88d92",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07972fbe-8465-4c9e-8dac-99e70d2776ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd5cc6e-aad0-4c31-b566-5bcc7dd14fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3692fa4-e6b1-4866-84a0-5250d45c000b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdccf15c-9026-4cc7-91ff-26600977d955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8711e3df-e0fd-4cc2-bc0d-41ee7bcd37c3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96786344-f0f6-4da0-98a9-7d9cd008cad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53da7fe2-c092-43d1-ada2-6208fab91c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46524d6-69a0-496b-98e5-6202adb1329f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5228d1b4-d77b-404c-b117-58b083d254fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e2aef2-8542-4270-86e7-b5fa35948b48",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525dd2de-b601-4ee0-a78b-8a16f30a34c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc0487a-9f34-4927-b80e-d1e496e71169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad081973-c1df-4aad-aefc-1200daad7428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8770717-b24f-4cdd-92f7-b43b181bec62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c3110a-ac76-48c1-8b66-7bad4a9467a7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524b39b0-4ca8-4f74-b3d6-d539e10b1f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b10bf9-aa03-4449-b9dc-24d0ffd5d934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca4204c-83b8-49d1-8ef7-13dd99cd17f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcf3f5ce-6867-4295-9ae2-bb2b9cf7c9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3ca725-2f64-4c4e-a712-c4da2e95090e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8861ad-5079-4228-ac2a-c1ebae599330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de548704-f6c6-4eeb-91a3-32d3cf005c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c316c5-1fe8-40d3-b940-1ce12e7aca07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d3acb27-ca04-47b5-bcca-28c3d1422426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f1bf29-7f84-4177-bbc1-4fc1458b518b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce42b54-2e1b-4448-832f-ea2a258c7e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4554d9e9-5d4d-42cd-a1b4-348b98d67835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d08b40-ba4c-4c33-8735-9163c67ff61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc9e65ea-b667-4a8a-9e9b-e8a2e55a85d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca02cf62-9d46-4a7b-9784-1a10d4ea5d8b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e433a9-2aaf-4c80-8735-a9c3714fdccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006f1276-ffa3-48d4-84e6-77edf14e20c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1102f23a-b2a8-432c-a767-42b04657439e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d74d513d-1aba-4fd6-a478-eb75a74079ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e93300a-51b7-4d8d-81c4-c65bc68d7518",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3042bd-c1ba-4681-b6fb-f9cd033c206e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ec4d8a-0c29-4341-8c32-9afd790c25b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fccd59-d213-46b3-a6c7-873071cb28fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af1568ed-63b2-4398-aa1a-40d894f16582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaeab5b-a3de-4fd0-94d5-84452b44e0d8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd470807-58f1-4aaf-8020-53bfac8219ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae58faac-877c-4a60-9874-5967c1b82488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87117fa-6afb-4219-b655-d4a2428a3359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d30c32-3b13-497f-9169-c5538bc9037d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6362d77c-91b0-4dd2-bbf1-64321ed8727b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff21a7c-862e-4fdc-8b3c-5ce292169339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c28d57-286f-485d-878a-79379a5aca11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bfdc40-4546-4b99-ab85-baffb80beedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5f0f84-e315-4147-b1a1-b29bb4034a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f78df32-14fb-40d2-b8a0-ee41fb2e7692",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47e1f1a-e2c0-4f32-a363-fcd6a775e991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee135134-83e5-4355-b05e-5d84b6b58024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386b9a14-7f96-420f-a519-8ba01e25ccaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b34e63-b69b-42f8-b6b9-6d5a7c41595a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd31342-1451-4ffe-83f9-08a17490a253",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9fc174-c3af-42b4-870d-1ccb0f846cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af80ce55-73c6-4806-b4f1-32e5fcf082d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55f348c-66ea-4885-b96c-d1b0fb2b5575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "412b9bc7-7cb0-4bc0-93c1-2c255464ccb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3a995d-0bc9-4935-a1b8-8f7fc9ddc196",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122f2bab-3d00-49da-aaa5-c21ddaa1bdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9874fecd-a03c-4f9b-9f52-4fb17e5a1bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2614a9be-eb8b-4941-8ac7-4e400dc71e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9681645-2e4a-4c38-92d4-c27aeba90e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baedd8db-ee55-4d3e-a50a-d69a710df35a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5522bb07-3390-4ca5-9fa6-04d662116c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4f5e48-c5ff-4151-a76f-f4cf0dd72004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ff119b-6e0b-4630-bfc6-5c4643842dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "833f1855-8235-4b1d-a202-5e1ccff9f69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f377d2-d913-444a-9e26-ba1b65c649b8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdd184c-055e-459d-98f7-0c5a90052403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59740117-e784-4195-83dc-36c126b31b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90de394-ae33-423c-8a15-62688cf948a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a2aa06-7158-4a9a-b95b-5daec061e28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764d1200-0220-4d67-bc1b-9a5dbfab1b75",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caaecb7-a2e3-4e62-a8fc-8e7184cbad37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c41518b-b0bb-4b9e-88a0-355a981d1e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e44dc70-e4f3-4a18-9dfc-eb75dd8cee4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1b1607-c93e-4ed4-9f13-55a4ff970572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ed87c3-61d0-403a-9f04-5bd8a8df922e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30ee676-92b5-44a9-9827-8f6fbccafb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64a488b-27bb-43fe-a612-87d5b6c469f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0621aad3-9dfd-4faf-a901-828de65e0ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b7ec8f-8f41-4d8a-b898-f18a229c5bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7212cb52-e947-433c-ae0c-257c79b750a1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7318ab2-258d-460f-91b9-1276421ddf72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4e48af-24a5-44a0-ba9e-dff107e4b59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4079c65a-3460-454e-a391-508f2ea94048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "589644a4-786a-4985-bd0e-50ed05119f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d865368-1b74-4102-a0a0-20b088b73d89",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc06b6d-67ff-4998-8c8f-b9403d1f7614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72589d6-43a6-4862-a262-a5f309c34e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7fea1a-eefa-4c92-935a-d7267d89b0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7cc48f-370f-47e8-9f0e-93461c98cef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129777a7-6b79-4eb6-8b9c-bae0b574f518",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360682f8-8127-4338-9c26-a9a3fd50ef5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ea8689-fa85-4b3b-88f7-75846c7f7b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39fc14f-f571-4518-b73b-126fc50eff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "740ef649-216a-4068-b893-a21666d38d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0253eee6-a4cd-4a4a-9923-eda5d5de357d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded69b8a-aa36-4be1-af77-ca0fdf784629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e56e88-5487-405d-bf4e-7f980ba876b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68dffa3-39d6-4a99-a2b3-c18e07d33b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56eb9208-e2e0-48c6-956c-e71d7a78516f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afdf3a7-95d7-4229-86ac-e61948b9c3c5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9a80d9-1657-4e74-b42f-fae2f35d4fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8725a8b5-a217-471a-b4b9-58e431e9b732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d660b48c-1ec7-437c-8342-579e29644b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f7ead5-d79b-4f3f-afef-b3d0e970eb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dae1d02-fc65-4876-8ddd-0e5852c366c7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f21af9-33aa-4d89-b7b1-0b94c4b181f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f352b74d-ed25-4aae-91b4-a7907e780210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df072aed-980d-4daa-b717-0d05b7fd20ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fddc10d7-e7cb-4921-b194-dbcbdf3e39bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0cec56-c2d6-4964-bc0d-a57113cd4da0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797d2d8c-600c-4d2e-8e32-a2147b93d053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2d2f29-eb2d-4697-aae4-808b2c55ec0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc288fe-48c3-4803-bdf1-e41b46b96496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb36cee-717b-455e-8d54-127a3cf6d7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b913835-ce40-4513-b03d-a97ddd2b03d0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a11ec02-288a-487e-9cb4-4d15a91ee681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08c8e11a-e078-4db0-9cd8-62cb8938e103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87f3b40-b021-44f0-96bc-28934b911842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bac51bfe-481d-4181-b2c3-a1625fcbd314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487cd9c2-0fdb-42d0-a45a-842aeae2044d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8c1d5f-1c7a-4034-8ea3-28338f72dac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec8072a-8eb3-4da9-8f65-96d79a23fef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbc8adc-9578-48d9-8b1c-a53b8e72d8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14a0e823-2d26-43f5-b821-11f603f9f5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1a7a7e-3fc5-4789-b3b7-b5773390f73c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3722176c-29b1-4499-a350-ce79f3477a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e19747-7b59-46c9-a656-7dd908136a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9696c24-bbdc-4fc6-a601-41c2de331035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0f0743-59ee-4c97-a1a9-3c0f0c8cbe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6c149e-67ca-4da7-9432-f3ce048f8f9f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ef7b65-38e0-45e3-a2e7-3a36a11781c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56e613f-3db2-4901-8f1a-4799e2e5eacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccbc98d-86e8-4787-9211-1faa344e8d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad552b7-bfbb-4b6e-a785-4534828f0620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183c31a8-2228-48a4-8072-f0a985af84b5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dd81bf-960f-4cfb-b608-8986ad98f554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52799b04-5378-4059-8eb3-1c4058448eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615a7f52-24a8-4442-8e54-49d812ec0f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bb324c-24b3-4663-bdfb-e8db25a51cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c5fc59-6400-425d-b0ac-9b3c87f1606f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d1f122-c144-4721-8975-bcf66429ace0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0bb789-4965-404b-90af-708b2450908d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6e734a-2682-4795-9c07-037be132c67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba42ee60-cc8e-4680-9146-bb479b7389fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e38f679-5087-4e05-935b-aeede721d264",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3110d540-6e21-439a-b44d-d6bf93573e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4140992d-fa0d-440a-9e39-161bb120d5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fc1c9d-1969-4fcb-b352-660e2264c2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa8785a-b11e-4158-8a82-de01ea2f7740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f28175-638f-4c04-9bb1-a499aa16dea4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931ed891-2b46-4e15-ab27-99b797199634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64800c59-85e8-4cd9-b94b-1c09d060b464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5fb253-a07b-4b42-8ae0-39a213cd6ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "688969e4-a9f1-446c-b175-06056e845e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413f407c-4f33-4f3c-ab31-8d7435ba6328",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db8c093-7943-40c2-9392-67f8559e3724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bac012-7389-46af-8adf-72bff7cfc5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24e73e1-267c-4f01-9068-1b709a34640f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1864d2c2-7d68-4297-8cfa-f143e62c32c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53f4583-d402-4b96-b84f-995c2ae61a13",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8217c5-189d-4e44-8f0a-87ef62f33b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5bdbae-55f2-4fa9-81e2-18d689ca6f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf99717-aa40-4b58-9ad9-eb6a2605cee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e76b14-297f-4c49-a50d-ee39287ff2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fc6346-9b7e-488d-a394-e775c093addf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42339bb3-dd36-437e-8dd2-078829063ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0bafdc-527a-41b8-ac33-c73d72fdfb7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecfa185-2f18-4351-b090-5867972a55d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2dc9b7-a7da-4bdf-8e90-28162bfeb465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37b770c-adaa-4dea-8800-d53781cc9326",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d18d885-96a1-426f-b820-5e348b0fa050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dbdbd21-0705-4bbf-94d9-63a975e803be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da42c0aa-025d-4414-8316-67d5882912df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b744efec-2e7b-4d1b-8123-db3271d30fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7be8e2-0b6d-4049-861b-afeb4241d898",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fe343e-7099-49b8-82ab-4581c76adcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5797ea9d-05fa-4cf3-b50d-713cf878d997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806b48dd-f6ff-4e09-a2e1-3e79e8bd60a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b30a978-9f54-4207-bdbb-ff7cfdac8a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cfc7f4-0efc-4725-9edf-671a665b7a1e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33ceea9-8bb1-4498-8599-b8874a286755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61fd890-0ae4-49d9-be77-6a15669c309b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4b2a14-de1f-48fb-be56-6241c1928758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b700842d-0ab2-48e3-bad8-c9a2455643bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e027b14a-a488-44b2-9359-65ffefe33815",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3e5978-c88f-4ddc-b71d-38fdc01ac38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4763077d-6f8e-4c40-93a9-32fa60173f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b168f-e3b9-45cf-8a7a-26ee756dd508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e261bd59-d315-419d-b1a5-e97838b7ef2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69039f60-cf20-4a62-8961-ec55ea44973d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc0df3e-24cd-49c4-b24a-22bd6e9f7e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695bce87-39ff-478f-8c93-feb6fe487305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec56242-f607-49bb-a339-66c17a67a126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2af61c0-dddc-4d31-b3e2-2778dc4434f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e060e4-3639-46ac-b57f-c94e45d1cca4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf95816-aaa1-40fe-8490-d2ee9a10071a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06fbb52-c846-4af9-bbb6-096dc2acd595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85d9f86-3679-4600-8c49-84654c041ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff02b8d-ca60-4f51-98f3-12534edbf845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b680888-6c72-4637-bba4-68cf4e5fbe12",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e5ef90-97af-42d0-acbc-cf6438b303c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62901267-39d2-4af3-9f8c-3d5bde13ffc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39568a7f-2737-446a-b3c7-e3b320e9eb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1205d4-2124-4444-aebf-342bb2022bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee28476-0494-4eab-8ef5-ec4c4c381af2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0602646c-1440-4dd0-92bc-4bc903feab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0249d17b-d24b-4a9c-a466-77149a93c762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c42bea-f8c7-4765-aa02-373a5723a9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3188fdcb-544e-44c2-bd6b-7470275e98f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f5f960-71ca-4719-8a8c-5e24f30f2439",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c8fb21-4ea4-4310-9979-67603e1bd520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12afe4fd-cd88-4d10-a216-d6a46d61e8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c69383-33f8-4a79-9dd1-2b095bc10e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b78e18c9-f375-465e-ba68-05ae1ee39cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6545203-3152-433a-9238-7c42fc0e433b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b79bb28-e9e7-4bef-ba9c-c49224c53f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d32f470-1275-4263-9fcd-4b41d24d5855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19610880-b224-4d1a-a50e-444412593d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "40a15e2c-6e06-4f0a-addc-0bcfe4161ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba0277-939c-4e3b-9bd7-fa8c912cca64",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f100aeab-18e9-4e26-b163-42f57a01613e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85957c82-7c34-4a6e-a583-17040068031f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf33960-2a2c-4252-b3f0-3a5646e72ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7ec01d-1713-466e-9e67-c62021304684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025b96f5-ba30-4ac7-95d6-244c407babe5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2110071-e039-4cff-a4bd-d5ba1083a4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c975a0-162c-4448-8fde-15fbb796e9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77ee5cb-e8d4-4692-8c6a-be2d548051c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6997b3e-08b9-41d3-a141-7b640c497e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f4ce67-321f-4045-8815-50b36aaaba0b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250387b0-a472-4d61-ba99-e52ad23b5fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd50801d-2db6-489b-b5b2-240cbf27e9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3622163c-08ac-40ba-81ad-5da74f00fdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4226d7ab-bf40-4733-937d-9824cce58245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548df063-d57c-4a5c-ad6f-1c1b863761a0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27feef6-2246-4582-8ba9-770c9131aa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c252bde1-abd2-48e7-a651-0eb15bb526aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cd5755-ad1a-4350-96a7-f659ebabc984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "82b36ee7-5e82-4094-b693-632142a475ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6215da4-f483-4b91-a5e0-8ad1a7df420b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aa82a9-1229-4e92-804a-7b4ae125dc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1645528-1e25-4a17-be8b-a70fb8d76488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a461eef5-1915-4a06-b268-7c0a05fe994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "afddbed8-69a5-4e9e-ab46-fbaee74bd4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fc3a1a-aedf-40ea-8614-2d2c379da6cc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b23183-67cd-4b9c-b982-eaa902ec471a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81375818-1360-441d-9c34-460838c26e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837c2914-29ae-49af-bfe2-0504a00535aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "286d0961-5f00-4583-b8b1-91a8ba37d818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865c522c-1d55-49d3-96cb-d4f6e59550fc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30416ac6-b1d8-4d73-8c1d-3833378823f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4307e9cd-5685-44c4-8483-576594ffb38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356eee5f-7d80-4b4b-a3a9-9b7a9302a55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b9ae2f-b21a-40e3-ab5d-a27743bfb5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b66ac3d-db47-4259-9837-374dbbd36a7b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2040ca61-f5be-4947-8325-9159bfce16b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806fa197-907e-4961-ac6b-f71bf7c6ecb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97b720f-d4f3-418a-adc1-6735ccbaa1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b37953d1-a044-4b83-b1ca-9e87fb10d9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d35fc8a-5ec6-47e5-bcac-c0f5c96e5230",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35704b9c-a8eb-4c60-90eb-fd4e2e26e171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad1b86c-d8cd-4121-a79a-710bd2b3b8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffd14a9-9882-4428-8f0c-7069ccdf6409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0027996-6456-4fcd-9bfa-818e5b52b98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5636ccb-c201-4796-98a9-ac9ceb87121e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c537c4ae-df6d-4117-9090-259ad46b38f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b32146-8655-49dd-8c40-6bfd78b99953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d683bc01-e269-46de-a2b7-922433409ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a53181-873e-4776-9822-c1b2a606167b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754f1c96-b31c-480b-a9d1-4c4ee9e14666",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefb9d68-0f8d-4703-a8d7-516568aa2b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c087692-ca21-4ed1-af3c-5a77298ec29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6777533e-12ba-409a-a9ca-d812ba373b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7adcdc98-3c6f-4e8d-931a-be168e83a4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f078d731-72df-465d-91f9-5725c1c69d96",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cac33fe-12ba-476a-8278-adb96ef1d922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7d93ac-560d-42dc-a0c8-0dbb768645b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfdc2d6-6e6e-438a-a182-e6b0dfd24e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece9b48f-f0cf-413b-95c1-d8a690b0e1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476ffcdd-3559-4002-aa9a-757013b0b684",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb64caf-c8a1-4b3a-a3e5-f38446b3a2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13730a95-5d66-44c0-85b3-868a8313d5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d006582-48c0-4fff-97c2-bba5f34ae60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d6b003-bfe8-4052-ba70-90bee4a705ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49cdc21-872d-491b-b4ae-bc8ae4ba8192",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44296cb7-8e51-4760-bd1c-4c48a1a3f498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbd479a-7e94-4f5d-97b7-30799175e3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe03f139-bc1c-45e4-9efa-abbcae0419b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43a02dd7-9aba-4681-8e7b-574409c377e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63554c57-12c1-4211-acdc-c3d827cec7df",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15fe11a-7928-47e3-9f02-4e5baf3d97e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b1367c3-af0d-4fc1-bce3-4bc42314a134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672e3b4e-3e1b-4f5c-b87e-938a4d62ec72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "634d8650-fb85-457a-a9e4-19e3ca2d7ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4587c03-dcbe-4caf-b97a-d9cb8517f59e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddd7908-e2f6-49d2-aec0-e23754ad5543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b735a4-7c09-40fb-8982-1c50ab26eec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2baed6b-aabe-4e0d-b8c7-2e6010755e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d01eb7-9496-440c-8668-0eeda7356f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91c0e13-07a0-47f5-8bec-584e17b1aed4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87993d94-fbc5-4c31-a4fc-5a1a1acbcf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2572f075-1ce0-4689-ba65-3b05e0e55d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd1e7aa-084e-442c-86bf-1bd5fe0f38bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "537aca55-33c4-454f-957a-6365afe4ac18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7b9962-d7e4-4679-8560-5c87d58f2836",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3d2de8-f094-45e6-9744-4c0ba94e6d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e54c80e-301f-4b7e-9ec6-b0c986481231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095ae8b2-13b8-4b55-a008-2e2ff9bb0a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42f85d13-6c7e-4408-9bbf-c43e58f7846d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555636c0-7327-4a08-8229-04494d9f9d65",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5439e665-9727-4d15-b4bf-50e9aa35dfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a3e683-4db1-4cb6-bd3c-dd677b9bf42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e478f3-a4d0-4866-8875-f0fc2667af03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3c1cc9-9cb7-4ae6-b228-1e1c8d337cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101e528b-23ef-424b-8107-67f715fb4e3b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36514e3e-47e4-401a-a026-20a4cf1ecb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c276de3-7ccd-471d-bd2c-7e630f627578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54a9410-550d-447b-9cfa-538dfa457ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60798eb5-d2d9-4922-a7cd-34a67bb0e536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21829ab-3815-485a-9d03-afe5e5c499d3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c12501-3a5e-4167-9212-42b0fd623812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6048f6f9-bbc4-4793-a911-30bc1dc5a943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc88324-870c-4616-9b39-5fd3ac2cd5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15df9f8e-2b73-4583-a1f5-93703ffbc2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe759d5-7576-4f64-8070-6495a82b91d7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a199ca84-b8cf-4ed1-8ce9-21b5ce947ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb13d5f-6655-46f3-8b7b-f7316f6b9476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f39cb61-835c-4cf5-b719-1167b642dd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e479c13-6114-49b7-a775-7612c616a19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e8268a-1454-42bd-a061-b51bb996bb3c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a678b282-565e-4ac3-9a9d-9047de08af03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13405569-3654-4c37-89bc-92f2f349f1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb140b55-17d3-4d73-81ef-349ce09386e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e727843-d98f-43cb-ad88-e1af9224cf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e684cc82-ca9a-49d4-bc9c-0e915c2a3b7c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcfdd62-02d9-4ac9-b292-6af6a76065fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d93262-0b44-460d-a4bd-615908def2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e870c4b4-25cc-45e3-83ef-54f2d2917f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "498982de-0cb1-4127-bd68-f92cc30820b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185b7ce1-3f15-48d2-8ff6-00034ff9ae16",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1cb5e1-5a9e-45c1-85f1-7864c1ec80c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1446fc47-f01b-4476-b1bd-09e391a2b96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c8de8d-d2a1-4707-81ab-1cbe72f9ea6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2644d7ed-d873-4f4c-9436-60488bb3ad0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1785d43b-6372-405a-9b2c-6114eae1a94c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207d5c1c-ec68-42bb-b7b7-28a58ed3cfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b1b195-08ce-4204-8086-abf376d22dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59ea944-29d8-4216-a7c0-f53db8026d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e7655e-16f4-47f0-8925-87a0ad64ec52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3820f8-93eb-4c13-8b8a-d8995e1f271c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e16bee-6bcc-4fb1-a9c0-9ea8c9d049ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0451ab-ef06-4b35-b695-65fa294713a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55b8da9-c103-49c5-aaa3-be931727f7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd860ef6-13c9-4614-a9a3-01cc812845db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5ac336-4adc-4e1b-802c-051ec25bf35e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d89063-0bc8-4330-844e-2370942d7220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7555366d-6fa3-41f3-b891-2a1399994fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8714669-bf70-4cea-8e10-cd51e5ebe83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93d0d876-558a-4e92-a6e9-28ef40dc4850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59725f7-5697-4294-96d5-2da99aabc83d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea55bd9-8e7d-4077-a0bb-836256dcf4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf27fbc4-ca4b-4235-b142-a861d76b29fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97adc56-0e67-4db8-82ce-5b2a198f1cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37fd465f-777e-48bf-b2c0-554222da8319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd35e60b-cd97-4884-a867-456a8caee7be",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210fe131-0199-4350-9111-ee9da5992f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8daa87a-2d0f-4bc6-9865-f978456ba30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dcbf91-b1c4-4822-b918-793dcc9162c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "183f76f4-834b-4b24-9c3b-171b7da0f391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c84080-5b5e-4013-9a67-0bd2daba4c17",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293692bb-8ee7-4e31-801c-3b895b2bfe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2ef56f-8123-412c-a9af-e27141928bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb60162-29c2-470e-b2c8-3669f0754097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36e72085-0c97-4b0e-b003-d6b7b678e99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e021595-96a8-469f-bc11-fd94a766dde0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23703a57-0254-4cab-b15d-ddb9ff9ce155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fecea2b-e839-4512-a193-f197f8bb0b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d419b2-16bc-4200-9b72-ab09b40bb58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41b4e22b-29ff-4cdb-8006-91f2e7d8f043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b2171a-39da-48e4-b3dc-b57e458d5b06",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690a2027-98e6-4405-8076-3f40396ec367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f624056-50b7-46cb-bb5d-674100d50769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cf1f1a-fd4f-4d58-9cbf-1db9044a8740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ce0c56-a844-4acf-bc86-5bb06551a6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a98351-9b8a-4bc8-90b9-cb4dbaaa90ca",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90039b23-128a-4a25-82f3-4bf4f128e477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041fef15-f1dd-4090-89d6-1d79a957f78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a949c5b-8a58-44c5-9925-fb4f61761758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd398e4e-0baa-42b9-9889-ee77314923eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49174f1-1cad-46ce-87a3-d8ff09e85b74",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddd3b7a-4f40-4ec9-83ff-f8395e1f7c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8675f1d7-63bc-4385-9a7a-8c15f44b3dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344b8ed0-55c1-4901-b8af-dd5a30ee8ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff576ae4-8388-4721-ab87-c255453eae5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61925203-ef14-4512-be6a-f215be756b51",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0491349-96e1-4b29-82a0-2755b93d8b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b368b88f-8c00-4b06-a536-4d762bfe96e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7ae75d-06b9-42c5-bbc2-02018aaa8e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e710fba2-3fa6-4e83-ac91-05a72114a6bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "788e7c0b-9723-40a3-b9af-a366cf1d6af0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82cca6db-bf4f-4478-81bf-ac717b497bef",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664d5a54-66c0-48fb-a764-f3179ed4c276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e844bae9-9d4c-4979-b98c-517d143a114e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134a7be3-fa69-4154-a4ab-13a5bb2356b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afc4c5e2-f69e-4bc5-85a9-76447bb5070a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df278149-b32e-4628-94e9-8390f177a2bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f5dec15-235b-4e96-8986-b2f6528eb7bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2bb870a-998e-45e1-809a-891e30a85b5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6aa4628-d41f-4b16-9e34-6699bcdd4c7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70301162-49c5-4958-a7e6-26cd9e1ea7e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a017382-e793-4cca-9d6a-69c62fec2516"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dc4d3f61-3336-464d-a5e0-65fb1ba92a46",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2158727-41c7-42bd-aa22-a6796babc026"
                }
              }
            ]
          },
          {
            "id": "17d606c5-a912-4721-8e7c-739368fcbb5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca387824-aa30-4b99-9e2e-32aa5087d75f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edc2ee50-be56-4e48-b9a6-0266e489757c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65c801a0-6556-4f36-9812-91cba2f01a7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33c1d419-6944-44c5-a3ed-a99ad3593483",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a88be41-41b7-40ae-b376-5d95230f1cc1"
                    }
                  }
                ]
              },
              {
                "id": "cb0ca523-b0f9-44f5-bfa6-8836acbc3b42",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c875635-14ea-4871-8c15-4ba3d37681d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e983b144-9cdd-4e1c-944f-96d61c874b0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d46bd44-dff3-4970-84a5-03af30d213e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5370d54a-4b26-457a-97bf-805d8c5f73ba"
                    }
                  }
                ]
              },
              {
                "id": "3be6e693-a6e4-4813-bb2b-9cab9e91a93f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f984635e-eb15-4b3e-9683-13e76790ced7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad5f0fae-26c1-471c-bbf4-6f757ee88ccb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db0aa0be-a49b-47ac-ae12-de7a8e5dc200",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1f60ab5-a422-4314-8d99-d470c6a9a0ed"
                    }
                  }
                ]
              },
              {
                "id": "2156c23f-ca0f-4efd-8035-e9a3d476ccf0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce6be80e-d753-48be-b545-e97478f59f3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1111905c-f753-4a48-92e6-a3b3f529918b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a5ae04b-294b-4c72-a4ea-048ebc8cd004",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "114776dc-a0dc-412f-93d0-07711a6f33f5"
                    }
                  }
                ]
              },
              {
                "id": "e45b7176-5468-4996-b872-7c5a1683e1ac",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a407395-0020-4597-87ee-004d421cb5fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "163c5a4c-41fe-43a9-8226-666b320e6e62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6ee8228-e58a-46f8-bf1f-2fb18e8db27e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2a3e726c-bebb-40f1-b9ff-c0f204b407a7"
                    }
                  }
                ]
              },
              {
                "id": "3aebe10b-045d-4b77-b0af-1fa8cec8a40b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "990f824c-20f7-446d-91c7-ce3085c16e02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95628deb-4872-4478-b9d2-4b81afd26ac0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6340c21d-e669-4397-8332-d36997b6ba79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fa3f3dc-0dce-4883-bc4f-cbfe1c7a7120"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a04646c-90d8-4766-9518-17c88078a485",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7336f7d8-51d4-47d0-91bc-b07e38f2d80a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d89656f-54b0-4c9e-94d8-5320163f2580",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b026e18-0f6c-428f-a898-5142ac45fd53"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cb90ca0-b641-4e12-a5a6-75f2e1d982b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3f5b7304-def8-4929-b985-eda388b81f10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34322875-820a-4962-9819-f73e5a199cca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49bc95e4-6432-4f5e-991f-eb13701fd99d"
            }
          }
        ]
      },
      {
        "id": "ccb398b6-a35d-489f-97e0-4ba89d63f23b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "83875195-7af2-48d8-8bb2-86b62c89007f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0718692-9c48-4e06-a96e-1b4c0e024459",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6babceb5-b5ff-4030-8b15-e32417cf9397",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f63b6ea-216d-4700-acaf-fd040e22c503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f11f55-5e01-4570-b80d-e7afcffb4e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977d9e1e-019d-4b62-bccb-66aac2209df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d3ca6e-c5af-4387-b67d-ad25b274c4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387baf18-c819-4884-8ba1-f2eee5a9866a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74855fd4-13bc-452a-8f88-a85395f02686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1b96a3-970d-4ea2-ac41-9bc14d8f1366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f77c7a-e918-4cdd-b726-f29ea21a0f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dec2a04-cf1c-4492-8f15-625b4d7e7585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390072ac-2bd1-4532-aad4-b9f03e42c0db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65bebe3-8ae0-4135-9ff8-389eedf0b073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a194305-0cde-4de9-841b-f093e3e8b354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402dee6f-c7a3-4522-8e40-a353387ec569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eddf4f3-cd74-4e7a-8ab9-4c15dfb51c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47685b2-11b1-4807-92fe-939820ac4b6e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8820456d-8179-4072-a44e-9aec3f551b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6260787c-fb6a-43e1-b4ac-3b3944ca5e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936ffbf5-65ba-41a6-90dd-1fd86ab1248d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3221938-44cd-4a2b-b8b5-d70f970a850a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5d3c03-5111-4c4f-89d4-fafc40348b04",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5ba88e-a14d-4b0b-be64-6d514b5589fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75e87c1-8e1a-4c1b-8893-744e54be1bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849e3d49-6b1e-427d-ae90-f64f97c970c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a9c358-ac34-4669-821d-0be6510efb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ed70d4-9c07-4395-9bbc-aca09bb94361",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a48e0a7-b053-411a-b4a4-8d5b581809a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad11e7a-fda5-4acd-af9f-c8604776777f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca78350b-5975-43ae-b7de-ee94e8954bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d78d48c-afc2-4664-802d-9eaf06d55acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8c965f-8c70-4aec-b0df-056da8794c30",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432f245b-c95e-4674-b129-364e2a0c341b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867b5d14-4c84-41ca-ad56-52f2b1c98654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da949bcf-dc61-464a-bb7b-bb357b7ce4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ac7948-2dcb-48c0-a907-348e9e3d983d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abd425b-3043-4164-9dfb-10657da48b02",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fa18dc-f104-4fd6-a52e-535451eb2d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27664386-2f17-41e5-a4b7-81cea8a98453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d7f0be-ad6a-48e1-b43b-3f00bd48131d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "215eb7e5-89fe-4f42-8c28-fddd43b35bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dada2e3-c92e-4107-b472-38a975f7fbc8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc9d977-c9e6-415b-b2c3-60bf5b582b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721473c9-9a16-40fd-8059-19ac813380ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaee0919-5bff-4693-9db7-95e07811e095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a54e4a07-d1f6-48e4-bd81-d25d7331aa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afa191c-fbbb-4366-b841-693c1e598ac0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f9658d-8731-4a86-9f31-d3330a8387fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347dfdc6-0a2e-49f4-b4e9-97a29a5096f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb356da-56b4-445a-b20e-8d315f99adf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ec0c5a-5206-4e1a-89f3-d4b005ebcce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fab31e-4728-4275-b13f-c6033fc43b32",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef649f2-8a5c-45b6-ac11-c9fef7975a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c943d2-6d69-43c1-ba0b-58fcb967070b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8751062-dd4c-4fd2-b512-484aaac088f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e238165e-9e83-48b8-9fd7-20f98bd6f1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8ea8b0-5c2d-4dde-919d-71e9796cbc1c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d128459-f3a4-4833-82bc-ad31930ee6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96303e22-14e4-4939-ad6b-b6bbf0ea68d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9aed28-1f27-465f-93a2-430dd40e4c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c129efb2-83dc-40a3-8022-df24afcede9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d15f3e-5b37-4ea1-b9a9-4f1e0d629774",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a135454-e3e3-4dae-95f6-7523b1ec5df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ecebae-361c-405a-936c-b9fe363314ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a1b0c5-096f-40ab-a9d3-c297ec84d658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b2a9a1-28f8-4a78-adb8-53197d6f9291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e10c965-bff9-4d8b-9d31-4256ec6e17ed",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc219434-3392-407f-a43f-0ee610b87dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5a1be2-6888-4b93-a96b-4ba77e929ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48c9ff8-c497-4ffd-ac62-84bce77d8906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1b4ed9-753e-4db5-855d-5d191c727306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cdc9ec-ab63-4186-8aa3-865e0d3ef1d4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c52690-8a43-47f3-9084-f69acecfcf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5c9080-fdb6-4d26-874c-f803eb27d807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32031dab-b699-492a-b3be-351957b95dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f6dcd4-9bf3-4114-bacc-fa20a53541f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158a8dd6-5d1f-4149-a411-7e0421605b9d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bb0939-48d5-42a1-8c46-7ffa10d7a792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fd0ab0-d790-4c6f-8e01-f03061b3945b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b73e55-2ea3-457f-85de-e5aec56513e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b72fd874-4a77-4c8f-9dfe-0cd9ba771fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac420209-ec29-4b9a-8510-911510120133",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eee2b19-19c3-491c-b78f-b99f475741c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21aaaee6-e051-452b-a66f-09b0bf174a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd39ed7e-c536-4fcb-acc5-bc3d17161726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1f493a-852e-43b3-ac2f-5a3f3628f201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2682fb1c-43cb-4634-918a-206d151603e2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52acefb6-9775-4fed-9cde-c3d22559c63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34337ae7-f040-46af-8343-f2ee77726d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6301887e-1661-41bc-99c0-8355c80f0f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b85e67a-c351-49ff-bc10-26e7472df47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8709eff0-740f-4d81-8b96-74cc3f9d0317",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2339cc4d-20d1-4ce5-a9a1-c521d0531e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e56e456-78f0-465b-ae4b-75f0361ed5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521a1ed7-230e-4d78-a13d-176d92ea5705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e56aaf-5467-4609-bc99-62178328f731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9dc9a3-3e15-48ad-9fb4-1f4a34bd771d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2821f3a-b02c-475c-b2eb-93e89421df27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326d4d95-0714-4176-bf60-50a28eb21ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dd41bb-47e8-4e17-b769-23052105b134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fa71db-8e13-4f66-a876-7c92577ad763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0397d966-eff8-4413-a54a-5e4aa6a0a766",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2905fa19-92d0-423e-8535-659cd9ad2d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9add15b9-0399-4022-89c8-3a54e33f4ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475b94c4-e557-40ff-ad2d-7e287c741da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbb7316-d199-4a76-add5-6803967cae2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f84ab3-65e0-4ae2-b040-3668b7e03850",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdf3132-3838-46a6-8ea2-f8a1acd45067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9ae5fb-8f0b-43db-b0d5-ab9b414e5f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d2b019-a96b-4f84-8def-a6fbc311d324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93ba7302-3908-4ea4-a0a7-33f48849061c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552ac5e1-5445-4b43-85b4-85650e4b0294",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e4213d-6ae6-4454-84ef-258d2af78189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f4b365-f44f-4569-9323-cacb3d3d1679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8034fa6c-6310-4054-96cf-cce26915c5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "710d9c21-74bb-4464-86e2-42431ec650e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d2edd1-28fc-43c1-b386-924c26caef2a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e0dccf-2aef-4cbb-993d-8d37bb716971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71451a6d-0f01-4bb6-b497-a18f33e45af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa0c3e5-e885-46f0-9bc1-9cbc09e7480b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20625dc6-763f-4e0b-b4d3-b87025c8d895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2f4865-ea1e-4d99-95de-bf91d5dac2f0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dc6831-dc88-4255-9be8-0668da3eb3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdee585-e1f3-4d54-aab1-982eee837ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5617a9-7438-4759-857e-83b7c036c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc046d24-6aeb-4bff-9b3f-233270993dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521ff257-f1e4-4709-ba37-90f5666190e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fb4cd3-3ac3-4b41-af5f-df88ecafea9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c3e54a-dd6d-4d0a-84c2-426c8c5c082d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5191e9ab-fa41-4012-8933-ea30310252b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f90fba8-a6d2-436f-beba-82c2734e5f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d16d3eb-3523-4461-9089-9091aba0efc4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932fe342-58f4-4419-8bba-6f002e75d3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66282e7-f017-4725-9154-97b81dd3d0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dc2214-c60b-4060-a1bc-40ece26b8732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1d7b1b-dbf3-4a0b-8ea5-12405afc8cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2948862f-afec-44bd-85e3-1ee64eaa5aab",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609d1698-e295-4668-a2f8-87bc3fb937e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f06f0c0-f751-464c-8922-a19079ee674c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a2de42-f8af-4694-b593-93cd4a0c4e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7455cdbb-30b4-480a-b6e0-08d0f2c382e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e3278a-97f9-41e6-8c5a-4d5f2818505a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce196735-4305-4a94-8d62-84a47eac2217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31f9bfd-4806-4578-aa51-f57fafd88961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e473695c-96a1-4698-9a22-7aa9b00ce7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90335308-8857-4335-8bd9-6630881a6092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b50a61-1d79-400d-b998-0563a478b845",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e4d7bc-248c-45eb-9451-d4985ecfb3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb522039-c9f0-4349-8345-8d14df39ffb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05595f24-7b62-4775-8769-c95434c40b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "922f9d59-9f2d-4dcb-a78d-7791ac2c2069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d48f993-976f-4009-8279-9343720d53fb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee5f9f7-f803-4aec-b185-5f206c0218e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cedac57-c86d-4581-8586-b19c398f9387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf4d79d-e9bb-4310-9526-5a16770704c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f69dd7b0-f0c8-49de-bfeb-7eb95266ce7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380bcb7b-5f90-4c89-92b6-51f71b137c8e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194d0222-78f9-42f5-b80e-3571ee6aa1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bba74bc-bd31-473c-b239-986b9c191743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44dc3ee-38f6-40c1-bf6b-5919b9f624f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77435bc7-300f-41ae-a4ef-e6eb690968a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92e4629f-7a08-420e-8a96-a06bf10e8414",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "385704f4-87c4-4cf2-9381-bc42da9b6655",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2036c9b3-2d9c-4648-b5a1-0779cee38bab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8d97eea5-304c-4994-a36e-0a1479b55f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4833f0a0-fbdd-4d54-bb9e-e6a5b0c69b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "237b7502-bef4-49da-958d-3c1211a5f928"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dd789bb-0f48-4aca-be4d-1e63dc6735d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "082dc1d3-698b-438f-b91d-7d2e27247832"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22d51763-c14a-4581-accd-3d854c2290f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd6177e5-31bd-489c-8bcc-bb14764ac6ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d263056f-8f68-49ed-82f6-9e657789d04f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "33b018fe-75e5-41ff-aa84-c400aaae365d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79af4ff7-1682-4de7-b0bb-9829118a10ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25d6ac6d-d69e-4f4a-891d-ce8f504ab1f9"
            }
          }
        ]
      },
      {
        "id": "28bec262-682f-4c0b-9277-961c1b5bff03",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2fc78bb9-58dc-44ce-9503-5feeed7d6304",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e879d1a6-9322-472b-b9f6-e0d603c82950",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e46502e-80a0-4853-a6dc-9208bb23a3a4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a106a2-1cab-4276-976b-ad8fdcb12503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e9406f-8c82-4bb3-a269-a32238155e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52064f7-5231-4ef7-9551-fca1764b3359",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e664f4-b6b2-4a3e-a2cf-e85697ac8e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf97126-c697-449c-8180-b4f2fb2c08d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f258a882-02e7-47dd-a803-4049d16e9647",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bac6c9-feb7-4cab-b2c5-a68d65e99c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90875822-4872-44b2-bfc7-1822dccaaf27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f4d2b9-29c6-4ffc-9cfc-0fd4d499655a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f495612f-ac1c-41ef-957c-aa518e1ccd61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b95b4f6-b4d3-43e4-88be-be8a5a623733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c583e96d-1970-4083-afad-5e4bbfaf9ee7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c14d8a-8525-4734-9453-15d2015e1d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dcb22c-1ed8-401e-ad14-21cdd8e29f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4934ad-7a62-44cf-a292-380311e41cd6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74d39a3-c448-4a87-9ba5-ba1352aa12e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae574d42-8386-4daf-bc0d-b368d1824ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac50c09b-7434-42d1-ba8d-574be688122d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e9f965-9612-4b12-91eb-35d66eb20b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a07c5b3-bcd4-40ad-8452-414adc4968f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "410741e1-83bd-4bfb-bd8e-5e04d87b591e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3cd190-397e-4774-9bf7-ff2af427373e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2421de3d-6f1a-4340-a591-599c9dca2f42",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fed223a-1836-4133-b347-bc690cd20973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83cf6993-4679-462a-a02c-4b3f29f58e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed4f4ef-0830-49fe-80c1-a3da8abc5702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40daaef4-cddb-4355-aa35-960d2781be12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d949bfea-69df-48ed-8773-d36bca4661fa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb11f3c-929d-4457-b9cd-2ee5e1667b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee9776ff-2858-460d-ae8c-5b141e01fa26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f08dc24-f1fb-4bb2-9707-16589831ee7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eefbd15-fd13-4bbc-a3f4-6fbf17fe0c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263cc968-2e8c-43ec-bacc-a87a238d6575",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0bc04d-5d81-4261-a19d-fa11e360585e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf814a2-07a4-4a33-b4c0-e908f35aab5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d4ab0d-d561-4e4d-b61c-34e1cdcde2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa00887b-17be-4743-b905-d2fc3126b6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900d563b-aeb7-44fb-90fc-b057cce9bfd1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cb7282-c20c-4b69-92b6-e403bd4d7360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f4d938-4b93-4ee9-b937-6d36006c6745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00317d56-7ed4-4ba1-879e-1dcaa862b806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0874be20-68f7-43a9-bed0-c9e44bcdced8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac459f6a-a918-4397-90f3-247cc061e654",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155d3927-29e8-451b-abf7-679fb7a64e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c317fa30-8d22-4b72-9039-cd014768990e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf12d4ed-dd61-4bda-a4da-be424c2d827e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50dd47d-eec7-4451-b9de-0b767af9585b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347dde6b-2bfa-423d-9149-5ddb6398d865",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7415b5cf-e8c7-4113-9aa9-c18c7d6bca13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790a1d28-73e0-4711-a297-39f1bbece017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03706283-4186-4cbe-9ab2-67a7289ebf82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bad2de9-f983-4f9c-8a88-8d77d8c53a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a0d5a4-fab5-41e4-a83e-762713562391",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb951ab-7885-427a-af3d-54c18732b0a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d1e3145-9162-48dd-ae54-94ba5220ebb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2b0eba-0f94-48cd-b04e-f6bb3a060b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a84df6-4eb5-4bbc-8096-6b6739eaa78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57adf15a-0e84-4ea2-9e53-348dd23e285e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28474508-1076-495e-8e71-4b037af6cbb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5404e8f4-9ca6-4713-9165-383232fc355d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdacdf8-cf1a-4bd2-a581-e588e30e8429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac9537a-c59c-4f8b-8cac-713abaef168c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59affc0e-76cd-4004-b9a4-4c0c7b2bb0ed",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf35bcd-a57a-4d5c-b74a-b63bd3761fc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eecefea1-a092-467f-b090-b80bb6dbc2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32b5533-de21-4c13-89e4-f43c53aea2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e42b39-5625-4154-8430-62ad1a294293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a5aed6-4a53-471b-8e3b-65327abc79db",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca0b941-3f78-46b8-b4b6-d7bc35265018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960a5067-c58f-4e2c-beb9-7a495d6d9b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6250b834-1270-4232-ae9b-6b9a2bb5f5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b083a769-84f8-4f52-a795-5ca5e0693933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fe04c2-011d-4ab0-958d-e4096bb6ba30",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a27d1bd-eea2-4001-93da-0ec05e06a188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72c6d69-761b-4262-819e-0d37736aa22c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e44b8c7-55d2-42f6-8876-59e12a83f756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b89793-cd53-464a-a0cf-50d4c8984ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a741d5-7cc3-4347-9178-a4d5c702b7d6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1954e5-6b32-45bb-9655-ad96927bd6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5d1ee1-8aac-4423-9b75-4dcb7be12f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbff8ecd-9393-4496-aeab-bb400e2698b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c9f053-5c53-4a08-9d07-0fe227561189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99201c1-b473-434f-afe1-e2300acde5f9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5218178-2b9e-4cc4-ab78-4efdfc2c3325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da594bf-e365-41ec-8796-f1c435ca0e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e026b9d4-e36b-4a4b-bfe4-034d19f00439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af182e56-b749-465f-8f91-fc4bc1831aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6ff39f-4049-49c6-ad29-d96bb58df32b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859e104a-bbda-4f30-8ea5-c0dc413863b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a711d810-ae79-4dd9-a585-b1777d94a4d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2373d829-1964-4665-8d2f-fb64fef7e4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ab0238-7cd6-49fb-99bd-f3cbf1aac4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad97123-333a-410f-aae6-91c6af879473",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bc0066-2902-4f93-b624-8c945fcc517f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7747c7-1319-441e-8bd8-1fdca9d309d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a23642-85a6-4f13-97fc-d0e4e805ecff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02aca981-71e7-4ae6-886a-057afd762f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0e8b8f-697d-462a-9247-e5119835a771",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb8b797-652b-41cc-bd71-179a73221704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea1754c-80a7-40e6-b246-7a78bbd85429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a486c6d5-1282-45e9-b695-28c286578609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61d1610-2737-4dea-9c07-356aa7aeaba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f347acf5-615a-47c4-8da4-44075e0fe44c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5073a1f2-e14d-4e2c-a922-8b06e1ed72c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a05628f-2026-4e82-96dd-368fc874c00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03d6f7c-7455-4124-8f4c-ef79bd5719b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2acc69-8fe9-4412-8798-019c01220be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0493df-f493-4298-86ef-4a0ddf49d9c0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801bf71d-e513-4a0b-81fb-899402d71685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2fae512-ef26-40d8-9520-181868d986d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04fbcaa-b9b8-48a0-b4d1-a7758e8868c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1e530b-a8c5-4f73-9389-f3704a250d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f808330b-a623-4e4f-a0dd-efd7e5c7f551",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20bb17d-baa4-44ec-a6ec-e1b09be25e9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c189647d-5ae8-4f58-b55c-0485c3fb62bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d2520e-7220-4c1b-8efb-e8975bad2612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9908ffb-9313-4f63-b127-ca057acf2097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0760d0ea-309d-4455-96a7-621cd1d8e183",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d9a10-4d25-4fa3-bca8-3be347f8411d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9a3c33-073c-4f61-9ed6-3c6c930f2f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1849b9e3-0691-43e9-a527-96036823d20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b950f6cf-e647-4a7b-bdc5-0909d5d1fc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440c217c-9a8e-455c-9fbc-b1dc920a02ca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fdc2a7-b8b5-4a6f-bd5b-0b89bc22cdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd62e778-8e28-4415-98fa-e2070df2e60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73c5fc2-4df7-46aa-8766-d6f8e7ec140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eda65d9-ddb3-4040-a7bd-47544b844804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ad714e-5840-49a1-b0a1-91c9af11ac0c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eed234a-ca23-4461-a5e9-2d189260b35e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f146d0-0c76-4906-b39d-2b1c0d646297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfc4efc-151a-42df-a039-0beb143c1b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0105dd-1197-4ffa-b159-6354c3aee624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75f148c-9516-4631-aaed-c39b279845f5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f804b5-ff9d-4c70-af17-ea0951cd2c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b6a9f6a-a156-43a8-bf31-a3afd7740d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15490735-4e25-446f-bd2d-3325b130d3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8766746-ce6b-40d3-9c63-2906a51d54a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0697f1f1-6a53-4127-8f70-6f32bc02e570",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f1f1b9-1647-4f1c-bf57-9c6475288169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f908a23-135b-41c0-a971-c17aca9cc378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ded3ee-e9ec-4c75-a2fc-fc26329b80e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5075c0b3-1d66-4e0c-b9ed-2721cc27887a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2eb818-78c2-4d28-a099-3a94034bd44d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2746a89c-2737-473e-83b9-c6b7026a119e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd1e7f98-854d-4264-8a9a-b2ab77b63129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee67a08-c179-4b73-91ee-d6d99444df96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfa06d2-7d9f-4e58-aa1a-70dbb1b113e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d1ee29-c938-4b81-8df8-ea26465ec924",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2045562e-d41f-44d1-be7c-0edefb4c3ffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b909850e-e354-4b73-a294-53c261213a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbcba88-efb5-4191-8824-63b1464da158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f89a562-9cd6-4046-856a-9cdfaec663d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a36ad3-d236-4366-8d70-def29419a946",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161382b7-0412-4c45-979f-cc559cdc86d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ead3cfce-774d-4efd-9855-a44bc6d68b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d749bc-35b8-48a3-9d9c-03e230658d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a152be5c-f7f1-4d40-a750-b7d0e65649b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90554ced-a87e-4834-9b0c-aff22afea5f8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd145d0-a2a8-48e2-bf5e-691af76aeaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50de035f-aa27-4bb3-9d3d-5e0ff7d1ed3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8385f228-67fa-4158-8cfe-e0b5448dfaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30218716-e7a7-4df9-bacd-225fc75acd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7a405c-89d1-488a-9efd-604919ed3352",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba85245-790c-4fe5-85df-3eaddd058828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c84d978-c5c9-4c69-a363-e6e540b5c313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4af1e8-ed8f-4d47-949a-1546720b2dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059429ee-c0e4-4552-bf0f-7d0cf0dc8209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7ac4d4-3112-4941-bb2a-45695335d81d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69392b56-6f67-43b1-9a1c-a846ccd6dfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba02ebe1-0c75-47f8-b64b-594b1c2798f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f1df5d-113c-43f1-bfb1-c3594b7ee3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "353b767b-5fd6-4f50-bd04-49d8955bb001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8508928-f964-4a21-9cb4-20cf6ce402dd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c9cdb1-1fb5-417b-996c-4dfb333172ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d7c387-4495-4439-8b19-72f3f3072bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a671ce45-8bef-4452-804e-1b516428cada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cd2703-7837-4d61-98c7-8192b0271fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81470acd-29a1-4ff8-9938-c91845f3f96f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2343c46-b7b6-4413-9acb-11f1e0da4ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc19d3d6-aff7-42c2-915b-33fedda939c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebbfe3c-ec86-42e6-8cda-d57a64d48874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf131d5-88cb-4c05-ae1b-62101657a897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcdd581-8c5d-42cd-9c54-99fd17e5e700",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f5ab78-c946-47a4-b83b-c1ce13144ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c819d8-d369-480c-95dd-a03f4200453a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42abe0db-085c-4b60-b30e-a0cc31e0bcc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1656800-0f01-4555-a671-6c8f8ca724f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c115dd-6f64-472b-b058-a6b1ad62719b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3d4caf-51aa-4759-ae8a-5fe1a264e715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f46981-e441-4219-a045-8bf35d22aa04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9145a6f4-0376-4300-9c19-3acdc30d3c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e861aa-1b50-428e-bae8-4eeafb776c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f12fe7-412b-4461-9331-242950c4cc3d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d47c9d-5f4d-47d7-831e-459f20928932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e1dbf8-61d4-4258-92d3-8bee8664e7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85545393-0b9d-404d-8a7d-88a2bd967748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acce5f34-1fe5-458b-8f26-bc91d15d776b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5bdfde-bc40-43e0-8b9c-347225438782",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cd9526-8721-422b-834c-734c2820c25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3984aaa2-cf7f-4206-b9ea-3f41f3dea650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b76617-af67-498d-a246-c1e56edbc7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa974f93-3f9d-4276-8e37-789a91d6b95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9140bd4-f45a-488b-af89-660ef7f8943f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e34ab4-35b2-4c7a-a78b-5a5e791b5d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9a301b-4452-4406-af59-76cc75ada773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2f7ee8-aaaa-42e4-bf1d-30a3d76399d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d22203-3674-4825-874b-c4df3182dfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9b6f0f-9e2d-4a6d-977d-eb6f2faebff1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc0f8a-5a21-49a8-81c4-a0d8617aa5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8390fd09-4375-4c01-95e7-5cbc8582c72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7473e6be-1fb9-4ade-8fd6-e08ab904eb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e31b8ad-01ca-41e0-8fd4-3c4cd0c5c9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f151f691-efd3-4f6a-aead-c7f20fb8aac1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36390856-c9b0-45a8-835e-9dddbf041e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b816465c-ba74-440a-b303-aebc10baa912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4bace2f-047d-434e-8f7a-ef539945dec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb64768f-d5d0-4d7e-9044-262d5541f606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf42758-a818-4ed9-bcc3-a72ba9a3a40f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab89c786-3f4b-4099-9ad6-bfa8bd8e5752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d677df4e-3d6f-4051-93b5-7acaf4263f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b6e8bc-8248-43c0-b3ed-899394634042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e75b78f-8ff6-449d-996e-eac6ad38d213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2c37c3-8999-42be-a073-e7555249e7c3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85523c52-f565-42e0-b0f2-f432bed5ca01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8462af2-3e0e-4130-9351-c01ccf7b1f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b9ab6b-6e87-4031-8333-2d3fc5eed849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6dc100-a111-459f-aa44-71aedbfbfdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bec508b-c215-456e-af8d-e34c67b36636",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb65d19-4128-47a0-8f57-082f7de2ae5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7876893f-20d0-4292-b89b-a1b4fc2a0356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53a4dd0-6739-4b87-b369-92d9fe8ac3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa9bc66-25a9-4c3b-a748-80811ff52497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eaba3a7-1666-4c98-8704-08fbfc19e189",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b2a5e8-f850-42ad-b675-7285db768de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd041a1-e8d2-487a-bb53-5b3fc104ce38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f106e6-56bf-44c1-8029-2009646b8d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1461dea6-3de7-4106-8f82-615234aebd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f022e94e-043a-44c9-96cd-a8a0d454f171",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5506d15c-d3ce-4b88-b342-6564b4a4426d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5350e80-a653-4dba-a0d9-eb16cc6b172a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f339f569-2675-4579-8024-621b589ce249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14fce92d-26dd-4fde-b30c-235f24a8db66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed882a2-f39f-4516-905f-7887c10f87c2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac33d252-3ea0-4241-8f37-d7fdfee8d2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6754dd-237b-4331-908b-52dec4bfd8bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e2baf9-18df-4ad1-a967-987705f79fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c07ec51-5d7b-45ce-b62f-5dc6aaa38f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca42fdb4-b13d-4713-a721-21476edee817",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba4a7c3-a8e6-4b5f-bb27-5cdc991b59cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68473834-01c2-41ed-b698-0ed8e84aaf90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b400ae-b916-414e-8f3a-f1b1a8299f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1a078f-a153-4108-8d03-8a05d2d86dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcf3927-c893-4307-8b93-65cb2d049056",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e5656a-5c0a-4860-9026-a2e4f66935cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3298edb2-bada-4c34-98ae-bb72a28630ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa72a0a-e254-451b-bcbe-02d1ce4ae9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30aeec6a-c7cf-40fb-9e70-9363c9f7450e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3eff89-d437-4e8e-82ab-b7db6fbf3e66",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e313c00-ccbd-4567-86a8-0f9dbfee9ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada10248-11b9-43d0-b674-e656b0a6f7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f79fe5-e149-4af7-a2a3-4c4a3680e427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd301387-a216-48e7-ac53-16fe59b878f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b5eb15-1c30-45fb-a909-d9988863c0bb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05d151b-beec-401e-ac18-1bffa765dcd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e356da2-0821-4ded-bb4c-dee67bddf10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f2ee31-2a9c-4bc1-b619-4dcc48618e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f058a17b-7227-42cf-b1d8-fcc03b5cf2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced3f58e-e7e1-45b2-b48d-02ac3c661445",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4eee40-b6b0-4e8e-9a34-1ba7649221ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e5ed49-eb0f-4f97-aea6-471a4bf0133e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e7e434-af72-483b-bebe-d6f310b4e012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44297089-de82-4ef6-a8a1-919e85fb7ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca70dc1-61c9-4917-a568-755cb70d66d9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1550b89-1f60-48da-a11f-57bfb9addfe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5a8597-9ba2-4513-8b08-bcbd5293468f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9995cf-d2c9-41b7-a8ea-c92419fde216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c127f243-ae3c-43b0-8709-4e5109d24e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b148ac24-f835-499e-b13a-1c6662c52064",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2773d717-e5e2-49b3-af12-ec89cd597d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5528b024-d7b0-40c9-81a4-940fd5dbe72a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd845b6-7a6f-4735-814c-3474e9245b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3915e021-2ce9-404e-9f45-ee770f0e897b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8891310-7234-4148-986d-63c3e5bd9ea8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9db7a90-5be6-4832-8c28-d33011b7bf98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b523e61d-bbfd-4e0c-b862-abbf618aa282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cc1151-5069-4920-84dd-9dbc2c718c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd166196-11f8-45f3-94d4-24d4b4925ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d16af84-97b3-4fd5-ba43-f659e55d41b8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5337af22-165d-4143-83dd-ae54e1f1015d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04a6cf0-fad2-4ac9-9f31-f8800e0caa0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92090bef-5e7c-455a-b384-430714032485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd1cdc4-1dfe-4813-b06f-ee1c6cf1bc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af838ba-c18b-4835-9ee7-ce5e91b5a070",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5be20d9-8f4d-4ff6-8742-85b9a0b4e4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14ecdc7-b704-481e-b19d-2619b2284699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ba2a12-7073-45f8-b74c-82ca5becd83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9366732c-a3a3-4b0b-9cfd-dcc5e49f8ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95116611-69a2-4f68-9a63-74efa04d5a7f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a85ebe-1f28-4419-bcf8-8a00bb4a8e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9594eb-ba82-474f-8d6d-02356472b0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bff430-4ca4-4149-a647-ac1b8fe3153d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0847fa8-0fed-4215-89a0-807bad101425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2909a7e1-721a-4cdb-9d43-954d9d92b0de",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e88591-34ba-40e3-ba45-e0a54dd1f1c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a430d07d-beb2-41f3-bac2-d351be5825e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d654d72-6f02-49d3-bf89-c402b5327a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "876aaa09-4d75-40f7-9b96-f4cbc67428bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea89cf76-9e6c-4f43-9324-a6f91ad57e4e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fac6e74-467c-4f66-b21d-f9b2a67d6730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d173ee1b-8b56-4d7a-907b-3b7bcb5057b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c7fb12-1d3e-4e7c-b6c3-3686496cf04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec7ed60-0941-45a1-9037-d06603635819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc446c67-e7a7-4f68-8bfe-c5f32a387270",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20acf4-eb8c-462c-a847-628479ce2d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29a4be8-90dd-4238-a386-04a435b28686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96a8bc5-2d02-4352-9962-bdf6ca7b162f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0cf41d6-8462-43b9-aac1-4fb66943740d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8c311f-d4f8-4003-8912-e6060eea31ae",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a11a52-5368-4cfa-9cd7-d8c4cd27726c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a738bb19-ed71-482f-b4be-c4fe668d8d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1abca07-f087-427e-9f2a-b57f1a469cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a0b8cc-b43d-4381-8ccd-acfb1a95e3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0d465f-1781-458e-8a20-333c1753a4ea",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195a707d-1d9c-4160-a3c0-2623903b20ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b988c2-2eb0-4466-b653-b44e047acea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19b2656-8c24-434e-9fa5-62a786adb4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4802e9d-fd66-4e44-82bc-73c47f166d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae339e8e-ae94-4a5d-bcb1-d0970003f9e5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fc159f-9cc1-4eb0-a4b7-719f1d5eba56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5256282b-e68a-4a7f-869d-d5bc63e4743a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485cbcff-782c-4123-bcfc-5a009c5d4052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e265f5f0-82df-40cb-b662-f9e57dd7b9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6fb95e-ecba-4371-8999-0e5a6ee2838f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc86f9b6-fe91-4042-a2fd-1e51043a422d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbde950a-9b93-4eae-82a3-681e78c3a9ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724843b9-135b-4e41-a127-42037c0e1635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbb684f-b5a6-4b8a-8a8b-eefde79a4c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffb9a7d-3944-4870-85e8-36dbc6c94668",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b3d3bc-e5ee-4204-809d-f02fe18174cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66179e75-f990-4dc5-bf2f-879d5e9c044e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3984d202-ca7e-4b33-a86c-a46afea2ac24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c48f6fe-5ede-4fa3-a6ef-13af4d48c563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617436d1-9957-4b9a-afcd-79bce72a2073",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aa8d8f-2be5-4537-aad9-0d876457d51f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b46980c-9c35-4a80-9900-15059ad50b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3490ac09-7938-4749-a8c8-bc77f0d6cc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0aa381-244c-4321-aa05-c45b4aaa2991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d009e23c-0fd0-4174-b47b-8b04f203de77",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609ad18a-11e2-4449-a940-7ab525a213c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d808a70-842f-47ab-b6d9-924cf9f296b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac206fde-60aa-4e50-adc3-870b2e087fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e93e55-1fd2-4944-af81-32436de65c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2509ec-f44d-4fa2-b2c5-6a8e8a188357",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6daedd-eb60-48c9-b366-75fd350d4684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f13f4f0f-f5ef-41bb-acce-2b4063dc8f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0311c85-7daa-40c9-b558-0a2f5c23f89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feaabde3-3195-4013-b572-52d0d781f5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf303e3-81c1-4c66-9276-c0619226415d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc2c48f-ace1-4c51-9589-0be6ccfc0869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9880081-6168-475e-953b-dff00de26d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a4f409-0990-45ab-87cf-3005d4123f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751ef43e-eee7-4f04-b7f6-88a38b4f134e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7782c4f-3a31-427b-9c5d-b41d30418ba8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481c17ee-3cc3-4461-9a3f-977e3774a713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e91a2db-a79b-4549-b386-7e01bdf17ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945186fe-86ab-4827-bfb7-745096c07221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c0eb3d-0f6e-45bc-8618-8678331f811b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203274c1-3f5c-4722-b8c0-a14c14964af5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3212b15-4881-4c2e-921d-d7f044c03926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9523233-690c-4f6f-8b7e-08dce0b495d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fbcf66-1ffc-48ea-a74b-40efb39a071c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01dabcf-879c-4fc7-88f5-8f1b20b51528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3544e1a4-a08f-4636-a24f-7c3d52b5465e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9c2507-90e9-464d-a717-c99de0d2e959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19716518-9b15-4040-a06d-e9e308fdaad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8324fe6b-7115-449b-8dea-137f48025aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbb43e2-e424-474d-9776-e6168311c2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7518cb48-32bd-4c60-b0e5-842aefae4c77",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be4e24f-eaa4-4d1c-bbf5-fb81937b0fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79689e4-5763-4832-940e-fe6b7f40cefd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f4e577-dcc2-4844-b2cd-018db9f23de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb98f1c-9f05-4436-b258-dffe45bccf32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5576562f-325c-40a0-a9f9-6295b21deb68",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3420aad-3c5f-4db0-9f13-ccbe10cf79d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4c34db-a7e3-45b1-b23a-e72f26132558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c550d587-b097-4c03-b1f1-549d2e0b122d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981c7fb0-f9e1-4ea3-87ae-e73f6106e914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff165271-c354-4f4b-8220-1551e935a669",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffcc41e-abf6-4975-92a3-5b6f0bf57acf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94a66fe8-f598-47f8-90b5-d40d1d4f3c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7076791-f774-487f-8d4c-45035e9eca88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04430abf-b924-4993-92ce-c76ee0dac4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a9fc9b-af0f-4f07-a162-ef9da53409a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4474880-c40b-430b-89a4-229e2a85532f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84e8d98d-8e08-486e-93ec-4fcdbeb73dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94814603-1ac9-4eae-90c3-a39cb4cb0f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfaa408-c165-4f93-b586-4f13d692ff89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf3be4c-c97a-4c04-b31b-529b603cf94a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4fd2d1-a354-42b2-b907-5a66eb7bb6e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "422f0fa0-ee4e-4eea-b804-1072a29d084e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327b5c24-a3ff-4ca4-9478-ce78c57568a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76de8c83-6a6f-4721-9688-78bce6f1b68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30c7cdc-9321-4893-b0a9-e70d201d9a80",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38244c99-056b-4ab9-9270-bdc67dce9c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7c541d-0371-46da-9a80-07535d82deec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258f0a3f-9932-4574-90d5-bf49012fdea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7f6eec-b90f-42b2-9eb5-0bb28d30dd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8875d051-7893-40b0-ab06-a033fc16ec75",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7866cc-df4d-4bfb-a961-2c69f88d639e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c898b07-4695-4938-a299-42b96c4d5ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e99e5c-aa8e-4df1-a39f-76d64c121b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c740e704-dd3c-469d-b2f6-c226b25793a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e981bc2-e5b7-477e-861a-6e3b0be7dd21",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7502d21-707b-458b-9489-08a449f4880d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e16e290-8bf3-4c63-bd4c-fbe40ddbe164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e577c366-c258-4f1a-8c94-019e2a551576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01d7a6b-657d-40b2-addf-77ba2984cb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a912ca69-2e19-4b95-a10e-81237e54bbd2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a459f04-8134-47c5-a54a-3d0a1b975fbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37888888-63c3-4168-b75a-c8b7f69a4de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b581214-383e-4924-a1e6-1e80b3cb85d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6331a66-1624-44d0-aa8c-fd0efd420452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603a8c61-9e0b-469e-b744-95b229b1ad2d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4589a1e6-b9e6-4beb-8e97-d35c678e256c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c414c711-d8f8-43d7-9c71-4902d3b6973c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d35a02-f1d4-4d99-bcb6-4590d99ee9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f323ff-a15d-49a9-8159-89f0fc30810c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e590a526-1da5-4835-91e4-05e249b45b10",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b843b70a-32f4-44c4-88a9-e11fe4a723a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aadaac70-f874-4215-9be2-7dbe2137a120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e77252e-b35c-4fc7-8b55-6263e315ff32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f475e1-6c7d-4cd1-b1b9-a8b560268a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1440c36-91b0-45e3-a95a-eccb3a3ef522",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601bc071-2691-4afd-88e9-3e30ad693fd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e1a0832-3618-4235-a417-88888a4b4019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c59ed7-dca3-4283-aab7-911e176a6778",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9066e4ba-ef7b-437a-b74b-df3480d4bdc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376cd542-9926-4434-913e-57e7c6161c18",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad67cfcc-f3ec-45ce-83a8-d9df4c7e35d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b38a4316-61b5-4a5c-97a3-4ee7df6ce777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc114b74-5d8a-4fed-9922-80fcfdffdf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5156196f-6648-4615-b198-fa941de57c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481fb476-0edd-4326-a2f4-7b0ab724aa9d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ec7df6-c486-4f7a-bb4a-8a975f5e9f89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "569c3159-8d97-45e0-ad9d-57c2d9f31def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f4cf30-5a75-4a5b-a716-6f4122f001c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be955363-9b23-4e47-a111-3c59fbe54c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde9b1f4-db9d-4b3d-8ccb-1ab84411de25",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32accce-500c-455a-bd43-6e069d5ba482",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20cbb20-a816-44a8-ba74-9286bd360f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb36de7-3ae3-4d66-9efa-a15bafb17cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1b88dc-0adb-457e-baff-a2e39e05558b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89557bc8-1308-49c1-8c60-3c07eb637048",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757b43a2-c526-4639-8669-9a83b704b6c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c8fbe80-7412-44a1-b0de-029e0a99024d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cf271b-1d22-4e74-bd70-6d838b33308b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8730dc6e-7112-4610-8ae2-1a1f72d1c569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823701fe-3a86-457b-8509-97a6c511f686",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c30898-f367-4bb9-9d9e-dd3ec2e98f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca2ddbe-a195-4958-bee2-ab6cc10a2ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e2fdff-3859-4781-b094-e550fba480dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d99e9a-6bcb-4746-9a9c-c7ea5efcab26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ba348-9aa8-4b8b-924a-befba84d3228",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2646dc-5014-44c1-ab67-5722d8079baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8b1b9d2-55c7-4028-827f-475b85534bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5d0f87-db7b-44ef-be96-600b02082f58",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164f6b88-0dc1-4e49-910b-27b1caae98bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f86cd83-b40e-434f-b353-5d78c0932743",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8a84cc-ae65-4356-8dd8-e72d3d76fd06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d89f6c8f-bfde-4428-acb8-de0a230a0aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1599fb-aed0-471f-a5fa-a53487bdb76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f18a370-b533-4d99-afa0-1a3ec1ca7ac6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a7c16a6-ac59-4b5f-9629-f040295b33b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3efb74c0-83a3-4965-b2ff-29406ab98468"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76264419-d8c7-4d48-b9ef-b01fb3388153",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af7be8c8-6248-4693-93b6-7dcf0d5d6140"
                    }
                  }
                ]
              },
              {
                "id": "9ca9df6e-1004-4c85-9e86-f52fe2b456d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "032a7153-fef8-4b58-a6b9-154d29f55bab",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928bab69-4268-408c-bc09-9244f9ffce9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "092cdf57-a3fc-4ef9-9c06-df13825b23e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3af219-7a7b-418a-85be-dba5ebd49378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b05d44ea-eee6-4c72-8da0-0626f389fcf4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "005dde3a-6d88-4097-8b3f-029bf49eed04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e2c3c25-0b0c-44da-80fd-abddbbfab9e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "160d5aaf-bc35-48e9-8548-6fd614dbc35e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "120731a6-1091-4dfc-93cf-156de8dc129a"
                    }
                  }
                ]
              },
              {
                "id": "6ba61cf2-735e-406b-a767-a8a096920f1a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4cd24ccc-88e3-4044-af6e-6629d4f702de",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162777d7-de8a-41b5-adb2-7a21752e760a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "508350e8-f0f6-4853-bacd-1faf34339210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc476df-37f5-47f4-b8fe-1b5427fb8e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f85861-f4f9-46e4-98d9-0a695c7945c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "740e8b6f-f77d-4490-8201-ea4d5edfaa0a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "33f9825a-1fe1-4ca4-8cff-5a9c50cbf95b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "151fe7eb-ac00-44aa-ada1-56bfc6790e51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "65d94418-ec83-4ef7-a982-01a1019c0755"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38397ba8-050a-4ed7-bc3b-62b6b10a54e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0628c9f4-d82b-4ef2-8ed9-eaaa65b2bf13"
                    }
                  }
                ]
              },
              {
                "id": "8bf70c76-8740-4ade-bdec-6cce1124cbfe",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00aa89de-08de-4ca6-a898-51a5c1dd35bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c86bc7b1-d75a-421d-b8cc-6dc0d96e6fcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4e6856f-cfe2-4460-89ac-2f2be493a813",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9aa3afa7-8b9d-4405-a537-fe2cd1c92e8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc48e8ab-ffd6-43fc-a461-de05e07c34a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a9814730-a6e4-4861-a784-22bd1f070643"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d650212d-2c1e-44f1-94d0-39378a8e4c36",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b02fb6b-bd66-4be6-99d0-996d96a52eef"
            }
          }
        ]
      },
      {
        "id": "8bf2a23a-ebe6-47f6-898b-e7c7ed625f14",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2b0e1df3-7239-4422-92a3-41d091393a5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d7e3aa4-7d0b-4cb7-978d-e2712627ee6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1de0b6bb-ca8f-4d0c-80d5-f6f8e30f301c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62318923-4fd6-49a1-9d1a-24d45a899d91",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e76799e2-e174-4c1c-865f-caf260009c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2a111c-ef15-4d3d-8008-68141752a3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee519856-32d8-4af3-a205-12144e9ff858"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41b73967-4dbc-4648-9f51-b2b5df2be89b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc6e9ad8-d03d-4be1-89d7-bac5847ce181"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d0edf5e-4285-4e94-b0cb-8f230b06fc09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24691318-f636-48e6-85c3-6500355ec401"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5298e491-1bfb-45d8-86f8-b9e2ea8b4de9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2f12796c-3f3d-4c49-ba5f-f05702cde178"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca3fd896-d70a-4aac-90a1-39f98302c6da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f590f6fc-bb96-417b-a82b-d2678e466fb0"
            }
          }
        ]
      },
      {
        "id": "fab4ee51-fd52-469c-be20-41b664eddceb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7baef3a2-bda4-4263-bd54-4bb74a6d9afd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85879a9b-1a93-4156-a6dd-acab55c940a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1f152fb-57ad-4bef-98e2-ade64c1967ea",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82ab2f0-71d6-498f-b72d-7ea308994258",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f46915f1-5f4e-459b-b8a8-bd11035088a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8729478c-fd32-476b-b085-c68f94845049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "972fa4fe-ca2a-4687-9b0f-6abf3ce3e6dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42f16633-3b1f-414e-913e-af8c657a561f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcfebe49-db6b-473f-b667-c7a5d36e6153"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "791ea094-f0fb-4dd5-8855-e9787b5f73a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9e1999e-0d95-45f3-9d86-37c825223bc5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da86a1db-ae93-4f01-a6a8-ae1187706a19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "153e04e3-fd43-4539-9d24-a233a9410a29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a446c837-d012-48a0-8d16-84e9919915e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b65c2d3-217e-4bd2-a6a5-e9be203b01ae"
            }
          }
        ]
      },
      {
        "id": "5bfdd13b-2ebe-4427-add3-d3c7cce2bd7a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9e320566-833d-4088-9689-6d0bf9b241e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7904f8d7-5f2b-4ec0-9ca3-bb54149d6c3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4762631b-1fb9-4be1-a679-4f9bb945fd93",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37649e86-c8f3-42d8-b6cd-64473b5e94bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2627690-4f40-4c2b-8fcc-6295ae62af91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889e49cd-6a03-4e47-b84d-a32c178c7c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52e29df2-0219-42ca-9e1f-47694ea873e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97e1e757-e7d6-4788-b5e8-7f1f73e72644",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3fd37ab-25a9-42fc-b203-19b2315c87db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30c9f48d-ff8f-4a35-8976-e400adcc22cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69bd2b63-7619-4dd7-a848-13f199899bbf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5197d725-4df2-4ed0-b34c-512ced897a14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "17761249-9c28-4480-b773-a510565be4d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f783c30-c193-4617-8a38-bfbcfbd86576",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b791cc6e-e5a8-4700-998b-f3bccb7f4817"
            }
          }
        ]
      },
      {
        "id": "e1307c96-622d-49bb-9e8d-995fae82e44f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80d7dea9-4eac-463c-887b-915db7b38e7e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c01734d-cf33-45da-9628-d42a643aeba2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "32f70e2b-10dd-4864-adf5-2b6f18a64831",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "844054a0-59ee-45c4-af2e-537b9998252f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4759dfe6-ef73-4bab-a2cd-1bce03ff0641",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 323.4186991869919,
      "responseMin": 12,
      "responseMax": 8011,
      "responseSd": 1036.1979004604427,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686228403896,
      "completed": 1686228494207
    },
    "executions": [
      {
        "id": "43a9c447-7886-482d-aba0-cb2468fc669c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ad8c8391-b84f-495c-84d8-ecd0250f5049",
          "httpRequestId": "71deec1b-0dd3-4045-ad93-86675c588213"
        },
        "item": {
          "id": "43a9c447-7886-482d-aba0-cb2468fc669c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cd6750e1-28ea-4eb7-b0c9-13b7158510e5",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "6e31dd48-717f-4114-aaf7-31f1531155c3",
        "cursor": {
          "ref": "05eced39-aa5a-4e2e-b839-50f6111f44a3",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c6511ff3-ab93-407b-9154-f886cf8fe798"
        },
        "item": {
          "id": "6e31dd48-717f-4114-aaf7-31f1531155c3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cc09a3fb-68a0-476f-bcb7-d4f9278de9b7",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "97ff1dc2-0792-4edf-ad32-c167776464b9",
        "cursor": {
          "ref": "dd08eb2e-2b20-4095-b470-e4fe32e54b86",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a2982aab-9e0c-4b06-9ce8-4acb323631f1"
        },
        "item": {
          "id": "97ff1dc2-0792-4edf-ad32-c167776464b9",
          "name": "did_json"
        },
        "response": {
          "id": "0f68c943-51d6-47c9-a2c9-793f8d4446b7",
          "status": "OK",
          "code": 200,
          "responseTime": 437,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321e3f0d-c37d-48dc-8b12-b31842ea3c48",
        "cursor": {
          "ref": "21c0505e-3fcb-48d0-9128-b1263cbbccda",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4dbca1b1-3178-4b59-91cd-818df417dfd4"
        },
        "item": {
          "id": "321e3f0d-c37d-48dc-8b12-b31842ea3c48",
          "name": "did:invalid"
        },
        "response": {
          "id": "0be78067-ec29-4ec2-bab4-3cafc09a5e2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1074,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "321e3f0d-c37d-48dc-8b12-b31842ea3c48",
        "cursor": {
          "ref": "21c0505e-3fcb-48d0-9128-b1263cbbccda",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4dbca1b1-3178-4b59-91cd-818df417dfd4"
        },
        "item": {
          "id": "321e3f0d-c37d-48dc-8b12-b31842ea3c48",
          "name": "did:invalid"
        },
        "response": {
          "id": "0be78067-ec29-4ec2-bab4-3cafc09a5e2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1074,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fba41186-3125-427d-8ab3-fab5364795f9",
        "cursor": {
          "ref": "ce4e668c-d1ef-4718-acd5-e481a94fcec6",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e4ab59cb-1444-40cf-a9c6-c4289fb1d027"
        },
        "item": {
          "id": "fba41186-3125-427d-8ab3-fab5364795f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "783ce6d8-89a8-41f2-a2a2-ce78a7b77d8c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d527cb7-a96d-48b8-a8d8-13318832d90d",
        "cursor": {
          "ref": "cb80009b-c03d-446f-b17e-02e63bc5cad7",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1e93de77-c255-4ccc-ac97-a3146404aa13"
        },
        "item": {
          "id": "2d527cb7-a96d-48b8-a8d8-13318832d90d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "72d6dcbc-3144-4f9e-b4a2-d133cfd8285f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4d720b-e9a2-4554-b4d1-90ebfba002a6",
        "cursor": {
          "ref": "807be8f7-e9d4-4778-85e1-0d7f801af596",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a0a02573-2a54-4441-9768-156abb2d1cfc"
        },
        "item": {
          "id": "ab4d720b-e9a2-4554-b4d1-90ebfba002a6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2d8f6114-6e06-46b7-9891-b120b00f99cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "394f63f2-7d32-4a76-bed9-dce2860f06c4",
        "cursor": {
          "ref": "39d1aacc-4b3f-4139-85d8-780b62701c04",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d2a51837-3c83-446b-a5fc-3bcbd8034ac4"
        },
        "item": {
          "id": "394f63f2-7d32-4a76-bed9-dce2860f06c4",
          "name": "identifiers"
        },
        "response": {
          "id": "733fe1e3-ebf1-4973-b0a1-172ef81e1170",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc232393-e48d-4e1c-a511-f6dde6584cd2",
        "cursor": {
          "ref": "90805309-b9a1-4e55-aa7c-f2af0043866f",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "56ec94e1-d461-40b5-bb67-142172748628"
        },
        "item": {
          "id": "fc232393-e48d-4e1c-a511-f6dde6584cd2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "94975f86-ff3e-4e4c-976d-6ff9461e0c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab622c9-ae1b-43a2-a668-2cc5ff79c495",
        "cursor": {
          "ref": "c997363c-672d-4cb6-9471-cc7d2f69d89c",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "deda049d-d742-47ff-a526-86fe59a5e551"
        },
        "item": {
          "id": "eab622c9-ae1b-43a2-a668-2cc5ff79c495",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e8469331-5f62-49c4-b80f-5e4b3edf7e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91b4837-d863-4dad-ab79-ac4b288a3de8",
        "cursor": {
          "ref": "d151bca7-968a-41b5-80df-865cc38d11f8",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bbae26b1-6f75-4997-967c-9bfa6bb0ff54"
        },
        "item": {
          "id": "d91b4837-d863-4dad-ab79-ac4b288a3de8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c3fc7cc6-c0ce-44dd-ab89-9473ccdd5fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f55455b-3d12-4fcf-9a50-8b841e819a37",
        "cursor": {
          "ref": "3f70e9e7-e8ac-4a03-9ba2-542cc6255a67",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ff8b80e9-3cc0-4265-a3b0-420afdf92630"
        },
        "item": {
          "id": "6f55455b-3d12-4fcf-9a50-8b841e819a37",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "46f07062-42c4-4e81-aafb-b4ecf26daaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46f3e02-faa8-46c8-9a57-5ef3672e14b8",
        "cursor": {
          "ref": "941627cf-6587-4c04-9b65-85abb06f8bcc",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a54cd54e-305e-4715-97be-df336b18d47b"
        },
        "item": {
          "id": "b46f3e02-faa8-46c8-9a57-5ef3672e14b8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a90489c6-3888-4ae2-a137-ca72adfef09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d674a081-f496-47c9-91b7-1cd80448e506",
        "cursor": {
          "ref": "140d3538-7c14-4ef3-81db-1b306998d4ca",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "09a9a89e-0982-4b42-bd9f-5dc66ee81373"
        },
        "item": {
          "id": "d674a081-f496-47c9-91b7-1cd80448e506",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f7f954d5-0445-4b7a-804f-c0c65e486ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f17194-2de9-4a7a-87f0-d8e10a4f3855",
        "cursor": {
          "ref": "073af18c-0801-41be-80f1-ab1b61ff0182",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6a842105-d6b8-4b92-925e-ebbd56dd0e58"
        },
        "item": {
          "id": "11f17194-2de9-4a7a-87f0-d8e10a4f3855",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "148f3e67-36ad-443b-a75a-410646efcdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe6d25e-d129-4723-a115-45ccc117b0d9",
        "cursor": {
          "ref": "c0bb2df0-d88a-4948-ba04-912bbbbd4273",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "65a8e711-9906-4411-8645-0532c72935f6"
        },
        "item": {
          "id": "6fe6d25e-d129-4723-a115-45ccc117b0d9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5d6355f8-4cc1-4b9d-9089-0066d0503df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cd2a14-2942-4a79-9527-e33c5602928a",
        "cursor": {
          "ref": "99cf0d1a-f5b6-4ac1-834f-60cc6e27b493",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a0ef7f5d-67cd-4bf2-9030-a8dab697803c"
        },
        "item": {
          "id": "e3cd2a14-2942-4a79-9527-e33c5602928a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f6075732-2002-4143-a50e-bbd0a6787d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b194f4-df11-4f58-9172-919414211cb3",
        "cursor": {
          "ref": "4f2a1277-28bb-468d-93fe-8e94615aa90d",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a5e2259a-253c-46cf-bbac-d6dcf6a590ce"
        },
        "item": {
          "id": "42b194f4-df11-4f58-9172-919414211cb3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e87460d1-9725-41a5-a879-1704e4f83acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c492bef-186d-4600-bc3b-d2739e35fcd3",
        "cursor": {
          "ref": "b7adefe0-672d-431d-a5dc-2287b39c3fc3",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "148b159f-d321-4fac-86e3-94e078a6309c"
        },
        "item": {
          "id": "9c492bef-186d-4600-bc3b-d2739e35fcd3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eb6c4f86-dd17-430d-b9bb-5d1cf7d5b74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1166404-db48-4558-a7c1-b30ffbd88d92",
        "cursor": {
          "ref": "3eb27b0b-0faf-4e4a-93c8-20bdb19053f8",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0bbf0d51-46da-492f-8fc4-fd9449f5435d"
        },
        "item": {
          "id": "b1166404-db48-4558-a7c1-b30ffbd88d92",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "50e0ba33-557a-4570-bc66-65e0ca9bf131",
          "status": "Created",
          "code": 201,
          "responseTime": 2936,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8711e3df-e0fd-4cc2-bc0d-41ee7bcd37c3",
        "cursor": {
          "ref": "92d26cb1-d602-4a23-9c90-1abd0a156b3b",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2e0f338a-18fe-4cb3-9b12-264706289b6b"
        },
        "item": {
          "id": "8711e3df-e0fd-4cc2-bc0d-41ee7bcd37c3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "91501884-b4dc-47de-b819-08ccda06efad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e2aef2-8542-4270-86e7-b5fa35948b48",
        "cursor": {
          "ref": "5329303b-6879-405e-826a-80aa899705b7",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7654b0a7-fad8-4ad1-b707-3fbe6ede2915"
        },
        "item": {
          "id": "44e2aef2-8542-4270-86e7-b5fa35948b48",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b09739cd-60c3-4033-9f5f-ec189dff7fce",
          "status": "Created",
          "code": 201,
          "responseTime": 3993,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "39c3110a-ac76-48c1-8b66-7bad4a9467a7",
        "cursor": {
          "ref": "cb322b34-0479-44ff-8c8f-b7531e6322d7",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e5943c6b-8574-4421-855b-41bb8275f848"
        },
        "item": {
          "id": "39c3110a-ac76-48c1-8b66-7bad4a9467a7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "eee3b689-d881-4d55-a784-def35446b6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3ca725-2f64-4c4e-a712-c4da2e95090e",
        "cursor": {
          "ref": "eb19b28f-f265-49e4-bef9-98d41ac2329e",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ebf02f5e-a9f4-491b-a83b-c41384c789c9"
        },
        "item": {
          "id": "dc3ca725-2f64-4c4e-a712-c4da2e95090e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "606647aa-36b7-49a7-b2d5-93ab3f6cac00",
          "status": "Created",
          "code": 201,
          "responseTime": 4154,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "48f1bf29-7f84-4177-bbc1-4fc1458b518b",
        "cursor": {
          "ref": "66da47f2-4f8f-4ef0-b139-a3e1d22e2a13",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "48e92a31-99d2-49b3-ae18-7d2413d270c1"
        },
        "item": {
          "id": "48f1bf29-7f84-4177-bbc1-4fc1458b518b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c56cfbf8-795a-44a9-99b1-5e175e9836d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca02cf62-9d46-4a7b-9784-1a10d4ea5d8b",
        "cursor": {
          "ref": "8e1478c9-174b-49f3-a812-256894a919f7",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b6127058-0c72-438e-a81c-3ed50c9d8695"
        },
        "item": {
          "id": "ca02cf62-9d46-4a7b-9784-1a10d4ea5d8b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "579318e1-bf73-44ee-8fbf-a69f64f600ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e93300a-51b7-4d8d-81c4-c65bc68d7518",
        "cursor": {
          "ref": "17f93f8c-aa2c-4cd8-8575-1a911d59c8af",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "de4143d6-cc04-43e7-b9f2-e77686abb7ac"
        },
        "item": {
          "id": "3e93300a-51b7-4d8d-81c4-c65bc68d7518",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0025be58-e24e-4caf-b48d-1573e159fd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaeab5b-a3de-4fd0-94d5-84452b44e0d8",
        "cursor": {
          "ref": "0bc358f4-4d5c-4ee1-9998-900edb3ed86d",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a98e4274-21db-4bca-8740-a197deb0affa"
        },
        "item": {
          "id": "1eaeab5b-a3de-4fd0-94d5-84452b44e0d8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4e346f42-351f-4ac3-830f-f5956ce76630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6362d77c-91b0-4dd2-bbf1-64321ed8727b",
        "cursor": {
          "ref": "1e4e052f-df4f-43bf-af9b-3b65e2ceaabc",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bed04d61-ba20-4903-98e3-5868edd9ad9f"
        },
        "item": {
          "id": "6362d77c-91b0-4dd2-bbf1-64321ed8727b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7117de26-622a-45a9-a2d7-0af6e348a3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f78df32-14fb-40d2-b8a0-ee41fb2e7692",
        "cursor": {
          "ref": "37e57630-3115-477c-a222-f54dbe7d253c",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f1ecc5fc-e582-4245-873b-3eb787bac769"
        },
        "item": {
          "id": "0f78df32-14fb-40d2-b8a0-ee41fb2e7692",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8a9d106c-02c1-4d70-bdd7-074fa6f7d112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd31342-1451-4ffe-83f9-08a17490a253",
        "cursor": {
          "ref": "62c61805-1dfe-40e0-88db-6d61472b5c76",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4a22860d-8330-4671-a6f4-d8005156752b"
        },
        "item": {
          "id": "8cd31342-1451-4ffe-83f9-08a17490a253",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d26dbb15-d83c-423a-b209-869af386d086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3a995d-0bc9-4935-a1b8-8f7fc9ddc196",
        "cursor": {
          "ref": "bedc29c0-3d75-41ba-b77a-6a03cc472e46",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "14097f91-8b31-4aa9-95fc-3c487201be13"
        },
        "item": {
          "id": "5e3a995d-0bc9-4935-a1b8-8f7fc9ddc196",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7b3df971-947d-48ee-8c67-846f2a6bb25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baedd8db-ee55-4d3e-a50a-d69a710df35a",
        "cursor": {
          "ref": "b8938096-0437-4b5b-9071-319fec423665",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dbcd32d8-bd3c-410e-a21b-17d3a4c09fa5"
        },
        "item": {
          "id": "baedd8db-ee55-4d3e-a50a-d69a710df35a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "efc3b53a-b0ef-4682-8516-509eba36f5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f377d2-d913-444a-9e26-ba1b65c649b8",
        "cursor": {
          "ref": "d3e375f5-65a8-456e-94cf-db13a56a0ebf",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "04118c69-4c63-4b88-9a27-fa2cc2e4e65a"
        },
        "item": {
          "id": "e7f377d2-d913-444a-9e26-ba1b65c649b8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "de71d5a6-a1da-44c8-ae4b-f1cf10281044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764d1200-0220-4d67-bc1b-9a5dbfab1b75",
        "cursor": {
          "ref": "0a469010-da92-465b-98c0-24c4bfd5509c",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "db96b4f7-c08d-4efc-b019-6c35fa09d850"
        },
        "item": {
          "id": "764d1200-0220-4d67-bc1b-9a5dbfab1b75",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7040bb75-9287-43f4-9607-809cb82f28cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ed87c3-61d0-403a-9f04-5bd8a8df922e",
        "cursor": {
          "ref": "c40109f1-d86b-4a1b-8e2c-58b71438adc4",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "427e3685-5174-4ace-b09a-5f7350c6f4a0"
        },
        "item": {
          "id": "98ed87c3-61d0-403a-9f04-5bd8a8df922e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ed6bdb7a-6be4-4bbc-9198-29a586b15c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7212cb52-e947-433c-ae0c-257c79b750a1",
        "cursor": {
          "ref": "fa749d67-117e-4f3c-83f9-6782e268620c",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "90756841-3130-4492-a634-95b1881e79a6"
        },
        "item": {
          "id": "7212cb52-e947-433c-ae0c-257c79b750a1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "34a69231-ecc7-4e00-a1f9-271b4f43783e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d865368-1b74-4102-a0a0-20b088b73d89",
        "cursor": {
          "ref": "1de0feb9-f8a6-4682-aad1-766d26369a27",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b358f34f-92a2-4e52-9f56-f37220f073bf"
        },
        "item": {
          "id": "2d865368-1b74-4102-a0a0-20b088b73d89",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "114e213d-db33-4501-9469-f5c9bcc8abbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129777a7-6b79-4eb6-8b9c-bae0b574f518",
        "cursor": {
          "ref": "b0504eef-7f87-4650-9dc4-d8b57c68b080",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4dc3b584-8d2c-4be1-a99a-6ab493e7027a"
        },
        "item": {
          "id": "129777a7-6b79-4eb6-8b9c-bae0b574f518",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e8c0dd3e-c902-4bc7-acde-70e04ebd1247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0253eee6-a4cd-4a4a-9923-eda5d5de357d",
        "cursor": {
          "ref": "c6783f08-7b49-4af8-b3fb-46aa44685d4a",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c2ffefe5-d0ca-458a-baea-bbd452382b87"
        },
        "item": {
          "id": "0253eee6-a4cd-4a4a-9923-eda5d5de357d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "83edd5fa-3fa5-4da7-94fa-9b524fbf3691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afdf3a7-95d7-4229-86ac-e61948b9c3c5",
        "cursor": {
          "ref": "f38645a7-9a94-4ff5-95fd-b1e626f936f5",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "56314577-1920-4879-a10e-a9a1dd0d2bfd"
        },
        "item": {
          "id": "3afdf3a7-95d7-4229-86ac-e61948b9c3c5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "44a7e641-cc29-41e4-ace3-e6da12edc5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dae1d02-fc65-4876-8ddd-0e5852c366c7",
        "cursor": {
          "ref": "4e62e6be-fd97-4e99-85ba-153a382064ef",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e5c8b872-3e57-4344-92f6-e2a79441bf25"
        },
        "item": {
          "id": "3dae1d02-fc65-4876-8ddd-0e5852c366c7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "519bcd53-f58c-4517-8ad3-f26d12ad7858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0cec56-c2d6-4964-bc0d-a57113cd4da0",
        "cursor": {
          "ref": "c4880d87-ff3e-4fb4-bf4e-5cd9b3d79830",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c328fe93-6c4e-41b0-8195-d2cf2bf1c486"
        },
        "item": {
          "id": "5b0cec56-c2d6-4964-bc0d-a57113cd4da0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d1169d5c-4b77-4404-b8f0-8cf2dfd98796",
          "status": "Created",
          "code": 201,
          "responseTime": 2982,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1b913835-ce40-4513-b03d-a97ddd2b03d0",
        "cursor": {
          "ref": "f1304839-9c18-4e61-8e73-ab6244f18089",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0da37e4a-75c6-45f7-b434-461d7a1ce3f2"
        },
        "item": {
          "id": "1b913835-ce40-4513-b03d-a97ddd2b03d0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5e88eb61-b058-4aac-be4d-588cccc47dbb",
          "status": "Created",
          "code": 201,
          "responseTime": 3373,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "487cd9c2-0fdb-42d0-a45a-842aeae2044d",
        "cursor": {
          "ref": "eb3da22b-4c56-4fc4-ab0a-b44955d8d83d",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "45866bd6-e2d7-4eee-884d-dbd6075d09af"
        },
        "item": {
          "id": "487cd9c2-0fdb-42d0-a45a-842aeae2044d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e2763514-2fa5-41b7-9b69-33e1cc86a593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1a7a7e-3fc5-4789-b3b7-b5773390f73c",
        "cursor": {
          "ref": "d6cd37b5-dbd2-4f77-9f03-b2c13f3a37e3",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e32a83c2-14fd-476f-9b8d-9d31846011c5"
        },
        "item": {
          "id": "6e1a7a7e-3fc5-4789-b3b7-b5773390f73c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7aa4f2cb-c572-4b43-9f50-c7948d1b74a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6c149e-67ca-4da7-9432-f3ce048f8f9f",
        "cursor": {
          "ref": "78311396-eef5-47d8-965f-2a1d7c89c582",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6f6830a1-9189-452b-8823-1eb415507062"
        },
        "item": {
          "id": "9c6c149e-67ca-4da7-9432-f3ce048f8f9f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1ea39b92-895b-4e44-8ea4-4c8521ccbbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 773,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183c31a8-2228-48a4-8072-f0a985af84b5",
        "cursor": {
          "ref": "a962c8c3-7075-4bb6-bf29-992fd0a55909",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8e27996c-af01-4ef6-bc60-54782b2dcbe8"
        },
        "item": {
          "id": "183c31a8-2228-48a4-8072-f0a985af84b5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "20aaa166-1be2-42f1-af66-ead904974e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c5fc59-6400-425d-b0ac-9b3c87f1606f",
        "cursor": {
          "ref": "54f2b2f1-339e-4b70-a6cf-005ccc71f5c7",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2332ed05-be34-4441-b9bf-1a8993be7ff5"
        },
        "item": {
          "id": "74c5fc59-6400-425d-b0ac-9b3c87f1606f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "85370bfe-fa3c-4150-b985-e3a7f6d1e644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e38f679-5087-4e05-935b-aeede721d264",
        "cursor": {
          "ref": "59891821-21b2-4801-a122-ca6de3cdcf63",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e3d760e8-e265-4316-abec-671f76f1ecba"
        },
        "item": {
          "id": "1e38f679-5087-4e05-935b-aeede721d264",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "da5cbd45-5319-4cb7-bc30-7a9e2e0864f4",
          "status": "Created",
          "code": 201,
          "responseTime": 6061,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a2f28175-638f-4c04-9bb1-a499aa16dea4",
        "cursor": {
          "ref": "d769005a-de3a-427c-b319-a6f7699b3d0a",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a6727a10-4375-463a-8205-3c16c8cd2157"
        },
        "item": {
          "id": "a2f28175-638f-4c04-9bb1-a499aa16dea4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "82e096d0-2a9e-4d3f-8d35-35a13ec3de9b",
          "status": "Created",
          "code": 201,
          "responseTime": 8011,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "413f407c-4f33-4f3c-ab31-8d7435ba6328",
        "cursor": {
          "ref": "df7d5bb5-8f43-4ba5-ba32-66f1ea81475f",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c0935469-32a6-4a2e-9be2-ec0075297b02"
        },
        "item": {
          "id": "413f407c-4f33-4f3c-ab31-8d7435ba6328",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4e77ab4b-4cb6-42ec-a740-82abc36b75fe",
          "status": "Created",
          "code": 201,
          "responseTime": 2421,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e53f4583-d402-4b96-b84f-995c2ae61a13",
        "cursor": {
          "ref": "2b55c553-eca3-4e25-9608-b8ccdeb50e77",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3e29e251-0f24-41bc-9eb1-7aa498128467"
        },
        "item": {
          "id": "e53f4583-d402-4b96-b84f-995c2ae61a13",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5f0e478e-c4c6-4ebb-aa46-56471667a969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fc6346-9b7e-488d-a394-e775c093addf",
        "cursor": {
          "ref": "60d084db-9b51-4581-92f9-51563b38bf3b",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f7b6444c-cb47-4208-8800-dff402bda5f7"
        },
        "item": {
          "id": "58fc6346-9b7e-488d-a394-e775c093addf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ba9e2aae-01f2-41ad-9780-6fa1347e87c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37b770c-adaa-4dea-8800-d53781cc9326",
        "cursor": {
          "ref": "4cb33afb-fba0-4495-a2a6-7842e3e7fc4b",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0a372333-cfbb-46e0-9aa8-d2fa8d28ed75"
        },
        "item": {
          "id": "a37b770c-adaa-4dea-8800-d53781cc9326",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f5a9650a-1f4c-4be7-aacd-8d88fad4b444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7be8e2-0b6d-4049-861b-afeb4241d898",
        "cursor": {
          "ref": "ad69a23b-c0f7-428f-9d86-aee11f88bbee",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "039d979f-75c7-4636-82bf-58dc845dea4b"
        },
        "item": {
          "id": "5e7be8e2-0b6d-4049-861b-afeb4241d898",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2cbadb53-6327-44f2-846d-e3f5a31fcbf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cfc7f4-0efc-4725-9edf-671a665b7a1e",
        "cursor": {
          "ref": "4ca5ae26-64ac-4c25-8f4b-fc4fb4b288ea",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "57b420f8-652b-4069-9c30-a2fb9ea499f9"
        },
        "item": {
          "id": "75cfc7f4-0efc-4725-9edf-671a665b7a1e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d5764163-efc1-46ef-888a-9dc63e3734ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e027b14a-a488-44b2-9359-65ffefe33815",
        "cursor": {
          "ref": "3a360aa8-fdc3-44e8-8360-fb7ebee5fa65",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2c9b67f3-58e9-453e-92d7-967a1bd9bac1"
        },
        "item": {
          "id": "e027b14a-a488-44b2-9359-65ffefe33815",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b205842b-b16f-4286-b4ea-08bcc97c51c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69039f60-cf20-4a62-8961-ec55ea44973d",
        "cursor": {
          "ref": "94f26a21-8102-4b8c-8eab-6abcd0512986",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6011d886-32c3-4da5-a03a-74f66e405355"
        },
        "item": {
          "id": "69039f60-cf20-4a62-8961-ec55ea44973d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c41bacbd-e08d-4162-86fd-3e18ca446cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e060e4-3639-46ac-b57f-c94e45d1cca4",
        "cursor": {
          "ref": "75306e4a-5ce7-4cf1-8699-a8a9104f2163",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "08f10ed7-9cad-430a-985f-8cee63f5cb8c"
        },
        "item": {
          "id": "27e060e4-3639-46ac-b57f-c94e45d1cca4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "480cdc3d-dedb-4bbd-ae5c-208047cba77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b680888-6c72-4637-bba4-68cf4e5fbe12",
        "cursor": {
          "ref": "2e91d1ab-7a97-4cd8-90e5-dd879f9b4b12",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d491445c-e94b-4bde-8e81-ba6d8da3ce29"
        },
        "item": {
          "id": "2b680888-6c72-4637-bba4-68cf4e5fbe12",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7e0a3f95-c9ed-4c51-b994-f0f24bbf9dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee28476-0494-4eab-8ef5-ec4c4c381af2",
        "cursor": {
          "ref": "0a72fdfa-efdd-4901-bf82-de30fce2d4b2",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "578a2399-7f32-4801-b8ca-698f5ca68ab2"
        },
        "item": {
          "id": "0ee28476-0494-4eab-8ef5-ec4c4c381af2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "631ada60-eeea-491a-a648-354d8e146e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f5f960-71ca-4719-8a8c-5e24f30f2439",
        "cursor": {
          "ref": "f86aaec6-88b9-4b20-8dfa-5be099f6467c",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2ab99012-0acc-4891-af93-9609aba1c631"
        },
        "item": {
          "id": "c3f5f960-71ca-4719-8a8c-5e24f30f2439",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8bd225ca-76fa-48fa-af1c-0529c63afac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6545203-3152-433a-9238-7c42fc0e433b",
        "cursor": {
          "ref": "4930e5d8-2db9-4f80-be83-d2354671c930",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "32ca1598-d185-418a-8370-fe1558656b1a"
        },
        "item": {
          "id": "a6545203-3152-433a-9238-7c42fc0e433b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c2b22756-98df-4074-9989-ab8f358d69ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeba0277-939c-4e3b-9bd7-fa8c912cca64",
        "cursor": {
          "ref": "3edb9395-82b1-4936-a127-f07b6bb1e9c8",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "53f01c1d-a32c-4a77-bf2b-3ef291a97e50"
        },
        "item": {
          "id": "aeba0277-939c-4e3b-9bd7-fa8c912cca64",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0317bb61-f636-4a40-a32c-5a6c178a2452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025b96f5-ba30-4ac7-95d6-244c407babe5",
        "cursor": {
          "ref": "34b6a7f5-b2d3-4468-a40a-ea310b430ed0",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1278daa2-fb09-48bf-a26d-4a8a6776004d"
        },
        "item": {
          "id": "025b96f5-ba30-4ac7-95d6-244c407babe5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4c24ce0-e603-4e83-835e-3dad8f39d72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f4ce67-321f-4045-8815-50b36aaaba0b",
        "cursor": {
          "ref": "7e0fa52e-1112-44e5-9805-824dc29711ec",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dbba5cc0-1123-46d1-ad8a-b726c8efb3d1"
        },
        "item": {
          "id": "14f4ce67-321f-4045-8815-50b36aaaba0b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c3bc4914-d3ed-47b2-9270-4af3d6f28265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548df063-d57c-4a5c-ad6f-1c1b863761a0",
        "cursor": {
          "ref": "a28c670f-3de7-4f99-b1ab-8f46717e592a",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "08981755-ecea-45e4-b185-dfff0e91f391"
        },
        "item": {
          "id": "548df063-d57c-4a5c-ad6f-1c1b863761a0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "081959fb-2f5a-4e48-b0dc-1c972c50cd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6215da4-f483-4b91-a5e0-8ad1a7df420b",
        "cursor": {
          "ref": "0f641a00-b1a1-4623-b538-02cc08f8e372",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3e6e653a-9e0d-4b48-8f9c-58a2582f6199"
        },
        "item": {
          "id": "c6215da4-f483-4b91-a5e0-8ad1a7df420b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "80c29f99-b441-4552-bf37-c8c3741d1562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fc3a1a-aedf-40ea-8614-2d2c379da6cc",
        "cursor": {
          "ref": "72a250ce-c149-46c6-8b1f-072682fe1b34",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "384f71a3-c76c-443a-b852-0c4be398ee86"
        },
        "item": {
          "id": "80fc3a1a-aedf-40ea-8614-2d2c379da6cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d56fc857-a9ce-4082-8905-512a270f1ac5",
          "status": "Created",
          "code": 201,
          "responseTime": 6848,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "865c522c-1d55-49d3-96cb-d4f6e59550fc",
        "cursor": {
          "ref": "6a5b4e8e-8c4e-4a14-a907-83bf9ac4e939",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cb2371f0-5282-444b-ba29-f0eaeea2874b"
        },
        "item": {
          "id": "865c522c-1d55-49d3-96cb-d4f6e59550fc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3769380a-c4cb-49f4-8328-bafafac4e516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b66ac3d-db47-4259-9837-374dbbd36a7b",
        "cursor": {
          "ref": "3e849811-e7c1-4c4b-9910-117893a0b162",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "eac0dc34-19ed-4bb3-ac72-bb5980a8eeca"
        },
        "item": {
          "id": "6b66ac3d-db47-4259-9837-374dbbd36a7b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fab8b5d7-3f93-4c3e-9ff7-aa8d453d4693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d35fc8a-5ec6-47e5-bcac-c0f5c96e5230",
        "cursor": {
          "ref": "38644d8e-f1a9-4b4f-9767-0df48487deae",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a8489667-f1c2-4e39-a4e7-9323edd1ec3e"
        },
        "item": {
          "id": "7d35fc8a-5ec6-47e5-bcac-c0f5c96e5230",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ef726695-23c5-4d13-8838-dd6cf7f7b18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5636ccb-c201-4796-98a9-ac9ceb87121e",
        "cursor": {
          "ref": "a0297586-53cf-4760-a87c-2c801827fc38",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0d7a99f4-924e-439e-a591-acf97d7994b9"
        },
        "item": {
          "id": "f5636ccb-c201-4796-98a9-ac9ceb87121e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "50bee348-a3a3-4c18-8d89-4b9ce924d568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754f1c96-b31c-480b-a9d1-4c4ee9e14666",
        "cursor": {
          "ref": "286eb772-9f6f-4467-9c2a-dc12d963aafb",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bbe9003d-36f2-4f03-8e35-e23001cd8472"
        },
        "item": {
          "id": "754f1c96-b31c-480b-a9d1-4c4ee9e14666",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b550711c-a49d-4a70-a014-227c35a7e91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f078d731-72df-465d-91f9-5725c1c69d96",
        "cursor": {
          "ref": "052387ae-b580-4e10-a14d-512ac0191993",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "55cf66d0-7d11-4389-997c-3f163076d1a4"
        },
        "item": {
          "id": "f078d731-72df-465d-91f9-5725c1c69d96",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2b6331c4-448d-453a-9bd8-b45084c7e798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476ffcdd-3559-4002-aa9a-757013b0b684",
        "cursor": {
          "ref": "8c13a243-42f9-4057-93be-59143d5f515f",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "01c4210c-35e7-405e-b370-d905668fcf37"
        },
        "item": {
          "id": "476ffcdd-3559-4002-aa9a-757013b0b684",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3b317e22-95a1-4120-85ff-a35cef9bf336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49cdc21-872d-491b-b4ae-bc8ae4ba8192",
        "cursor": {
          "ref": "a053a98d-5249-415f-93c8-71cc905956f1",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "add2d0f8-69c3-49d2-ac31-eef6f5470a1a"
        },
        "item": {
          "id": "a49cdc21-872d-491b-b4ae-bc8ae4ba8192",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "092355e0-018d-4ace-ba7c-79a56605a2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63554c57-12c1-4211-acdc-c3d827cec7df",
        "cursor": {
          "ref": "18449653-8dd6-4810-8c51-d4bffbd1ef60",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "10873b47-64fb-4338-b27c-6c5229be1715"
        },
        "item": {
          "id": "63554c57-12c1-4211-acdc-c3d827cec7df",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "19512e70-0533-4b74-9042-b67e0091bf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4587c03-dcbe-4caf-b97a-d9cb8517f59e",
        "cursor": {
          "ref": "10093eed-0b6a-44b9-8153-6f2962a2c16d",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "10b23d57-3328-4264-a595-d90ed17f1420"
        },
        "item": {
          "id": "e4587c03-dcbe-4caf-b97a-d9cb8517f59e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "121ef032-5dc0-457e-890f-e0e57ac39bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91c0e13-07a0-47f5-8bec-584e17b1aed4",
        "cursor": {
          "ref": "7d927404-d745-442d-9105-7e769d9b9947",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fc6b7648-370f-427b-82ee-6b1d3f3e7c88"
        },
        "item": {
          "id": "c91c0e13-07a0-47f5-8bec-584e17b1aed4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c55f8e45-3154-454b-b67e-0a46cef62d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7b9962-d7e4-4679-8560-5c87d58f2836",
        "cursor": {
          "ref": "98f2b053-0751-424f-95c6-af17ffb48742",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "98a0e6e9-7e91-4435-84c4-a3b5b0a75ad5"
        },
        "item": {
          "id": "8c7b9962-d7e4-4679-8560-5c87d58f2836",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ba63e606-4156-452c-b2f4-19ed20e58d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555636c0-7327-4a08-8229-04494d9f9d65",
        "cursor": {
          "ref": "38baf4d2-a401-4ef8-af28-3cb43eae1fa3",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e62fac5d-7fb7-4d78-9eaf-57dc5a776199"
        },
        "item": {
          "id": "555636c0-7327-4a08-8229-04494d9f9d65",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3eb1a9f2-28fe-4c1e-9bb9-73eff3ffeb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101e528b-23ef-424b-8107-67f715fb4e3b",
        "cursor": {
          "ref": "46f534f3-27b2-416b-aff4-3b9ca10dbb97",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9f997fcc-9052-4acb-b63c-b008d05cb211"
        },
        "item": {
          "id": "101e528b-23ef-424b-8107-67f715fb4e3b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b3ce125b-cbbf-4273-978c-a5020bc88c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21829ab-3815-485a-9d03-afe5e5c499d3",
        "cursor": {
          "ref": "6456a48b-c0ae-4e89-ac1a-f77292067808",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "15fc2fe5-38be-45e6-a7ee-2cfb9a445178"
        },
        "item": {
          "id": "a21829ab-3815-485a-9d03-afe5e5c499d3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f2f44e65-a2ec-49fe-beaa-5939187b4b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe759d5-7576-4f64-8070-6495a82b91d7",
        "cursor": {
          "ref": "8d91ddef-db46-4da5-bfde-0ba662451d56",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e88c09ff-d416-41c7-bde6-f3e5c578f17c"
        },
        "item": {
          "id": "afe759d5-7576-4f64-8070-6495a82b91d7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "671ca9b8-7688-456d-a04d-466008f19b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e8268a-1454-42bd-a061-b51bb996bb3c",
        "cursor": {
          "ref": "40338f17-24ad-44b7-be0a-b7ace952a984",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e2f10691-07aa-49a3-81d4-944c2c932420"
        },
        "item": {
          "id": "d4e8268a-1454-42bd-a061-b51bb996bb3c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7a0232f5-66fa-41f7-8c0d-fb66173f36ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e684cc82-ca9a-49d4-bc9c-0e915c2a3b7c",
        "cursor": {
          "ref": "3c7163fb-f71a-4071-8dd3-8b58fc30a2eb",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "22bbde55-abf7-424d-a4c8-0444a389db4e"
        },
        "item": {
          "id": "e684cc82-ca9a-49d4-bc9c-0e915c2a3b7c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8707cb2a-9222-43cd-8690-3b5fba7ed6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185b7ce1-3f15-48d2-8ff6-00034ff9ae16",
        "cursor": {
          "ref": "0d1bef54-b6fb-4522-8567-909cae9c65e6",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e30c16d7-3361-4dfb-ad39-6f68051aef8e"
        },
        "item": {
          "id": "185b7ce1-3f15-48d2-8ff6-00034ff9ae16",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f8cebccf-5f35-461d-936f-1cb8be3b4d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1785d43b-6372-405a-9b2c-6114eae1a94c",
        "cursor": {
          "ref": "4a2bbb9b-46cd-4384-8bab-7f06b69cca8f",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a73598f3-2481-42d1-82f8-22cb3bdc9d71"
        },
        "item": {
          "id": "1785d43b-6372-405a-9b2c-6114eae1a94c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cf0cf60c-fc45-4084-a06c-f99d8d05a002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3820f8-93eb-4c13-8b8a-d8995e1f271c",
        "cursor": {
          "ref": "0ea950d6-e2e3-445b-8bf5-a313685074e6",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ae2da5ab-7b3c-4bd4-b499-7f4617225e4e"
        },
        "item": {
          "id": "bd3820f8-93eb-4c13-8b8a-d8995e1f271c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "25f771b2-0e93-4657-8d26-a5e1ebe7b982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5ac336-4adc-4e1b-802c-051ec25bf35e",
        "cursor": {
          "ref": "b9c07a2e-1718-4cb4-a513-436b634c12b2",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f0df10cd-cb72-43c5-86c3-dec2fd1c9869"
        },
        "item": {
          "id": "2f5ac336-4adc-4e1b-802c-051ec25bf35e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "87c154a8-ea98-41c8-9a9c-7f1bf571152d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59725f7-5697-4294-96d5-2da99aabc83d",
        "cursor": {
          "ref": "df38c5e9-8e02-450b-b9a2-d89d3844c898",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d63bb49d-d4a5-431d-be78-5616871f3129"
        },
        "item": {
          "id": "c59725f7-5697-4294-96d5-2da99aabc83d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a212e0b6-aa42-4321-96fa-2ac415ef512c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd35e60b-cd97-4884-a867-456a8caee7be",
        "cursor": {
          "ref": "0e606a34-925d-4dcb-aef4-c082bcd5700f",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8a631347-b257-4cba-aa86-7de21133de59"
        },
        "item": {
          "id": "bd35e60b-cd97-4884-a867-456a8caee7be",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bfbd55b9-5771-4e71-af50-45e50d523e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c84080-5b5e-4013-9a67-0bd2daba4c17",
        "cursor": {
          "ref": "4d72c021-c319-4877-a978-3900c4083cdf",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1c1038c7-1cf6-40b4-814a-b3a8fe5e60f9"
        },
        "item": {
          "id": "f6c84080-5b5e-4013-9a67-0bd2daba4c17",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "23cc6ce9-55ed-4a4f-a436-41b0f2e89b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e021595-96a8-469f-bc11-fd94a766dde0",
        "cursor": {
          "ref": "43595253-b7a8-4d73-a6da-e7ec3cbcca7d",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dae04f80-6d34-4f6f-ac11-6113d48f7c56"
        },
        "item": {
          "id": "6e021595-96a8-469f-bc11-fd94a766dde0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e83add3b-04af-4cd4-ab21-b9e17d7c1c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b2171a-39da-48e4-b3dc-b57e458d5b06",
        "cursor": {
          "ref": "43a35770-885a-4649-af79-41fee29bffed",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8fd82a96-ccbb-4615-9ce0-eb8ef7b4c16f"
        },
        "item": {
          "id": "12b2171a-39da-48e4-b3dc-b57e458d5b06",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b05628f8-2940-427e-9cdc-4bc00ea0d438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a98351-9b8a-4bc8-90b9-cb4dbaaa90ca",
        "cursor": {
          "ref": "70cb2401-3fee-4ad0-acea-7402a613be45",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5e1307e2-d05e-417c-a20b-c80ca461ab38"
        },
        "item": {
          "id": "66a98351-9b8a-4bc8-90b9-cb4dbaaa90ca",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "961b100e-e7f4-4f90-ac84-599cdfe2388a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49174f1-1cad-46ce-87a3-d8ff09e85b74",
        "cursor": {
          "ref": "47fa88ae-6ada-4f51-aacc-46256d979cd4",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b2436fcd-8ce8-48ab-89af-b7ed3e575193"
        },
        "item": {
          "id": "a49174f1-1cad-46ce-87a3-d8ff09e85b74",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "22e80a21-a020-4c52-ad0d-dd1501b29477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61925203-ef14-4512-be6a-f215be756b51",
        "cursor": {
          "ref": "449009b3-d58d-42a3-8569-2bc8aa6a626e",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "16067f31-97e9-4576-a8a0-08fa5601c914"
        },
        "item": {
          "id": "61925203-ef14-4512-be6a-f215be756b51",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b2135990-1a57-442c-82e0-57cbdcd26c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cca6db-bf4f-4478-81bf-ac717b497bef",
        "cursor": {
          "ref": "28800005-0bcf-4049-9cee-df2cf34ff240",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "62e5c876-bb42-4fe0-b99b-366e8fc39702"
        },
        "item": {
          "id": "82cca6db-bf4f-4478-81bf-ac717b497bef",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "af459aef-299d-497e-b23c-46b79b98ab89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "ca387824-aa30-4b99-9e2e-32aa5087d75f",
        "cursor": {
          "ref": "0b981f96-9bbd-49b8-931c-6153a4049a72",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4f1895d5-add3-41cd-8692-a6a69dc74c3d"
        },
        "item": {
          "id": "ca387824-aa30-4b99-9e2e-32aa5087d75f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3dff9338-1622-4958-abf9-c7918c77ae02",
          "status": "Created",
          "code": 201,
          "responseTime": 2199,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0ca523-b0f9-44f5-bfa6-8836acbc3b42",
        "cursor": {
          "ref": "7f15de7c-d1d0-4c9e-ac48-82af4c5e3200",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2d273cfc-34a1-42d6-a618-67da656cef96"
        },
        "item": {
          "id": "cb0ca523-b0f9-44f5-bfa6-8836acbc3b42",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4df73060-c4e2-426c-ab63-5c26cee8e0df",
          "status": "Created",
          "code": 201,
          "responseTime": 2546,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be6e693-a6e4-4813-bb2b-9cab9e91a93f",
        "cursor": {
          "ref": "793c5f4f-62b6-45c2-a471-3498de02c952",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c006c476-0bab-4c60-88d7-e46c5873ff90"
        },
        "item": {
          "id": "3be6e693-a6e4-4813-bb2b-9cab9e91a93f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "371496aa-7029-4a31-b2d2-72bc47d330d5",
          "status": "Created",
          "code": 201,
          "responseTime": 2561,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2156c23f-ca0f-4efd-8035-e9a3d476ccf0",
        "cursor": {
          "ref": "ca9c4488-6442-4131-9689-d68fda60eb28",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "58bde3e3-97eb-449c-a77c-1a16ace438a5"
        },
        "item": {
          "id": "2156c23f-ca0f-4efd-8035-e9a3d476ccf0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a90de1d-7b43-45ac-a092-0f58bae37e10",
          "status": "Created",
          "code": 201,
          "responseTime": 2406,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45b7176-5468-4996-b872-7c5a1683e1ac",
        "cursor": {
          "ref": "a7581e52-4691-468f-bc67-603901d6fb65",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "754841ce-f68f-49e4-8df1-a1814aff30c3"
        },
        "item": {
          "id": "e45b7176-5468-4996-b872-7c5a1683e1ac",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5f29ce82-0927-403e-b347-fb073900e9c4",
          "status": "Created",
          "code": 201,
          "responseTime": 2524,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-08T12:47:53Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-08T12:47:53Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "3aebe10b-045d-4b77-b0af-1fa8cec8a40b",
        "cursor": {
          "ref": "1e3589db-6932-4ec3-9d0d-f54c6e5e25dc",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d7b51d55-9437-4808-a67a-e7b5d88d0476"
        },
        "item": {
          "id": "3aebe10b-045d-4b77-b0af-1fa8cec8a40b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3f211340-5757-44d7-a9c0-e84bd3399d17",
          "status": "Created",
          "code": 201,
          "responseTime": 2687,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6babceb5-b5ff-4030-8b15-e32417cf9397",
        "cursor": {
          "ref": "78f82315-47a9-47e5-9f02-1902f1a840a8",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cff11c95-1de6-448c-8526-23b4abb17443"
        },
        "item": {
          "id": "6babceb5-b5ff-4030-8b15-e32417cf9397",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d13c0c16-0533-46a4-b416-a76d68967867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387baf18-c819-4884-8ba1-f2eee5a9866a",
        "cursor": {
          "ref": "9edca03b-a7b1-4a5f-9abb-2842e694c54f",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4cd9fbb3-0a8a-4134-9221-b46583f2c2bd"
        },
        "item": {
          "id": "387baf18-c819-4884-8ba1-f2eee5a9866a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4fa52db3-6996-4e1b-97b5-9ee10f74c5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390072ac-2bd1-4532-aad4-b9f03e42c0db",
        "cursor": {
          "ref": "dadb55e8-ed4b-4a1d-94ae-22b83d09a777",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "55024010-8044-4e83-9bcd-074c43f30ba7"
        },
        "item": {
          "id": "390072ac-2bd1-4532-aad4-b9f03e42c0db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "03c949c7-1ece-4695-835c-d2fada033ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47685b2-11b1-4807-92fe-939820ac4b6e",
        "cursor": {
          "ref": "14f32155-2c83-432c-8912-83ba7cda3de6",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "239b876b-9676-4dd7-a316-0c7abe2efb7d"
        },
        "item": {
          "id": "c47685b2-11b1-4807-92fe-939820ac4b6e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "780ecbf8-4657-4023-a27e-25e083391d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5d3c03-5111-4c4f-89d4-fafc40348b04",
        "cursor": {
          "ref": "8ac73dd1-3aaf-4786-b608-2cf64140156c",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "69d9ddf8-7350-44ff-a8c5-7c3e7ab1ad85"
        },
        "item": {
          "id": "1c5d3c03-5111-4c4f-89d4-fafc40348b04",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "155de6d6-f8ef-4702-976c-2f73c98c5965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ed70d4-9c07-4395-9bbc-aca09bb94361",
        "cursor": {
          "ref": "1fdd191d-5a0b-49bd-9324-10aac4ff4e15",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0fecf22f-98a1-4969-b681-1bb123569dfd"
        },
        "item": {
          "id": "64ed70d4-9c07-4395-9bbc-aca09bb94361",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7f136d68-c229-47dd-8588-9c20bb886f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8c965f-8c70-4aec-b0df-056da8794c30",
        "cursor": {
          "ref": "91859c8d-ee84-499b-9501-2596400701e3",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "79c3ddad-f4dc-4fed-adb3-6e09544d47de"
        },
        "item": {
          "id": "4f8c965f-8c70-4aec-b0df-056da8794c30",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "03281642-48c3-4138-9bad-409dc0b0e4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abd425b-3043-4164-9dfb-10657da48b02",
        "cursor": {
          "ref": "4795682a-5e29-4f24-ad27-3333bb89f2ae",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ed33f159-1ba3-47f1-9680-da1e1f84ba26"
        },
        "item": {
          "id": "4abd425b-3043-4164-9dfb-10657da48b02",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e7cc849d-6d18-4a73-8214-10585e3f2fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dada2e3-c92e-4107-b472-38a975f7fbc8",
        "cursor": {
          "ref": "f77fb50d-53cb-4de1-88fb-c414a881ac0f",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6ef06622-964d-4422-a64c-e10b2e37a0e4"
        },
        "item": {
          "id": "0dada2e3-c92e-4107-b472-38a975f7fbc8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f107b78a-6086-4487-9b9f-5899bc32161a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afa191c-fbbb-4366-b841-693c1e598ac0",
        "cursor": {
          "ref": "30cc8def-2424-4013-8a76-d76af0b04467",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0137bfa6-f6e7-4ec2-a280-40aa2ff716cc"
        },
        "item": {
          "id": "9afa191c-fbbb-4366-b841-693c1e598ac0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8c75e12e-e85d-4802-8d09-9e3c9ea2c150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fab31e-4728-4275-b13f-c6033fc43b32",
        "cursor": {
          "ref": "d575b409-992b-4c67-9062-539ead32a49c",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "06d53b74-7cb9-4e72-b39e-73f4df6dda27"
        },
        "item": {
          "id": "66fab31e-4728-4275-b13f-c6033fc43b32",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ebe8217d-432f-4151-b162-607095fe706a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8ea8b0-5c2d-4dde-919d-71e9796cbc1c",
        "cursor": {
          "ref": "daf457c2-4008-48b4-9e70-289f0d27411d",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6e18b5bf-283e-42ae-bc60-1d15cea9f3da"
        },
        "item": {
          "id": "9d8ea8b0-5c2d-4dde-919d-71e9796cbc1c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "38cd84f3-bac9-481b-90fb-b55938d72113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d15f3e-5b37-4ea1-b9a9-4f1e0d629774",
        "cursor": {
          "ref": "a24e2aa0-c5c5-4502-9e20-646b8cea6daf",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "49a7f390-e9a3-4196-a513-2919ccbea5f2"
        },
        "item": {
          "id": "22d15f3e-5b37-4ea1-b9a9-4f1e0d629774",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "867b3357-034f-4302-8f02-c051479cdf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e10c965-bff9-4d8b-9d31-4256ec6e17ed",
        "cursor": {
          "ref": "8ff0cbcd-79b0-419e-9a20-e70df9c4a1b0",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0f6fd077-95ca-4c1c-9a25-271a63446893"
        },
        "item": {
          "id": "7e10c965-bff9-4d8b-9d31-4256ec6e17ed",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7eddb7b5-ed68-4067-a4fe-ea3afb6225bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cdc9ec-ab63-4186-8aa3-865e0d3ef1d4",
        "cursor": {
          "ref": "0d846531-186f-4fb2-82a2-734acdf58382",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0e487e02-890d-4e48-9a36-3a6b2d8446c3"
        },
        "item": {
          "id": "11cdc9ec-ab63-4186-8aa3-865e0d3ef1d4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "47f86434-a787-4eab-bbd7-b8f3603c2f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158a8dd6-5d1f-4149-a411-7e0421605b9d",
        "cursor": {
          "ref": "2bda8774-f08d-444e-866f-1e2fe768e585",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a32a0ef7-0906-4644-8486-f90529859757"
        },
        "item": {
          "id": "158a8dd6-5d1f-4149-a411-7e0421605b9d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6af694d6-a692-4f3f-8746-8bb86e2322b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac420209-ec29-4b9a-8510-911510120133",
        "cursor": {
          "ref": "0b937937-ea1d-478f-b422-b975c3f5c1db",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "84214912-4c44-40e9-99b5-d2e234b5467f"
        },
        "item": {
          "id": "ac420209-ec29-4b9a-8510-911510120133",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2b874b1e-e464-48d8-8168-952a76be15c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2682fb1c-43cb-4634-918a-206d151603e2",
        "cursor": {
          "ref": "3cdfc09d-5ef8-48c9-8b71-1cf7596aec3f",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1218e63c-5c13-4c1a-8a1f-9c4477c95af7"
        },
        "item": {
          "id": "2682fb1c-43cb-4634-918a-206d151603e2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bb9fcf17-3f7c-48be-a24f-af8c0b5bdfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8709eff0-740f-4d81-8b96-74cc3f9d0317",
        "cursor": {
          "ref": "54d022e3-b52e-4d5a-be19-7a6a5f60decf",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4f4a63a5-4dae-4118-a0f8-f7dc425df1eb"
        },
        "item": {
          "id": "8709eff0-740f-4d81-8b96-74cc3f9d0317",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d4f636dc-865a-4494-b6e9-24f5a90d66ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9dc9a3-3e15-48ad-9fb4-1f4a34bd771d",
        "cursor": {
          "ref": "fa0f4cb2-757c-4fb6-a8bd-736df58a102a",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8056ca20-b10f-43e5-817c-0f4e2d9ae51a"
        },
        "item": {
          "id": "6d9dc9a3-3e15-48ad-9fb4-1f4a34bd771d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a6f213d9-e439-437a-a132-54be44c63140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0397d966-eff8-4413-a54a-5e4aa6a0a766",
        "cursor": {
          "ref": "96c0c7aa-dac4-47fe-83d7-07e59a74ae7a",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a6a9caee-c1a5-4471-b757-5c0fbef0c883"
        },
        "item": {
          "id": "0397d966-eff8-4413-a54a-5e4aa6a0a766",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b246cb36-f8b9-43c3-9bb0-42debe5c8791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f84ab3-65e0-4ae2-b040-3668b7e03850",
        "cursor": {
          "ref": "031e5816-d66a-49bd-8811-ad003373a079",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "29f7d2c6-4877-474c-bca0-902a9264c562"
        },
        "item": {
          "id": "b0f84ab3-65e0-4ae2-b040-3668b7e03850",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "174a688e-5869-485b-a1a6-6d6bca5ba6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552ac5e1-5445-4b43-85b4-85650e4b0294",
        "cursor": {
          "ref": "4a7b539b-7a90-4a1d-aefd-5d687ec38c50",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "53647dd1-0ed2-443d-8db5-cb68089256f8"
        },
        "item": {
          "id": "552ac5e1-5445-4b43-85b4-85650e4b0294",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "727b7ccc-220f-4f2d-9c07-942c681c64d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d2edd1-28fc-43c1-b386-924c26caef2a",
        "cursor": {
          "ref": "da86827d-73ec-4c12-9ed6-6e030fb3eaba",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "610d9a60-c5f2-411d-a07c-6fb6346d2faa"
        },
        "item": {
          "id": "e9d2edd1-28fc-43c1-b386-924c26caef2a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "13a54899-cbac-45ae-991f-ba487207e23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2f4865-ea1e-4d99-95de-bf91d5dac2f0",
        "cursor": {
          "ref": "6b864f19-db32-40f1-82bb-9a8905b8f141",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "98afe916-b3ed-4003-b179-c15227ab2b90"
        },
        "item": {
          "id": "6d2f4865-ea1e-4d99-95de-bf91d5dac2f0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5fd680d4-090b-4acf-b1b6-bc5edde3f99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521ff257-f1e4-4709-ba37-90f5666190e5",
        "cursor": {
          "ref": "fd42b9aa-9ab6-478c-8cb8-862f2354a069",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3b2033b3-7ecc-4308-bbc8-8712788e99d9"
        },
        "item": {
          "id": "521ff257-f1e4-4709-ba37-90f5666190e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c4128a80-678a-4425-94b1-c2d90914fa2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d16d3eb-3523-4461-9089-9091aba0efc4",
        "cursor": {
          "ref": "e0cd842a-fa3e-4d58-b62b-9f27283b248b",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "86043445-0b3b-4fc4-bcdd-67c00ac9f1aa"
        },
        "item": {
          "id": "0d16d3eb-3523-4461-9089-9091aba0efc4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "273066df-3c82-4b47-a5d3-e9a4a09d8262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2948862f-afec-44bd-85e3-1ee64eaa5aab",
        "cursor": {
          "ref": "248c14c0-4bea-40cd-bdd4-6e2ec97077a0",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "95ec1f0e-6e25-4ae6-bdce-622e2f8c86d6"
        },
        "item": {
          "id": "2948862f-afec-44bd-85e3-1ee64eaa5aab",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a366d1c-c5dc-462b-9b46-37764b7275af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e3278a-97f9-41e6-8c5a-4d5f2818505a",
        "cursor": {
          "ref": "79147894-72cb-4be3-8480-74adacc59d7b",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d6590a24-b84f-443c-b109-239d83040628"
        },
        "item": {
          "id": "a1e3278a-97f9-41e6-8c5a-4d5f2818505a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6683ebd3-87ec-4658-b5d5-c8169a35c586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b50a61-1d79-400d-b998-0563a478b845",
        "cursor": {
          "ref": "3854478e-1892-4ffe-bf11-1098e5d1ec94",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e078ac36-75a7-4679-acdd-28abcd308bd7"
        },
        "item": {
          "id": "05b50a61-1d79-400d-b998-0563a478b845",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2d60e7ae-1bd6-4665-8b2d-db72792cf94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d48f993-976f-4009-8279-9343720d53fb",
        "cursor": {
          "ref": "a59efc70-09ef-48b7-bb24-f26daa4aa8c8",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "679e23db-a074-42d4-81b2-28c0e645e1a7"
        },
        "item": {
          "id": "7d48f993-976f-4009-8279-9343720d53fb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fb923100-2248-4e91-905b-983e54d0f8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380bcb7b-5f90-4c89-92b6-51f71b137c8e",
        "cursor": {
          "ref": "4f62137b-1a4c-47ad-a02a-75e08bd2ad3f",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e4615bc4-4293-4b55-b41d-7b9c0cb34f3b"
        },
        "item": {
          "id": "380bcb7b-5f90-4c89-92b6-51f71b137c8e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "47762f26-7a61-48af-9df1-b66703f71457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385704f4-87c4-4cf2-9381-bc42da9b6655",
        "cursor": {
          "ref": "f13ff997-df6b-4140-83cf-e6d81532f18d",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d300f50e-145c-47f8-bee7-508cd67e818c"
        },
        "item": {
          "id": "385704f4-87c4-4cf2-9381-bc42da9b6655",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "83a8d04f-e669-4764-9d8c-af462c41273f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9e46502e-80a0-4853-a6dc-9208bb23a3a4",
        "cursor": {
          "ref": "d0edaf4d-8c58-4c7f-91ba-0192c1126873",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3cdec054-62e3-4d63-abec-3aa3a7662b35"
        },
        "item": {
          "id": "9e46502e-80a0-4853-a6dc-9208bb23a3a4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "56f36f28-5194-4467-a0bf-74ff053365b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52064f7-5231-4ef7-9551-fca1764b3359",
        "cursor": {
          "ref": "a358c382-4282-4ef4-a6f4-e61b4d0e62d1",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9f17b322-ad1f-43e1-b381-ffb8773ac7f1"
        },
        "item": {
          "id": "f52064f7-5231-4ef7-9551-fca1764b3359",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d69df3ac-7f85-4eb5-a4d5-4b05785805c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f258a882-02e7-47dd-a803-4049d16e9647",
        "cursor": {
          "ref": "0b26559c-4e0e-4180-b5b7-837bfd38958b",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c74313da-365f-4ed6-974c-15bcf715764e"
        },
        "item": {
          "id": "f258a882-02e7-47dd-a803-4049d16e9647",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f7afb95d-e76d-4337-958e-d2f309e702c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f4d2b9-29c6-4ffc-9cfc-0fd4d499655a",
        "cursor": {
          "ref": "c47e1d4b-384f-45b5-8645-fa0dcec5c425",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6b92a978-e2a9-4fe9-99dd-94f72b1d5b50"
        },
        "item": {
          "id": "29f4d2b9-29c6-4ffc-9cfc-0fd4d499655a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "89bd2180-c58d-49be-8f12-562814df3ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c583e96d-1970-4083-afad-5e4bbfaf9ee7",
        "cursor": {
          "ref": "dc126180-88e0-4fb8-8c96-e49711f82474",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f407a4e0-e194-4a43-b75e-457efd5fec79"
        },
        "item": {
          "id": "c583e96d-1970-4083-afad-5e4bbfaf9ee7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "153eace1-6cd2-403f-bfe7-29cf2d3c625d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4934ad-7a62-44cf-a292-380311e41cd6",
        "cursor": {
          "ref": "5e3698bf-63ae-4977-9809-d466464d717d",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a14f993b-6d67-4bc5-93ce-3c9cd10f2283"
        },
        "item": {
          "id": "cb4934ad-7a62-44cf-a292-380311e41cd6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c33730d9-9578-4057-8b66-980995570de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac50c09b-7434-42d1-ba8d-574be688122d",
        "cursor": {
          "ref": "8b031db8-1568-46b8-bd95-02c78defe63f",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "83890e99-b8bd-4a53-830d-23ee6a799e82"
        },
        "item": {
          "id": "ac50c09b-7434-42d1-ba8d-574be688122d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0dd4197a-c008-4545-a05b-f1841dd342c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2421de3d-6f1a-4340-a591-599c9dca2f42",
        "cursor": {
          "ref": "ed6ac486-aa51-4ae1-9db9-ecd89ac1c482",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d1929956-c83a-4718-9c18-0888943de379"
        },
        "item": {
          "id": "2421de3d-6f1a-4340-a591-599c9dca2f42",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b67fd79e-5ca3-4294-b92e-584c47971b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d949bfea-69df-48ed-8773-d36bca4661fa",
        "cursor": {
          "ref": "50c1c21e-289e-43ac-8858-029ef4015bcf",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "971bf00a-9ff0-4d99-b120-693d749169ae"
        },
        "item": {
          "id": "d949bfea-69df-48ed-8773-d36bca4661fa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2cf03c67-dc09-460f-8d67-cd31a9a7829f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263cc968-2e8c-43ec-bacc-a87a238d6575",
        "cursor": {
          "ref": "781127da-d072-43e0-aafd-1531b6950253",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b831f705-c9da-49ae-93c7-34e4274623ae"
        },
        "item": {
          "id": "263cc968-2e8c-43ec-bacc-a87a238d6575",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7c4ea034-bd10-4ca5-98ba-17b4487ac021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900d563b-aeb7-44fb-90fc-b057cce9bfd1",
        "cursor": {
          "ref": "235f8d1a-bf91-4a4d-9cf6-66174c43e7c7",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "005977c1-4267-4640-8672-e89067b73231"
        },
        "item": {
          "id": "900d563b-aeb7-44fb-90fc-b057cce9bfd1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8e4e124d-64a9-413d-a9a7-7ecc6612fff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac459f6a-a918-4397-90f3-247cc061e654",
        "cursor": {
          "ref": "4cbe9d56-4f8f-4a93-85f1-a2bf343e20f2",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ed211a1f-5686-4769-a601-b5bec8cc6bd8"
        },
        "item": {
          "id": "ac459f6a-a918-4397-90f3-247cc061e654",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eeecced4-4ebf-4eaf-87f2-1ec85054300a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347dde6b-2bfa-423d-9149-5ddb6398d865",
        "cursor": {
          "ref": "dcb81f7f-6af3-470f-8afd-dad871babe3a",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "055f877e-77c8-4b1c-8a09-2ef369652516"
        },
        "item": {
          "id": "347dde6b-2bfa-423d-9149-5ddb6398d865",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "64b06390-83dc-48d1-9a01-54437a1d66bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a0d5a4-fab5-41e4-a83e-762713562391",
        "cursor": {
          "ref": "75e28634-fd36-4520-84c6-22879ba7697d",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "21334686-5df6-4c99-93a0-43f806b9b4cb"
        },
        "item": {
          "id": "d3a0d5a4-fab5-41e4-a83e-762713562391",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3ad5bf36-95ba-401b-8c10-c760b7260a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57adf15a-0e84-4ea2-9e53-348dd23e285e",
        "cursor": {
          "ref": "6d79cc3b-1fe7-4633-a9fc-977795d66813",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1fa1957e-d030-4592-8b4b-a271db573257"
        },
        "item": {
          "id": "57adf15a-0e84-4ea2-9e53-348dd23e285e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "28008727-92e8-4ef9-9f75-863d71f94dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59affc0e-76cd-4004-b9a4-4c0c7b2bb0ed",
        "cursor": {
          "ref": "64bf420d-cf3b-4f3c-b80d-ae1b57a80ab6",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "931d1eea-db77-4687-ae6c-5d520678d89a"
        },
        "item": {
          "id": "59affc0e-76cd-4004-b9a4-4c0c7b2bb0ed",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "eeee1488-27e1-4966-ae27-01aeaec1e230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a5aed6-4a53-471b-8e3b-65327abc79db",
        "cursor": {
          "ref": "b831b926-ad34-45e1-89e1-efa026ecd53c",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "74f0fd44-0e65-4367-84da-b924ac896490"
        },
        "item": {
          "id": "44a5aed6-4a53-471b-8e3b-65327abc79db",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ea83e821-1e05-4a20-a872-4481f7630dd1",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "d9fe04c2-011d-4ab0-958d-e4096bb6ba30",
        "cursor": {
          "ref": "bc88e3da-61fd-46f9-aed0-9920c5fc0bd3",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "365354bc-2527-4ff9-8939-72521fbbd05d"
        },
        "item": {
          "id": "d9fe04c2-011d-4ab0-958d-e4096bb6ba30",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "19e098f0-92e9-4dd6-a9f9-d89caca2c275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a741d5-7cc3-4347-9178-a4d5c702b7d6",
        "cursor": {
          "ref": "b8af7aa7-ea6d-4e03-8c21-e5cf3650e63d",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5f3f6071-9f86-4dff-b29f-6ab4c5651cca"
        },
        "item": {
          "id": "00a741d5-7cc3-4347-9178-a4d5c702b7d6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cc5883da-a237-4706-9c1c-e238c08cc052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99201c1-b473-434f-afe1-e2300acde5f9",
        "cursor": {
          "ref": "65bfd755-c948-481d-bad2-5b7881a5a723",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "df93643f-fdc7-4ad5-a33c-57f7f5592733"
        },
        "item": {
          "id": "b99201c1-b473-434f-afe1-e2300acde5f9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ece04a17-3e7e-41d8-9c03-d01f07007415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6ff39f-4049-49c6-ad29-d96bb58df32b",
        "cursor": {
          "ref": "6dec5578-a159-4bfd-8d65-b65321da7f0f",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e866444c-6b4d-4636-9adb-9a862b7305db"
        },
        "item": {
          "id": "ad6ff39f-4049-49c6-ad29-d96bb58df32b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f2dcbe91-aebe-4d00-a842-657682ae5ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad97123-333a-410f-aae6-91c6af879473",
        "cursor": {
          "ref": "b2fa3b3f-5580-4ca7-868f-2260f8e7adc6",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9cd3d408-1015-4283-be4c-21e766c074d1"
        },
        "item": {
          "id": "bad97123-333a-410f-aae6-91c6af879473",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a2017c59-6674-45d9-a05b-d7c5a347da73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0e8b8f-697d-462a-9247-e5119835a771",
        "cursor": {
          "ref": "0ec30ece-5ed0-4071-a92d-1d659b854b41",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "689f8a79-850b-43d9-a803-59a04cbb6d75"
        },
        "item": {
          "id": "da0e8b8f-697d-462a-9247-e5119835a771",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "04d3cdf9-fdb0-4833-b390-cc6167992cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f347acf5-615a-47c4-8da4-44075e0fe44c",
        "cursor": {
          "ref": "961b436c-f465-4c6f-8f80-39aa16207353",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9dc154cf-6b70-4d36-a16d-773a084c9ec3"
        },
        "item": {
          "id": "f347acf5-615a-47c4-8da4-44075e0fe44c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8488c527-02ad-4853-804d-720f950343be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0493df-f493-4298-86ef-4a0ddf49d9c0",
        "cursor": {
          "ref": "96097f78-9d20-4a28-b926-09a3960beef0",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "41357b5b-2244-488c-a0a2-cc4d0000a6b1"
        },
        "item": {
          "id": "5d0493df-f493-4298-86ef-4a0ddf49d9c0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d8603105-7766-49ef-9f77-8d190b3f53aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f808330b-a623-4e4f-a0dd-efd7e5c7f551",
        "cursor": {
          "ref": "700713a6-f087-4d3a-a746-20668bac612c",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b5f07606-d59e-44b2-a974-5b752a048336"
        },
        "item": {
          "id": "f808330b-a623-4e4f-a0dd-efd7e5c7f551",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "15f0ae23-9f25-45be-bc0f-0fcf4d807afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0760d0ea-309d-4455-96a7-621cd1d8e183",
        "cursor": {
          "ref": "e2b403da-94d6-4c0e-b800-c5fa0bc693bd",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2e3144f6-43da-4f41-add0-2b87564deed5"
        },
        "item": {
          "id": "0760d0ea-309d-4455-96a7-621cd1d8e183",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8dd492b1-0caf-4219-a6d0-ece49a6662e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440c217c-9a8e-455c-9fbc-b1dc920a02ca",
        "cursor": {
          "ref": "f5374a07-6bcd-4050-a65b-66e5c3061b3e",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0a6dc3f1-3091-40c8-a7f3-8d8dfab0b03c"
        },
        "item": {
          "id": "440c217c-9a8e-455c-9fbc-b1dc920a02ca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1329c9e2-1ff1-43a1-8048-7cc767a4d944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ad714e-5840-49a1-b0a1-91c9af11ac0c",
        "cursor": {
          "ref": "b6f9b2fa-577b-4fa0-8ebb-acbf177674c2",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "48a0e3cf-d91d-4c27-965b-434790f5f60d"
        },
        "item": {
          "id": "a1ad714e-5840-49a1-b0a1-91c9af11ac0c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "283c7155-c32e-4dc2-bc9d-b16abe325e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75f148c-9516-4631-aaed-c39b279845f5",
        "cursor": {
          "ref": "e6b4c7ea-7d51-4fdc-9faf-82482380c509",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ab2df9ec-e69f-482b-8ade-b9caaf5dd07e"
        },
        "item": {
          "id": "f75f148c-9516-4631-aaed-c39b279845f5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dee3b2c5-2560-4a4e-b425-0d2b4e067a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0697f1f1-6a53-4127-8f70-6f32bc02e570",
        "cursor": {
          "ref": "4e857669-f60e-49a3-8eab-b355ead99b8d",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d8832bc8-6175-46b7-92cf-7d8aae4be089"
        },
        "item": {
          "id": "0697f1f1-6a53-4127-8f70-6f32bc02e570",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bf4e07e3-e647-405d-89fa-926fa56f70e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2eb818-78c2-4d28-a099-3a94034bd44d",
        "cursor": {
          "ref": "efcc84ac-2494-4c00-84de-bb6106dee2f3",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ffb6e21b-0154-4fbc-b507-d3d6929163f8"
        },
        "item": {
          "id": "9a2eb818-78c2-4d28-a099-3a94034bd44d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ca6da0e2-8025-4cb5-a715-2be522b03b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d1ee29-c938-4b81-8df8-ea26465ec924",
        "cursor": {
          "ref": "e61440b6-ab8c-49b0-99b0-45eb15bbee37",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fd65a736-4736-4cbb-9808-e09b8428e83e"
        },
        "item": {
          "id": "37d1ee29-c938-4b81-8df8-ea26465ec924",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cb6c7921-8207-4215-9a98-4a8e73066933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a36ad3-d236-4366-8d70-def29419a946",
        "cursor": {
          "ref": "dbae4b92-acd0-4a6b-a911-eb49d3dceab4",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "230dda3a-bd8c-4c18-809d-e8d808e54b0d"
        },
        "item": {
          "id": "74a36ad3-d236-4366-8d70-def29419a946",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9bdd170a-9dd3-4a13-adb9-aafdb8ec37e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90554ced-a87e-4834-9b0c-aff22afea5f8",
        "cursor": {
          "ref": "f739526d-5830-41ee-b0ba-81861cc609c0",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b29b019e-5449-414f-a429-4da16d470b95"
        },
        "item": {
          "id": "90554ced-a87e-4834-9b0c-aff22afea5f8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7227ce52-0c0f-45be-a6b0-6513444543df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7a405c-89d1-488a-9efd-604919ed3352",
        "cursor": {
          "ref": "0641b807-93c2-4c8e-9fc1-0e74d2303282",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "05902c91-020f-4a6b-ade4-02292978fdc1"
        },
        "item": {
          "id": "be7a405c-89d1-488a-9efd-604919ed3352",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7d220f13-0119-4686-bf29-b215f0e530c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7ac4d4-3112-4941-bb2a-45695335d81d",
        "cursor": {
          "ref": "0a7dac03-1985-4078-b279-59e570c47fdd",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e7825403-901b-47c6-ab4c-cbd4bbc226d0"
        },
        "item": {
          "id": "5b7ac4d4-3112-4941-bb2a-45695335d81d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9cbc401e-6146-419f-96f8-21161e6d2a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8508928-f964-4a21-9cb4-20cf6ce402dd",
        "cursor": {
          "ref": "36a2f757-78a5-4e9c-a3ae-4c47b48fa5f3",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0078060a-6c2e-4a92-b597-c2b346e815fc"
        },
        "item": {
          "id": "c8508928-f964-4a21-9cb4-20cf6ce402dd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3606abfe-8d33-4058-b1e5-312d820917bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81470acd-29a1-4ff8-9938-c91845f3f96f",
        "cursor": {
          "ref": "40205dc1-acd4-4427-841a-eec0334d0663",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "57413caa-4554-40fb-8a01-eb3fcbddeb11"
        },
        "item": {
          "id": "81470acd-29a1-4ff8-9938-c91845f3f96f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a47e4188-d61b-4807-9c97-91b3174c7831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcdd581-8c5d-42cd-9c54-99fd17e5e700",
        "cursor": {
          "ref": "03e3486b-57f8-4ac9-a4bb-fc4da856d6ad",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3022e908-7f47-48cf-9f59-3020a347cc9e"
        },
        "item": {
          "id": "dbcdd581-8c5d-42cd-9c54-99fd17e5e700",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9029f9ae-dc1d-45e4-b642-9708dc126de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c115dd-6f64-472b-b058-a6b1ad62719b",
        "cursor": {
          "ref": "5b4a68ce-adee-4dba-8f34-fedecebfc62d",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e2f6a435-158d-426b-9313-f64a846e24c8"
        },
        "item": {
          "id": "18c115dd-6f64-472b-b058-a6b1ad62719b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a06ebece-2cf0-49a3-a7a8-eb3bf3e3c0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f12fe7-412b-4461-9331-242950c4cc3d",
        "cursor": {
          "ref": "532b29ff-07c1-4c0b-98aa-b37f6f84ad11",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "62b1f4ce-376f-4afb-b9aa-f05ced9d9058"
        },
        "item": {
          "id": "28f12fe7-412b-4461-9331-242950c4cc3d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cf741f2d-4489-4cca-bd68-ba2318bf083f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5bdfde-bc40-43e0-8b9c-347225438782",
        "cursor": {
          "ref": "9d6b3d28-f757-4749-9069-ee253619c608",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "94f3e022-2865-4cbd-a35e-e95ee4e5e68b"
        },
        "item": {
          "id": "ec5bdfde-bc40-43e0-8b9c-347225438782",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "336cb980-03b1-4146-bdc5-86f5b53d5e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9140bd4-f45a-488b-af89-660ef7f8943f",
        "cursor": {
          "ref": "68833ba8-f24f-4964-9c10-58c63b2bb347",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6ea6cfc9-870a-4125-a654-27b630f7101a"
        },
        "item": {
          "id": "a9140bd4-f45a-488b-af89-660ef7f8943f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fa1802ca-bc5f-4c95-8df6-e77f49422c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9b6f0f-9e2d-4a6d-977d-eb6f2faebff1",
        "cursor": {
          "ref": "409bf6b7-a40d-4c12-ae05-232b6d66c46d",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "195c70a7-be84-4a57-8a3c-b086ac833f37"
        },
        "item": {
          "id": "bf9b6f0f-9e2d-4a6d-977d-eb6f2faebff1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2e7c6bcc-5557-487e-8071-d5d4cc67fca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f151f691-efd3-4f6a-aead-c7f20fb8aac1",
        "cursor": {
          "ref": "aba2593a-39d1-4fec-97fd-75cf5eaf864f",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "575ba5a5-fb18-4f38-85a9-42ad02a0b57b"
        },
        "item": {
          "id": "f151f691-efd3-4f6a-aead-c7f20fb8aac1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1e72f68d-df56-4a1c-95ef-84902069eeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf42758-a818-4ed9-bcc3-a72ba9a3a40f",
        "cursor": {
          "ref": "bfb9ad0c-27ef-49b3-a6f8-ce3f3cd44c8b",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5c927d57-aff9-4dea-b31a-40fc3f2b083d"
        },
        "item": {
          "id": "dbf42758-a818-4ed9-bcc3-a72ba9a3a40f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9f1e8549-23f0-45b2-b1be-e5f07051fa89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2c37c3-8999-42be-a073-e7555249e7c3",
        "cursor": {
          "ref": "00bc8b26-cdb1-4c6e-a04f-b3a18b342c2e",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "eb3eb8e8-ab5c-4827-9700-27688ea38c4a"
        },
        "item": {
          "id": "0e2c37c3-8999-42be-a073-e7555249e7c3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "67c61dd2-785e-4f00-ab3c-71b189040694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bec508b-c215-456e-af8d-e34c67b36636",
        "cursor": {
          "ref": "ac3bc347-9bfb-4de5-964c-b0fec2ad9ced",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f02d0931-5055-4cbb-921a-82b9ae3517c9"
        },
        "item": {
          "id": "8bec508b-c215-456e-af8d-e34c67b36636",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "daa52aa9-7a63-4451-8ca8-5e6b478e9ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eaba3a7-1666-4c98-8704-08fbfc19e189",
        "cursor": {
          "ref": "1fb388fc-773d-418d-a403-ab8276b34892",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f669e4e9-27e5-4393-9e03-5c5abf34f91b"
        },
        "item": {
          "id": "5eaba3a7-1666-4c98-8704-08fbfc19e189",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0b5f2c98-2ae7-4c7d-8242-2770031ae72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f022e94e-043a-44c9-96cd-a8a0d454f171",
        "cursor": {
          "ref": "0be81802-b52f-466a-a99d-564a3fcd9964",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "542617f2-1998-41cc-aa4b-d07b5e1f632d"
        },
        "item": {
          "id": "f022e94e-043a-44c9-96cd-a8a0d454f171",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f94fdeb8-658b-41e9-a674-d4052d7e8701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed882a2-f39f-4516-905f-7887c10f87c2",
        "cursor": {
          "ref": "18fcbc90-2bc8-4dfb-a56e-f0cc7304aabc",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fb51747a-3a94-47b2-abb5-386faa34a8b1"
        },
        "item": {
          "id": "4ed882a2-f39f-4516-905f-7887c10f87c2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e3c3f66a-3b5c-4707-acaf-d27a484be5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca42fdb4-b13d-4713-a721-21476edee817",
        "cursor": {
          "ref": "ad01e126-f19e-457f-8359-dd96da400197",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "69da22c3-ac65-4061-bf18-dd37dc508d3a"
        },
        "item": {
          "id": "ca42fdb4-b13d-4713-a721-21476edee817",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "56984abe-7592-4962-9445-cf653037ba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcf3927-c893-4307-8b93-65cb2d049056",
        "cursor": {
          "ref": "ef9a8ef5-2f06-4902-8237-989b64b0a7fc",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ff388869-bcaf-4235-95d0-68425dc8012d"
        },
        "item": {
          "id": "9bcf3927-c893-4307-8b93-65cb2d049056",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d9c68117-5665-4524-b29c-b3a4ac6caa17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3eff89-d437-4e8e-82ab-b7db6fbf3e66",
        "cursor": {
          "ref": "a7ab0211-3bd4-4d85-abf6-e1191bef8499",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c48e0d98-ddb2-488e-b0e5-55237dc75a15"
        },
        "item": {
          "id": "0b3eff89-d437-4e8e-82ab-b7db6fbf3e66",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f81c60fa-25e4-4129-8513-764e55af638e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b5eb15-1c30-45fb-a909-d9988863c0bb",
        "cursor": {
          "ref": "36ea7f4f-ee0f-4824-b73d-1e123d7b439e",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d1aaec8d-5db9-40d4-8be7-5c213fe9a586"
        },
        "item": {
          "id": "73b5eb15-1c30-45fb-a909-d9988863c0bb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "07a95414-5fd0-40ea-b3f7-d9de326b51e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced3f58e-e7e1-45b2-b48d-02ac3c661445",
        "cursor": {
          "ref": "4eaa70b7-efba-4cc8-b7dc-fb0176b01b52",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "30eddfcb-0733-45a4-af12-5e4d1b492f54"
        },
        "item": {
          "id": "ced3f58e-e7e1-45b2-b48d-02ac3c661445",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d63b3688-e241-481f-8899-7c22d3690a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca70dc1-61c9-4917-a568-755cb70d66d9",
        "cursor": {
          "ref": "86dc7714-ee21-4c63-8887-ecb83d76ed6c",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "95c65e66-158f-45ff-bc5e-00d4520e9377"
        },
        "item": {
          "id": "8ca70dc1-61c9-4917-a568-755cb70d66d9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "242e3497-10f1-4ec5-a50d-2e3c9732fc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b148ac24-f835-499e-b13a-1c6662c52064",
        "cursor": {
          "ref": "e688ebd8-8584-49f8-afe8-209586d20f2f",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d04ece0c-91c4-4c9b-9f21-6a09661a6f54"
        },
        "item": {
          "id": "b148ac24-f835-499e-b13a-1c6662c52064",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "638b4ddb-9f8e-4c52-a1fc-d05c40f2ef01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8891310-7234-4148-986d-63c3e5bd9ea8",
        "cursor": {
          "ref": "443aa5cb-8994-4ebc-a793-12a8adf15029",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c00ac393-6042-4272-bfea-8e4538307271"
        },
        "item": {
          "id": "c8891310-7234-4148-986d-63c3e5bd9ea8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6de12fe0-d805-49b8-abcb-4f36778bf689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d16af84-97b3-4fd5-ba43-f659e55d41b8",
        "cursor": {
          "ref": "6d189762-abd0-4a22-96d9-d2f451fdaa93",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fa63b405-59b4-4ca2-8666-a7186ee6ec85"
        },
        "item": {
          "id": "0d16af84-97b3-4fd5-ba43-f659e55d41b8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f4563ff7-af5b-453f-8587-1dd331396a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af838ba-c18b-4835-9ee7-ce5e91b5a070",
        "cursor": {
          "ref": "6cd43b6a-b20c-4c40-9e1b-18ba07347a6f",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9d6410b2-c201-46d9-ad77-5084d199d21f"
        },
        "item": {
          "id": "8af838ba-c18b-4835-9ee7-ce5e91b5a070",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ea4ad475-3556-41d3-b406-67720b2f5a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95116611-69a2-4f68-9a63-74efa04d5a7f",
        "cursor": {
          "ref": "4ddfc50e-f430-40d6-a262-2d8c52eb496d",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9fe71564-db70-4691-aaf5-a2a8fa1cdf92"
        },
        "item": {
          "id": "95116611-69a2-4f68-9a63-74efa04d5a7f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e5198b8c-1f4e-409f-93fa-91ff9ff6dc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2909a7e1-721a-4cdb-9d43-954d9d92b0de",
        "cursor": {
          "ref": "b69f1bec-883e-4653-89e7-8898a83b6598",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "619f08bc-524b-470b-bf5b-bd1706d8223d"
        },
        "item": {
          "id": "2909a7e1-721a-4cdb-9d43-954d9d92b0de",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bfbf123e-63c9-4813-b935-ed7f9bf981f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea89cf76-9e6c-4f43-9324-a6f91ad57e4e",
        "cursor": {
          "ref": "a71841f8-2557-40cc-aec3-66821676ddc9",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8e5ae753-6e15-4fbe-8862-e08177557a1f"
        },
        "item": {
          "id": "ea89cf76-9e6c-4f43-9324-a6f91ad57e4e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3e0a00b2-a57d-4d07-84c5-5f81ee33e0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc446c67-e7a7-4f68-8bfe-c5f32a387270",
        "cursor": {
          "ref": "a5fc9aec-eb48-4ae6-8d3e-f6cdcfb6df51",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "24a7dbee-9760-4916-8119-735c97b56747"
        },
        "item": {
          "id": "fc446c67-e7a7-4f68-8bfe-c5f32a387270",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a44c2865-8948-4ca0-811c-9a566b28a313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8c311f-d4f8-4003-8912-e6060eea31ae",
        "cursor": {
          "ref": "69ec1926-3996-401f-b691-3c743803cda8",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8a3507f-df7e-4790-a0c8-cfc3d8e1cca3"
        },
        "item": {
          "id": "0d8c311f-d4f8-4003-8912-e6060eea31ae",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b0b1aa7f-f2fa-4f21-94db-8d362c58f360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0d465f-1781-458e-8a20-333c1753a4ea",
        "cursor": {
          "ref": "1374a8b0-de40-444f-be14-7401667eef05",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6204c510-a107-45fa-abfd-beafd3a91df5"
        },
        "item": {
          "id": "3f0d465f-1781-458e-8a20-333c1753a4ea",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "221521c5-49c7-494c-a954-cade134e570e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae339e8e-ae94-4a5d-bcb1-d0970003f9e5",
        "cursor": {
          "ref": "836cd469-856b-45f9-8c07-76c85748f025",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6833f1e6-aa67-4022-ae0f-6eb6d2198260"
        },
        "item": {
          "id": "ae339e8e-ae94-4a5d-bcb1-d0970003f9e5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b277d826-e16c-4b5d-90a6-5ce991278b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6fb95e-ecba-4371-8999-0e5a6ee2838f",
        "cursor": {
          "ref": "fe35461a-e71e-4224-acb5-4e3c78a12adc",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6bcc5c11-81e5-4afd-a051-f7a1fcf68e40"
        },
        "item": {
          "id": "dd6fb95e-ecba-4371-8999-0e5a6ee2838f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "572b770f-5fdd-40ab-bca5-78b048b6b4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffb9a7d-3944-4870-85e8-36dbc6c94668",
        "cursor": {
          "ref": "83b27189-b150-4d39-bfd2-89fff617142d",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e31baeec-0567-4dd4-b456-7d3119e0e39b"
        },
        "item": {
          "id": "1ffb9a7d-3944-4870-85e8-36dbc6c94668",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b2217963-3617-404a-908d-b4699a2a77f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617436d1-9957-4b9a-afcd-79bce72a2073",
        "cursor": {
          "ref": "542772ff-8d21-490a-8116-66ffecc26c94",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0b4f26d5-56d7-42ce-82de-7df8e8aab3c2"
        },
        "item": {
          "id": "617436d1-9957-4b9a-afcd-79bce72a2073",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ec3ddee5-5fd3-43ea-816c-a2ebd0c9d2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d009e23c-0fd0-4174-b47b-8b04f203de77",
        "cursor": {
          "ref": "6c12bc39-566d-40fb-9f0e-f8cdb9085c58",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d3017ccb-d07a-4618-b184-e5516a601253"
        },
        "item": {
          "id": "d009e23c-0fd0-4174-b47b-8b04f203de77",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3a389823-8f61-4022-8f47-796bb6395366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2509ec-f44d-4fa2-b2c5-6a8e8a188357",
        "cursor": {
          "ref": "64114f79-ffa5-44f4-875c-4e3ea8513f39",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "499b10a6-4c2a-4554-a5f2-1ae9b9bec721"
        },
        "item": {
          "id": "cf2509ec-f44d-4fa2-b2c5-6a8e8a188357",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5169ea6c-5370-4036-ae24-e621737ddd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf303e3-81c1-4c66-9276-c0619226415d",
        "cursor": {
          "ref": "b281c391-2aa3-46db-951f-0163182c145f",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2da92989-8262-47aa-baa2-c463986074a2"
        },
        "item": {
          "id": "cdf303e3-81c1-4c66-9276-c0619226415d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f0ceb88b-67b2-4777-b5ba-2a017547eded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7782c4f-3a31-427b-9c5d-b41d30418ba8",
        "cursor": {
          "ref": "48733c52-6556-4953-8de2-6a10fb13398e",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "647a98f2-4660-40d1-9cc0-95facfdf5024"
        },
        "item": {
          "id": "a7782c4f-3a31-427b-9c5d-b41d30418ba8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2507d5c1-209b-4c6b-b3d2-3c706613df08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203274c1-3f5c-4722-b8c0-a14c14964af5",
        "cursor": {
          "ref": "1ee2e32f-2341-4510-986d-5aa4b3d09846",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "43f9ae8b-5f08-4c7a-afb8-ecd9993f3f20"
        },
        "item": {
          "id": "203274c1-3f5c-4722-b8c0-a14c14964af5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ea5d354d-242d-4e2e-8e28-e8dbc8eb194d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3544e1a4-a08f-4636-a24f-7c3d52b5465e",
        "cursor": {
          "ref": "fdb3bc30-62b9-41e7-ad70-3693d1977b29",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d25021d6-8461-4f60-8fa8-38a298fbaac9"
        },
        "item": {
          "id": "3544e1a4-a08f-4636-a24f-7c3d52b5465e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c6663269-eaf1-48f3-ba89-b7368779e90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7518cb48-32bd-4c60-b0e5-842aefae4c77",
        "cursor": {
          "ref": "8fbe1af7-310d-482b-a0fc-5ffbae9ec158",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d52ea8e6-235d-4536-ad83-e7420a1044ef"
        },
        "item": {
          "id": "7518cb48-32bd-4c60-b0e5-842aefae4c77",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "01b0fc24-2e55-4d5f-877a-123f90622315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5576562f-325c-40a0-a9f9-6295b21deb68",
        "cursor": {
          "ref": "4852ef72-d4d3-4c69-8a8c-1455a674ef64",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "52770776-979f-4add-8056-039ec08d2933"
        },
        "item": {
          "id": "5576562f-325c-40a0-a9f9-6295b21deb68",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5e812625-d2d8-40fa-a2ca-5ceb254c3dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff165271-c354-4f4b-8220-1551e935a669",
        "cursor": {
          "ref": "72b0e864-0dad-4cf4-8453-279cb0a23206",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "417b3bb8-584e-4a23-baf4-928817263a70"
        },
        "item": {
          "id": "ff165271-c354-4f4b-8220-1551e935a669",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "183e99a5-de0a-42ad-b58b-0e8cd3eb10a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a9fc9b-af0f-4f07-a162-ef9da53409a1",
        "cursor": {
          "ref": "151e029b-bf2c-4fe5-a4ca-ad83cbcc3bfc",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b1279924-aced-4b52-9726-9f4920897245"
        },
        "item": {
          "id": "f4a9fc9b-af0f-4f07-a162-ef9da53409a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cf9a0ec9-cc08-48ff-a37d-6d2cc2e085eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf3be4c-c97a-4c04-b31b-529b603cf94a",
        "cursor": {
          "ref": "65bbbcd3-cd39-4e4e-8d77-7910cb6f6521",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "31bf1f1d-b3d9-4c96-95d3-fbed263c83b8"
        },
        "item": {
          "id": "caf3be4c-c97a-4c04-b31b-529b603cf94a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f68fbbf-4ee6-47a3-a4b0-f7830c4cdf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30c7cdc-9321-4893-b0a9-e70d201d9a80",
        "cursor": {
          "ref": "cec3d3c6-ee76-4b36-a2c8-b6bcc33afd4f",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "64495530-021b-42d8-b28b-7a939c7295a0"
        },
        "item": {
          "id": "b30c7cdc-9321-4893-b0a9-e70d201d9a80",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "29738b18-8c3f-4fc6-809c-12ab19f919e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8875d051-7893-40b0-ab06-a033fc16ec75",
        "cursor": {
          "ref": "b68b5bf6-829a-404e-9dd9-e913dd9c0181",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "22ec720a-0a01-4d52-bda7-545db8fd0b66"
        },
        "item": {
          "id": "8875d051-7893-40b0-ab06-a033fc16ec75",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a4c78f51-19f3-4308-9c61-2e79fabd4a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e981bc2-e5b7-477e-861a-6e3b0be7dd21",
        "cursor": {
          "ref": "93b9ea51-4f56-489d-80d0-71a67200f96f",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4dc0d83e-6822-424a-9be5-6458d13512a7"
        },
        "item": {
          "id": "9e981bc2-e5b7-477e-861a-6e3b0be7dd21",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2cf6bce6-873c-43af-83e9-d3178bf9d6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a912ca69-2e19-4b95-a10e-81237e54bbd2",
        "cursor": {
          "ref": "8f992d1c-e87b-4fa1-96ee-e852bcff3d99",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e24584cd-d129-4d0f-8009-5ec7c2a78d06"
        },
        "item": {
          "id": "a912ca69-2e19-4b95-a10e-81237e54bbd2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "10922254-8a37-40d0-ae92-f7ca8db9910e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603a8c61-9e0b-469e-b744-95b229b1ad2d",
        "cursor": {
          "ref": "c40ab0d0-35f5-44a3-a0bf-b055387874cf",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "af41aeaa-dac4-4479-9e7b-fb789fbc76b3"
        },
        "item": {
          "id": "603a8c61-9e0b-469e-b744-95b229b1ad2d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a51e1b6b-0975-41f1-ba69-371a3db3a5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e590a526-1da5-4835-91e4-05e249b45b10",
        "cursor": {
          "ref": "8ceebbb1-cb60-4f96-8323-b01ff0971116",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9e1043d5-0583-47ec-be4e-6d9e8d1cbfa2"
        },
        "item": {
          "id": "e590a526-1da5-4835-91e4-05e249b45b10",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "28de9a85-390e-4b69-8f9d-67a1cb2741ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1440c36-91b0-45e3-a95a-eccb3a3ef522",
        "cursor": {
          "ref": "63d78e11-4723-4505-b61d-c7eae7f56d28",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1d456933-5ca6-4a62-bedb-d50865da10ad"
        },
        "item": {
          "id": "e1440c36-91b0-45e3-a95a-eccb3a3ef522",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4846eac0-ff21-4b39-aa7d-b3e9f336298a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376cd542-9926-4434-913e-57e7c6161c18",
        "cursor": {
          "ref": "84a7e625-6b69-4f50-a40f-cabc60f227b0",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "21a010fc-1dc9-47d4-b851-ee2be6fb68d8"
        },
        "item": {
          "id": "376cd542-9926-4434-913e-57e7c6161c18",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8a77e27c-8599-45f0-a4be-9a408e2c8b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481fb476-0edd-4326-a2f4-7b0ab724aa9d",
        "cursor": {
          "ref": "1c051718-8ad0-4823-a410-1ccae4fb7a18",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f49d39fb-728d-4012-be88-721cf34db458"
        },
        "item": {
          "id": "481fb476-0edd-4326-a2f4-7b0ab724aa9d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2be0aac4-ed73-4361-a587-774833dc7b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde9b1f4-db9d-4b3d-8ccb-1ab84411de25",
        "cursor": {
          "ref": "f6c64e9c-86f4-4ad5-b978-868ffbf733f6",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4aef7607-f8d1-4e3f-be32-cecb5bbb4060"
        },
        "item": {
          "id": "bde9b1f4-db9d-4b3d-8ccb-1ab84411de25",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7f467f34-6c6b-492f-9c77-af122d95d564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89557bc8-1308-49c1-8c60-3c07eb637048",
        "cursor": {
          "ref": "e0d35387-78ee-4a61-b17b-e0ddd91de24d",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9ad509dc-5cd1-483c-a504-bcecf525c47b"
        },
        "item": {
          "id": "89557bc8-1308-49c1-8c60-3c07eb637048",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6f5ec5e6-7173-4f15-9734-9de61d1295d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823701fe-3a86-457b-8509-97a6c511f686",
        "cursor": {
          "ref": "bc13e1da-9b28-4617-b56e-b732d0112cdd",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b1145ff7-a24f-4468-ac96-b4197680fbf1"
        },
        "item": {
          "id": "823701fe-3a86-457b-8509-97a6c511f686",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6a4fe886-8bdc-4e18-a570-743b5036b90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889ba348-9aa8-4b8b-924a-befba84d3228",
        "cursor": {
          "ref": "c2826f62-dbee-4efd-aa9d-3ef5223417b3",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5b9e7e61-e1af-4809-98a6-cb155bc1da0b"
        },
        "item": {
          "id": "889ba348-9aa8-4b8b-924a-befba84d3228",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8f5fac67-35f1-43ea-b71c-0e54e513b0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f86cd83-b40e-434f-b353-5d78c0932743",
        "cursor": {
          "ref": "b931272f-f936-4f3f-aded-430c53971003",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "77ecdc6e-f95b-43d5-8c5d-08cef3024b64"
        },
        "item": {
          "id": "8f86cd83-b40e-434f-b353-5d78c0932743",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3adc26c3-174a-42f2-a79e-612725e33cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032a7153-fef8-4b58-a6b9-154d29f55bab",
        "cursor": {
          "ref": "0b9d3ee7-7615-4bc0-8372-373048b6f8bf",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2c342ce3-3438-4f33-8b55-bec363cf54dc"
        },
        "item": {
          "id": "032a7153-fef8-4b58-a6b9-154d29f55bab",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "95b0c336-5e95-4097-a9ab-96adc4f80ba7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4cd24ccc-88e3-4044-af6e-6629d4f702de",
        "cursor": {
          "ref": "0c864140-46b0-45e8-b492-dbdee272be8a",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "15c73319-4eab-402c-914b-2815978316a7"
        },
        "item": {
          "id": "4cd24ccc-88e3-4044-af6e-6629d4f702de",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "46b73e13-7855-4f7a-bc2a-47ca796cf411",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f9825a-1fe1-4ca4-8cff-5a9c50cbf95b",
        "cursor": {
          "ref": "71ecfdd0-dbde-462b-be42-6ca24cea6dc7",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0b7ee46d-0551-4221-ae1b-98f458a466fe"
        },
        "item": {
          "id": "33f9825a-1fe1-4ca4-8cff-5a9c50cbf95b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c3cd221c-9b9a-44eb-9b1d-071f8dcebafd",
          "status": "OK",
          "code": 200,
          "responseTime": 2340,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf70c76-8740-4ade-bdec-6cce1124cbfe",
        "cursor": {
          "ref": "0efa190a-b17c-48ca-89ff-b37df1111f7d",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a295ffa7-0cb6-4fa1-8df7-2336ee42c7f8"
        },
        "item": {
          "id": "8bf70c76-8740-4ade-bdec-6cce1124cbfe",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5334bd92-31f5-49aa-9aa9-a8949a400ca0",
          "status": "OK",
          "code": 200,
          "responseTime": 2063,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de0b6bb-ca8f-4d0c-80d5-f6f8e30f301c",
        "cursor": {
          "ref": "312e7499-b63d-43e9-9567-c22aed7d6d50",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "eb37d244-3740-457a-b3b1-d0ab4d65b894"
        },
        "item": {
          "id": "1de0b6bb-ca8f-4d0c-80d5-f6f8e30f301c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dd3d6bfe-4d24-423c-b43f-4b00e508d2ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1de0b6bb-ca8f-4d0c-80d5-f6f8e30f301c",
        "cursor": {
          "ref": "312e7499-b63d-43e9-9567-c22aed7d6d50",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "eb37d244-3740-457a-b3b1-d0ab4d65b894"
        },
        "item": {
          "id": "1de0b6bb-ca8f-4d0c-80d5-f6f8e30f301c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dd3d6bfe-4d24-423c-b43f-4b00e508d2ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e1f152fb-57ad-4bef-98e2-ade64c1967ea",
        "cursor": {
          "ref": "e929ee2f-789a-4795-a667-370b4291c01a",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f4a25064-337d-4131-8690-36c4a7b0559e"
        },
        "item": {
          "id": "e1f152fb-57ad-4bef-98e2-ade64c1967ea",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "11eeacec-d2fd-4a46-8aec-b237007b5faa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "4762631b-1fb9-4be1-a679-4f9bb945fd93",
        "cursor": {
          "ref": "1cfdb670-fdc4-4146-a6c8-fbcc9f5337d5",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0bf6d027-75c1-4f43-a63a-fab14dde5f0f"
        },
        "item": {
          "id": "4762631b-1fb9-4be1-a679-4f9bb945fd93",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f0cf769e-6700-4eee-af82-bc622b075092",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}