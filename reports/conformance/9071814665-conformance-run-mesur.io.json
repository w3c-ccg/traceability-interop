{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b542e83d-b164-4062-98af-389689448937",
        "name": "Clear Cache",
        "item": [
          {
            "id": "af712695-afe0-4ae1-a31f-81f05e0b4e1b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0432f75-7b8e-4dea-a960-1137e64b9d4e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a623c64e-6b90-4ef6-8299-5b7736905b72"
                }
              }
            ]
          },
          {
            "id": "9555bf91-c625-43e5-b3ee-a61523828d03",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9bcd048-b06e-4bca-9b9f-944eeb559d18",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ded584f1-d2d5-4700-a398-aec9e3e64985"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6819ec2d-a018-4102-8f09-e4a1df499d4e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2bc19a90-11b0-49f6-a23e-e01514602a9c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d50c2b20-9a3d-4a23-9cd5-b80ac931b83c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c57540b2-2971-4886-80dd-dc3ece8f2ecf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6cc654df-275c-4d2b-be68-feefd6eb8ff8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac952b45-ffb9-457a-9600-8b5268246165",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef77c0d8-fb72-43b9-b82c-a6e533c1ca3a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b426459-c1ba-4b78-a633-dec88b8e6d9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0156b2c8-3f19-4ddc-8250-606b45a4ced3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85b9db69-a0f2-4e8e-9cbe-6769a83ccde2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "20237dfc-e321-4118-9155-0c89be915797"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "865abca5-508a-48f5-84a9-73e967b1a9b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7880da0-9ab9-45cd-94d7-e6a6893cfe29"
            }
          }
        ]
      },
      {
        "id": "26e9dd20-7f0a-4822-9454-1914389d2bf0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ab8d5de6-1184-4c7c-a2d0-9581741c5237",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8bf0433-65bb-4999-9af2-2310180418eb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8166f73e-1eab-42a1-9efd-66d3ed2c352d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21f79b4-7bc6-4b72-a78f-1eaba33bd2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0063791-defd-4b66-8326-500fb04c8db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbd6582-213f-4bda-b6fe-13625ca631df",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f872ea4-4f15-4545-ae25-238e6bcae65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ce08155-badc-48cc-936c-51fa56fdc0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4e7174-4d9c-41b5-a9f9-9d9818112a49",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c388f53-7402-497e-8c17-85c09ce5ce82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da13d105-5412-44a6-82fb-007ad68dd539"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52e23278-326b-49d2-8b35-a316acbf0097",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90054827-c5b2-45da-b4c4-c7bc2db6f866",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26bb397-2874-40d0-86e4-809319f35620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92b9f61e-96d3-41e1-9e98-b76abb4e8ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ec3d53-f9bc-448b-93d6-ae66854a920f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2af5f56-b5d6-4693-b73d-3f5c89189c9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9279fc4c-58c5-4213-9f13-66c75e04a1bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a3ffa1b-e19c-45ec-a49f-a5d7a65f0bf5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6d0644a-9c4c-4960-825a-e72c38ac35e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d291892f-a64b-4611-8fb7-1f8ed26a02f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9f08621-8f9c-4caa-8b1b-b0d9e11e0cfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9aed6879-a986-40c7-849c-eeb8be10bae7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09fac65e-6892-40c0-8aed-5cad2a4e1752",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "182930a5-a51a-4c6e-b925-1840c79a267b"
            }
          }
        ]
      },
      {
        "id": "e08edc44-8d0b-4346-a9cb-2343b5758aeb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "41fe2b9b-1ebc-4d63-8970-d39829f79be8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47ee2880-bbe0-42ec-a063-7f202a2a622d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "89d64141-4b31-4505-9e87-41667f0afe8c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee1ab8f-6bf5-4fc5-93ef-e22a5d3d3294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac12fca-757b-41e7-85da-140dfee782af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d36c98-0f99-41f1-b4e3-e22649a95ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29167520-2995-4c14-a7cf-26fdb60a12dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a33e3a4-f2bd-426e-8251-790b9f3195e7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25affec4-55d6-4d79-9b78-443103e659ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82567548-8e98-4149-b2e3-95bb702a464d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd36c84-63d2-4913-85df-51fac52b3724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b3148cc-e5db-4ba9-bd24-9b03fa003124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b80b1c-6518-43af-a497-8ff060192009",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c326444-5126-4fef-b284-c2b522b7938c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c227a4-3be4-45f4-83ca-b654b25e22e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a069337e-e46c-4066-b80e-b9092ddfeb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7bb1e0d-eafb-4513-a844-a751ca381561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e6d078-c2fb-4dce-8df2-b658ce6003fc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c24a65-6852-4c95-8dfb-0e9126c98ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6a49dd-c824-4941-ba44-8d3febc3b51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fff1053-44fb-45f5-9e3c-7f326f703fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ada81470-5301-4edb-8ce3-eb9b1dc3d46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31564d5a-ff7b-4cd5-a909-086b42728e7b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adff05a-9fb9-4d95-934c-60047d2a1dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576990dc-1258-4524-91dc-c8f9467d54c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc56b1f0-82c5-43a4-9f1b-879f97ea0fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27b8e419-ea1d-4639-bb52-7c7e486b1f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27f139a-e78d-47b9-92a0-189db95e6ef3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b53e31a-acb8-4a11-95a0-92b730663749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d929e3a-514f-445d-b9e3-68cba7fb4784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e861cdad-6a3e-42b0-bd13-7d0dd6d13110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87c4864b-716f-4755-b7a3-bdd0f2a2a040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1082c66e-380f-4d6d-bfbb-1fa63fe810ac",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412f5dbd-7e8a-49f5-a4cc-1d1ef78c393a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4f99b9-26ad-4056-9485-8578e4fd4e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d70e70-b6fb-4ac5-a1dc-fef9f70a5471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a13b0e-d647-4d92-81b9-feff69b8fc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adb9353-6866-4977-934b-4fcb4b63d2e8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb20445-2b7c-43eb-8264-35fb47414452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2732c8d5-102d-42ab-a9ee-47f0493bbc49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3363e4-49ac-4617-9211-39925d12c953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27d16544-2d5a-40b9-abe4-dd7aac9bdddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbab201a-a80f-4e2c-8b22-d92804c1c57d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71c09bf-525e-4c3d-b9d6-79d17c50dab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3a1620-9221-48ea-b32b-e20b3b1a548c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b16b55-10eb-45d9-a1ac-d4182e19d8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "334a5708-7dce-4ae1-a9bf-1462ab54ea85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af943729-8af3-46c3-81a0-fd784fd93acd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea6f44a-64ed-4602-9b25-28dfbc3327f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d990bed2-e894-486f-bf31-4a704305f8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adc1c92-9dec-4ce9-a0f4-8940cc4748af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfac4560-7235-43cd-9570-e2c639f0aa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ea1a4c-7c96-4473-ab28-5ceb76b2e7ac",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d63178-4cfc-4f2f-86a2-5f9bc823d5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77d290e-6db3-4cac-b713-830451971132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1bf9df-3d32-484d-9e5d-8055964baab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f4fcc16-c941-4845-9764-fd08f493975e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98acdd71-94d1-4071-a6a1-d7aa4d104956",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc87ad9-4426-49cd-8e1d-0dcb92d0a3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90935b72-3136-42db-b69c-547c88273fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bb575e-492e-4142-963d-4b74015caf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e2272cb-69c9-424c-818e-fc04cb8a9148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e53ccb-d7f9-4a5c-95cf-f211b5f33353",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4644ffd4-9a00-453d-af8e-8e8409cf5e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f46403-972a-4e4d-ad53-48cf611c5b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c3dc37-7ffe-423e-9788-fb8e3ef9396f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be61e169-3198-461b-9a75-abc53db23aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c29015-ecc7-4985-8a47-4fc4afb48a3a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f461e71a-0100-4621-8e43-de4920f1ce88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0d7969-8278-41e2-8d89-5928d68ee0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92eb73a8-0da6-4d1d-a9b2-f8e0e52b8033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fb1b4ca-db5f-4a09-8d82-f1109e4cef5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c0dcfb-d815-4fe9-9239-4d42f49dd5fa",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e9b62f-5bdb-4c82-80ad-c9b70650ad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85390d6c-d30e-41ce-be43-9c3787c8e94a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1013610-cd66-4616-97ab-732ff63865ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2756c0c3-2e67-45a0-8a9c-7cda7f4adab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11aed35-6c53-4423-b8cf-b2a84afafa19",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c286470c-3be2-4ae1-8172-255dc6710ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efaa33d-e2cc-4138-bc13-c1474669dc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71490d6b-a277-46e8-bad5-f7f5e809a1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e30bfe79-31f8-46ca-8972-d80525825b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f396511-a26c-43b0-a8a9-784f06752894",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac8480d-47d0-4739-b999-9d7953b03d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c75585d-6632-463d-bb84-49954a62dd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4367f000-15d6-4bbc-98ed-320a78bc627e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8937960f-15c3-46f8-a36a-710a570b88ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8daeb0-94ee-48ab-a3a7-52a87d41fbf8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d1fb74-0b3d-4388-a635-0105aae5b338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3b0b2c-0d32-4a83-9b04-38b6c7b5bfcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bda6b8-d5f6-4d99-8e76-ec5343ebe1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c3c51c-1fe7-4117-beca-f8e5d942a004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e64caaf-1c3a-4735-8f45-e0a4815df841",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206edc90-b30d-44ab-90ad-e838880f9165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ac001c-e4f6-4af2-9995-9816944941f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1051d1e-51cf-4fb8-8af8-2ab99e5d1e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1be136a-4fcb-4329-9fe8-e6301b713445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bfcc9b-a5ea-430d-beb5-eb2a87ceb051",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cc221b-a70c-485a-ad07-ff09283ce188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fec7709-deb2-4a6e-b47b-ea6ce3506b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcb536b-a81c-4975-aa83-197d82c62443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "155b84db-2f50-4228-8f10-bcc279204a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35673310-3c33-49d1-817b-4b546196bd82",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def94e46-907a-4b11-9776-29ad9922fe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b3b329-31d1-49ab-8278-a250ba56b2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c430da-8bc4-4e9f-a2ef-6415f51ce954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2537cc31-1cf4-4d8a-b14e-307b8dec161c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a223ea87-27ca-46b3-b000-737fe4b94b93",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf21c3e-a3df-4fa1-903b-013f62581851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971add7b-c29b-4938-bf9d-1152a15ea3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffdb859-8d0f-4266-93a1-cc04bce9f8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8adfae-58d4-415e-bfcd-19f491460417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6976fb-fe33-4b81-bb77-ac8ede2e2a26",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e586d7-465e-4dbd-871e-d7b060195bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcecb3fd-0849-40dd-bd9b-baebaa6e5cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e7769d-b137-4cbf-acab-0ec8c53f5406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59d73589-8555-48e3-8f96-610fb2ed8751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87959c0-05bd-4398-a6ca-6e26099e1c2f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a9aa4f-2cbf-4193-9eee-c681f434f8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df21347-e253-4bf2-9d94-94e0653ac82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d72df6-d61c-4543-9734-7bac711a8d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7a2de8-ac66-4411-8517-856f56b59ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af5fcd5-f2da-40d1-908f-cde229025ab7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fb884e-9eaf-46f9-a955-b739a5ac5cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1000a9b2-acf7-404d-8045-056ca2814ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a333c3f5-795a-4cc1-98b1-293626caa8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ec1d4d-3781-4315-97eb-9c13d492c2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11aa0911-7e4b-4137-b872-c84747c74d20",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b252df39-0703-45c4-a849-b2ba62991de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc0fd97-fa70-41ec-a2d5-56a153bdf4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c381d1b-dd37-4774-88b5-ff8828d78f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b85ac647-e3f4-4e49-8078-db3e2997f85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f137288f-8945-44dc-aaf5-e14c06e6562a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dce4343-2de4-48ba-bc03-8fa2722ceb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2feff4d-ad4d-4164-b960-619a496500db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2687c44f-c227-4d25-8c1b-d135d9c2cb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4910451c-8d04-438a-9c80-052a6a1f7ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ec1213-f973-4fa8-91e9-cec508d1396e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0925772b-3e33-4bb7-bbfd-6496b119be1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7475e62-fa62-48ae-919a-738e03d3e587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d73cc5-bf3d-43f9-b9a3-0311c0fbb3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbb4a8f-b862-4904-8002-b973cd4f3948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79191822-2319-4d59-80de-0c6cc6eeed9f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaec8ca-75b2-409d-9bea-19c6635971cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969144c9-3554-43e3-97e6-8360cffb8faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcb1289-d6d6-4f4b-86a5-34c21dad7b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9dac8b5-b248-4c5d-995e-775649d4139e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4c8852-2689-4014-963b-c1144eb5fe90",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa18473-df06-4aea-b998-3abb54565e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36da3940-1050-4bbe-becb-6c492f767e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b83b455-d525-4f21-898d-bb949a5d3223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ee3045-0161-463d-b87b-d9e6f38bdb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3468cc0b-9541-413c-8f46-599186578936",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3188d2f-ccac-452e-b983-9a4ca1f66f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f19b981-a31b-41ae-aa52-9f4cb69acf99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4751d1d-ad9e-4c5e-a64f-c4e76ee371b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace9e7fa-f4e0-41c0-85c9-23741b42419d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb5e3f5-ae9b-4893-9011-f254faa14d42",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfcd0cc-cf5c-4a9f-9712-11b9b3d70fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044a9a51-3913-48cf-985d-0a659e048561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b84319f-40ae-462d-a947-53d58905ce45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7121b7-cf0e-407a-bd74-3e7e789e3509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76077df-a444-413e-a2bc-82dfe86a4e00",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd465d01-e7c9-4db3-ae01-a7cc4f3ffeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98335676-fe3c-41d1-9c3a-9be04b42c798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc6d351-296b-4c70-8ec2-75e632da6cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07fae9ec-ef3d-49d0-b274-35c14815a5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52392630-2d97-4cb7-9f05-5e18a68eca1d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f873f5b3-0280-4289-a3a2-7b402e707534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aab056-4a4a-448c-92af-ced7fd47033a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102d2805-d862-43aa-8a13-3f07f5cf04c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4fcc5f-65d6-43e3-af61-6141397b59d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb06902-dc05-415d-930b-d090c0d79257",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5255f5de-e03f-46d6-9486-d0575bfee50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d2ff04-d5d5-4728-916a-e1b11566f810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa4319e-9f0a-4540-a9e7-bf7e97968a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e45aed-d404-49b3-8318-de417febc23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892bdb02-0d10-47a7-83f9-136bf600609b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c719633-3a0c-4fe2-99c7-02a57a00fe01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5adfedf1-283b-4222-a2a6-178c8b0ad690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11573f0-49e4-4ed7-aedf-36b72f16e67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0f0257-0cff-4e7a-a750-c1087fb16d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dfb59c-3c01-4bf6-933b-2352c28bbebf",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fb30f7-6443-4274-8c28-48ba46064c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4508366d-fabd-4dda-8a27-6d12882bee9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e524f0d3-d750-4213-8eaa-ded2978396ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08610027-72bb-4b49-b8af-353ed3d7b2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d012494-71e9-40b8-bac4-1140c57ffd3e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fde4c4-ab8d-4692-9bd3-010bebd35d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bccaf287-734f-4275-bcc7-73a7eb318220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7578d79-fc1c-4250-978a-417e8a98d8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe93654-e407-4cfd-bd23-02e66ca774d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e69f04f-9be7-47e7-8188-b74778b4f924",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33439b15-5805-4e47-a967-f9a8b763d23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7c0c79-a150-4f71-af48-01bb9cb6b32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358bc8a5-bff8-497d-871e-27af1b48a3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c67dff8-460d-4310-9c1e-e04475fd5512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26e132b-ac4c-4bb0-9a55-23696f2b19ee",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd70002-def3-42aa-816f-c094fa41639c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48518316-5078-44c6-9b23-2498856697b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1895c0ce-e86e-487b-b3f6-b6019ce556fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4257069-2f97-4886-ada3-c1580c760885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e98bd3-bcb7-4601-948b-4bbf7621176f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff6b097-6e99-4ed3-a0be-07c962244256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31adf26e-4d7c-4159-bb4d-246e34eccaee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596f7a38-63f8-4485-97f2-6f7a5c7fc6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe07ff83-8f49-4400-8474-45625164cd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df3fce4-2785-4bd5-bdb8-2c3402701fa3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e889d38e-e8f4-45a3-8fff-7022cb67c3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7101ce19-fd1c-478d-a103-0b0bc81bf0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d82c3f2-0fa7-4b92-b664-eea474846bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7fd728-ba54-40a8-b0bb-e25f282239ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17791637-e2a5-4507-9d6c-8b0634d9313f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9de69d-f934-4279-911f-ecda76721863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550d6025-f3ee-49da-826b-9862cc4e8f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a10282-0d04-497c-b9ef-1e0d3f8d3cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "052806a2-0bc8-49ce-aee8-6234a610c42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66739c57-3881-451d-8691-f82f72436a36",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c9aa01-b091-4d02-a6c8-f02fa233e332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a3cd46-1f8f-4677-b5cb-476e59135667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4ddfa7-3f2e-44b1-be05-4f0b12d94b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7afe53fe-6e7c-4cd3-b0ab-4114c354b3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975f5783-daa1-4da9-b6e0-7a7da72ccdcf",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f009d7ac-87b8-4a4c-ab28-a3b44e25e659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7250c9c7-00be-4bc8-9c2c-1514cc401ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e6ef00-508f-48a3-abd7-d4a10715a1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0662081-636b-4679-aa62-d218f48d1b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8115b6ce-8e23-42e2-9077-5ae8b65fe370",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46c8965-b859-44a2-a44a-fe96c5e4c056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee745cd-0023-4a48-b7f8-e97d900e4e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8a54b4-e3e5-45bb-8fe4-90859b2c6d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf9c610-698a-46cc-af2e-a422a2edb788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d477fed9-4e51-4afa-a35b-26cd5e36e70d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309577b2-d2ed-46b6-8801-610628be4e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f279a3a-4a09-497b-9627-ffdea389f827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7f66d4-03ba-4ac4-af1b-3938ff279a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f39b693-3784-4c87-be19-f931c1debb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5867c89d-3859-4200-9f3f-768f766a2c7c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe387b3-bc04-4561-8989-0ffc12c5c249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d31480e-9728-4445-a822-dc63f18b1d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c2988e-cd28-4c42-a434-ca0bb7aae2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14f6eabe-a5be-4c51-a5f9-bb61e4f7aa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776f32c4-f3a9-4dc8-86bb-7dbd1e761c7e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0831e427-dfd2-4f85-b0a0-63bc1139d662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539981b1-6a33-4ca8-a8e6-a3075e9e842e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baefa05-5158-4949-b804-eb707f3204e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6937b2-f070-481f-864f-99113f063a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e5725d-3ed4-4b26-b0dd-9c905d105571",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ce826f-f39e-4377-a4b5-cfa1ebb797ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb29cb80-b3d5-44d5-9e33-b30db0cba294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91caadb8-f3ae-4bf6-b7c1-c51db5a02161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7096a170-8c60-42e0-839d-5e2d8efe7d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c956a4-c47e-444d-a6aa-acdd1c8d8655",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7425e9-5721-447c-88e7-56990e39d425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d846bba-e3bb-4b53-b147-608f322c0432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e71a727-9b5b-439e-af78-2b0c826c1669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "013dae09-cc10-4211-9610-cc2cee8aea53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cb96b8-51c5-418b-b6b1-8dcaaaaaa650",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca0cf6e-379a-4e07-8284-44d872f439bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc20279-f8cb-46a8-abb6-d4900c8ba171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffb073e-b194-487b-9fc3-0adfe244cd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "deff1053-a1a6-4c1e-9a26-d81ddd7843f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32be6569-5b9b-48e5-b14c-4b69bb98af71",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2f6511-1ae0-4a08-876a-015d45b8b622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f9605f-2fe7-4220-88a7-2c2a817609dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f614c0-0c9a-4192-8b96-ec83e5694c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40cfc0d2-c892-46c0-ac3e-edd3df8d6337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9be6f6e-706c-4e60-b2c2-cfb9990bdc85",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f0d331-9c77-4bd9-84f8-171381230e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6a5a70-aa37-4ead-811f-ec66892d190d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92eed7ae-c41c-483c-bbd7-ec4cd0e8104a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e864c64-bfb1-4c4b-af83-ee9d18c175f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25236635-67c5-453a-b27e-3359f28041b3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b937d5-77b9-42a8-99d6-addf1be071c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4a6b62-d68b-4321-8901-da2be652bd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78be8300-f139-4cec-9d2b-6315a1c713a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0561e6-4f79-4d3c-ba71-1b4eeff66d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838f2e6c-c435-4728-8b71-e44eda350ce2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7283db-ea56-4223-abe6-2833aa528d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23381d9f-9e5f-4c20-9467-4fdf619b9d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393e104b-2ca5-4cfd-a739-ef864eaec300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c0c0b2-b9ba-4bc9-8c33-ae54f3c45ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9d0708-b9f8-440f-95ea-80f53c0189ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaa479b-e4f2-49d3-8ddb-448bbb7adb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0154a099-87df-4369-a3e8-4aeac38fc9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c971a6-a2b4-4af2-a679-94dd82cba3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95e807ec-b9fa-4744-ba3a-ad51fa5a6cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b6f755-00e2-499d-8643-a2a362d6259d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbfad79-a1fb-4c0f-8ce5-79b2d71e62f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9477255-794c-42f4-b8c9-6feb8e77ad57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1046c5-bcf3-4676-946c-fe758a65297c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a914f89-42c6-42f0-a8ca-b72664268ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f5e04a-6f4b-4c03-bbdd-2a9c2595aff2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d23cbe-4240-4afa-ac3c-4d0439630145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f337d6a-85f7-47c6-971a-02c31e09debf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d0e4ac-ccad-4f37-a218-f21726866e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8568ca20-1947-48c8-b716-2b53ece5b971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f574e57-0b2e-4a7a-a732-f71ddb9d285e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c75caf-a2f2-439d-9961-aad4d3da7096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471fba40-329e-495b-9d1c-a080bce9959c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79566a3a-a65c-449f-99ba-384f6a186d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "44d984c8-39f5-4652-9c4c-a9332e0e7a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a5b4a0-9a3b-423b-90ce-9bf48c4114fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11328f68-2155-4213-badf-d9f41051cf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29dfad4-12f4-4016-a792-44fef37048c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1f8de-e372-4b9e-9974-507d0e385355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6a72a0-07c4-4266-84bc-035d9a6cdce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff8251f-f09b-4b6d-97e5-9acb330bf4d3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc92427-ac51-4611-be34-8b590ff2e470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b14af3f-03f6-4c90-90b5-89bb07c9baed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bc21aa-709a-4077-8db8-158b840b069f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8687a9-c6d9-4cdb-ab6e-6959ee34c040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7391ef28-d0a2-4762-91a4-af00bdac198d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a3e43-23ff-4c71-97ad-1dd32242332a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f46c0b-d7a4-428d-b3ce-0a87a11ee982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088b48f5-cf49-4f18-bf8c-5d62ae6b3bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c03b97b-7587-49fe-bb72-3bc530102ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e6c1c8-8bc9-4b63-865d-237d1864f8a7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c5129c-b20f-4fe8-aad7-a30e37fb79d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f66386-5981-4090-a899-ccbc7bb3f869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4caed3-a230-4f59-835c-3814a282a538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1853bb3-27ba-4d0c-af92-823edbb583d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9642680-fbe0-42b0-af77-4b28d68605c8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c554e2-fda6-4245-99f7-dbc062dd11ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d6f3c9-d8dc-497f-938f-42c380b84177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0b0849-48f3-4e8a-8010-54cc3121ea48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce74c98-b853-49ae-80bd-8c61fc694047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21318ffc-092b-41c4-8638-76818a311a4b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba0c81b-b758-41b8-953d-40fe45748c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac98d4c0-9111-4cd1-b6bb-989d379375a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8e4eff-26a0-4db2-8085-42eb0ff3c904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31b03797-9e14-47c1-8eae-a1cd991108cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255886ea-84cb-4b34-a0ae-68adc97c86a7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3855871a-f8b8-4584-8bf5-4cefdbf273ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b992bfd5-2842-4dae-b30d-3681f6e7dd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f23b48-4e88-4232-8c76-35bb68afa696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5af293-2dba-425f-878a-cd6807d6bef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a482486e-f162-4e6e-b81c-4c41f2eb1ad3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216acec-a6e2-4af9-b135-f289925316ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49763a0-7947-463c-8049-f46484db0da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba61877e-563f-4ccb-be6d-265bdaca98d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b799f45d-e03d-4b26-8697-54ff02c0d3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eb0ea4-c6e2-417f-bb0a-e851c042c2e3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4c46d0-2761-4cc8-a35d-b86088999121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a07f550-286f-4546-857e-8f43c12e7b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fb2f4a-67f8-429b-874e-52963a7a3e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a095d6-1d03-45e8-974e-92c308a05800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3823a782-f234-4b67-bc9a-8a1ebb976c8c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c3a4ed-9053-4c40-bef1-6b94ca9aef44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2bc29c-9500-41b4-af8a-522281a3388d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac5a08f-47b2-4eb2-83d9-daf49db43254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed4b32e-6acb-476b-af55-d71ad34ca86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7eec7b9-5036-4449-a189-1f07882cfef3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7691b699-09b1-426a-bcde-e5be08ec1ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecaaf15-a25c-407d-bb98-60581e8d73a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdc1f0d-e31f-43a9-8650-f92bdd2eb6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50956bd2-150c-4b7f-9855-24c072313ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ca8ae2-ac47-428b-917f-4bb3381693b8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1e78b5-2ce3-4724-87eb-9bb92665968d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9313f75-b017-46c2-a831-61b18bb84382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27871ec-cedb-435e-8e53-150fb7605c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82ec455a-b553-4d7b-a356-f5f704df7150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f43314c-a3c4-4cb7-a053-b69c37017c2f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18830402-5f39-40fc-88df-283dfb981f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7737097-c3ff-45de-87e3-2fd5e3615bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468fdd48-5c5b-47d3-a16a-59d1caf2df68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bcd672c-84df-4452-9f9f-b97bbf79771c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f139c76-edd6-4506-9f70-565815188053",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c823ce37-51d9-4086-9a8c-fae24d318fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750041fc-29a8-4811-8161-8c3a24fb4895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9ca1c3-648c-4e01-a494-d50fc815b9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "627c703f-535d-4373-b503-0053b2b1d7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcecc17e-e635-4c24-b7fb-892bf2e7455d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dea1a1-919e-49be-a6bb-c63bba22fd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4c4a43-c96a-4e5f-b6b2-ccc64df2f072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1aec4dc-becc-4c67-bfa8-00ebacf20560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3abf1781-10a9-4b15-808c-d8ac283f0ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382584cf-c81c-4262-ac2e-fcac1fa475fe",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c593045-2c9f-46de-a9dc-d181555f555e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49c8c13-18aa-4bb4-87d8-3950a6d2843b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931df49e-6b73-4294-b0cb-61fd8a062bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d52e6fe-e9df-4a99-ad9e-3b60f3af51cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ae7ffa-6464-4d05-a3cd-8bf2455dc0d6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5064e1-f506-4792-84ea-42e6763cb323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c186dbeb-c7e7-4522-bbae-07f0f7312f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294aacea-36fe-4dda-9f3c-89a5ec78f9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0efc92ba-a09f-4db3-8cf2-39dc28cc2cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8ca1f2-23d2-4491-91d3-19dab416ea4e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b362af-7236-4553-9f7c-be897a1a7dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8e7420-0efd-46c8-bc34-16afe75d1ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56325a50-39be-4fd8-b449-eaff3e7efb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55c746c3-6a50-4707-9ab5-2a1e3ac91bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5033060f-4c8e-447a-8294-da2754f93ab8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6e9e81-0432-4fd9-9515-2b1625cd0706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191d756c-929f-48ad-a7b7-9ace593ea657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515c99aa-7106-4f1c-9987-175d1964dc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2649e3b7-6361-4300-ac76-d8d9f2be99cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8239c1f-68da-47ba-a7fc-e782aae30b1f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b319810f-5952-42cc-bf12-66c52bc3944c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc9f11c-85a5-436f-985a-75a9861191b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4530d556-ba96-4744-a014-9d94056626d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed099734-8ca6-4b26-beae-ea8953fda2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9220b179-8290-4e4b-9085-3860ce92a672",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f643e2-8d28-40f8-80fb-efbb0b857a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1d04d5-98d4-4544-bd35-5628b423d048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f3dabe-9ceb-40e0-98bd-09b11ed346e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3668ca82-21a8-41eb-b3e8-095dbf417e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e7e21a-a2c7-44a5-b017-9169716d8a2a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0395a8f8-5779-4d7e-aa97-23cc74fa181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef2b7e2-554e-4d4c-8d00-239463220bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a520bfe-24c0-4fc3-a55b-a87323b84f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4427543e-f981-41df-8a5b-20048042b3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4e185c-b359-4236-bd35-dc7b48e168d1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e759c4-d4c5-4e2c-b2e6-51554f3658e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccf5cfd-1722-417a-8619-c102146627f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2923f98a-7e58-469c-8531-2f7e03392b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "162b8c4a-3c4a-4aaf-99ae-c4ad250a11f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7883d5e-d1f5-4677-b43c-5a12e8c606cd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507a3632-e0c7-4e93-bf3b-f1dce5111eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5665b7b6-3244-47a5-af52-a85ac28e611e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7e1ad4-5a79-4820-929b-51ee94c5af44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98fc7dff-34e3-4fb4-83dd-9ab07c7de4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833742a8-8d53-4941-a508-90a15732282c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc81ffb1-e48f-4949-956d-08ad50ec5c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36aa535-8429-48c6-8619-b83ce8b17297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4eb6d63-d596-4aed-862f-0f66b7dbaa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "430b8f9b-121c-4dbb-9e37-fa5ffd821009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa909bb-1e26-47f6-83ad-b727565cc97b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033c7028-3a15-4956-bac2-24923d527ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37b6d52-fd13-4164-880f-2e71765000c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53078bc-1502-461f-8df9-4733a20c2448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5631ccb3-ff91-488b-9d83-46fb7a4a0433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8582f3-2882-4edb-8728-7cd891ebede6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384d0123-6e43-4a3c-ad93-9b7e6419ad47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5064ccaf-ca07-4803-b02e-0f3b1e1079d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9713b3-79cc-4af9-9ef0-1a54e56b8f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad796320-9497-47c0-b296-183cbe1d2ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b92047-d982-4196-9382-135c785c7c5b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f79aa32-33bb-498b-80e2-ce21f2dcadf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175ba91c-a40b-42c4-8b38-514a12783c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22271f30-f0cd-483a-a08f-d1146f31285f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d152d575-0c92-4225-af8f-7099b1170ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0da5be4-37d4-4954-8752-e443fb709361",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba1273d-ea59-43f0-943d-75a4114fe13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8dc0d05-2a99-4a97-b821-6993bccbb9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df33f347-3857-4d56-826b-91a57ee809a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "105af408-938a-4307-8592-600dae8462db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f6097e-4163-4bb3-9d7b-86877b1e173d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c80f2e6-1054-47b4-9e34-15509fea959a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff17df0-eb5f-4e1e-97e1-934afad1c682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862b55c0-3a0e-4454-b570-c9dff3beff59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e453156-963d-4bc7-b1be-81e586cfb316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f23205b-aa0f-4684-a5f1-51797efd9d39",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2018ca25-49aa-4064-96ee-0cfe004f1c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12af9726-ce57-49f8-94cf-5a4ee059d395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff3c18b-827d-4a57-9a7b-e02eed5290da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "70fcc100-da81-4ec1-91e6-2eb400ff3e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1041c239-7679-476b-9a0c-e415ac5e44e3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c95fdf-df9a-4b87-a270-70f4524849a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2d692b83-5f36-4caa-b66e-d7f2b0ff54ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a71a01-062c-424b-8f2c-b79ae0699bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "16e15d71-e36f-43f5-be66-cede96631660"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd92d5ae-ce0d-48fc-86c4-7f170fd43acb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f29efa04-a64c-45dd-b7ef-8728e4a255ae",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b758ecac-fb69-4ca4-9ee4-b06a83c6f53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0f3932f-98d8-4f4a-b04a-8bb59e423b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5351c3-df9c-44f5-93b5-086457964068",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b68acd7-5e13-4abc-9a77-574fedcba6c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ccfd233-2e87-43c2-bde9-ac2ceb0b84d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ad154ad-f21c-4937-91df-c40d1fb2cdfe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64ca4851-c421-40d0-bed3-240abd2ad349",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc68726e-3cfb-4373-925c-e0f44b2e4b4c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "216cb90e-587b-4105-99b2-bfafee726136",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d2c442e-e8f8-406f-b775-ffd46ace2bcc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9ac24722-fb0c-48d2-a6ad-9ad047b9d9fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49dfc9d6-9c19-461f-8f37-cd8943ea9a65"
                }
              }
            ]
          },
          {
            "id": "7c605812-0aaa-4305-b925-3fae1dc92c38",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1e64cf7-4fc7-459d-b612-e52980630ef9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b4bd36ed-4d65-40bb-b48d-d137b3a8cd03",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dc71d9-c528-443d-b006-b11305ca6fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5b5b7831-c2d5-4e48-9b27-fbdc418f3271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "facf912b-2a0b-495b-9d82-299af87e5f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5b64cb-1a78-4761-9b2d-40b65e82be3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1aa5e8a7-26bb-4c81-ae0c-d68606ad02ee",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a7556ca-1bf7-4574-af9b-a19bb4ed22ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4db79415-1a09-47c0-b1a9-5e56c91fe775"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9af9ea9b-615a-48b1-8517-528da40abfdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d14893d6-7f27-4af3-8d07-56ecf4d09ffb"
                    }
                  }
                ]
              },
              {
                "id": "29ef6295-1a3e-42f1-af86-bdfafacfbae9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d337c59c-d279-4df4-ac89-4870915ad11b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "958c8c25-7aba-47b9-a853-c3773356a73c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb529c65-ad87-4d71-8c8b-09097e7cda71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2c56944d-4d47-4f02-b92c-c509e2f13665"
                    }
                  }
                ]
              },
              {
                "id": "0a74e2b0-368a-44f0-adf8-063ad30dce40",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e931b36-731e-4e04-8676-436e2d887045",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "326020ec-d36e-41f5-87f4-aedd61ed2429"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "047a4d8b-2634-45d6-97b0-24f44928c08f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11e428ef-5d46-487b-859a-43119f559d53"
                    }
                  }
                ]
              },
              {
                "id": "91de103c-6ee6-4bee-af46-1c06d5879b78",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f029bce4-18b7-4be9-901f-5f2fa8a361bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11760120-f858-4999-89c2-d2d7b700ef6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ba98464-1510-4193-a97e-a77ced28fefa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "492245d0-36d8-486e-a2b5-50da218595b0"
                    }
                  }
                ]
              },
              {
                "id": "4a8556e3-38a5-429b-9f2a-6243df0ccf8d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11db017a-abe6-4d54-a55f-feed3f6fdcde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50f57140-4380-46c6-a5f6-14d6809b4a9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74aab23a-beaf-47ee-8270-de764d921b48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c91556b4-0433-4c54-9f88-ac74ee748659"
                    }
                  }
                ]
              },
              {
                "id": "5400d148-c072-479e-a967-3cd4f30d930d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f24e9ca2-704d-4f04-8080-cbe10dd020db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ee107fb-5892-4d03-8c4f-7ab851f5aa2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0900a8c8-cb94-40cb-8da0-eaf643479bcd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ce4ae9d-2a24-4411-af0d-be771566afd4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39e9a02e-b1e1-45fb-8471-43e5ea6fa465",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2288df26-30ee-43f2-9de6-0ba41a7e81a2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e51d0ab5-b1e1-4766-a3b0-4d291cd746bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b721e341-5d67-499d-a055-39b1988aa0dd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40161c3f-075a-4f7c-a2eb-b889374c8769",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "245f7c22-dd11-460e-9b11-72a7f9475bbe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fedafb1-8512-4c81-803b-b5d407285d1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e46abd44-609a-4559-9f0d-0cb98e7df5b9"
            }
          }
        ]
      },
      {
        "id": "21a74b8a-9155-4960-974d-8b1bbeb91b3a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a3309cd6-e724-4bb1-a13d-de7414f70d52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "825f50cc-9455-4a45-a121-40babf1f0428",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c563270-92d2-4d46-b423-271392e2eb70",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703c618f-2f83-4e89-9274-2dbc325c139c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed35127-e0e8-4bb9-80c3-52df3b1e10fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229f3ecf-f280-4b66-85c8-e3758ce99306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8efafd67-3155-4856-ab96-b3e18ea75016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db82118-3bcd-46f1-b791-9a67df8be185",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61adfbcc-eb01-4e1c-9830-b48a3d6f423a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559007f6-2bca-4d0f-a05c-09e8d975bd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08625cf-5dbc-406e-b162-d6d51c7728fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a692f833-57e5-4583-8642-60ca01acadf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129544bc-51af-474b-8e57-b5924cbc1b88",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2915afd4-26ed-4982-b9ed-a88d9502afb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f68dcbc-b4a1-44f3-87b2-8c7bdfcb77d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f303ad53-b7cb-40e6-90a4-a4922122fce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd446ae8-2c7f-42e0-b75e-3d321891a47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34498f95-e7c8-498e-bb52-73cfb21d35b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d37d355-beee-467d-ad6c-e44e35f18c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d88c8f-78b5-4afe-99ff-5c3bc0e390fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20801465-96f3-4ca9-a4e8-9ec8d38a8ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e58da3-b41f-4b12-bef9-173173cf162c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e05ed3-86ae-459a-b2b9-bc0c2fe178e4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b13445-fdba-4c8e-93bf-23cf7b85a8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacc6442-f7ee-4ae8-9365-28d1bb65a9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad89cef-78f5-4ea9-b2d6-fcb90d3ca04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68859b9a-0e34-4a54-b9b8-5188eeb60c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11572a95-09e5-4ca1-a014-df4d52b8075e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a0800a-9fcf-4d3f-a12f-aec67b8b3c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9fdf32-aeaf-4a7d-b877-4052995b8b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c071421-e047-4a6a-9a3a-03666ffda78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d74897-01c1-4dd3-ba3e-b4289c71e2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07786f6b-4dc6-4a7c-9aa9-b41579ed210b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459c216a-897e-44cf-9e63-0905a91e8091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204b32c3-51d9-48b3-9db1-4448ab58dad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f08df0-dec7-44c6-aa43-1423dd42a90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef42713a-7d60-4da2-bf49-5c92d183ad00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5ad4cc-8e56-4bae-aee2-b00299d2f86a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dae9bf4-02f2-4f23-a695-80db64aedff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74916ab4-1498-4647-939f-13d850825664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b639d62-6e90-4abc-b3fe-abda2cc6eef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e17192bc-1d36-47a7-8f6e-51a2da2bed68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4779e43f-7149-4cc2-8dbd-54c3d20ae48b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7fd0e4-4dfb-4d2d-b259-7d214416353f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4707d5-cc3b-40ac-ae9b-080d8e615fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2070cd22-06ae-4c76-8609-c93420ca64b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abc043ee-88fd-46ea-99f5-a8560f65ac3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b371d2-06c3-4ea7-aa2e-0a9b0f418a2a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e515fc4-f619-45d3-ad6a-15e958898b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd34bbdf-2320-475e-acf0-630fcf23810d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a624c5c-966f-44f8-ad66-fa5183f8b8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbdbc5e-9f3a-414c-9f8c-bc74a0ce29d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e89bdf3-3ad5-450c-a9bb-467ffece29d1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a01901-1cb4-430e-a9aa-16bf70738cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193491bc-c933-4f6d-86fd-929710afee20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ddcda46-4189-4ecb-8dd3-5c23c842a411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "352512a6-a207-40b6-8e41-a74e70fc2562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1aa4c7-7b76-44b6-9d50-0f02a86398ab",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11f444d-6f02-4dee-813d-f1547e188af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246bcdf1-f713-4455-9ef1-120e7d5e611f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be616c6-ec1a-427c-8204-66a30c596f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6af841-8498-4b6d-9e2c-73f89438ef66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c59b1b-c05a-49ee-ad06-8f0bf5775be7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9fff9e-05a6-4355-9341-a640b8f78d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0030c0dc-6be3-406f-80ed-72ab2454e67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3742839-14ea-4042-82ee-35d9289dbd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22f212e2-605f-4877-a77b-c8f0bfdcf232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b16b9d-d61e-4129-b200-2dcf4d6993c0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9530e079-9406-4156-a0c8-c4c7c6097049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8924fc7-2afa-45da-9d74-e180de05985f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fbe16b-ef77-4d84-ae07-7a93bd916472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb69bde-9b0f-4d9c-83cb-5de5f4a3c94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7fae1b-3585-48ac-8da0-2f63119fd3c1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1073dab1-2259-4939-9d49-57047c056294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9bb964a-bea6-4521-bbb7-2302e8a87a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da14d9fd-bf72-4c45-8ef7-404a5a85f0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "936fab72-c399-4f09-a58f-9d2e72531be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de29848-1e4f-40a4-a22d-f25ae0e8328c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9c26af-36bc-4875-837c-117828851602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffbbb35-5057-4dd2-8017-2bb8cac3923d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85736e23-087c-42ea-8d65-5a51b4e6204a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "789a78c1-1d7c-41e7-bebf-4613a5fd92e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d63e44b-99a6-47b9-8220-322b90046e19",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fb6413-42c9-48c4-a242-1710a8605c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa07d2ca-7922-4b81-8522-6824126a300d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef69aecb-c3c0-48a9-918e-6c2e732e2377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf1a3c-083f-49b3-94dc-d536e0bf97ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75172ea-9f35-49a1-9a8c-c385cd9811c4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c51b2e-0d6e-4908-acf2-c60f37177c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fba0254-1361-4025-89da-cc90f3aad8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b931da-399a-4151-8e43-57673dc78040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f679431-d1e1-4f63-b070-ae5c509aa441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831e9a0d-8c76-46a4-82d9-3079c2da0315",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1f5dee-ec87-4cf0-9c3f-0360c8395031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781e4bc0-ce01-409f-98e2-91f06290c403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84182fe-0221-43dd-999f-6e53d9f0425b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9d4b0a-8b17-45f8-989d-e8bd31dd8f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936311a4-9060-410c-9fd3-2abc43b016eb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac5c78c-cd01-4dbe-95de-b2a8f5a60f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9c668a-ccd3-4679-8cc9-14aa72cfacf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf122f14-cb5a-4a35-8c8e-d476a11acc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69768206-6662-490a-83e7-19608b26a799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8254276f-06e9-4acb-8a6f-1416f62ac0b1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960d63b2-def3-45ee-8c47-d72b62ba904c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dedcfe4-102a-49dc-87e6-1aae5f22de95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a7facd-9375-43b8-99fc-c27edcb29e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c92fc7c7-a039-4556-8c06-bec455ce5ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83459bbb-5240-4c80-9465-edea34005c1e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b2854a-e7d4-4165-a0d8-3be3f45b823e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c5d911-4026-44cd-9fb9-d39403509999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9a2cf1-947a-4978-8624-ed7ccadc8546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e7058f-ae61-40bc-b08b-1f2457397cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3cdc20-e793-4df1-b5eb-9e19675c2308",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336e08a1-8c8c-4696-b6eb-21a7c4db48b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a865a5-030b-41cc-9302-c24aaeabd4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b224bf8-5c0c-4f46-b3c7-02afb0b217d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b770b16-6dc9-466c-8740-2931cc500608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399f039c-e24b-4e81-92f6-34266dab947b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a22276d-2b4c-4997-b8f8-553f9a2288b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16ae683-d519-4258-b5fa-09aae2c1e88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047a4d49-a9ef-454f-804a-e4313a547a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0be0c1d2-0b72-44bb-9a18-1a3c4f121168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bebeb35-7866-4d78-9aad-2de3ccc31a8f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df9a30b-ee30-45b2-aa50-541367366646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544c6b2d-5d8b-4048-adf0-d329591c1d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087808d5-50c5-4f1b-a15b-53e42cae109a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e06d4f1-d660-4d3b-bbb0-a0bad3aaa773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1da129-0ef4-493d-84fe-101507bb3b6c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a90f6e2-9a93-4867-af6e-6959ee4ea698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b352f232-2117-44d5-af95-aaef2b5aedf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19eb03dd-a90d-4284-b909-aac909ae407c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b1dde4-3527-427a-a4b7-3e761ab1f680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f187d33e-8b02-4467-a69f-7a44c337f2ba",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20167ec-ee96-4a90-99e3-500bf313a2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e2da91-0baa-49c9-8bf7-c95c7cd352cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ccb3f7-8bc1-4f74-b54f-5a77b6746b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "943ec0fa-d799-4c67-aee8-96114f5a664c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5166e6d2-cafb-43e0-90fa-bfe7c9346c7a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a30f79c-64d4-40a0-a40d-49da3d6c483d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef703b1f-09c9-4fa8-9e71-641b4d5aa608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caa0724-eb0a-4521-bd27-4150cb652a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37961f39-1537-44ce-a78d-65e3bd961225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad534d9-ffee-4721-87fb-465ee357b651",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768a9378-3e1b-430e-8b90-58b2b2d31153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72507795-c2a9-42ee-b88a-a142dcc0a172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae28d380-44e8-4802-82c0-71c2addec69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7633edc3-9071-4f5b-81e0-b0e55d8ccfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcf2163-4bff-44d5-a74f-301015a156d7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39c7b99-0a4e-4237-b13c-17659ba326fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0262ee0-5ec4-4932-846d-f421984815bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8831bb9a-4536-4bfd-99c2-544f57f4024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a57da58-dd2c-4962-8651-c675cb90a8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32a4d2c-d619-4eac-bcd1-06edd5981a36",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094deace-f1e7-4e63-97cb-8a48de408475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f554c5-13e9-4b3a-af03-cedff924cfe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af367bd-eba8-4089-9441-48e039ad9831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd23e834-e2ae-49b9-9a27-176fb3b00029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bd7d31-2d80-4cb2-8f4c-7376a70f417f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495d35b9-3f19-4fa0-8ea6-1443844c5854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9a566b-7155-4f0d-bc3b-51d6f4fe1971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226f4270-e0f7-44b0-8dd4-df6a85f7e37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b85ad7ee-36a0-4ed2-8fd5-8e8ab7e74ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328ff5e3-6eaf-4641-8452-901c0bf82a5f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e8ebff-21b6-4ebd-9fc5-2310b1c925a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e02929-1022-459c-983b-6a5a9bb5395e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573834c0-3ced-4487-aa95-620e15b1266b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ed47d6-acf8-4632-8cac-ecd1ceb4feb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f08af4-660b-4e25-89ff-cd37a651881f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0988c161-e668-4e36-9300-bca8fbf224bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f54c097-0e0e-40ba-8517-41313440f8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef8bdd1-a501-46c1-ac56-0ed583f12fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15cce8c7-8f65-490a-af17-82feef5b76a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb648ae-f162-4bda-9be3-427ab05699b0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb56527-f365-41e1-a888-960f55897113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f500e44-f5fa-427f-9b7d-f8d27d905e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bbffb5-e2b4-4909-aa30-8a7b7f6c6af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "356807f9-baba-4e65-95fd-236da5d43be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a06ea0-8de5-4309-a629-066fbe902a1c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57c3987-c14f-4bc3-91a7-81284d6fc4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed602cb-bbb0-4393-9315-6af5e10f2eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1816361d-d1c8-4a63-bd10-114e2d4d3cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84ec12e-4be5-443b-8b3b-7d181e882b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3355000e-5c5f-4f04-ad00-871fac52e6b5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a785e6-7074-4308-9813-7b52a2131909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f451110-8b1f-404d-a1a0-28f03d96775f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c3d2e8-98e9-4568-86a5-1e37dc88696f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce078863-3b43-433d-854c-054c00b3811e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "11e9ada5-f2f2-4f76-90c2-e0e1a6354d86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be37794e-0c70-49b0-bb6c-9ff53f4a6d19",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589ce306-587d-488a-aed2-328adfe8fb58",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9f89607d-c6d9-440d-92d8-c96ecc032dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8ff408-bea8-47bd-84a5-6c231ace2dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1619fd7d-dd12-49ba-835c-45b11ca905fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2987c2c2-9ca4-492c-b59f-44b72c1434a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89305b19-b16e-450f-84aa-c6e2dde0f3af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f4d05a9-a950-48b6-8adb-a321d92d160a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8993fb9-f211-46df-a60a-5d0ed5e24a8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d47a326e-f0e7-4198-830c-e5dfb085844a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "701c7854-4e3f-4c51-9553-c4a5bc70af71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1b3893b-133c-47f0-bd85-af09d2e4814f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20225217-8a26-4531-9ea6-39f8802ab20b"
            }
          }
        ]
      },
      {
        "id": "8a27a891-6a3d-4348-a470-017be29c2170",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "df234839-7f0f-4bc1-a0fe-fa6b6ac87ca9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "713e0a3a-b952-4e90-8617-51fb05096485",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a1122b2-29d2-4592-a5dc-e63f359cb467",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa029132-b1e5-424a-adba-d0e364355034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462f115c-9a4d-4414-b85f-d751bbb3deb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4e3ee3-557e-4f07-b7c2-5bf3de0ff374",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cef5a9-5703-44f9-a1f1-1538fe8c8431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def1ac16-15d0-4aa7-895a-6930d7f7af2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01915211-c971-4f9c-aa3e-9eb9b04153c3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6082ef-4b12-4d93-a264-94deed111983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae669f0f-3ae8-4d4e-87d8-2fe6f078863b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3d5bba-5a3d-4864-aa9f-6371e30b8d01",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c2c54f-59bb-4bfd-9f57-e4c382d05e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba22fd42-59b4-4751-8a86-15b58d8e5dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8811b35-755e-404d-a274-1f5a58f817b9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e57554d-8d69-42bf-9fd1-c11f3d9e7c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd35864-2ccc-4142-834d-37fa4f69c83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0c9d76-5d32-43f4-ad85-94cb7e12f70e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a2ddd5-1b7f-4276-b955-7c752cac1560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1843e09-c08d-40e2-af78-60a05e20bfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8878e7-10d1-4919-8989-79cc6ec95a28",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56e0717-66ad-4ff4-9cda-9c6d3d045b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2880952-a3bf-4cb9-aabd-1f0e4f1f6aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a14f57c-83c9-47d6-b3e9-84ae2e974529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb1decb-2a20-4eba-8cc8-fc8f69c65c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cf3e20-fde6-4ba7-8400-f57b7de4e1ba",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fc636c-b652-42f2-9905-92e0b2bfe50f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "678ba2d5-6d95-4356-b38d-90fb80288215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a54ba0-952b-4a54-85ef-85922ebcbda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140dd4bc-0af0-47aa-a0a4-059e85af481b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb65b3e-2739-4212-ab1f-5ada504aafcc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db800b2-ee99-4d25-b27f-61038b034e09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85bb00c7-b4cf-40dc-a4c3-340c40ec2ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ffce40-de16-49ac-9c13-e02fbb15b157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf56866-213f-447b-b9d9-168697b3020a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31dbc37-e926-4f2c-804e-631a60bca667",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b5d0b9-8693-43bb-ad20-e06e2f45517f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fa38c8c-1e1e-4db8-828e-d8c88d6ef87e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc7da71-4fd5-4b77-9aa1-feaba975dbc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b9134a-aa05-4c97-85fe-4e141d31ea0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf43bd3-e9df-4e36-9ee5-591d8c17907f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95869b47-1a4d-4c1d-af2f-01b943fc3984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531b5afb-7e78-4cae-873b-8569119e4add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2777b387-ff2e-458b-b1e6-ea75b47a790b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3451dd0-b7e8-4c70-b55e-2bcba79dfcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1163d284-3574-4228-ac14-3f268826500e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc60a6e-05c3-4fff-8ddb-f3c0381819f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29ef3a8-a1b1-4668-965c-3285653aab65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d61438e-6b5c-45d1-b6f9-fa1f753bc4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e232f6d3-2071-48e3-bdb8-cf9f5d8731c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00405ae0-b81a-4b08-a5f3-af0819545710",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff658e4-b7d9-44bc-8f3c-212f6a460e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39241988-30bd-4f8c-af52-ff8dfac156a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc65008-0506-49b7-84cf-c41182b5cefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c447a2-5254-49a2-bc2c-09533c36393f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d882803-95af-48c5-a9c1-187f89276cb9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce851a8c-f232-418d-b72c-e8336676523d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0901afa1-84b3-45db-9913-bcaf9fa0bc47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a658a2f-ab65-4e30-b718-56e3a1b4b72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a91d53-71e1-45c8-8d2d-afe4082f92fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ad1cc7-e5e9-42bd-a4a7-d3793eed318b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56e1d95-fc6d-48f1-90dc-80b2a1e1923d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e51495b0-69c6-4381-bab4-d3902b0bc84c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2353cc-04d1-40b4-9611-f044b21a09dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de9d5e4-c3b4-49f0-ade5-e89e09537855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b29bde4-dfff-44a2-9ca4-c4beb898c0fe",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377a0e2d-3ceb-4acb-8186-816256179f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1e6d77-3846-4ba2-a27c-4928467603ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db484f2a-5824-42eb-954b-1d5192207fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1674fa9d-0a92-4b78-b708-0cade67c761a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede4dd7b-49e7-4ada-b33d-4adcb66c934e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f757426-06cf-49ee-ba6a-df1b30ab8ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a70e33d-8748-404b-94e7-1b7c31fba417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7fc040-6204-411e-a4a3-416855953a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "635e2cdf-92dc-4713-a980-e70fe89c23c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029c33fa-f456-4d7f-9dac-c5908d53de0d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05adff70-0873-4e06-aa72-607c6a9c6ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6c4ed2-6573-4d07-8b21-09e36200eaf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14155e1e-49d0-45ae-9588-7ce5d1d1e347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a400acaf-940e-47e3-a573-eb8717c4582c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea66da8-6c0a-4942-9a3b-19942d7cb3ee",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df75074-68b3-4c4b-b6aa-4c1c0b4c180c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cdf207-198f-4cef-b7ca-b0369a19e2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0690aa-d911-40e1-b47e-5823afb9a8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d22112-d4fc-425f-b98e-dba68c2b4dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86952b9-7569-4c85-8d3a-2f7d87f2bddc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29570eba-021c-4f2d-b9f5-02040de24e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0532fd71-7c3a-48f3-a07d-f3289a0f478f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851503bb-fd30-40bd-9c57-4529b3e9b2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c655347-b381-4e5b-9f17-8911735b1c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ca3c1c-caee-40d2-8419-d4dfb0c069e2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26174e2-226c-4226-be9d-df5ffcc8e3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5284ab75-5a7e-4bc2-9823-f151c84cc2db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2c3133-0161-4e14-aa05-3b12e5370649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e53d77-fc42-4fc3-91ee-1a1499409610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6513ae19-6920-401c-8243-b27cb3da390e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e4c67d-98d0-4f4d-ba98-91c074ad6c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847417d0-48e4-4f22-86e9-50597c899f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9584cd-7bcd-49a4-b28f-b868fe22eb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c697889-4afc-4969-9de4-6b64e960251c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ce9291-28cb-47d6-b3e7-efc8d278dfe1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ecc228-95d4-4059-87aa-57a44c667694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2790f7f6-555d-4c41-8cfc-56b488b84a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ab6192-f50f-4772-8e27-7d1f46030e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e56cf4c-c79e-40e5-ae37-aecebecd99e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d66cb9f-0a69-4d2d-afec-453a74781044",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d9a4a6-ca7c-47cc-acd9-a4e6e0ae5813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f01f1984-91f1-41d6-8671-11f26fe4b1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4491fcb1-9f97-4f08-9ad3-5cae997cb853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3950a463-caba-4240-9868-ffd77065aa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9865354-18ec-45b5-8900-a3b553f0ed9c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7372ea-607e-4ded-b483-e2819c81f2a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bafee39-680c-4aa4-8874-77f3332a2097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40834b9-e32f-46a6-8a2e-d795cc870fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4baf57-9297-42d7-ba97-617c83740f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67921d8e-d22e-460c-8246-ca291ad522fe",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a99871-915b-4d08-88ec-0752f5915a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139882e2-028c-4ac0-a28d-6c48ac7f2ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf51f3-c266-4967-bb5a-c6e3f2974fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb173b50-6cb0-4a95-95c6-1102b6e925da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69f4c0f-3905-4893-9b06-857df953b6fd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448f3e13-94a0-41c4-a9f7-004ab4d8ddb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6cad75-01b4-4223-a44d-ea3fc68a86ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f56c8cd-c349-40eb-8fa7-04fcecd9824e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67028b6-20da-4f55-948f-3236934f3a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5917a316-bb5a-4afa-ac68-2955fdc6f208",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ce3590-276f-4cee-b616-3b16022e2dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e0e22f-8ce5-4672-89de-ab068046130f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63db533d-2b2c-4f53-90e2-3af45a5e83d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17d041b-3729-4743-8492-3981a57df3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03de28ae-d91f-44d6-8c9d-a19717b92274",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e9f116-49ed-4178-8a14-6aec3e1829cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfee30c9-9912-4fbd-ada9-b7639f80a9fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf2b0a3-2e55-463e-9eca-7e037106185c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b581a1-881d-4ecc-816f-be91617213a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b39e2ee-e4ab-47c3-bf89-f149ad7eed3a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8d3d39-7297-4d3c-a00f-c0b54e773353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c04766-fc33-491e-b670-6b11154cd6e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d24dd24-f1c1-4458-8bff-08a3114f962d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8268ff-3206-4d74-8274-0e051098c6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729953fa-b657-4eb5-b633-7230ea8f4d9d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1278cc28-e238-4e76-aa78-69c3f444d89e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2989ac6e-f0e4-4883-8920-6b48ae04c7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49d007c-96a7-4189-8a11-e8bc4852d603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2da298-316b-4c91-84b6-ac3766599cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29baca7-8d33-4bb4-8d92-78d777b56d17",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a23b48c-d939-469d-93ec-8fcc83198a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9be2f47-1e82-464e-be49-20afb50a74ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6078d96f-171e-4af7-9120-8087e52fa1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659e63e8-e7b5-4623-856e-359a0e81ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdc4773-e416-4ad8-9298-9b3719b497ca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee614c10-df0e-4efc-b9ad-e61533fd7cbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "391fd2ed-3281-4f09-a8c5-2c58b4a9b126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183478a3-7b14-4aae-a949-8426f25547c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0767fe12-8241-44d6-a857-b6e08d399f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b89f54-a5af-4d69-946e-4f37138aae35",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b034c6-67e8-4869-bd71-d3176322ed10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f7a1ca-705a-483b-9113-63a78ce0d72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c2a91c-4c83-40f8-8259-5ddc36ecfe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db93e27-c071-4cd3-aaee-24be2d2c116c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28aa9c22-5d49-475a-b35c-e52dcbdb796e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492d2cb9-7a46-4744-9b88-bd5561228f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9332a54-c0ae-4b26-876a-d45963133d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c924f4da-7ce2-4f6d-b0ec-84b42efbae2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708d9a43-97c5-4168-be96-0f4069eac407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f011a44f-3eb5-44d4-a811-e5a55cc06aab",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add5cdd4-36ca-4e92-ade5-e0ffd211cc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411a17ab-bb92-4555-9389-ea4153a0c141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4c8ae2-362a-465f-b1a5-b88d5c05e535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5d3a25-0d28-407a-a25d-bb67a54a5337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ee4406-54fd-4132-8847-cfe2171416b2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62851c5b-2161-49ba-a2df-1b080f06e209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19398b9-24c6-4f6b-9478-b821f95357aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8728e917-89b8-43fe-8814-7d3f3646fbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3335ea4-1b9b-423d-a767-ea488325b8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910d5737-2229-4e26-9713-217c679c289c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a173c141-091a-421d-945e-54a43ce999ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e406c1f-a54e-4081-aeae-3cd8b36ea5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b423fe08-360c-47af-b8fe-b639b6e6d903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e15508-2cfe-4423-8d85-f7a496cbbed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2f273b-67e0-4fea-87f8-c510e1ce696b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c06260d-a082-461a-b9cb-d44e4815d44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a17ab2e-e275-44d9-bcf2-c6f5d9841073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccce36b-78f6-4dcf-8f2a-ad8c7fd5e678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbf987d-5513-45f2-86b9-7078d93f1486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07a5d19-dd4d-4590-90ab-a098f321446b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb89703-3f94-4157-a461-165f42a2ab49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebedfd3-502d-417e-917a-5ab2c294f408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd89bbc-28e2-49dd-ab06-84adaf5e52a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca92791-dfba-419a-9b5b-3e68905dd475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd11b670-e934-4b95-8bd3-5f231183b30a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf2ee31-e033-4f69-996a-ceccf866b0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e819311c-70ff-4389-a9ca-2570b175ac86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42007ca6-9326-45df-b807-c807e05908a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79bc0a4-7db6-4902-a292-0d78923fff16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8881abab-9c45-428b-9e2b-3c6c7f1f11eb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc966178-402a-42f2-ba57-29270350bffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b49202f-edb5-4655-8a35-e013995c0630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4faf4e-6ac5-4230-810d-b32acb1ad7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c43ca7f-e0d4-4d65-a863-2b145e6a602c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6f2aad-c0bf-497c-a831-ab77efd87cfa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a30ef2e-bbdd-466e-8822-4f5ae1beda22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2578940b-c045-4ad6-a995-21fd7203f9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6bf717-97e3-4d2d-bb5d-27672cfdd23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06149c8d-20e8-49aa-bc55-406d2d5ec810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b510f67a-b7fd-4ee9-af40-0fd40b5e0f07",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12b1a25-3aec-44ab-9e6b-7520e01e4ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc52d4e-8408-4aac-a61c-d30c414d60f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f619c9b-81b4-4a3f-9e25-622536291ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3ff415-d667-4d26-8003-dcc163494034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736350b4-cc30-4818-bd2e-91328c699ca8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de975a83-4119-43f7-8d8e-dfa9687ad141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e046e0f-ea58-48df-bbc3-7b051551738d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a15a54-8dca-4ecf-884e-1d5ddb7c092a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71663449-3933-44d7-acfd-f5d24dd2ea91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accb032c-68f5-4413-a6af-3057d297af9f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec877613-9e34-441d-9ba1-52f0185b3a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f7ec82-22d4-4761-ba5f-8c14af058965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0009d2d-7041-4f47-8a22-3055282b3ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be0979b-4e7c-4728-b763-557dff95262a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5da522-b52d-4515-84a1-2f3735bbfd15",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc5f8c8-45e7-490b-9742-346f89e2447b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082f80c4-7b2a-4379-9eef-f7a6fcd8680c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9012fe74-f90f-4f04-92ce-3e993f35455a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5663ea-e820-49df-9148-2b6d68c3138f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3526a7-b19a-4cf1-95cc-5a6a3dd4f004",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89711a5-3b49-40e0-a635-0550a4d9db4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bca7677-22a9-4e2d-9cfd-311afbcf1b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d58401-8a6e-4685-aefe-730d990eaeb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1c973c-a1d5-44e7-9662-a10710b48208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddae180d-e428-4701-bc68-24dc92418924",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57890a11-9c62-4a3a-9a89-2758b1186bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57781b0a-4441-4965-8cc1-a9fbaa32b82f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5db881a-9179-4084-9637-c58dfca55f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c163f7a-296e-4e03-a7b8-f474c11fd09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a47d45-8816-4b59-8fe4-78fa707b0b6a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bed8d0-2978-43e3-99c0-c7d8a0d1da32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba7bb5e-c6d4-43d6-bbd6-8de0739481ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a9d0dc-61dd-4d0e-9b1d-5bcb2e9eacd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e90f3cf-53af-4aed-9f58-05937c85daf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536f017f-2787-4116-81b5-1373481a68e4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf98112-82c8-4323-99f2-5307164e7e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10269534-e09e-431a-a062-2d10d11edbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96099f4-8aa9-4b10-a571-bc49e318c6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7f7a73-f760-473e-88ba-bd0d37c83823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c39cf50-92d6-4c59-80c0-c0db86ad118a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740391a9-1fc7-411d-9e50-b323230367c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e51038c-e395-446b-90b3-2d6cc75572ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118eb321-bf9d-410a-ab6c-e87c14e37ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3161bb03-fb23-47d1-986a-3ffc773e8eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e40042-2739-41df-b7fd-d99cd2bef3f9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bd17a8-05da-4613-bcfd-752efe09ef28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c55a89e-4e48-448b-891a-f16520941d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591a9772-e79e-417d-b890-4c5e03a0a618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8d2aee-faeb-4392-bf4d-4e14b266a17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71364419-cb9b-45c2-a9b7-f62f9f2a07c3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b61505-2a1a-4d21-9d2c-6ce9f3d6c423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799a9adc-4537-4073-99d4-e60b1b4e87c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17f8583-224c-4e71-a4a9-31cc1040f37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877dccfd-3faf-44ed-b69f-520be20b5f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b54b92-e8e1-43e9-b212-3a66e7de0639",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354d435a-02c3-4286-97da-c6005dad7546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da8a1b1-c12b-4e17-a272-3c904902cf2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afb84a1-6026-4a0e-a005-739268a96843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2103b1-43c0-4d38-ac85-7f13a1334a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236a9a76-9fc1-48db-9727-fa0c36dade97",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd86146-461f-46f0-833c-bb0e7d2e32f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450dce67-80f0-463d-9ec1-400e2abb5fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a808271b-16e1-4ee1-94cc-db49da1d6903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083edf80-c1d5-490e-a873-b3850b5ba1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd6a12c-5cbe-4fe8-a6e5-de3547f10273",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e32af97-fcb6-4be0-b0a9-1d65704e875b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527d50d9-4e3e-49df-a40a-afadab6a6faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652afbbe-542b-4b24-9567-c7186e511c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76566626-e8b4-428d-bc73-df202abd7c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dc1887-e461-4533-a601-b08002985a98",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c6438f-053a-4f2b-8b0a-5ef1ad524c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34015af9-86f8-4a66-95dd-a2b9310f5e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d54d282-0a2a-41d4-878d-50cfbef95358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74444e0-9367-4229-a94b-0a514a7526fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819bca96-0a78-4c2e-ad5a-db4d8f4602d9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62498f82-134f-4d00-b395-8f2d0824b103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95e71d9-79b1-4f60-a2f7-01ca35b6111b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa33c3c-666d-480e-b0bf-7620bcf74d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbf93e1-d0c5-4e70-8206-14d85469663d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b99083d-0339-4c4a-ac96-b46eecacabcc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5140b9-8b46-4dc0-abf3-1cea3022ff5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f342362-e456-45ca-bcb5-5f988e64c3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564da0e5-2eb4-41b3-b71b-ff82c5d07dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5077e236-d494-45c0-ab37-918011973e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7163b9d5-b95e-442e-83b8-736d1057653d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d092a95-2f50-457e-9efc-c4a7060254f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d69f3d2-040d-4f08-a7e5-c74fb6f54eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff7b175-c70d-4935-bdc5-a48df1282eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e3a20d-5b7f-4617-a26a-91f5e7d66ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a10cd5-df13-4bfb-a046-25bfbc43400c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e87af38-de85-416c-ae64-874b519e130c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3701376-4e97-473e-904d-c73dfff15722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8ee02a-f976-4156-a06d-cc6709f9e1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54582013-c199-4975-a3bf-ab945bd74752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529c540b-1c3a-461d-abc4-8b3ab4356f8b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5caac0-1b45-4c8c-8006-e8d14011feeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2ec30b-0ce9-430e-9040-aa9f2ebfd80e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53259d48-7715-4893-b9ea-2779e98f42a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ec2ac3-6a13-4896-962f-adb9a5578d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4d6be9-b535-4434-89d4-67f106ce256a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5efb8b-f3c7-4750-be8f-6326e6f3d81c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62551c2a-830a-46ba-ab5f-2830f857a468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de37e75-6798-4a60-897c-e19eaef91688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6eafa1c-179f-45e5-994d-28e34ec0d781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4298c736-923f-47c2-87d3-e2a5f36ee569",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb83fba8-c88c-41c4-82d3-7335ebdb3b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e87d4bf-af6f-4f39-b553-b61f13ae3cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de65f3d-b03c-4c2a-9e63-15b6ec4e139a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e98f447-281b-40b8-9cf9-507dd20d96f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31d609b-e6be-4450-9321-0edcac9eacfd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb93cc8-e1a6-4ac8-8c3c-74ef51a30ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf27e51a-291c-4897-b856-fcf85e75ab48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcfe9e3-b93b-4b98-9ca3-138be6f893dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191e7268-9532-47ee-8a11-31847396be67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd10938c-cf67-4ef0-9dee-20c15adc4603",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc62c81-9f97-403c-9b20-fefff5099065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "045db2a3-ed67-4255-8ad1-89d743105c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a58ace-e406-4042-a5ee-bf1ccc91cf41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615bd1c1-f75b-4be4-999f-b22a7d17843f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f67cda-617c-457b-8c54-29931216cc8d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d12eeed-93d1-4fb3-9272-151e7566e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79632784-59a4-4a26-a8aa-f6b1fc90a48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb09cfb0-340b-49b8-98a8-75b64507cb86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7deef564-d099-466d-a233-40878b284628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06494872-2a04-4c7b-868a-030e237b6b88",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8405e4c-41ed-4b19-89c9-99bfdc9caf10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b443052-e5cc-4270-935d-602952c448ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fecb94-1259-4bed-92db-3c1eab71bdc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae4b08f-ecf4-4baf-971a-964224235449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75725be9-df56-47bc-a3d7-aeee9d98895a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8e7893-38e4-44da-99bc-20575f839b8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "496eb40e-977f-4a80-8b16-9a9bd8ffb4e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9ee9b4-7e88-40f6-b196-005c8e5bdf24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac41eaa6-43ae-46a9-a170-22a7a9ccebef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54443d8-0beb-4224-af19-047d9d916918",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24af8060-4c3c-46c5-88b3-e74048305978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb71b65-2579-4f7d-8f42-8d4a54da4da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c345798-ae52-4bc9-80f9-ffaa3a5fa8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885b99ef-e2df-4dcd-8f3b-e5c305f6d49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ad6400-d4da-47bc-bec2-32859ee98124",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b67f6b7-dced-465b-921c-cc1761fab4b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d499c2b0-15cf-44be-a1d1-81054d71eb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2910497c-610d-477f-8ed1-22c8ecc60f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f01bb4-1826-40d4-aacf-b0ea547d2d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da62092-c38f-4f53-8095-9bae7f4f4be8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbcf456-a8fd-4b43-aff3-8af4ff934b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f8a1e3b-d7e1-4d00-85da-865ecca6df4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f5b6c4-1e3c-4005-9983-b6a92788e38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f61a06-026d-4086-ad80-bdb53a84d52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cc21cd-8e8a-4f7d-8bdd-792e7e9fae5d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f7fa42-c5dc-4104-b512-baa66c0c2dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77cb3dab-098c-450e-9633-7ff15fb52f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78a3bd9-b6a0-41c4-b9bf-7a8c6d88dd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c79ea3-4e7f-4ec9-af78-eab4cc7a1b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f0fa13-4f07-460b-9b4a-3f57244af761",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d10490-fb30-41e4-8963-8a7e69e912e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b995504-164c-4973-8dc2-4140cb4b28b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c842340a-e842-4b42-a24f-fcc09d6f8d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5853c0a-dea8-4845-aadf-f054c2000dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af70e37-0df4-40cf-b66f-88b486b87fbe",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a83bd1-1108-4506-90e2-82e426b73f5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4f35b21-8fca-4cdb-b103-0f56b5a9c004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a291da43-19ff-4443-a08d-46708a8da08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1695d36e-c8db-4a7a-91c3-77b41027b1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333e5a8a-3113-4eb9-b874-f5bd76b8d04d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb7e3b7-b09c-40ec-8413-9c015634b86a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0fad2f0-d304-4a22-a1fe-f392524c5c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6a633b-d4d4-489e-bbd8-119a006fc199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add2f229-95d9-46bd-8fef-adf0d01f3b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69b8a8b-7244-4735-a3a4-bd0dd822b3e3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbdb2c1-cdb2-466b-affd-ac104aa02086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4975ce-eb24-4f17-8d7b-069ff693f0f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b6d86d-81d9-415b-b6db-5f5bb76135b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af371e0c-1eed-4c7b-b656-283f89853dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e9508e-8c08-47f8-912c-851f37b6a89b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53344aa9-2b6c-47d3-939c-b17e95efed88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "761e60b6-5b3b-459a-aa6b-7e74ee007065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6907c6e-f022-42f7-8e68-744770376af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd07960-cc2e-44e9-a3b3-1c08d5ecba03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b1a79e-904d-4a2c-962c-f696d1bdca93",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a618cc-cccc-48db-864b-3cd7e74434b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82ee1bb1-dc66-48ff-a34b-55bcbce2af45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b74a617-346c-4127-bded-c986e7e2427f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452d6f6a-730c-4959-87a1-3a8b0b0580b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56db66b4-7451-4da1-b3f3-8f5a55be8a84",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349edacb-2aa4-488e-9b17-ba5bec99d59f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5231df97-aaaf-48f8-8dcb-bc8bf40fa6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26e0cf9-96e4-42bb-af18-00bd95591d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07934c0-6845-43fe-9544-cd69d7c00dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab61915-2481-4942-8eac-e0276499f923",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21088bd3-644e-4590-96e0-60a61f1dc943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3aff46d-99ba-4007-920d-124fceb19ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d0acf3-b4ad-427e-ac5c-dfaff1e11e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68527fb5-6c13-488f-baf1-ca8192628a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7a3abf-49fb-4a55-9c18-c7e8a3cb6776",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d45b52-4f5d-4e9a-be33-6609c1433a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700103f6-5a7f-4041-a57a-821e72752381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92eee16-b151-4905-ac43-5e9bf2107219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8dac6b5-7dfe-4cd3-b644-36fd73bce6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430eb1f1-92cb-4002-9c61-d014bc610f6a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1031f5c8-fad9-4681-8c91-cb552a6c6bc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb90227-aaf1-4e74-b0f5-c200055f7a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe64531-8c89-4b0e-a1f4-c1caae75309b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89caf59f-f111-4761-bfdd-e0400da496b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4511ad0-8e78-4dec-9ff1-2bb5f524b5ca",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe51384-eb47-4cb7-8840-7279a04c2dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30dcfe66-e60a-4982-b27b-2c0f2392b3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9d42c0-3717-4875-8c6b-2be37c576abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9841d3-e267-4c29-8f3c-2d572ecedce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db3a3f1-0eba-4535-bbdd-98c0539b5071",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc568ac-38de-4b67-873b-89bb0d82d347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42f5e2aa-7839-411a-a715-bb6290b45816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb42c4b6-8a82-4b79-a9f9-4dca5ac0cd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c9095c-5c22-4768-9fb4-8c620708e706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dc3258-d127-4c88-a14a-c5d1c2e1d0c5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed241eb-dea5-486c-bdf4-17974c5a53c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a34e4a3-3811-4b62-889e-ab868b7725dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef937f9b-cf24-4ccc-b97b-aad8c613bd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5517896-d9e2-4ec4-a0a9-c8dc9cc451f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518d6be3-a6b4-4d88-aa03-e13cc4a9e518",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b984c6-2551-405d-a2ea-21789adf3106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f90a11b8-cb77-4bbb-9f6a-472eec5bf1ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d830dee-d56f-4a44-89be-f3d8583b9250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9286270-93c7-4897-8b9f-a81eba51d33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b315245-134e-4b41-98de-874c4867330b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46915b6d-9188-48b5-9086-b5a87586b07d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d27f4e-45dc-4852-a868-eddc26a5c699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f1d295-09d9-4fb6-afb7-348a0cf49e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d007cde5-5182-4712-9f5d-b7166f8e0965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93318e7d-88c4-40e4-acdb-f516e1c0b448",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7185a573-c378-43a6-a7b8-2163c3ff106d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "343eb308-634d-4782-8870-3defbd479d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980ab4e3-9418-4626-8b15-63375f293c94",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb066cfd-ec12-4861-aa07-6c73388ed887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4361b22e-3ea2-43d7-8606-c40a83d3352f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224c05eb-c0a7-4521-95a5-f4f04eca69fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d87f783b-168f-48bf-aec9-0f5f95a639e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261cfe00-08e5-4fd2-8efa-2f3bed4e085b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa369352-7d3c-4466-8d6c-3277243c540e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3136a8-9527-444f-b6e2-6eeabbf5fd2a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bd5b50-db4e-4d5f-a1ba-db2086b084ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "630512ab-9eda-4d99-ad47-8b4851c99419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71af83d5-ba4b-4838-86ee-a844977f6f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5171b12c-d1c7-4a61-b947-7c5b949841d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78937c6-6fbb-4783-978b-c5dd70f7c35c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c74e739-0ba8-4ddf-b292-a7227ee702e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cfac726-b0ae-46b3-8194-f09489d990c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e213f2c3-a22c-4733-9cd5-9024f172a366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0531b2-5630-4f89-a836-bc98b07683ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058d28b0-7390-4258-9eb9-9874b4fb4024",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbdc6b5-2cff-4f38-8c88-987d78b31e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a01882ee-14ef-44b4-ae93-2095e0382ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e853d74-5831-4e00-8001-ad22b67bacc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff5f906-b8ff-45ee-b7dc-9b951c0f3cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dea9cd-ab13-4def-8eff-0df3ba52eeb5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd5c5f3-b343-4d4d-b1e5-7cdc54625a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe74b57-3321-4717-bbaf-a9bbf2a69a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037ea334-15b0-40cd-8916-2b9700cf43f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e69419-b6f8-4442-a332-95c3842754ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3843d4c1-e2db-41f4-91fb-7fe42bc7f58c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e853b89-dd56-4f8f-a726-1a051321c1a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c8e6d5-04dd-4c9f-87dd-86a2db44dc19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a1f4ce-3abc-4dba-a4a9-4b587e63a5c3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aec7e55-dbe0-4cca-88ae-75125a564d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f8e9a9-33f4-41da-8dee-f18f9b238aa1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b7c58c-a9e0-4770-aacc-38f8c5382e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ade1362-e4d4-4bcc-a382-1dfc1f2bba72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2386e67-5866-4766-a350-5becfcadf10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55da747-1a42-4b8e-876c-f6c7228862c9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "627c3548-d527-43ea-beb1-86964b641483",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47461087-c8ea-4ed1-813e-d193fc61e47e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0629aee1-6ff6-4911-82b5-27c0901751eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c333a303-e6e5-4f89-b31f-4a15d3d1e794"
                    }
                  }
                ]
              },
              {
                "id": "22608f34-5626-4b97-8995-15f3f17e2c7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e942f079-1b2a-4c8c-b551-f157b7eea592",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cb6c9f-5be4-47c8-bc40-3d122cbdfa43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5473ae64-4909-48ba-880a-abbcaa2b61e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed50411-4658-4d94-ac21-58e7518a717c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1e642e7-3966-4663-ad1b-924047cf00b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1936a5f-8edc-46b0-9306-6f984ed278d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4b24d24-2e0b-4c64-89ec-f578d611ad48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9cb637f-6ddf-4b6b-98d0-151028ca4aaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46e68a1f-bd93-4d8f-ab73-e1adc42766cb"
                    }
                  }
                ]
              },
              {
                "id": "808053fe-804b-4e04-ad5b-76a974dd17fc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "16c94913-b7aa-426a-9802-4eb815c4f85a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627a21c1-74fc-4362-95de-f698a0f28cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "11a96578-4640-43e3-9eef-fa05290fdd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d75abf8-21e6-4cce-86d0-00673b603ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8022c286-24c2-4178-a8d0-df3e8a043246"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "225d1422-9c1f-443c-a05f-2973aebc8422",
            "name": "Positive Testing",
            "item": [
              {
                "id": "636531d6-1d25-4b52-8a25-2511634efa13",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1b44448-9fba-465b-9698-088b67ec0e5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "07fa7ee2-b8be-465e-b299-0cf420a95729"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ebf4930-f10c-4f15-9c45-0dc5d4044439",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b870798-4723-4801-9f8b-4cb501fde6ce"
                    }
                  }
                ]
              },
              {
                "id": "fe99d655-43eb-40b0-9305-d792b5ef0cd9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e7f8a4e-e751-4aa0-ac93-3c73e5fb53ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a4c235ed-8ca0-41a5-b3cc-77c56aaa2fda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5323d743-a2b4-437b-a410-9c7efb97fed8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a47d840a-75f5-42a6-9233-4cd9e6099672"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1250333-ef75-4f83-997d-f2ac4cdeb1c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "85e533fe-c742-46bc-b656-0754689491d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52cc4c66-5faf-4b7c-948c-5a03af12fee6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d5492c3-dfea-409c-a6ea-38d8cdc2b79e"
            }
          }
        ]
      },
      {
        "id": "a091f541-d80e-4fe3-b442-93628049eeff",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f1adce34-3da3-46e4-9391-2c39618f8264",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eee4e1d0-2076-4970-853a-0dd2aab07f6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c28e603f-183f-419c-8bc9-55dca1190d1e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4e3ab1-cddb-45f1-84ef-630b60e6e95f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4e78ac27-d969-4fc3-8b5a-b7f3b5bed8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8f47bb-ee06-474e-a9cd-908737f3e448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a12ad146-6760-4f32-892e-ce756de2db20"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fda90d3-05c7-4a38-98e1-8eacf9186db9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "debd5925-f6be-4410-b17f-83ea1c1cfc95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57d2309a-7fb2-46e4-a717-7c01095100e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec104976-3184-4fc2-a1ac-08bcd80521d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "231ac25f-1673-45c1-8b26-98bcd5c475a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b131de00-d9aa-4031-84d7-6088edcab473"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4b6503a-33ea-4a0d-a1af-33c0e25a444d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97f1a0c8-570b-4d5c-b028-98cedad6a944"
            }
          }
        ]
      },
      {
        "id": "b3fbfcf7-6f95-4326-b45d-a8fe48e1dfe7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5e06bd1b-a4df-4283-8862-3e551d9396b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c877c3a1-1b8d-4420-8613-0259693c4d07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42fbfb70-695b-498d-84c2-32b61157dfee",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673af9cc-d529-4956-b304-e9c4e8087937",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7291dcdb-dc3e-437d-bce5-0c6b49ebb3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be946c64-46e4-45c1-9e3f-2bb0a96c897c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9858a67f-a743-4319-b328-941426c90849"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b209f62-d83e-4450-a465-3d6cf8048863",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0be7e9f7-9ccc-49ac-99f3-1d72733015ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "403a33d6-d398-4d71-b38c-0760d51687b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "185be77f-9d0c-45c9-a120-04905aeacac8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfbeb088-70b9-4d28-9648-e2d82912ee25",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c5b2fb35-d0fd-4e4d-948a-020277214649"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7198e3a8-4aa6-4394-80b3-a2bcaddff363",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b760bef-f528-4af4-909d-00d1de0239e8"
            }
          }
        ]
      },
      {
        "id": "4dfb0f5d-2b19-4dc7-b7fa-cfca7f3162bd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d5cb20f1-278c-4e86-8e6e-14781d547ba2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1554aa5a-7be1-4e29-961c-2f0c01dbb4d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28d64da6-e9c8-4883-8c68-ceb55361a912",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7940d9f-c382-4a81-9a74-40f631f7f69f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb2538a0-25e8-4ef5-a133-184829391792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b95c131-917f-417b-a708-5d2e9d2dc5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "970ffe08-e8bd-415d-aa57-92e48d80f908"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f8e1af0-ce68-4829-ad7a-15c5ffd28086",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93a41826-493e-4d81-8d50-a5404af6d34a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c81d114c-e4fa-4c10-a454-498a0d24b9a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f138b40-f9f8-484e-953f-d30847027470"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e508049-59bd-4939-b609-277264a407ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8aef1d41-12ca-4bde-9565-ee6bca400bae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdc0e017-d9f9-4a00-9ce0-234fc777bf55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afb08f79-e679-4341-be6a-a050a714092b"
            }
          }
        ]
      },
      {
        "id": "46bba28b-fa37-4f1a-bc30-6fa8b2587755",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19d97738-0c3b-4390-aaae-f3c096668e2f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7fab274-dbd2-4894-9c27-186e12f3aaea",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f47dafa3-2f5c-44a9-aca5-54e12f65c516",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5aff2453-a0cf-45f3-9d54-62a92b41918f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b211e5be-b88b-4643-978f-b96668fb5f35",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 30.34523809523809,
      "responseMin": 9,
      "responseMax": 239,
      "responseSd": 22.6180294257046,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715646984702,
      "completed": 1715647000670
    },
    "executions": [
      {
        "id": "af712695-afe0-4ae1-a31f-81f05e0b4e1b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c61e3ae-b384-4c09-b2bd-42b20094011a",
          "httpRequestId": "caa92fe4-19c5-4da2-a36e-5b14194172fe"
        },
        "item": {
          "id": "af712695-afe0-4ae1-a31f-81f05e0b4e1b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "54091ea2-7c8c-4b5b-8b5a-dd63566b168d",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "9555bf91-c625-43e5-b3ee-a61523828d03",
        "cursor": {
          "ref": "84de1185-e6ec-4858-844e-458046d9394f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89c92c75-bea9-477d-af40-02651326538c"
        },
        "item": {
          "id": "9555bf91-c625-43e5-b3ee-a61523828d03",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "33ae76b3-039f-4676-b634-890445d91f8f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "d50c2b20-9a3d-4a23-9cd5-b80ac931b83c",
        "cursor": {
          "ref": "79439539-2209-4dbc-961b-ec187d2a6ec6",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ad34265b-7271-4619-be0c-6156dd1e8a9f"
        },
        "item": {
          "id": "d50c2b20-9a3d-4a23-9cd5-b80ac931b83c",
          "name": "did_json"
        },
        "response": {
          "id": "47f848c7-f37c-418f-897b-56fcd8e25f22",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8166f73e-1eab-42a1-9efd-66d3ed2c352d",
        "cursor": {
          "ref": "aac7c096-38df-49b3-ae75-95929ff5b931",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "27fbfb1d-c564-4576-9bd2-954cb10d78d2"
        },
        "item": {
          "id": "8166f73e-1eab-42a1-9efd-66d3ed2c352d",
          "name": "did:invalid"
        },
        "response": {
          "id": "7a6e4483-b98d-4f7e-a306-85dac61c4751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8166f73e-1eab-42a1-9efd-66d3ed2c352d",
        "cursor": {
          "ref": "aac7c096-38df-49b3-ae75-95929ff5b931",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "27fbfb1d-c564-4576-9bd2-954cb10d78d2"
        },
        "item": {
          "id": "8166f73e-1eab-42a1-9efd-66d3ed2c352d",
          "name": "did:invalid"
        },
        "response": {
          "id": "7a6e4483-b98d-4f7e-a306-85dac61c4751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbd6582-213f-4bda-b6fe-13625ca631df",
        "cursor": {
          "ref": "df4b712e-0617-4a8f-94de-fec70c754e32",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5bc88265-a132-4a8e-8db3-edce7c164447"
        },
        "item": {
          "id": "9dbd6582-213f-4bda-b6fe-13625ca631df",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3d7e973f-b5ad-41c4-b212-a2cb076ece8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 183,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4e7174-4d9c-41b5-a9f9-9d9818112a49",
        "cursor": {
          "ref": "5408488a-c37c-4dc9-8a95-5c93fcdabe38",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8d53de22-ea45-4745-bc3d-d4ee4efbc82c"
        },
        "item": {
          "id": "6d4e7174-4d9c-41b5-a9f9-9d9818112a49",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8e4071db-fbfa-489e-b888-b49fa73d4b09",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90054827-c5b2-45da-b4c4-c7bc2db6f866",
        "cursor": {
          "ref": "7990e462-d3e1-43ff-bbf0-f9f6fdbd0f8c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "596261f1-65a6-4294-a229-316f1b30a9c1"
        },
        "item": {
          "id": "90054827-c5b2-45da-b4c4-c7bc2db6f866",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f1083320-bcf4-4163-bd85-78933b519448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3ffa1b-e19c-45ec-a49f-a5d7a65f0bf5",
        "cursor": {
          "ref": "2ddd4a0a-5de4-474c-b2d9-4eaaa912adea",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ccee6c56-4dc6-4935-a7da-723171bd0bb8"
        },
        "item": {
          "id": "0a3ffa1b-e19c-45ec-a49f-a5d7a65f0bf5",
          "name": "identifiers"
        },
        "response": {
          "id": "463f2bb3-cb01-483c-ae6c-4fc6b857b9c4",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d64141-4b31-4505-9e87-41667f0afe8c",
        "cursor": {
          "ref": "b152e764-875a-4e85-aeb4-0283449b0480",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6aac7a0d-5f8d-494d-89ef-7546386f8ffa"
        },
        "item": {
          "id": "89d64141-4b31-4505-9e87-41667f0afe8c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3f453b6e-4bb9-4170-a2ed-afbd7d5f1593",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a33e3a4-f2bd-426e-8251-790b9f3195e7",
        "cursor": {
          "ref": "939bc353-891d-4e47-ad90-391f7835df28",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "761bec7d-e405-4789-b9f6-911b6a7a9a41"
        },
        "item": {
          "id": "7a33e3a4-f2bd-426e-8251-790b9f3195e7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1110f1d2-5969-4c02-9242-d79027f7a9d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b80b1c-6518-43af-a497-8ff060192009",
        "cursor": {
          "ref": "1c729193-d861-43d5-abdd-545dbfea1207",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cd74d2d2-a6a4-40da-9440-cf4f17263572"
        },
        "item": {
          "id": "39b80b1c-6518-43af-a497-8ff060192009",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b7e8e11d-8ba5-41dc-83ef-0724d3cfc3dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e6d078-c2fb-4dce-8df2-b658ce6003fc",
        "cursor": {
          "ref": "896365c2-5119-4db2-b15b-308ef01bd013",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2be085f1-2482-47cc-b1f9-f3e0ee8a803c"
        },
        "item": {
          "id": "d1e6d078-c2fb-4dce-8df2-b658ce6003fc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9221e0ac-9e9e-40c7-8c67-07c58083d314",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31564d5a-ff7b-4cd5-a909-086b42728e7b",
        "cursor": {
          "ref": "0953a3df-1206-4f78-822f-454cb5a71d54",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8dd6481e-c96e-4f0e-94bc-c0b3ee13388c"
        },
        "item": {
          "id": "31564d5a-ff7b-4cd5-a909-086b42728e7b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "48371730-c0db-4727-80cf-41b01575f8b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27f139a-e78d-47b9-92a0-189db95e6ef3",
        "cursor": {
          "ref": "c1f19994-36cd-4ac6-a709-f5ccde0dde62",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a775f5a4-6a9b-4c80-82ff-bbf70cd22f37"
        },
        "item": {
          "id": "a27f139a-e78d-47b9-92a0-189db95e6ef3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2f59ee75-2264-4800-a5b5-f4dd6f2215fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1082c66e-380f-4d6d-bfbb-1fa63fe810ac",
        "cursor": {
          "ref": "fc35ae60-1135-4ee6-a02a-1051736a8296",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ae6c060b-aade-4eed-bc30-52627f162afc"
        },
        "item": {
          "id": "1082c66e-380f-4d6d-bfbb-1fa63fe810ac",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b6cda4fa-31b8-416c-ae3e-c33ee15d0c44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1adb9353-6866-4977-934b-4fcb4b63d2e8",
        "cursor": {
          "ref": "68e40984-0231-42f7-9dd2-6ebc8012db95",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e21f92d8-031d-422d-9ff7-337f29ecaf3d"
        },
        "item": {
          "id": "1adb9353-6866-4977-934b-4fcb4b63d2e8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "da1cf98d-316c-49f7-8317-78e76f40d2e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbab201a-a80f-4e2c-8b22-d92804c1c57d",
        "cursor": {
          "ref": "f3149cdf-98e2-48f8-8f78-81f4da817a99",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3b014b34-5a06-4520-869b-7d8f81d1e78b"
        },
        "item": {
          "id": "fbab201a-a80f-4e2c-8b22-d92804c1c57d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f6c00bc8-b767-4740-b854-dd41e25057df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af943729-8af3-46c3-81a0-fd784fd93acd",
        "cursor": {
          "ref": "fb17062b-d0d3-4d3b-94f0-26bca40c7a2b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0b211a86-428e-4f5a-89c8-6d1855b510d2"
        },
        "item": {
          "id": "af943729-8af3-46c3-81a0-fd784fd93acd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1335adac-6b00-4323-980b-bcd2827a8ab0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ea1a4c-7c96-4473-ab28-5ceb76b2e7ac",
        "cursor": {
          "ref": "96ced617-95fb-4ee8-80b0-2f99758c1dab",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "96bacf2f-d980-4e06-bf85-2556838a9514"
        },
        "item": {
          "id": "d3ea1a4c-7c96-4473-ab28-5ceb76b2e7ac",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "37f00861-62a2-4505-9822-db55d67828ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98acdd71-94d1-4071-a6a1-d7aa4d104956",
        "cursor": {
          "ref": "175206f0-a876-4bd5-bc39-9a5a57c542be",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "94a5f9ec-4a1e-457d-a6a2-a076b1e22e62"
        },
        "item": {
          "id": "98acdd71-94d1-4071-a6a1-d7aa4d104956",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "835021a8-2c3e-4b47-a976-b951f1cd993f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e53ccb-d7f9-4a5c-95cf-f211b5f33353",
        "cursor": {
          "ref": "093c69e0-880a-4a90-a5cf-fc1550573e0d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b4bae962-c920-418b-8acd-2373ee3586a5"
        },
        "item": {
          "id": "52e53ccb-d7f9-4a5c-95cf-f211b5f33353",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "31556973-0990-4244-929e-635c4c06381b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c29015-ecc7-4985-8a47-4fc4afb48a3a",
        "cursor": {
          "ref": "4b0cb8df-afbf-49c0-b709-597667d3f58c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "057eac61-3cd7-435a-bddf-0c78ad6bf176"
        },
        "item": {
          "id": "64c29015-ecc7-4985-8a47-4fc4afb48a3a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e085402b-3f73-4534-98f6-2b3c5c1d9c55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c0dcfb-d815-4fe9-9239-4d42f49dd5fa",
        "cursor": {
          "ref": "3194d5d3-2846-42e3-96d9-ffeb3d56275b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7cbc2448-3893-4ff9-82e4-8b729950618f"
        },
        "item": {
          "id": "73c0dcfb-d815-4fe9-9239-4d42f49dd5fa",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7f36e8c5-0dcb-40df-8800-f79a2f1b9f22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11aed35-6c53-4423-b8cf-b2a84afafa19",
        "cursor": {
          "ref": "612ac4f8-b69c-47c7-a683-30b46c908f1e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bf2cb691-d970-4cd2-a1d1-8b810450ec38"
        },
        "item": {
          "id": "a11aed35-6c53-4423-b8cf-b2a84afafa19",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c71fec65-3b15-464b-8dfd-bdde1782ac32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f396511-a26c-43b0-a8a9-784f06752894",
        "cursor": {
          "ref": "6510b1b8-9fc3-48bd-8ab5-d074d03ccc6b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7dbd15f5-fddd-405b-9f1b-639fee5e93a1"
        },
        "item": {
          "id": "5f396511-a26c-43b0-a8a9-784f06752894",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "88f67f1c-e5c5-4a48-9e64-44fe68012719",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8daeb0-94ee-48ab-a3a7-52a87d41fbf8",
        "cursor": {
          "ref": "8fd53144-72da-4b52-ae83-3520e93b4f98",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6be2c425-f1c2-434e-ac3e-6583f27e8604"
        },
        "item": {
          "id": "2a8daeb0-94ee-48ab-a3a7-52a87d41fbf8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eaeb6b8a-0407-4da9-8b9f-41bc5d9f1cc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e64caaf-1c3a-4735-8f45-e0a4815df841",
        "cursor": {
          "ref": "c86ef522-5b0e-401f-af76-6f6aa4454285",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "99757335-723d-4606-8cf6-0a0dd676bf91"
        },
        "item": {
          "id": "7e64caaf-1c3a-4735-8f45-e0a4815df841",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a850b3ef-00d1-4a12-9c33-56595eb6de7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bfcc9b-a5ea-430d-beb5-eb2a87ceb051",
        "cursor": {
          "ref": "31105f07-1e99-44d1-838d-3ca6421eb489",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "10fc7069-8926-4b77-8777-d73ab6065db9"
        },
        "item": {
          "id": "b8bfcc9b-a5ea-430d-beb5-eb2a87ceb051",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bb43ada4-8cc5-4ca5-86fa-331b8a859b5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35673310-3c33-49d1-817b-4b546196bd82",
        "cursor": {
          "ref": "02e34f1c-aa26-4810-8a1e-f8e135288f2c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7fcd6bdf-5af3-469e-94bd-b9a5729ae418"
        },
        "item": {
          "id": "35673310-3c33-49d1-817b-4b546196bd82",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1cfad6db-d19a-4769-9df8-bd6f2731a19c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a223ea87-27ca-46b3-b000-737fe4b94b93",
        "cursor": {
          "ref": "048cdd85-22df-49d2-be51-914e6ab216ed",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "33222651-2f6a-4738-8a25-cff49e82b979"
        },
        "item": {
          "id": "a223ea87-27ca-46b3-b000-737fe4b94b93",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "24e1a851-176a-4517-9e71-e014518c05e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6976fb-fe33-4b81-bb77-ac8ede2e2a26",
        "cursor": {
          "ref": "164e779f-50ca-4f4f-acf6-8cc01f8e43d0",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "67a34e51-c523-4699-b734-e900d60dd67f"
        },
        "item": {
          "id": "1f6976fb-fe33-4b81-bb77-ac8ede2e2a26",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dd3e6b43-02c2-49e3-a533-3d6fe2df9870",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87959c0-05bd-4398-a6ca-6e26099e1c2f",
        "cursor": {
          "ref": "d664c535-8387-4906-b016-86e5914d9d70",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9ccede25-f47f-45c2-8dca-d0d0e6e9be5e"
        },
        "item": {
          "id": "c87959c0-05bd-4398-a6ca-6e26099e1c2f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "689c5cb9-e094-4727-aa26-f6b8fa31852b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af5fcd5-f2da-40d1-908f-cde229025ab7",
        "cursor": {
          "ref": "f2c5e6a2-03ad-41e4-a5b6-c24597cfaacf",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7ea65c21-d607-4dac-ac23-57a645dcaccd"
        },
        "item": {
          "id": "4af5fcd5-f2da-40d1-908f-cde229025ab7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b56f0c64-d180-4e87-8f80-096a4f43564a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11aa0911-7e4b-4137-b872-c84747c74d20",
        "cursor": {
          "ref": "48368620-47df-4346-9e97-72ef44ea7ef0",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a2a24255-dced-4fd5-850a-ba787927eda1"
        },
        "item": {
          "id": "11aa0911-7e4b-4137-b872-c84747c74d20",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "38e6de71-0e61-45e5-86de-090808539b01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f137288f-8945-44dc-aaf5-e14c06e6562a",
        "cursor": {
          "ref": "46df4c12-14aa-438b-9248-4cdc8c35349e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "14f781fb-d28c-4988-b89f-3fa25cba1668"
        },
        "item": {
          "id": "f137288f-8945-44dc-aaf5-e14c06e6562a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "09072323-56c8-489d-8dc3-af44e5d82ff6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ec1213-f973-4fa8-91e9-cec508d1396e",
        "cursor": {
          "ref": "9801a339-a726-45d9-b3a9-1857da18e929",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "52bd9d88-0106-4edb-8c95-ee645b93595c"
        },
        "item": {
          "id": "58ec1213-f973-4fa8-91e9-cec508d1396e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d7375c9e-59c4-43be-8403-0cae25ad9fa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79191822-2319-4d59-80de-0c6cc6eeed9f",
        "cursor": {
          "ref": "be87e4e9-3538-437d-8111-09741eb0b0c1",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "86fd7ca0-ac41-495e-9c33-cbdb282df12d"
        },
        "item": {
          "id": "79191822-2319-4d59-80de-0c6cc6eeed9f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "622a2555-3df1-473b-997c-a9e879b92a41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4c8852-2689-4014-963b-c1144eb5fe90",
        "cursor": {
          "ref": "5f0223c9-6300-4834-8b95-a7ddcc935e72",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0ebb4f15-c774-4c19-81fb-21077b98f14e"
        },
        "item": {
          "id": "2c4c8852-2689-4014-963b-c1144eb5fe90",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2dd11e4e-e727-443d-9531-bbb52a9496ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3468cc0b-9541-413c-8f46-599186578936",
        "cursor": {
          "ref": "6a5b1acf-7a8f-4745-8491-80645762bd18",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1dfa3184-8a5f-48ba-9840-ce57bc6f1af8"
        },
        "item": {
          "id": "3468cc0b-9541-413c-8f46-599186578936",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2564ca81-fa54-460d-b527-45b2fe17fe7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb5e3f5-ae9b-4893-9011-f254faa14d42",
        "cursor": {
          "ref": "8f082055-2b1d-410b-9130-997cf56fcbd2",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "03f15ed0-46d2-4082-acf3-3777670a9a1d"
        },
        "item": {
          "id": "ffb5e3f5-ae9b-4893-9011-f254faa14d42",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e85b773f-d22e-43f0-8033-7a9bbd43bd44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76077df-a444-413e-a2bc-82dfe86a4e00",
        "cursor": {
          "ref": "efddf802-c1ec-4498-9400-f5c5c5810f67",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8d475ba7-d4b1-4307-8c2d-e52d313760dd"
        },
        "item": {
          "id": "d76077df-a444-413e-a2bc-82dfe86a4e00",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "586cb3bb-5851-45e5-bf5d-90916442d52c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52392630-2d97-4cb7-9f05-5e18a68eca1d",
        "cursor": {
          "ref": "b8d347cf-68f1-4ccc-a432-5b2375cc94e6",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3524b53e-3a8c-459b-a76b-fcda6ad3893e"
        },
        "item": {
          "id": "52392630-2d97-4cb7-9f05-5e18a68eca1d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e2c519a2-746d-4f0a-8ec8-19983d082f88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb06902-dc05-415d-930b-d090c0d79257",
        "cursor": {
          "ref": "f30161bd-2151-4642-87c7-7c3465400629",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c6a44d65-fa8d-4d26-9a24-686604bfa9e2"
        },
        "item": {
          "id": "beb06902-dc05-415d-930b-d090c0d79257",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fb1898bc-80ae-4e3a-950a-5998e4d9ecfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892bdb02-0d10-47a7-83f9-136bf600609b",
        "cursor": {
          "ref": "37588410-7044-4b07-a5dd-9baf680bb612",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c115982f-6429-4089-8c35-14cab0f78324"
        },
        "item": {
          "id": "892bdb02-0d10-47a7-83f9-136bf600609b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f1ca33c0-1270-4373-b2a1-0d0be34d635e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dfb59c-3c01-4bf6-933b-2352c28bbebf",
        "cursor": {
          "ref": "e5a6568f-bd87-4a0f-ba2d-0724066db7de",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f73426a8-0aaf-4be3-8fab-496cb61fd850"
        },
        "item": {
          "id": "95dfb59c-3c01-4bf6-933b-2352c28bbebf",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49712e95-84c3-4cfb-9e25-abdb6b145693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d012494-71e9-40b8-bac4-1140c57ffd3e",
        "cursor": {
          "ref": "b5f44ebc-9960-46f2-914e-9d11aa066d57",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d78b8d6b-62db-40e1-95eb-58f5b225b374"
        },
        "item": {
          "id": "3d012494-71e9-40b8-bac4-1140c57ffd3e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3d8275fe-b212-484d-80d9-06547450a277",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e69f04f-9be7-47e7-8188-b74778b4f924",
        "cursor": {
          "ref": "30c63aa2-863b-4656-94de-d8ee41eb3c3a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "06eab72d-a408-4966-a63d-f1da5408f050"
        },
        "item": {
          "id": "0e69f04f-9be7-47e7-8188-b74778b4f924",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b15f5069-5b86-4a22-aceb-df9d38952837",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26e132b-ac4c-4bb0-9a55-23696f2b19ee",
        "cursor": {
          "ref": "9ebaecd6-01e7-4e39-8cc5-26ea9e04c8da",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1d94db22-bfa9-4837-9c1f-3cf54493a2ea"
        },
        "item": {
          "id": "c26e132b-ac4c-4bb0-9a55-23696f2b19ee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "52f13a7a-1c3d-4116-b3d5-c31d00a21255",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e98bd3-bcb7-4601-948b-4bbf7621176f",
        "cursor": {
          "ref": "56e4b2ec-43af-468d-af11-7afa73b33559",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "eb01cb59-05b3-40ec-a650-e7cebd5eed6b"
        },
        "item": {
          "id": "91e98bd3-bcb7-4601-948b-4bbf7621176f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "844c39f0-71ce-4cf8-8961-4e67f551cc3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df3fce4-2785-4bd5-bdb8-2c3402701fa3",
        "cursor": {
          "ref": "cdde7f17-e2fc-403b-9951-28d042be2e3f",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d4b4459-0e13-4247-9b72-6cc7b9f1ae34"
        },
        "item": {
          "id": "0df3fce4-2785-4bd5-bdb8-2c3402701fa3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d1b12ab4-8e6c-466b-b798-f884a8998ecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17791637-e2a5-4507-9d6c-8b0634d9313f",
        "cursor": {
          "ref": "514646a3-375e-4027-82bb-47b0076020d9",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "08923a54-2677-466e-bf10-eef6c04ac3ed"
        },
        "item": {
          "id": "17791637-e2a5-4507-9d6c-8b0634d9313f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cabe95df-98f3-4905-9503-cab70fa34fd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66739c57-3881-451d-8691-f82f72436a36",
        "cursor": {
          "ref": "dfd764c2-be8c-405b-8b34-fedf00802293",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d4bf4d15-8b1c-40dd-b246-e858527a635e"
        },
        "item": {
          "id": "66739c57-3881-451d-8691-f82f72436a36",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b18e886c-9156-4373-950b-cdee4d58e788",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975f5783-daa1-4da9-b6e0-7a7da72ccdcf",
        "cursor": {
          "ref": "56e4f122-df35-4859-a1c7-a9f18043f15a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c890cbb6-3401-4296-be50-11c37948edaf"
        },
        "item": {
          "id": "975f5783-daa1-4da9-b6e0-7a7da72ccdcf",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ac6fdb2b-c51b-4906-8d41-123c24a2364b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8115b6ce-8e23-42e2-9077-5ae8b65fe370",
        "cursor": {
          "ref": "c993c869-439c-464b-9b9e-b0181562fe90",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a94c5f98-9df3-498d-a40e-5d193b8b2e74"
        },
        "item": {
          "id": "8115b6ce-8e23-42e2-9077-5ae8b65fe370",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e3e1f6e6-e50b-425a-8939-e824536f9e01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d477fed9-4e51-4afa-a35b-26cd5e36e70d",
        "cursor": {
          "ref": "21f2305c-1d7b-4923-bf1f-6ee040021b93",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "723b8c94-e118-4777-b86e-040a6aa34e24"
        },
        "item": {
          "id": "d477fed9-4e51-4afa-a35b-26cd5e36e70d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "085c48fe-82af-428f-adb6-7ab28d1673ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5867c89d-3859-4200-9f3f-768f766a2c7c",
        "cursor": {
          "ref": "0cc60e0b-231a-4d7d-a8e4-b5731c58bb85",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2f4469b7-2c07-4854-a1e3-b6127f9dfb16"
        },
        "item": {
          "id": "5867c89d-3859-4200-9f3f-768f766a2c7c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8f5203d6-7059-4adb-9b63-18fea2c97050",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776f32c4-f3a9-4dc8-86bb-7dbd1e761c7e",
        "cursor": {
          "ref": "de1c3070-e969-4f3b-b4c3-f87805b16e5f",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "939ff9fa-5c75-4a86-b322-d6135745faf7"
        },
        "item": {
          "id": "776f32c4-f3a9-4dc8-86bb-7dbd1e761c7e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fc66c1a7-4007-4216-8a08-8292a6f423b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e5725d-3ed4-4b26-b0dd-9c905d105571",
        "cursor": {
          "ref": "be246420-cc7d-415f-b157-91c36e026933",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a0d71ef0-e3aa-447d-afff-a257e08a6741"
        },
        "item": {
          "id": "17e5725d-3ed4-4b26-b0dd-9c905d105571",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "841c925f-cdd1-423b-9e67-10dd85aa3c86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c956a4-c47e-444d-a6aa-acdd1c8d8655",
        "cursor": {
          "ref": "c39d82ed-533e-4c84-a0e9-a47e6c9dbaa3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6f0f5a42-0806-4005-bba6-8e807185620a"
        },
        "item": {
          "id": "72c956a4-c47e-444d-a6aa-acdd1c8d8655",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "74557452-b050-496c-80f6-d08a8feaf28f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cb96b8-51c5-418b-b6b1-8dcaaaaaa650",
        "cursor": {
          "ref": "77d063cb-35cf-4a12-8bf3-66546ecb4732",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5768c2ea-7a6e-4fdb-be48-026798175262"
        },
        "item": {
          "id": "a1cb96b8-51c5-418b-b6b1-8dcaaaaaa650",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ce4cbf9f-9007-4960-9e84-655766a5d8bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32be6569-5b9b-48e5-b14c-4b69bb98af71",
        "cursor": {
          "ref": "ae90609e-94b9-4e40-8da3-591f92a6010e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f6dfd8f6-3778-4451-aa56-7a77d0c87ca6"
        },
        "item": {
          "id": "32be6569-5b9b-48e5-b14c-4b69bb98af71",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5f2007bf-4fd3-4d78-8052-7faea3c09f02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9be6f6e-706c-4e60-b2c2-cfb9990bdc85",
        "cursor": {
          "ref": "0bd0dd03-913e-44f9-a4bd-354bb1086ac3",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "18ace096-8c11-4c69-92b1-caf1f9061d2f"
        },
        "item": {
          "id": "e9be6f6e-706c-4e60-b2c2-cfb9990bdc85",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dc2386fd-7b04-468c-b4a7-170fa6d2b980",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25236635-67c5-453a-b27e-3359f28041b3",
        "cursor": {
          "ref": "6e792c54-8447-4d69-afdc-d9521139da40",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "05ab10b3-f30b-43d4-92fe-01a7bc05474e"
        },
        "item": {
          "id": "25236635-67c5-453a-b27e-3359f28041b3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "11dbb6a6-1544-46ae-a966-e0b00380ca09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838f2e6c-c435-4728-8b71-e44eda350ce2",
        "cursor": {
          "ref": "fddcc8e9-50c4-44f4-82a9-b5b1902ad586",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2112f3f3-6924-4441-a30d-8117c4338de5"
        },
        "item": {
          "id": "838f2e6c-c435-4728-8b71-e44eda350ce2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7c46cc61-8e94-49fb-96bd-070e22656936",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9d0708-b9f8-440f-95ea-80f53c0189ba",
        "cursor": {
          "ref": "db570822-6fe6-4b1d-bbbc-fe8426717cfb",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3b577588-3a31-4c96-9d60-ea27a6f9f03f"
        },
        "item": {
          "id": "6b9d0708-b9f8-440f-95ea-80f53c0189ba",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a2e02649-cc9f-433b-af4f-3d236d4294b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b6f755-00e2-499d-8643-a2a362d6259d",
        "cursor": {
          "ref": "d59a12f1-8b13-4939-b03f-6b008c4198b5",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "19ed71fd-32ea-4627-92a9-1d378d356748"
        },
        "item": {
          "id": "b6b6f755-00e2-499d-8643-a2a362d6259d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f30d7cda-8370-4113-bec1-0627644b5e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f5e04a-6f4b-4c03-bbdd-2a9c2595aff2",
        "cursor": {
          "ref": "f3a664e8-c4ba-4164-84ac-2737a834f4a1",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "696f14ef-4873-4e29-a7ce-de7048f5f9a5"
        },
        "item": {
          "id": "d2f5e04a-6f4b-4c03-bbdd-2a9c2595aff2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "edd35c6f-7472-47f8-912f-f877f1af46ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f574e57-0b2e-4a7a-a732-f71ddb9d285e",
        "cursor": {
          "ref": "38472d64-9427-4635-9653-007fc389f067",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "76822334-c8c7-4c35-9312-f9f98bbe2847"
        },
        "item": {
          "id": "5f574e57-0b2e-4a7a-a732-f71ddb9d285e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4dfd36a1-faa5-4cbf-8a96-7316dd6f3182",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a5b4a0-9a3b-423b-90ce-9bf48c4114fe",
        "cursor": {
          "ref": "4d71f1c9-96c4-4f30-8d0a-a8344af20189",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c2bb8504-fdf9-4888-bdc9-3f4ca169ef6b"
        },
        "item": {
          "id": "f7a5b4a0-9a3b-423b-90ce-9bf48c4114fe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "97fae97a-0c49-4a18-ae3c-65ed7d3611b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff8251f-f09b-4b6d-97e5-9acb330bf4d3",
        "cursor": {
          "ref": "00ba43b7-9a98-44e8-82de-baaa87a16d80",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3ad6c8c3-f3c9-459c-89b2-57a2723790c3"
        },
        "item": {
          "id": "dff8251f-f09b-4b6d-97e5-9acb330bf4d3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f6342fa1-9bdf-486e-b856-ad600e4650a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7391ef28-d0a2-4762-91a4-af00bdac198d",
        "cursor": {
          "ref": "343e26dd-ef9d-4f21-9f89-9d317edbdba6",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ddc9c6a2-5ff9-423b-b1ae-cffa63b6e951"
        },
        "item": {
          "id": "7391ef28-d0a2-4762-91a4-af00bdac198d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9396d9b1-b6b9-4558-beac-1631d9faf95b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e6c1c8-8bc9-4b63-865d-237d1864f8a7",
        "cursor": {
          "ref": "527cf878-d99d-4819-8a9c-044a6e0118f0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9f7109f8-8ffe-4422-bfa3-4ab8d1de3e92"
        },
        "item": {
          "id": "68e6c1c8-8bc9-4b63-865d-237d1864f8a7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0a972ef6-8ea1-4be1-9e46-c92d841aeb26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9642680-fbe0-42b0-af77-4b28d68605c8",
        "cursor": {
          "ref": "576e7a18-cd80-4cec-bc9c-3f1ec74008b7",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "01d09e5f-18b7-4d4f-aa7d-6799c2574220"
        },
        "item": {
          "id": "a9642680-fbe0-42b0-af77-4b28d68605c8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e7efeea-d789-4480-a293-402cea5a0ea2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21318ffc-092b-41c4-8638-76818a311a4b",
        "cursor": {
          "ref": "82d42310-461d-4b50-974c-85447c9253b8",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2e98ed7a-8c39-47a0-bbf6-e7eb0a47ddb6"
        },
        "item": {
          "id": "21318ffc-092b-41c4-8638-76818a311a4b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d800f1dc-f068-4af8-a444-05fff38277be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255886ea-84cb-4b34-a0ae-68adc97c86a7",
        "cursor": {
          "ref": "b935eaac-38cb-4175-a009-7817c865c89f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ca4106af-6b9f-4ceb-970a-0a1908aeccb9"
        },
        "item": {
          "id": "255886ea-84cb-4b34-a0ae-68adc97c86a7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ffeef47b-1e6d-4d8f-a2c8-577e0f406db3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a482486e-f162-4e6e-b81c-4c41f2eb1ad3",
        "cursor": {
          "ref": "b89d1ad1-5e73-4d8b-b1a6-4dcbc562280b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7b716007-ed24-4015-8a9d-ecd8f8a76add"
        },
        "item": {
          "id": "a482486e-f162-4e6e-b81c-4c41f2eb1ad3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6200ca69-4694-4c32-8d11-4acbb36bf21b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eb0ea4-c6e2-417f-bb0a-e851c042c2e3",
        "cursor": {
          "ref": "cdb57a3f-6404-4251-a6b6-4f62d2f63637",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "066d1952-274b-46cb-bc51-5705496db7f3"
        },
        "item": {
          "id": "f1eb0ea4-c6e2-417f-bb0a-e851c042c2e3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bdfc3693-1580-41a2-b2f6-1ad2f1fb571e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3823a782-f234-4b67-bc9a-8a1ebb976c8c",
        "cursor": {
          "ref": "4fc866c1-4071-4ffa-8e08-6aab2740a0cb",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4fa90abd-a84b-4d5c-895e-e34840ebb8ce"
        },
        "item": {
          "id": "3823a782-f234-4b67-bc9a-8a1ebb976c8c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ad9353ed-b14b-49cd-aec3-b464000aa2e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7eec7b9-5036-4449-a189-1f07882cfef3",
        "cursor": {
          "ref": "829988e6-1a24-4491-ba0f-2e8dad7b5368",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "85ec629f-45d2-4a6c-bd1a-852552384903"
        },
        "item": {
          "id": "b7eec7b9-5036-4449-a189-1f07882cfef3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "64142685-8598-445f-85b4-ec75c7a043df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ca8ae2-ac47-428b-917f-4bb3381693b8",
        "cursor": {
          "ref": "8d415be7-04ea-4f8e-aea6-9c23b7c1ead3",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9e2b8576-b124-4e26-9b6a-559912227c96"
        },
        "item": {
          "id": "87ca8ae2-ac47-428b-917f-4bb3381693b8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e3d85fd2-8cac-4e1a-9a0e-237917021ad1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f43314c-a3c4-4cb7-a053-b69c37017c2f",
        "cursor": {
          "ref": "6d9b4ed1-33eb-4d45-8ba7-bbdd35f61bc6",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "46d8f018-b15d-45e9-84da-fc87618341a7"
        },
        "item": {
          "id": "3f43314c-a3c4-4cb7-a053-b69c37017c2f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "888bda3b-25ff-4bee-9391-9984924f77a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f139c76-edd6-4506-9f70-565815188053",
        "cursor": {
          "ref": "88ca5b46-47d2-4378-87da-993ff9d7e363",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b54599ea-f66d-4bcb-b30c-71b993ccac95"
        },
        "item": {
          "id": "0f139c76-edd6-4506-9f70-565815188053",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "475abf09-d4d1-418c-b040-34dffc102aa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcecc17e-e635-4c24-b7fb-892bf2e7455d",
        "cursor": {
          "ref": "15a90a9f-156b-4a5b-884e-2e0f4be45cdd",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5d99f0ce-f851-4190-9cfb-6c88ddde3e9e"
        },
        "item": {
          "id": "fcecc17e-e635-4c24-b7fb-892bf2e7455d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6e792d0b-25a3-44e0-a2ab-fc5a8092cab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382584cf-c81c-4262-ac2e-fcac1fa475fe",
        "cursor": {
          "ref": "c3073a38-e6f8-45f7-98c6-c6847ecfe231",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb3e215b-90cf-4ecb-a205-7cc6fd0b6eec"
        },
        "item": {
          "id": "382584cf-c81c-4262-ac2e-fcac1fa475fe",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d6cca2d1-c401-458b-bbf5-51b262302810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ae7ffa-6464-4d05-a3cd-8bf2455dc0d6",
        "cursor": {
          "ref": "9db2d6b4-3576-40e5-a6b8-e568b9dadc02",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "90bb6b30-41c6-4d77-add8-5c903a288dd8"
        },
        "item": {
          "id": "28ae7ffa-6464-4d05-a3cd-8bf2455dc0d6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6eaefc3e-ffc5-4594-9829-4fa3e45ad9ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8ca1f2-23d2-4491-91d3-19dab416ea4e",
        "cursor": {
          "ref": "5866b2cf-358a-49f5-a5d4-afedeadb54b9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "72cc9245-79c7-445b-babe-e59da2887ddd"
        },
        "item": {
          "id": "7c8ca1f2-23d2-4491-91d3-19dab416ea4e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "aa6978de-8f83-49b9-abd2-ca8c06c864c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5033060f-4c8e-447a-8294-da2754f93ab8",
        "cursor": {
          "ref": "fd4204c6-5bd2-4a55-9605-ffa4e207b1f6",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "27ee23d7-8707-40da-86c1-77a9813cd7e8"
        },
        "item": {
          "id": "5033060f-4c8e-447a-8294-da2754f93ab8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7fd80280-6efe-4f3d-b3e2-efdc9e528b64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8239c1f-68da-47ba-a7fc-e782aae30b1f",
        "cursor": {
          "ref": "a7d7d275-82bc-4b0d-95d0-aaff687250ec",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fa65108a-f5f1-41f5-a451-188f2495a1e7"
        },
        "item": {
          "id": "d8239c1f-68da-47ba-a7fc-e782aae30b1f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "33e02dad-a96c-465f-8f49-2187b212fc80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9220b179-8290-4e4b-9085-3860ce92a672",
        "cursor": {
          "ref": "786fb91c-ce9e-4121-8c69-815476c728c5",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eeee178c-5014-4ca8-9753-c0fe7f7ed8d5"
        },
        "item": {
          "id": "9220b179-8290-4e4b-9085-3860ce92a672",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "55941c63-f7de-46c5-8360-51e291eb70ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e7e21a-a2c7-44a5-b017-9169716d8a2a",
        "cursor": {
          "ref": "3f7c6ca2-f6b5-4076-b7a2-05dd46ef38f5",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2e2131d1-cac8-4ab6-bf1c-bb31da81da64"
        },
        "item": {
          "id": "80e7e21a-a2c7-44a5-b017-9169716d8a2a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3e0d1d61-4e28-4e66-aa7f-7996f6e75018",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4e185c-b359-4236-bd35-dc7b48e168d1",
        "cursor": {
          "ref": "5de4f923-300d-4b62-9342-1c3e8c1df4fc",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6839d394-e2ab-4541-bfb2-11fde3a9120a"
        },
        "item": {
          "id": "1a4e185c-b359-4236-bd35-dc7b48e168d1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b8a3b132-94ea-49be-9355-066046792c7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7883d5e-d1f5-4677-b43c-5a12e8c606cd",
        "cursor": {
          "ref": "595e4d76-08b4-4809-9f48-0fbd6abe21c4",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9b16a99d-beb8-46d0-887e-cca61a8164ce"
        },
        "item": {
          "id": "a7883d5e-d1f5-4677-b43c-5a12e8c606cd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "db29d277-dbfb-4d2d-9c2d-899ebd7cb354",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833742a8-8d53-4941-a508-90a15732282c",
        "cursor": {
          "ref": "84482254-2aa0-4c72-99bb-7bef784faf2c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "783d9a9d-df3b-4c4c-b726-199fd684cd96"
        },
        "item": {
          "id": "833742a8-8d53-4941-a508-90a15732282c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ff8c1cc1-b857-497a-9e59-f84f67a51e3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa909bb-1e26-47f6-83ad-b727565cc97b",
        "cursor": {
          "ref": "1dde8689-c210-442e-8644-d8b4ff9d08d8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "df39dbd1-8cdb-4b2b-9855-71c444e6e60a"
        },
        "item": {
          "id": "1aa909bb-1e26-47f6-83ad-b727565cc97b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "db4015e9-ab0c-4c9a-afdf-004027c9c659",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8582f3-2882-4edb-8728-7cd891ebede6",
        "cursor": {
          "ref": "e3deca3c-dcd6-4263-8be1-a728588c873e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ac0e47f9-1787-47bb-9e46-48cff88b0c1a"
        },
        "item": {
          "id": "3b8582f3-2882-4edb-8728-7cd891ebede6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ca535510-dba9-4bbd-991c-da85bd5aa0c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b92047-d982-4196-9382-135c785c7c5b",
        "cursor": {
          "ref": "fcf7722b-fd84-4c4e-a87d-a70789ec6763",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1f799b68-3b3f-4572-adbe-8dd7210ad1b8"
        },
        "item": {
          "id": "f8b92047-d982-4196-9382-135c785c7c5b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e8b17a27-582d-4d6a-83c7-51713e86db54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0da5be4-37d4-4954-8752-e443fb709361",
        "cursor": {
          "ref": "efefb144-a383-4f53-94ec-4f3c377411e6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e9951d47-37a2-45c1-b88c-43477abe7698"
        },
        "item": {
          "id": "c0da5be4-37d4-4954-8752-e443fb709361",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2fac05ed-e871-4511-9ee5-1c54719df9ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f6097e-4163-4bb3-9d7b-86877b1e173d",
        "cursor": {
          "ref": "a605affd-91d6-4c3b-85c3-292a23185619",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "68658f4f-0b5e-4b4b-bd57-590250f22d47"
        },
        "item": {
          "id": "c7f6097e-4163-4bb3-9d7b-86877b1e173d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ec8b0bc4-cb25-4bdf-bcd6-5be8b3760197",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f23205b-aa0f-4684-a5f1-51797efd9d39",
        "cursor": {
          "ref": "5e2d5fb9-e9d5-4763-9898-89942c00d4ca",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "92b2a76f-c8dc-4d0b-b7b5-1b0c30a7edf5"
        },
        "item": {
          "id": "7f23205b-aa0f-4684-a5f1-51797efd9d39",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1cce5d71-3410-42c0-9e7b-e071921f2101",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1041c239-7679-476b-9a0c-e415ac5e44e3",
        "cursor": {
          "ref": "165f9eb6-a36c-49ac-bf8d-2bad98bb5f67",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a8babb8e-ab9e-41c6-ab9d-fbc83416092d"
        },
        "item": {
          "id": "1041c239-7679-476b-9a0c-e415ac5e44e3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "49beea19-5065-452b-bbef-2c35952157be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29efa04-a64c-45dd-b7ef-8728e4a255ae",
        "cursor": {
          "ref": "7076fc08-cd41-4a88-aeda-f327bfcdea24",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7ed92a4c-2f9e-4df3-aeb8-cf33492ae883"
        },
        "item": {
          "id": "f29efa04-a64c-45dd-b7ef-8728e4a255ae",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ec443dbf-cbea-4444-bb4c-398b3e8088e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bd36ed-4d65-40bb-b48d-d137b3a8cd03",
        "cursor": {
          "ref": "03f29d9f-f5a3-483a-9d14-f773e42094c3",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "92a55ea0-48b7-4a7e-8875-06d8b1b29e74"
        },
        "item": {
          "id": "b4bd36ed-4d65-40bb-b48d-d137b3a8cd03",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c2ca094f-38d0-4939-9a6e-726494dfdcff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1aa5e8a7-26bb-4c81-ae0c-d68606ad02ee",
        "cursor": {
          "ref": "19e29ec0-fdce-455f-9d76-ed8439fbaf4e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "93891960-a5cc-4c72-b7e0-f0e19f8d5a84"
        },
        "item": {
          "id": "1aa5e8a7-26bb-4c81-ae0c-d68606ad02ee",
          "name": "credentials_issue"
        },
        "response": {
          "id": "42900a3b-97b1-4acd-a188-b28336337668",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 122,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "29ef6295-1a3e-42f1-af86-bdfafacfbae9",
        "cursor": {
          "ref": "40f4121e-f9aa-460a-ab58-a6bbe7a6f948",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "21132c36-fd99-44db-94bb-e95a33e3498d"
        },
        "item": {
          "id": "29ef6295-1a3e-42f1-af86-bdfafacfbae9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6c859ef5-5cee-4478-bf6c-b3b429c918fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "0a74e2b0-368a-44f0-adf8-063ad30dce40",
        "cursor": {
          "ref": "1da3c9eb-d89d-4810-8179-9bc0b774ec24",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "46612919-1380-45de-8d7d-80b022e59403"
        },
        "item": {
          "id": "0a74e2b0-368a-44f0-adf8-063ad30dce40",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e908f29a-44ff-4ef8-b0b2-21969df5d21c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "91de103c-6ee6-4bee-af46-1c06d5879b78",
        "cursor": {
          "ref": "6cbf2437-3452-4ff4-807b-b087bee8549c",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "78feba30-92fe-435a-ab38-1809fb611380"
        },
        "item": {
          "id": "91de103c-6ee6-4bee-af46-1c06d5879b78",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a2b3e9e5-b5aa-4c00-8740-60da9c62182b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4a8556e3-38a5-429b-9f2a-6243df0ccf8d",
        "cursor": {
          "ref": "5208e2e9-a402-4087-a50e-6c1217c221c3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c926d490-b395-4925-8b7b-19bade7d1519"
        },
        "item": {
          "id": "4a8556e3-38a5-429b-9f2a-6243df0ccf8d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9a1716fb-883d-4b9b-b15d-93d25103bfb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5400d148-c072-479e-a967-3cd4f30d930d",
        "cursor": {
          "ref": "3c64794b-3e57-463a-99c7-5e6a7ce22a81",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "be5553b6-1147-4ed3-af17-63f79a31fa12"
        },
        "item": {
          "id": "5400d148-c072-479e-a967-3cd4f30d930d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "be4219e6-8036-4227-bb95-05511d278d92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1c563270-92d2-4d46-b423-271392e2eb70",
        "cursor": {
          "ref": "c270f5c1-85dc-4b2d-8ff2-1507456f35ae",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5e8e694b-4989-461d-95c2-f39c0ad34b66"
        },
        "item": {
          "id": "1c563270-92d2-4d46-b423-271392e2eb70",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5e240c32-dadb-49a7-bb35-584a2ad555f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db82118-3bcd-46f1-b791-9a67df8be185",
        "cursor": {
          "ref": "09c9a649-38e5-4717-8aa7-def669dc6bbd",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "379c3d66-8be8-49cf-b123-2530f8522e44"
        },
        "item": {
          "id": "8db82118-3bcd-46f1-b791-9a67df8be185",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b2a37e70-9097-4714-a8d6-ac816010aee0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129544bc-51af-474b-8e57-b5924cbc1b88",
        "cursor": {
          "ref": "4a268b8b-20b9-4550-9c19-e321349e334a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bcba36b7-51f1-4296-bf66-a9cc91b51da7"
        },
        "item": {
          "id": "129544bc-51af-474b-8e57-b5924cbc1b88",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d0c16a72-de9a-48a8-b503-bb2cfa3e7566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34498f95-e7c8-498e-bb52-73cfb21d35b8",
        "cursor": {
          "ref": "c412d3f6-71df-445e-b82d-abcc9df55163",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2816018e-b613-4bf0-8d83-eee13635d8ab"
        },
        "item": {
          "id": "34498f95-e7c8-498e-bb52-73cfb21d35b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a390d0c4-6da8-4e88-9103-664f2630554d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e05ed3-86ae-459a-b2b9-bc0c2fe178e4",
        "cursor": {
          "ref": "9035b2a8-6045-4e14-b3e3-78f42e16b094",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "76664835-cfd2-411c-97ec-ded26c22836e"
        },
        "item": {
          "id": "89e05ed3-86ae-459a-b2b9-bc0c2fe178e4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "837ab46a-f160-4af2-bda3-3e75e8e097e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11572a95-09e5-4ca1-a014-df4d52b8075e",
        "cursor": {
          "ref": "6bb529fb-9b24-41bc-a2d5-95f0253d439d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e5dc966f-efbf-460e-b6f8-9815a26678ed"
        },
        "item": {
          "id": "11572a95-09e5-4ca1-a014-df4d52b8075e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1f429825-25a6-4e4c-9224-e9b06b887014",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07786f6b-4dc6-4a7c-9aa9-b41579ed210b",
        "cursor": {
          "ref": "b5614a06-0804-4199-bfb5-a2c7e034eb5b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "00665248-6b3f-465d-a7da-cd9fe9943c50"
        },
        "item": {
          "id": "07786f6b-4dc6-4a7c-9aa9-b41579ed210b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "74b6a5fa-b78e-4b0d-a3f9-96df403af606",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5ad4cc-8e56-4bae-aee2-b00299d2f86a",
        "cursor": {
          "ref": "1f102b0f-8137-4438-ab13-74d502f6e124",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d0d6a722-91dd-4e0c-8598-65fdb82726c3"
        },
        "item": {
          "id": "6b5ad4cc-8e56-4bae-aee2-b00299d2f86a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e8c908ff-cc35-4952-945f-1971f9f81112",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4779e43f-7149-4cc2-8dbd-54c3d20ae48b",
        "cursor": {
          "ref": "c193fd9f-2cfb-4776-bef8-4fd3418c0373",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c93a64ed-322c-4916-97dd-89c1988cf2af"
        },
        "item": {
          "id": "4779e43f-7149-4cc2-8dbd-54c3d20ae48b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "953ee58a-9b54-441e-ab2b-9ba8a5074468",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b371d2-06c3-4ea7-aa2e-0a9b0f418a2a",
        "cursor": {
          "ref": "ba61600d-0c66-438a-93d5-a271f938913e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "04b07a43-820b-494f-bc2d-3d357d45f022"
        },
        "item": {
          "id": "92b371d2-06c3-4ea7-aa2e-0a9b0f418a2a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f666ded0-e828-4a37-85f1-fa3cf69e290a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e89bdf3-3ad5-450c-a9bb-467ffece29d1",
        "cursor": {
          "ref": "541f5e5e-1f95-4e8c-b903-1973204f0030",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ec6bffff-b70f-4e04-8d97-da2e26cb1f64"
        },
        "item": {
          "id": "8e89bdf3-3ad5-450c-a9bb-467ffece29d1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bcf0672d-ed56-4346-a9db-b3f69dec1bf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1aa4c7-7b76-44b6-9d50-0f02a86398ab",
        "cursor": {
          "ref": "1aaf2392-a367-4c57-9e25-4221502b5dc9",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0ed228a-b1f8-42f4-b56c-c4bd289dabea"
        },
        "item": {
          "id": "0b1aa4c7-7b76-44b6-9d50-0f02a86398ab",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "90b86dc0-d103-429d-943f-0239ef3d3cd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c59b1b-c05a-49ee-ad06-8f0bf5775be7",
        "cursor": {
          "ref": "e2ee5c92-892f-4546-99bd-41897be8e832",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "167aa957-4661-48bc-ab0a-651ec3358764"
        },
        "item": {
          "id": "c2c59b1b-c05a-49ee-ad06-8f0bf5775be7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1dedd958-fd32-4a48-b79c-020fa64a1046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b16b9d-d61e-4129-b200-2dcf4d6993c0",
        "cursor": {
          "ref": "3c9357ff-ce5b-464f-95cf-1505580c44e5",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "99ccc536-ee96-426b-9a7f-f5110fafe70e"
        },
        "item": {
          "id": "06b16b9d-d61e-4129-b200-2dcf4d6993c0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4d725565-6c2c-4fa7-aae1-06b0bb771cea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7fae1b-3585-48ac-8da0-2f63119fd3c1",
        "cursor": {
          "ref": "ea674d94-8fc2-4960-9fed-7c68fcf43887",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f5541d1a-145d-4aa6-8ba7-67d92aadf72c"
        },
        "item": {
          "id": "1f7fae1b-3585-48ac-8da0-2f63119fd3c1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "53216b4c-da43-44e1-87c2-ab640ba40b78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de29848-1e4f-40a4-a22d-f25ae0e8328c",
        "cursor": {
          "ref": "6ae2c97c-b7d9-4e6e-929e-be7735c0ef35",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6f3c1986-a83c-421a-ab5f-39c5027b71d4"
        },
        "item": {
          "id": "4de29848-1e4f-40a4-a22d-f25ae0e8328c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3d0fa2ed-062c-41f6-a8d5-ca43f3274f8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d63e44b-99a6-47b9-8220-322b90046e19",
        "cursor": {
          "ref": "355ee986-7827-43a5-b28e-03e6401e3048",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2faaf95b-ac71-4f96-a1fd-15bf3a1460b4"
        },
        "item": {
          "id": "0d63e44b-99a6-47b9-8220-322b90046e19",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2264bfb4-b38b-441c-9844-6dc53ed5eda1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75172ea-9f35-49a1-9a8c-c385cd9811c4",
        "cursor": {
          "ref": "2cabaee3-a9b5-490f-a516-95ae61288e86",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "24d6fa33-fa12-49eb-8205-d610d0d334ba"
        },
        "item": {
          "id": "b75172ea-9f35-49a1-9a8c-c385cd9811c4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "38aa8488-f1ce-4bba-ba79-3dd51e7dd5cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831e9a0d-8c76-46a4-82d9-3079c2da0315",
        "cursor": {
          "ref": "e05d5a1a-8ce0-4c52-bf5e-bacce1cdd482",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "23fd1945-add1-4e07-9935-076c7097e24a"
        },
        "item": {
          "id": "831e9a0d-8c76-46a4-82d9-3079c2da0315",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e2f455d4-14f7-4a00-8992-832ad063a83f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936311a4-9060-410c-9fd3-2abc43b016eb",
        "cursor": {
          "ref": "8d33e1a5-3c32-4dd2-bf44-3f9ee7a6e30b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "82c1e53f-247e-4afd-af8e-3e39fc9f566e"
        },
        "item": {
          "id": "936311a4-9060-410c-9fd3-2abc43b016eb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d67e327c-da11-4098-9b8b-0e4123553fef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8254276f-06e9-4acb-8a6f-1416f62ac0b1",
        "cursor": {
          "ref": "422d393f-290d-4717-8d2c-8149ab2aa843",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6f260614-0da8-400f-a0d4-34a2efe3269f"
        },
        "item": {
          "id": "8254276f-06e9-4acb-8a6f-1416f62ac0b1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "952a1ffe-52a4-4b31-9da8-3af52e231cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83459bbb-5240-4c80-9465-edea34005c1e",
        "cursor": {
          "ref": "1e18bd46-dfe4-41d2-8977-559266b778da",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e6c0515f-3e58-43c3-ad9a-6eb5b58f91b5"
        },
        "item": {
          "id": "83459bbb-5240-4c80-9465-edea34005c1e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bef1d7b3-c64d-43ed-ac9a-ff28a1cabb5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3cdc20-e793-4df1-b5eb-9e19675c2308",
        "cursor": {
          "ref": "c2d69e3b-9b3c-4204-9c7a-d11e06ae9809",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "412c4226-1c7d-42fa-a129-ea069fa445c6"
        },
        "item": {
          "id": "2c3cdc20-e793-4df1-b5eb-9e19675c2308",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6012dfc1-49cc-4ef9-9c91-f28d575cc211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399f039c-e24b-4e81-92f6-34266dab947b",
        "cursor": {
          "ref": "d11db450-0909-4ee8-bcbd-6566fead8e4b",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ad12d7df-f208-4df1-b465-6f1d374c9a26"
        },
        "item": {
          "id": "399f039c-e24b-4e81-92f6-34266dab947b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7f138b2b-d9bf-4974-9af1-2999649fa15d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bebeb35-7866-4d78-9aad-2de3ccc31a8f",
        "cursor": {
          "ref": "edb4b7d2-49ce-4e86-a03a-2fd304f32e9e",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "df84b48b-c5cf-4a5b-9d8e-23f28ec3689f"
        },
        "item": {
          "id": "8bebeb35-7866-4d78-9aad-2de3ccc31a8f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5c8f7d8a-b608-4e50-bc42-6b36e399bd66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1da129-0ef4-493d-84fe-101507bb3b6c",
        "cursor": {
          "ref": "2c7bc7ae-428c-4e1c-ab93-3879a5052b69",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5c3d2da8-3e2f-45fc-9c10-b9fc3e4aec84"
        },
        "item": {
          "id": "5d1da129-0ef4-493d-84fe-101507bb3b6c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a09b7765-cdde-4216-a44a-0ac238230f12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f187d33e-8b02-4467-a69f-7a44c337f2ba",
        "cursor": {
          "ref": "bd9797f4-32d1-427b-9721-5f5b9377edf3",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3be62218-b160-4fe9-bc8a-a5063a4ad601"
        },
        "item": {
          "id": "f187d33e-8b02-4467-a69f-7a44c337f2ba",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e61493d5-5d7a-40a7-a391-dffe381460fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5166e6d2-cafb-43e0-90fa-bfe7c9346c7a",
        "cursor": {
          "ref": "f0aca8f7-b4aa-4621-9092-379405e8ff1a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c39c7aeb-cd4a-41ca-8a88-f863ae70a431"
        },
        "item": {
          "id": "5166e6d2-cafb-43e0-90fa-bfe7c9346c7a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b727eaee-238c-40e0-98b2-eb614359d428",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad534d9-ffee-4721-87fb-465ee357b651",
        "cursor": {
          "ref": "f2b6631e-86ce-4327-b363-ba05dbdae809",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0d0f5fb8-efca-4823-93c1-d67a2cde66ec"
        },
        "item": {
          "id": "aad534d9-ffee-4721-87fb-465ee357b651",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "13f7455a-9c94-4219-9c2a-567843a08506",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcf2163-4bff-44d5-a74f-301015a156d7",
        "cursor": {
          "ref": "d5f06e7f-5e7a-44cb-a36f-94007319fc87",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7f5d5a2c-efac-47f3-b4b3-8b0e2abbe962"
        },
        "item": {
          "id": "4bcf2163-4bff-44d5-a74f-301015a156d7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "62f6f503-6b3b-4e80-b1cf-cf3d0174b7db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32a4d2c-d619-4eac-bcd1-06edd5981a36",
        "cursor": {
          "ref": "ff2dbd1c-45fd-47d4-99c8-cd73f6506c67",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dab2cdcf-1317-4b16-8794-d1b300298602"
        },
        "item": {
          "id": "e32a4d2c-d619-4eac-bcd1-06edd5981a36",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "27280299-1f26-455f-ba0b-51d4a9cda840",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bd7d31-2d80-4cb2-8f4c-7376a70f417f",
        "cursor": {
          "ref": "0b4f57d2-22b4-4e2c-861b-1c41e2098cbf",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "99a46778-2384-41b5-b016-503189e14722"
        },
        "item": {
          "id": "71bd7d31-2d80-4cb2-8f4c-7376a70f417f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a2cc1d45-be97-45cf-986e-1ce6ab2183f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328ff5e3-6eaf-4641-8452-901c0bf82a5f",
        "cursor": {
          "ref": "598bdd3e-6a4b-4c2c-bac6-b5144d7c1d0d",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ab8d397d-76e9-4b33-bf53-4dae92e1d6f1"
        },
        "item": {
          "id": "328ff5e3-6eaf-4641-8452-901c0bf82a5f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "215c5f79-bba7-4bb4-b145-f2db4c9acf23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f08af4-660b-4e25-89ff-cd37a651881f",
        "cursor": {
          "ref": "d1eda191-ac9d-415e-815d-b2fd269a1d44",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7a7d1b11-14f7-4afd-84ae-6c56ae751742"
        },
        "item": {
          "id": "f8f08af4-660b-4e25-89ff-cd37a651881f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4a8187ee-a80b-4738-a7a1-e0332d1c3918",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb648ae-f162-4bda-9be3-427ab05699b0",
        "cursor": {
          "ref": "0dce6c55-eaa6-4688-9bc5-100efac8d0a8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "064f3050-c812-41e3-9a37-01f6639795d4"
        },
        "item": {
          "id": "2bb648ae-f162-4bda-9be3-427ab05699b0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b788189b-dff8-4a3d-9300-8cd89b60e318",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a06ea0-8de5-4309-a629-066fbe902a1c",
        "cursor": {
          "ref": "4a93bb44-395e-4871-98d8-213cd8d652d8",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b3f3830-a516-4aec-a93c-0b66902a842f"
        },
        "item": {
          "id": "e7a06ea0-8de5-4309-a629-066fbe902a1c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8e20a703-8fba-430a-b2ba-f67268fd6b01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3355000e-5c5f-4f04-ad00-871fac52e6b5",
        "cursor": {
          "ref": "cd2d2cc9-6c8d-44cb-b395-79de106991c9",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "afb24a74-e7cf-411e-9446-c4ac20ab1496"
        },
        "item": {
          "id": "3355000e-5c5f-4f04-ad00-871fac52e6b5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6012a6e7-f723-4e41-b682-0e1063e592b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be37794e-0c70-49b0-bb6c-9ff53f4a6d19",
        "cursor": {
          "ref": "51c15562-3313-4373-a8d0-ccb5958f1391",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6e4ccea5-8a5e-4b0e-8e6f-f6b9f99a3507"
        },
        "item": {
          "id": "be37794e-0c70-49b0-bb6c-9ff53f4a6d19",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "444538a4-9695-4b39-9b9d-38d3db885d4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1122b2-29d2-4592-a5dc-e63f359cb467",
        "cursor": {
          "ref": "0c3dca41-8c12-4eee-86f3-50d5e93716ad",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "633f783a-969c-42ca-abcd-4daec7d8cb2c"
        },
        "item": {
          "id": "2a1122b2-29d2-4592-a5dc-e63f359cb467",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7f7bdb3c-eb0d-424e-86ec-bfc5dc8e180c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4e3ee3-557e-4f07-b7c2-5bf3de0ff374",
        "cursor": {
          "ref": "f1f21a36-ae36-4818-8c05-66c606abd209",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ae99fcb1-66a9-4265-8773-75238de0b8aa"
        },
        "item": {
          "id": "fe4e3ee3-557e-4f07-b7c2-5bf3de0ff374",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "515ce7c2-f989-433a-94b4-2709e79dd8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01915211-c971-4f9c-aa3e-9eb9b04153c3",
        "cursor": {
          "ref": "df08b3d2-91d0-4915-89d6-2041ad94153f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a7cef027-2e81-42f7-a86d-c8bed441ebc4"
        },
        "item": {
          "id": "01915211-c971-4f9c-aa3e-9eb9b04153c3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d786ed5b-498d-4bbe-8a8d-deab777abd43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3d5bba-5a3d-4864-aa9f-6371e30b8d01",
        "cursor": {
          "ref": "808f36aa-0e42-42cb-8d52-5e0f566dce28",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "60bdfb75-b062-4dbe-ba7e-375fcdf3b4fc"
        },
        "item": {
          "id": "5b3d5bba-5a3d-4864-aa9f-6371e30b8d01",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cc6fa057-e6e5-4d11-a516-2ef2d09a7473",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8811b35-755e-404d-a274-1f5a58f817b9",
        "cursor": {
          "ref": "a58fa6ff-d5c0-494f-8064-ff51a3fe4f59",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f6e5d71c-d2b1-4221-bde1-7bdf4b46ab34"
        },
        "item": {
          "id": "d8811b35-755e-404d-a274-1f5a58f817b9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0642708b-6cc1-4101-88f0-cd147d60eeea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0c9d76-5d32-43f4-ad85-94cb7e12f70e",
        "cursor": {
          "ref": "06036888-53c5-427d-ad7c-dd1df6060579",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "27fa2b8c-1cc7-423d-8723-5ae097ff5440"
        },
        "item": {
          "id": "bb0c9d76-5d32-43f4-ad85-94cb7e12f70e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "398c520d-e4e9-494f-8cfb-a006ebc8abb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8878e7-10d1-4919-8989-79cc6ec95a28",
        "cursor": {
          "ref": "90e44bc9-2b3b-42ac-994a-c7ef336fed39",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "600602f4-52fe-4f54-a2f9-3050901f2cc1"
        },
        "item": {
          "id": "4c8878e7-10d1-4919-8989-79cc6ec95a28",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b4b4faab-f269-4a26-a9fb-b4e994f8f920",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cf3e20-fde6-4ba7-8400-f57b7de4e1ba",
        "cursor": {
          "ref": "1961409d-35e2-4bef-802f-751d8a9bd256",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "57cf2785-2518-4452-954a-c21b71016074"
        },
        "item": {
          "id": "03cf3e20-fde6-4ba7-8400-f57b7de4e1ba",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "aabd3d46-bc51-46bf-80f5-0d5fdd8a86b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb65b3e-2739-4212-ab1f-5ada504aafcc",
        "cursor": {
          "ref": "dc3800fa-e613-4fe3-b31f-07621cecb1bd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "56f7bbb3-924f-4076-a6af-41f089f28314"
        },
        "item": {
          "id": "3fb65b3e-2739-4212-ab1f-5ada504aafcc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "741e9295-bbb1-4b9c-b282-be51fba32591",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31dbc37-e926-4f2c-804e-631a60bca667",
        "cursor": {
          "ref": "fdbd4ffa-057e-40f4-95a0-a708746eb3d2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f711723b-afc4-4240-98fa-b3b11893372f"
        },
        "item": {
          "id": "a31dbc37-e926-4f2c-804e-631a60bca667",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "15059064-c0db-4507-99e3-8f63dd99bbf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf43bd3-e9df-4e36-9ee5-591d8c17907f",
        "cursor": {
          "ref": "d6a5ec18-e7a9-4203-9930-a00531b1eb34",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6655497b-8aa6-4131-82d8-104591a21920"
        },
        "item": {
          "id": "5bf43bd3-e9df-4e36-9ee5-591d8c17907f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8ac4c303-42ea-4926-a93d-84165c816f01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1163d284-3574-4228-ac14-3f268826500e",
        "cursor": {
          "ref": "21496d49-2de6-403e-974e-4385fb0d503d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "77d730e5-3177-49e4-94d6-ced1ffe820d0"
        },
        "item": {
          "id": "1163d284-3574-4228-ac14-3f268826500e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "681e6730-cabd-43a2-aad8-e924ce946ec4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00405ae0-b81a-4b08-a5f3-af0819545710",
        "cursor": {
          "ref": "90832556-72bb-461c-b3fc-42034e06a0a7",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "89417c1e-3642-43a1-999f-d9314b1349d9"
        },
        "item": {
          "id": "00405ae0-b81a-4b08-a5f3-af0819545710",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a3f5271d-3023-4d4d-a471-a1455f5a7169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d882803-95af-48c5-a9c1-187f89276cb9",
        "cursor": {
          "ref": "34b1f4e2-55ea-42b5-aad6-9c08a23b99b5",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b8787855-87d3-403d-a1bf-13ce9be1fce1"
        },
        "item": {
          "id": "1d882803-95af-48c5-a9c1-187f89276cb9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8a6b0185-76df-40ed-8231-5087aef5b3e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ad1cc7-e5e9-42bd-a4a7-d3793eed318b",
        "cursor": {
          "ref": "a1e1a9e0-415f-4ff6-9255-0817984b420a",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8594f125-aa38-46f4-9b30-0246606fc917"
        },
        "item": {
          "id": "05ad1cc7-e5e9-42bd-a4a7-d3793eed318b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c71eabb3-d9e0-4ca5-ac29-aa8d56cc09e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b29bde4-dfff-44a2-9ca4-c4beb898c0fe",
        "cursor": {
          "ref": "52ecabd3-3271-496c-ad79-2e7ae5bca045",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "edb4dc1b-a88f-4bae-9b61-37479cf00e86"
        },
        "item": {
          "id": "8b29bde4-dfff-44a2-9ca4-c4beb898c0fe",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3849ec9b-d061-4c0b-bd39-f468909001a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede4dd7b-49e7-4ada-b33d-4adcb66c934e",
        "cursor": {
          "ref": "05f51640-5954-4448-9b0a-4450ab3f5eec",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "82f581f9-7251-48c3-a311-bce78d65e5ae"
        },
        "item": {
          "id": "ede4dd7b-49e7-4ada-b33d-4adcb66c934e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4cace787-278f-4c0d-945a-cbd1fbe575a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029c33fa-f456-4d7f-9dac-c5908d53de0d",
        "cursor": {
          "ref": "4da26f66-6707-4974-876d-70154d7ea47b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c72c058c-d323-4c29-ad27-080320fe0337"
        },
        "item": {
          "id": "029c33fa-f456-4d7f-9dac-c5908d53de0d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0f24d940-faae-4568-a5ae-332cb6ed4f78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea66da8-6c0a-4942-9a3b-19942d7cb3ee",
        "cursor": {
          "ref": "73eaf119-94ce-484b-8213-c523e4a7bd4f",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "daae4539-baa3-444a-8328-27773fedcf17"
        },
        "item": {
          "id": "1ea66da8-6c0a-4942-9a3b-19942d7cb3ee",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c31db6fe-3dbb-49da-8055-a82f895f9aac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86952b9-7569-4c85-8d3a-2f7d87f2bddc",
        "cursor": {
          "ref": "e9a3b0c7-0ff4-45fe-b480-cdcba14b04d0",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "247df4eb-ea4a-4a61-9ffd-a8a5f5add3c9"
        },
        "item": {
          "id": "b86952b9-7569-4c85-8d3a-2f7d87f2bddc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b9b28aa2-11b5-4857-964d-944153e8dd98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ca3c1c-caee-40d2-8419-d4dfb0c069e2",
        "cursor": {
          "ref": "03a19e4b-4a82-47a9-a2eb-3de784aa5dd0",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1a86cd30-8b02-4e8b-b7c6-c253e4408a53"
        },
        "item": {
          "id": "51ca3c1c-caee-40d2-8419-d4dfb0c069e2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9150b679-387b-4238-ae7b-a5821cdfc9ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6513ae19-6920-401c-8243-b27cb3da390e",
        "cursor": {
          "ref": "4f0a7b72-dc8b-47fc-ba6a-2ff36b658109",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "42931359-d638-4cdc-807e-161e15060fd7"
        },
        "item": {
          "id": "6513ae19-6920-401c-8243-b27cb3da390e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "85e942dc-716b-43ee-b199-1b64eed11bfd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ce9291-28cb-47d6-b3e7-efc8d278dfe1",
        "cursor": {
          "ref": "19430fda-a98f-4fb3-8f99-fe013d2b3a96",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a4aaa630-014c-43d7-978e-c743744038d8"
        },
        "item": {
          "id": "d3ce9291-28cb-47d6-b3e7-efc8d278dfe1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a2b83551-9a64-4ba2-8f54-09500eb31f67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d66cb9f-0a69-4d2d-afec-453a74781044",
        "cursor": {
          "ref": "54cca395-7266-4dc1-97d7-1b16dc3dd2ac",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "90e1d292-86d3-4546-b33f-6bef12ddb2da"
        },
        "item": {
          "id": "5d66cb9f-0a69-4d2d-afec-453a74781044",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a8479854-db32-4f3b-8999-6af2c2769506",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9865354-18ec-45b5-8900-a3b553f0ed9c",
        "cursor": {
          "ref": "331e3395-62ca-45a1-80c2-e32b46db06d5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4eae96eb-c87d-4d01-bb02-f95a393e16c1"
        },
        "item": {
          "id": "d9865354-18ec-45b5-8900-a3b553f0ed9c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9f117f24-f38b-41f6-a5d4-6c14281fd123",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67921d8e-d22e-460c-8246-ca291ad522fe",
        "cursor": {
          "ref": "b8ed36fb-b2c0-4a28-b107-3a8c1fa2e96a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c76194e6-f889-4886-907f-420c1dd93aba"
        },
        "item": {
          "id": "67921d8e-d22e-460c-8246-ca291ad522fe",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "161c18e5-379c-436d-b117-de1cb68bddd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69f4c0f-3905-4893-9b06-857df953b6fd",
        "cursor": {
          "ref": "6b0a2f0d-2eb1-4919-afcd-06b7c2e35a9c",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ceac4853-74d4-41bc-8ab0-b059aeda625e"
        },
        "item": {
          "id": "c69f4c0f-3905-4893-9b06-857df953b6fd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cb8f2ed4-a21d-4cd9-8b54-54aa3fa8d96b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5917a316-bb5a-4afa-ac68-2955fdc6f208",
        "cursor": {
          "ref": "c7db0de7-51b7-44de-99ef-5c729084caab",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ef69c342-dd65-4ba2-8d66-0a59831261ac"
        },
        "item": {
          "id": "5917a316-bb5a-4afa-ac68-2955fdc6f208",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "55bc7564-eade-4a45-9f17-345ff93ec1c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03de28ae-d91f-44d6-8c9d-a19717b92274",
        "cursor": {
          "ref": "888f2d86-bdbc-409c-9b3b-f33f84167bda",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a105806e-218d-4e22-8677-e65c0082e9b1"
        },
        "item": {
          "id": "03de28ae-d91f-44d6-8c9d-a19717b92274",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a6e22a52-7672-41ae-9a5b-e20a9e8a1559",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b39e2ee-e4ab-47c3-bf89-f149ad7eed3a",
        "cursor": {
          "ref": "7ebd0674-5762-49c4-a70f-355e6dd87a95",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bd9f3e39-e926-423d-b050-34f6b1f66e3e"
        },
        "item": {
          "id": "7b39e2ee-e4ab-47c3-bf89-f149ad7eed3a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f56d8925-1ef5-404b-8856-cd07f79382de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729953fa-b657-4eb5-b633-7230ea8f4d9d",
        "cursor": {
          "ref": "e96083ec-8d1a-49f2-9ad3-63f927501092",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "11b63c37-5885-41d2-a48e-3e5cbcd72468"
        },
        "item": {
          "id": "729953fa-b657-4eb5-b633-7230ea8f4d9d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2b4df358-f569-476b-8d10-b83916879047",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29baca7-8d33-4bb4-8d92-78d777b56d17",
        "cursor": {
          "ref": "e11b8e0b-082f-4af4-bcf1-d3dd78143388",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c533ee51-86c6-4de0-bda7-c665e56d026b"
        },
        "item": {
          "id": "b29baca7-8d33-4bb4-8d92-78d777b56d17",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d5972384-6f74-475b-acdc-8967e16d874f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdc4773-e416-4ad8-9298-9b3719b497ca",
        "cursor": {
          "ref": "2a1ea687-5100-4017-8310-18a90e1e4e8e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bbdcdbd7-74df-41b1-969d-cd4492f68b65"
        },
        "item": {
          "id": "ebdc4773-e416-4ad8-9298-9b3719b497ca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c9466a65-c4ba-4c02-8c99-1f9cc255b893",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b89f54-a5af-4d69-946e-4f37138aae35",
        "cursor": {
          "ref": "2e0420cc-94c8-45bb-b533-aee9afbf2c5a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2d98c916-be97-4df2-a3c6-adc591a49c07"
        },
        "item": {
          "id": "11b89f54-a5af-4d69-946e-4f37138aae35",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "00995e28-963f-422e-bedc-2cf7b8e1a94e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28aa9c22-5d49-475a-b35c-e52dcbdb796e",
        "cursor": {
          "ref": "d73cfa6e-6451-4d9b-99b7-03020377776b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2fd2d80f-278b-4877-ba2e-5354b0809dc9"
        },
        "item": {
          "id": "28aa9c22-5d49-475a-b35c-e52dcbdb796e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e9b5c4d3-8757-4c0b-9947-5720ecc03454",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f011a44f-3eb5-44d4-a811-e5a55cc06aab",
        "cursor": {
          "ref": "0f760d4c-0ff5-4fc8-87ae-4fac79723754",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "34d9a704-8664-46d6-ae0b-68e53e5e0213"
        },
        "item": {
          "id": "f011a44f-3eb5-44d4-a811-e5a55cc06aab",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9efda60e-9ff0-45bb-bf41-65df2eb53b27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ee4406-54fd-4132-8847-cfe2171416b2",
        "cursor": {
          "ref": "8c7a0c0a-cef1-40b9-b1e3-64c683c495d0",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "36ad9acb-ea70-4b65-a8cd-e7572d2c8fad"
        },
        "item": {
          "id": "67ee4406-54fd-4132-8847-cfe2171416b2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0148858f-9c16-491a-b50a-af879a517e3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910d5737-2229-4e26-9713-217c679c289c",
        "cursor": {
          "ref": "439d0084-8232-4e68-99c0-f12f24a729a0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5a74a450-c972-4e53-adba-6e81ceda6559"
        },
        "item": {
          "id": "910d5737-2229-4e26-9713-217c679c289c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cc3a73e4-d434-433c-8324-07f36c56cd7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2f273b-67e0-4fea-87f8-c510e1ce696b",
        "cursor": {
          "ref": "bce2011f-01db-4358-a00d-defe09df6fa5",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "eeaee146-7fa7-487d-9f50-27ea6ff0c0ed"
        },
        "item": {
          "id": "3d2f273b-67e0-4fea-87f8-c510e1ce696b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "50fe4cd8-ad13-4f82-8a56-46589f720ea6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07a5d19-dd4d-4590-90ab-a098f321446b",
        "cursor": {
          "ref": "13396723-82af-42b6-9ec6-c0a9a0bd61db",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "52550aa1-ab61-4552-ac77-72d3907fc392"
        },
        "item": {
          "id": "b07a5d19-dd4d-4590-90ab-a098f321446b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "94ff761c-686e-42e6-b017-b464cefcc0e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd11b670-e934-4b95-8bd3-5f231183b30a",
        "cursor": {
          "ref": "bcf66ed7-6afe-4eab-9d7e-a7ec4ccd1f79",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "11898708-336c-4246-91a9-f713c2f112c0"
        },
        "item": {
          "id": "bd11b670-e934-4b95-8bd3-5f231183b30a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3b51c828-2e41-4218-a636-5d97d1772ac9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8881abab-9c45-428b-9e2b-3c6c7f1f11eb",
        "cursor": {
          "ref": "72ce9a82-a167-49dd-833b-16c14ebc6a19",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "57cfce59-9383-4951-bd4f-38ba15d49241"
        },
        "item": {
          "id": "8881abab-9c45-428b-9e2b-3c6c7f1f11eb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b8c23cb7-e214-4c5d-b013-68f3eaef5eac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6f2aad-c0bf-497c-a831-ab77efd87cfa",
        "cursor": {
          "ref": "1820d107-493d-4d41-aeb6-6648f4bcc73c",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f1caef36-5298-4f00-8c84-0adaa482c6a5"
        },
        "item": {
          "id": "af6f2aad-c0bf-497c-a831-ab77efd87cfa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "19e4edca-36fe-4e9b-9b25-f09119383388",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b510f67a-b7fd-4ee9-af40-0fd40b5e0f07",
        "cursor": {
          "ref": "74b1970b-2b11-40b4-ac22-65d2779cda62",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "78e75e31-8fab-4de8-b4e9-728fae00c9de"
        },
        "item": {
          "id": "b510f67a-b7fd-4ee9-af40-0fd40b5e0f07",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1dc31264-d366-47b5-b5c0-61239cf769c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736350b4-cc30-4818-bd2e-91328c699ca8",
        "cursor": {
          "ref": "b7146c1d-91be-448c-8fad-e9d8a71951f5",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bfb18301-1248-455b-af5a-33ffb5224764"
        },
        "item": {
          "id": "736350b4-cc30-4818-bd2e-91328c699ca8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b1b5ea3b-ac23-43b7-9cf5-042a754c506a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accb032c-68f5-4413-a6af-3057d297af9f",
        "cursor": {
          "ref": "7d4a1682-c615-4ca2-92b6-dd642c4b0ba2",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a7f155c6-31b4-47df-9ca4-2dd34d0ec56f"
        },
        "item": {
          "id": "accb032c-68f5-4413-a6af-3057d297af9f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0ef53886-339b-497d-99b6-e13d2bb9ca96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5da522-b52d-4515-84a1-2f3735bbfd15",
        "cursor": {
          "ref": "ed979efd-b7e9-4a13-9910-50f66450f643",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2dc78900-902c-4b85-8c55-06539af270e0"
        },
        "item": {
          "id": "1a5da522-b52d-4515-84a1-2f3735bbfd15",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "33db91ea-a154-4faa-8479-47630c9471f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3526a7-b19a-4cf1-95cc-5a6a3dd4f004",
        "cursor": {
          "ref": "32123302-4f6a-46a0-94d4-cfca8875d7dc",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3804714d-44a5-494f-ba6a-388eed3d4372"
        },
        "item": {
          "id": "1f3526a7-b19a-4cf1-95cc-5a6a3dd4f004",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c039cbc6-6ba0-4154-8be2-37b1a9d12350",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddae180d-e428-4701-bc68-24dc92418924",
        "cursor": {
          "ref": "86f4e038-6da3-49d9-ad3f-528ffde960bc",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ca262afe-f71e-4a87-a5db-aaa78b95c28c"
        },
        "item": {
          "id": "ddae180d-e428-4701-bc68-24dc92418924",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c6cada8d-d431-4771-9bc4-d66d4748021f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a47d45-8816-4b59-8fe4-78fa707b0b6a",
        "cursor": {
          "ref": "27d907d5-3d5c-4ba5-9b39-c764ec9ef462",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bfb33935-37c2-4586-806d-13e087c418eb"
        },
        "item": {
          "id": "41a47d45-8816-4b59-8fe4-78fa707b0b6a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5cc8db29-eebf-47f0-bda4-52469af78295",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f017f-2787-4116-81b5-1373481a68e4",
        "cursor": {
          "ref": "06ef8b28-2aba-4f60-9f8f-d0728fe0fd55",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a2e7270c-9117-4141-85a1-dfb9a0ab58f8"
        },
        "item": {
          "id": "536f017f-2787-4116-81b5-1373481a68e4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "43469725-bbc3-4a53-8026-bc54ad055be5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c39cf50-92d6-4c59-80c0-c0db86ad118a",
        "cursor": {
          "ref": "651e1bde-5ba0-4918-b6b3-71742d4b1550",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8818bb6e-4a4a-4320-9bc3-0045ac8b85b9"
        },
        "item": {
          "id": "3c39cf50-92d6-4c59-80c0-c0db86ad118a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cfe08729-de11-43d7-b85c-015928df2b8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e40042-2739-41df-b7fd-d99cd2bef3f9",
        "cursor": {
          "ref": "254ea379-e1ea-4a71-9ab6-b06b913a56ca",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "87710fe4-559d-4df9-a704-6bfea66096de"
        },
        "item": {
          "id": "66e40042-2739-41df-b7fd-d99cd2bef3f9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d886f322-77b4-48cb-9e57-eeec8b08b8e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71364419-cb9b-45c2-a9b7-f62f9f2a07c3",
        "cursor": {
          "ref": "96b36e22-64d0-41ae-bf37-8c647dc03b98",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4c961f3e-23ed-4218-bef7-54321dd3c3a3"
        },
        "item": {
          "id": "71364419-cb9b-45c2-a9b7-f62f9f2a07c3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0facb7fe-6c8e-43ea-be55-aa1f2e21e41c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b54b92-e8e1-43e9-b212-3a66e7de0639",
        "cursor": {
          "ref": "028471be-affc-442e-9e9e-c8781ed32d5f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7a8f1e28-f82a-4051-bb6c-17e43787deec"
        },
        "item": {
          "id": "73b54b92-e8e1-43e9-b212-3a66e7de0639",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c8b45eba-c10f-41e2-8ea9-8b885bcf6cd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236a9a76-9fc1-48db-9727-fa0c36dade97",
        "cursor": {
          "ref": "6c7e93d8-b986-45c0-9cb5-de8eae405a5e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0c28f02c-c6fe-4ce2-8d39-1bfa943f5ed6"
        },
        "item": {
          "id": "236a9a76-9fc1-48db-9727-fa0c36dade97",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d279a1ca-bf97-41d7-a553-0e3ab17be98e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd6a12c-5cbe-4fe8-a6e5-de3547f10273",
        "cursor": {
          "ref": "31fd7699-b778-44ea-99df-1bdd9a4c2369",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bc6e618f-209b-4387-b5fa-c7b3ea376fbc"
        },
        "item": {
          "id": "5dd6a12c-5cbe-4fe8-a6e5-de3547f10273",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2de51440-d932-47b7-8c65-11cfd45b3117",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dc1887-e461-4533-a601-b08002985a98",
        "cursor": {
          "ref": "88701aa5-699b-405b-a274-eb417af788a5",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d28afbec-3f19-4f76-8f18-94b39a801caa"
        },
        "item": {
          "id": "c3dc1887-e461-4533-a601-b08002985a98",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7b33daa7-28d3-4a01-92f8-19ed31646619",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819bca96-0a78-4c2e-ad5a-db4d8f4602d9",
        "cursor": {
          "ref": "a62d7a90-9c98-4fb1-8318-306d42e08960",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3757aa7e-b998-425f-9026-08335e3c8efd"
        },
        "item": {
          "id": "819bca96-0a78-4c2e-ad5a-db4d8f4602d9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0a55c224-4ff3-4598-9e92-0da595a88334",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b99083d-0339-4c4a-ac96-b46eecacabcc",
        "cursor": {
          "ref": "cf72d5c8-8f93-43c3-9656-2e8649accc55",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e781e518-f46d-4e18-b7e4-0e76506094b5"
        },
        "item": {
          "id": "1b99083d-0339-4c4a-ac96-b46eecacabcc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4cc795f5-c63c-4f56-b1b2-47690c3ab01a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7163b9d5-b95e-442e-83b8-736d1057653d",
        "cursor": {
          "ref": "2ff8e776-fc4d-42af-b7b2-4e75c5b98c7f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dbb7946d-2168-4ee5-8450-38cab0d8b871"
        },
        "item": {
          "id": "7163b9d5-b95e-442e-83b8-736d1057653d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4d1cf4fe-627e-4bf1-9e17-a4b70a21244e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a10cd5-df13-4bfb-a046-25bfbc43400c",
        "cursor": {
          "ref": "70d12b27-74c1-4527-84d8-106fc6e31c9b",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cca44cfe-6c6d-4037-b43e-5bed49564302"
        },
        "item": {
          "id": "44a10cd5-df13-4bfb-a046-25bfbc43400c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1385a9f9-fd9a-4a45-9a56-205f055b42c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529c540b-1c3a-461d-abc4-8b3ab4356f8b",
        "cursor": {
          "ref": "66187840-439d-412b-a84f-23e7bdd6774c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "73065cd2-0dc6-4979-92c9-719d44b67e4f"
        },
        "item": {
          "id": "529c540b-1c3a-461d-abc4-8b3ab4356f8b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d26bcbc3-e948-47eb-9e43-db8e4b6f6b7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4d6be9-b535-4434-89d4-67f106ce256a",
        "cursor": {
          "ref": "de7f0af7-6e7b-4bd5-a94f-a8d3d9e7d1ac",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "afb373c3-8815-4aa7-9160-4f03bc2182c2"
        },
        "item": {
          "id": "3e4d6be9-b535-4434-89d4-67f106ce256a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cb61623c-8441-461d-a013-09b22f79e54b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4298c736-923f-47c2-87d3-e2a5f36ee569",
        "cursor": {
          "ref": "95af14fb-811e-45d2-9e2c-0d3c78b8290a",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "421c44cf-a95e-4c6d-bb13-f0926a5ad0c4"
        },
        "item": {
          "id": "4298c736-923f-47c2-87d3-e2a5f36ee569",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d98b17d9-52cc-4707-9e2e-03e14680cb2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31d609b-e6be-4450-9321-0edcac9eacfd",
        "cursor": {
          "ref": "9f61dd10-fd4f-40c6-acb2-a0d0480f5cda",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b644d4ec-b353-4796-94cc-de6f184b47d9"
        },
        "item": {
          "id": "c31d609b-e6be-4450-9321-0edcac9eacfd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e6eeb7ae-eb9a-41a4-bd39-45819ceb1b52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd10938c-cf67-4ef0-9dee-20c15adc4603",
        "cursor": {
          "ref": "77f9df30-37eb-4141-8ae6-033ea72126f4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6d393ca8-3943-4097-809c-b3d752da3b3a"
        },
        "item": {
          "id": "cd10938c-cf67-4ef0-9dee-20c15adc4603",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "613174fa-6024-439a-8e1d-adac5bdaa8c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f67cda-617c-457b-8c54-29931216cc8d",
        "cursor": {
          "ref": "5c89247a-8182-4bd2-91f4-93db6120b31c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5de2fcf4-1f34-40da-bfcc-20a5d3072577"
        },
        "item": {
          "id": "c4f67cda-617c-457b-8c54-29931216cc8d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e9b938d4-de1f-46a8-8c2b-36979f001d95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06494872-2a04-4c7b-868a-030e237b6b88",
        "cursor": {
          "ref": "0fdac516-b0ab-47ba-87a0-fc512e92bc46",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6f0034b7-a025-4ef7-acc7-6988f51a8cca"
        },
        "item": {
          "id": "06494872-2a04-4c7b-868a-030e237b6b88",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f2bdd9f1-072c-4c47-a856-1dafeb53bb26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75725be9-df56-47bc-a3d7-aeee9d98895a",
        "cursor": {
          "ref": "90b1542c-f4c6-4a8e-b596-718da941c20e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f29d02f1-1b47-4848-bd9b-200929078be4"
        },
        "item": {
          "id": "75725be9-df56-47bc-a3d7-aeee9d98895a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2d130515-348b-48ca-a3c0-9e484106f6b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54443d8-0beb-4224-af19-047d9d916918",
        "cursor": {
          "ref": "e29b4f2f-d94f-4fb3-b16f-615623a87c50",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "93033e18-360d-4501-8ce8-03568e48fd5d"
        },
        "item": {
          "id": "b54443d8-0beb-4224-af19-047d9d916918",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "eb6625c2-d1cb-466e-9e01-28e094807d56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ad6400-d4da-47bc-bec2-32859ee98124",
        "cursor": {
          "ref": "54b9724d-a1ae-4be3-8865-30e50f3e5f71",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c7654783-7982-414b-875d-654474516e2f"
        },
        "item": {
          "id": "a4ad6400-d4da-47bc-bec2-32859ee98124",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "efbc02e7-aff6-4202-842d-20a3f25c553a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da62092-c38f-4f53-8095-9bae7f4f4be8",
        "cursor": {
          "ref": "b2c25785-caae-4c86-85a0-ef55acb9ce3e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "41354d08-fe7e-4035-a324-62f2a64cf921"
        },
        "item": {
          "id": "2da62092-c38f-4f53-8095-9bae7f4f4be8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8c3bf6dc-23e6-455d-a5ca-62db029b3190",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cc21cd-8e8a-4f7d-8bdd-792e7e9fae5d",
        "cursor": {
          "ref": "8581359a-a6ca-4a9c-9c73-23497a64b3e5",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b4bee37c-b431-4533-bca7-cbb472e36a64"
        },
        "item": {
          "id": "b5cc21cd-8e8a-4f7d-8bdd-792e7e9fae5d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "410617f1-1a43-4cba-bacd-5b76bb7a66d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f0fa13-4f07-460b-9b4a-3f57244af761",
        "cursor": {
          "ref": "7213e120-366f-4740-b26f-4c95e6f19e1e",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9f225594-0c6b-414d-a9be-3f26501bbd0b"
        },
        "item": {
          "id": "27f0fa13-4f07-460b-9b4a-3f57244af761",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d613cbe7-185b-4a6d-9cbb-34135a79e4ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af70e37-0df4-40cf-b66f-88b486b87fbe",
        "cursor": {
          "ref": "1e2833fa-2e68-4a26-bf61-db800cc2e492",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "acedfee5-ef04-4f00-8050-d97433c417ed"
        },
        "item": {
          "id": "0af70e37-0df4-40cf-b66f-88b486b87fbe",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "43813dcc-4ca9-42b5-a649-34585d2cd6ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333e5a8a-3113-4eb9-b874-f5bd76b8d04d",
        "cursor": {
          "ref": "169365d1-cbaf-47ab-b20b-5007310a280e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "65443fde-31c8-476d-ba4d-3da716c1d4c2"
        },
        "item": {
          "id": "333e5a8a-3113-4eb9-b874-f5bd76b8d04d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3d53a742-0e02-4aa3-a361-fe168724750f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69b8a8b-7244-4735-a3a4-bd0dd822b3e3",
        "cursor": {
          "ref": "9c003d84-25f3-4bbc-b1be-f68876c23f47",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "156788b7-5f6e-4215-bc34-35d4969ff051"
        },
        "item": {
          "id": "f69b8a8b-7244-4735-a3a4-bd0dd822b3e3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1c18fb4d-adde-4120-b819-57824d48e6d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e9508e-8c08-47f8-912c-851f37b6a89b",
        "cursor": {
          "ref": "cee93dbc-219f-48f6-a8dc-b8d965ac9ce9",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c1414105-0a51-4837-afca-6d354c58f663"
        },
        "item": {
          "id": "b1e9508e-8c08-47f8-912c-851f37b6a89b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b69407a6-3a24-42da-8eb0-b4a92d9038f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b1a79e-904d-4a2c-962c-f696d1bdca93",
        "cursor": {
          "ref": "72ebaace-218c-4da8-9c9d-b783ee8898b1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3b6fc6f9-9e19-4974-8936-878d62d6b36a"
        },
        "item": {
          "id": "49b1a79e-904d-4a2c-962c-f696d1bdca93",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "60f6a13f-73d5-41ab-8ecd-5b7787fe6637",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56db66b4-7451-4da1-b3f3-8f5a55be8a84",
        "cursor": {
          "ref": "3663cc84-dc78-4789-975f-0e4db8cbd525",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9821ba43-942a-40b3-bf1b-3592ab9f6f63"
        },
        "item": {
          "id": "56db66b4-7451-4da1-b3f3-8f5a55be8a84",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cbb6420b-47a8-4a6d-a448-40cc881e8278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab61915-2481-4942-8eac-e0276499f923",
        "cursor": {
          "ref": "c49b5779-3199-485d-a7e0-c13335f34390",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7b8c758d-2fa0-49f2-ae60-485933dea300"
        },
        "item": {
          "id": "4ab61915-2481-4942-8eac-e0276499f923",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9f0979e8-2d6a-43a2-93ee-0692ecb88f09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7a3abf-49fb-4a55-9c18-c7e8a3cb6776",
        "cursor": {
          "ref": "010e5add-a5db-41bb-86c0-b69dc9f147a3",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "90b76d5b-3182-44b1-a700-ea710e8fcecc"
        },
        "item": {
          "id": "ca7a3abf-49fb-4a55-9c18-c7e8a3cb6776",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6491ef83-d5b0-4b69-aca2-565cd8e77153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430eb1f1-92cb-4002-9c61-d014bc610f6a",
        "cursor": {
          "ref": "653c906c-92c8-4327-bc77-d5be02bc2c76",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c78a61fe-661e-43eb-a783-b8496b43b248"
        },
        "item": {
          "id": "430eb1f1-92cb-4002-9c61-d014bc610f6a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0bf9ab3c-0644-420f-8a8d-e79013f51655",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4511ad0-8e78-4dec-9ff1-2bb5f524b5ca",
        "cursor": {
          "ref": "5dbcbe57-5bc9-4c5e-82ee-81c4068047d6",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "46256eac-8426-48c8-86c9-885bfb5c5593"
        },
        "item": {
          "id": "a4511ad0-8e78-4dec-9ff1-2bb5f524b5ca",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "66ce45cf-9280-4fe2-9727-9cd2d910e431",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db3a3f1-0eba-4535-bbdd-98c0539b5071",
        "cursor": {
          "ref": "69c4ee29-3345-4219-9cfc-0bd4125c2cae",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d7705c0a-951a-4a69-a906-c2d4dfd2f81a"
        },
        "item": {
          "id": "9db3a3f1-0eba-4535-bbdd-98c0539b5071",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e660b0e5-fba0-4a88-8b3f-cf09a4b9daa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dc3258-d127-4c88-a14a-c5d1c2e1d0c5",
        "cursor": {
          "ref": "d0c27506-1068-42b0-afef-b82aa2b3dc41",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0468345d-be47-4d05-9c48-a5e27e2f323d"
        },
        "item": {
          "id": "67dc3258-d127-4c88-a14a-c5d1c2e1d0c5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "690b7056-fcbd-4f0a-810e-e75b9f37d1b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518d6be3-a6b4-4d88-aa03-e13cc4a9e518",
        "cursor": {
          "ref": "b067333a-9d14-415f-beb1-8cbb697d55e1",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "156eaab2-fcf5-4f4f-ad64-e9e0e3f1f4f3"
        },
        "item": {
          "id": "518d6be3-a6b4-4d88-aa03-e13cc4a9e518",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "15739fcc-c3e2-4bcd-970e-3720f891de9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b315245-134e-4b41-98de-874c4867330b",
        "cursor": {
          "ref": "77507197-8f9f-4c31-ab8d-07300ae59ac3",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6a5d1300-5d1b-458e-843c-dc8f2cd905d6"
        },
        "item": {
          "id": "5b315245-134e-4b41-98de-874c4867330b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5413155e-e839-4873-996f-e785bfb6da0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93318e7d-88c4-40e4-acdb-f516e1c0b448",
        "cursor": {
          "ref": "0387a468-1b2c-4767-92cf-46948e662089",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cd69bcbc-63bb-40c5-b21d-84d8ecbd9ecc"
        },
        "item": {
          "id": "93318e7d-88c4-40e4-acdb-f516e1c0b448",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fb2263f9-c53b-43ae-9cfe-995681bb3385",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4361b22e-3ea2-43d7-8606-c40a83d3352f",
        "cursor": {
          "ref": "b2e0154a-702d-4abf-88ad-125d86b10c55",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2dfe8f8f-a11a-442f-9373-853a95b82978"
        },
        "item": {
          "id": "4361b22e-3ea2-43d7-8606-c40a83d3352f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "97ea73be-f130-42d7-b52c-ee6d920e2086",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3136a8-9527-444f-b6e2-6eeabbf5fd2a",
        "cursor": {
          "ref": "5a5bd4e1-6445-4299-902f-f9c8e0c933ae",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "078e1e46-8cec-4751-a421-57692ceca78f"
        },
        "item": {
          "id": "be3136a8-9527-444f-b6e2-6eeabbf5fd2a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "19dbe2e9-42a6-4f3f-91c3-045bc150154d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78937c6-6fbb-4783-978b-c5dd70f7c35c",
        "cursor": {
          "ref": "ce16e6fc-ae92-414d-a0ca-d7070e3c9a14",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a9d8e97f-be89-4601-9292-d043391b20dc"
        },
        "item": {
          "id": "d78937c6-6fbb-4783-978b-c5dd70f7c35c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d6a46f42-c2f9-447a-b297-3dc47b7610b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058d28b0-7390-4258-9eb9-9874b4fb4024",
        "cursor": {
          "ref": "7e91c030-8016-4e3e-9914-f3025730dcc9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "32fd7bea-cfb1-4744-a924-dd8ddd7a2786"
        },
        "item": {
          "id": "058d28b0-7390-4258-9eb9-9874b4fb4024",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6fb88499-4a1c-44b3-9e99-51ce4d1ed040",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dea9cd-ab13-4def-8eff-0df3ba52eeb5",
        "cursor": {
          "ref": "7cde47b9-afb5-411b-9006-eeff6ab1e827",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4a3cace7-5f76-44be-86fc-40a0fda86b7f"
        },
        "item": {
          "id": "47dea9cd-ab13-4def-8eff-0df3ba52eeb5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "45bd613f-bfea-48fc-b1f9-dce43132673d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3843d4c1-e2db-41f4-91fb-7fe42bc7f58c",
        "cursor": {
          "ref": "51326e5b-fa15-4e96-81df-cbd8b92bd8bf",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "42974ec0-976f-479e-a413-d552def55c92"
        },
        "item": {
          "id": "3843d4c1-e2db-41f4-91fb-7fe42bc7f58c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "693eb37e-abba-41f5-a6f8-f2ff0f5de605",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f8e9a9-33f4-41da-8dee-f18f9b238aa1",
        "cursor": {
          "ref": "a2e26d61-7579-48bf-91a1-c0ad8d6a094a",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "530383b5-60ec-4de0-9e5b-597fb3a673a8"
        },
        "item": {
          "id": "d1f8e9a9-33f4-41da-8dee-f18f9b238aa1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e154ca2e-607c-4d41-85af-1a1aeb8340ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e942f079-1b2a-4c8c-b551-f157b7eea592",
        "cursor": {
          "ref": "0994fe34-961a-4371-a7f2-beb87ef540e8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "349d20c8-e9e4-4d20-a33f-338943da66e8"
        },
        "item": {
          "id": "e942f079-1b2a-4c8c-b551-f157b7eea592",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "39d5ce29-bbfa-4989-91be-a6cddaa41f9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c94913-b7aa-426a-9802-4eb815c4f85a",
        "cursor": {
          "ref": "f2102a54-00ae-4d30-8652-27cd2770539a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "764e532a-20f1-4d28-926b-2ce3bfddefda"
        },
        "item": {
          "id": "16c94913-b7aa-426a-9802-4eb815c4f85a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9984d633-19c0-45d0-ad6b-0573c26170a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "636531d6-1d25-4b52-8a25-2511634efa13",
        "cursor": {
          "ref": "d2cf980d-ff55-4a9b-a545-c2dbe086c73b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "635fd140-3f40-49d4-a4c7-63faacaf4431"
        },
        "item": {
          "id": "636531d6-1d25-4b52-8a25-2511634efa13",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f0a3bf88-72f7-4744-828a-4727ecc85253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "fe99d655-43eb-40b0-9305-d792b5ef0cd9",
        "cursor": {
          "ref": "e381cc7b-5c1d-421d-9572-673b1aaa513f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7e588029-de85-4ace-b5a5-3bf06f004512"
        },
        "item": {
          "id": "fe99d655-43eb-40b0-9305-d792b5ef0cd9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "82a7ef81-bf6a-4303-814b-1e083a1e1865",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "c28e603f-183f-419c-8bc9-55dca1190d1e",
        "cursor": {
          "ref": "704207a5-297f-4c48-82ad-b2ac611d6907",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "28c9932f-5a47-433d-ad26-dcdf534aae2a"
        },
        "item": {
          "id": "c28e603f-183f-419c-8bc9-55dca1190d1e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a12afdac-215d-4692-9d7f-40c45afb2c8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28e603f-183f-419c-8bc9-55dca1190d1e",
        "cursor": {
          "ref": "704207a5-297f-4c48-82ad-b2ac611d6907",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "28c9932f-5a47-433d-ad26-dcdf534aae2a"
        },
        "item": {
          "id": "c28e603f-183f-419c-8bc9-55dca1190d1e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a12afdac-215d-4692-9d7f-40c45afb2c8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fbfb70-695b-498d-84c2-32b61157dfee",
        "cursor": {
          "ref": "b0f32421-1b66-419f-880b-0af7b3827e2b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4abf9cd2-bda5-4075-8847-66821e82ff25"
        },
        "item": {
          "id": "42fbfb70-695b-498d-84c2-32b61157dfee",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f849f9b3-3fa5-454e-beeb-4b17054a16b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d64da6-e9c8-4883-8c68-ceb55361a912",
        "cursor": {
          "ref": "12709712-c510-4546-9836-a410a208872d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d5a91f50-0956-440a-bc3a-d979590db3d1"
        },
        "item": {
          "id": "28d64da6-e9c8-4883-8c68-ceb55361a912",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "05db72f1-1b15-4c84-9738-a0c7bd9b8c49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}